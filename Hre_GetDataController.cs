using System.Linq;
using System.Web.Mvc;
using HRM.Business.Hr.Domain;
using HRM.Business.Main.Domain;
using HRM.Presentation.Hr.Models;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using HRM.Business.Hr.Models;
using System.Collections.Generic;
using HRM.Infrastructure.Utilities;
using Microsoft.Ajax.Utilities;
using VnResource.Helper.Data;
using System;
using System.Reflection;
using System.Collections;
using System.Data.SqlTypes;
using HRM.Presentation.Service;
using HRM.Business.Category.Models;
using HRM.Presentation.Category.Models;
using System.Data;
using HRM.Business.Category.Domain;
using System.IO;
using HRM.Infrastructure.Utilities.Helper;
using HRM.Business.Payroll.Models;
using HRM.Presentation.Payroll.Models;
using HRM.Business.Payroll.Domain;
using HRM.Presentation.Attendance.Models;
using HRM.Business.HrmSystem.Models;
using HRM.Business.Attendance.Domain;
using HRM.Business.Attendance.Models;
using HRM.Business.Finance.Models;
using HRM.Business.Finance.Domain;
using HRM.Presentation.HrmSystem.Models;
using HRM.Business.Evaluation.Domain;
using HRM.Business.Recruitment.Domain;
using HRM.Business.HrmSystem.Domain;
using HRM.Presentation.Recruitment.Models;
using System.ComponentModel;
using HRM.Business.Recruitment.Models;
using VnResource.Helper.Linq;
using HRM.Presentation.Insurance.Models;
using System.Web.Script.Serialization;
using HRM.Business.Training.Domain;
using System.Threading.Tasks;
using Kendo.Mvc;
using HRM.Data.Entity;
using HRM.Business.Training.Models;
using HRM.Business.Evaluation.Models;
using HRM.Business.Insurance.Models;
using VnResource.Exporter;

namespace HRM.Presentation.Hr.Service.Controllers
{
    public class Hre_GetDataController : BaseController
    {
        string Hrm_Main_Web = System.Configuration.ConfigurationManager.AppSettings["Hrm_Main_Web"];
        List<Guid> lstChildPositionID = new List<Guid>();

        #region Hre_Profile

        [HttpPost]
        // Son.Vo - 20171010 - Kiểm tra dữ liệu có thay đổi hay không để update bảng Hre_GeneralBasicProfile
        public ActionResult IsDataUpdate(Guid? GeneralProfileID)
        {
            var isInvalid = false;
            if (GeneralProfileID != null && GeneralProfileID != Guid.Empty)
            {
                var services = new Hre_ProfileServices();
                isInvalid = services.CheckChangeGeneralProfile(GeneralProfileID.Value);
            }
            return Json(isInvalid, JsonRequestBehavior.AllowGet);
        }

        // Son.Vo - 20171010 - update bảng Hre_GeneralBasicProfile để load lại màn hình thông tin nhân viên
        [HttpPost]
        public ActionResult UpdateDataGeneralProfile(Guid? GeneralProfileID)
        {
            var strReturn = string.Empty;
            if (GeneralProfileID != null && GeneralProfileID != Guid.Empty)
            {
                var services = new Hre_ProfileServices();
                strReturn = services.Update1GeneralProfileBasic(GeneralProfileID.Value);
            }
            return Json(strReturn, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDataOfSalaryRankUpdateFileCandidate(Guid? ID, Guid? contractTypeID)
        {
            if (ID != null)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                string status = "";
                var entity = service.GetByIdUseStore<Cat_SalaryRankEntity>(ID.Value, ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status);
                if (contractTypeID != null)
                {
                    var contractTypeServices = new Cat_ContractTypeServices();
                    var contractType = contractTypeServices.GetDataContractTypeByID(contractTypeID.Value);
                    if (contractType != null)
                    {
                        //Son.Vo - 20160908 - 0072341
                        if (contractType.Type == EnumDropDown.TypeContract.E_PROBATION.ToString())
                        {
                            entity.BasicSalary = entity.ProbationSalary;
                        }
                        else
                        {
                            entity.BasicSalary = entity.SalaryStandard;
                        }
                    }
                }
                return Json(entity, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        #region Lưới diễn biến lương màn hình profile c2
        [HttpPost]
        public ActionResult GetLstWageDevelopmentsByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null && profileID != Guid.Empty)
            {
                string status = string.Empty;
                var _ProfileServices = new Hre_ProfileServices();
                var result = _ProfileServices.GetWageDevelopmentsByProfile(profileID.Value);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult CreateInCellWageDevelopments([Bind(Prefix = "models")] List<Hre_WageDevelopmentsModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_WageDevelopmentsEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_WageDevelopmentsEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellWageDevelopments([Bind(Prefix = "models")] List<Hre_WageDevelopmentsModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_WageDevelopmentsEntity, Hre_WageDevelopmentsModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region  Lưới người thân NotPersonal màn hình profile c2
        public ActionResult GetRelativeNotPersonalByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Hre_RelativesViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_RelativeByProfileId, ref status);
            if (result != null && result.Count > 0)
            {
                foreach (var relative in result)
                {
                    if (!string.IsNullOrEmpty(relative.YearOfBirth))
                    {
                        try
                        {
                            string yearparse = relative.YearOfBirth.Substring(relative.YearOfBirth.Length - 4, 4);
                            int Year = int.Parse(yearparse);
                            relative.YearOfBirthDateTime = new DateTime(Year, 1, 1);
                        }
                        catch
                        {
                        }
                    }
                }
            }
            result = result.Where(s => s.IsNotPersonal == true).OrderBy(s => s.YearOfBirthDateTime).ToList();
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult CreateInCellRelativesNotPersonal([Bind(Prefix = "models")] List<Hre_RelativesModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        ProfileLanguageLevel.IsNotPersonal = true;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_RelativesEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        ProfileLanguageLevel.IsNotPersonal = true;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_RelativesEntity>());
                    }
                }
            }
            return Json("");
        }

        #endregion

        #region  Lưới người thân Personal màn hình profile c2
        public ActionResult GetRelativePersonalByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Hre_RelativesViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_RelativeByProfileId, ref status);
            if (result != null && result.Count > 0)
            {
                foreach (var relative in result)
                {
                    if (!string.IsNullOrEmpty(relative.YearOfBirth))
                    {
                        try
                        {
                            string yearparse = relative.YearOfBirth.Substring(relative.YearOfBirth.Length - 4, 4);
                            int Year = int.Parse(yearparse);
                            relative.YearOfBirthDateTime = new DateTime(Year, 1, 1);
                        }
                        catch
                        {
                        }
                    }
                }
            }
            result = result.Where(s => s.IsNotPersonal == null || s.IsNotPersonal == false).OrderBy(s => s.YearOfBirthDateTime).ToList();
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult CreateInCellRelativesPersonal([Bind(Prefix = "models")] List<Hre_RelativesModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var Relatives in model)
                {
                    if (Relatives.ID == Guid.Empty)
                    {
                        Relatives.ID = Guid.NewGuid();
                        Relatives.ProfileID = profileID.Value;
                        string messref = baseServices.Add(Relatives.CopyData<Hre_RelativesEntity>());
                    }
                    else
                    {
                        Relatives.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(Relatives.CopyData<Hre_RelativesEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellRelatives([Bind(Prefix = "models")] List<Hre_RelativesModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_RelativesEntity, Hre_RelativesModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region  Lưới candidate history màn hình profile c2
        public ActionResult CreateInCellCandidateHistory([Bind(Prefix = "models")] List<Hre_CandidateHistoryModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_CandidateHistoryEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_CandidateHistoryEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellCandidateHistory([Bind(Prefix = "models")] List<Hre_CandidateHistoryModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_CandidateHistoryEntity, Hre_CandidateHistoryModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới trinh do chuyen mon màn hình profile c2
        public ActionResult CreateInCellProfileQualification([Bind(Prefix = "models")] List<Hre_ProfileQualificationModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_ProfileQualificationEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_ProfileQualificationEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellProfileQualification([Bind(Prefix = "models")] List<Hre_ProfileQualificationModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_ProfileQualificationEntity, Hre_ProfileQualificationModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới ky luat màn hình profile c2
        public ActionResult CreateInCellDiscipline([Bind(Prefix = "models")] List<Hre_DisciplineModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_DisciplineEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_DisciplineEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellDiscipline([Bind(Prefix = "models")] List<Hre_DisciplineModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_DisciplineEntity, Hre_DisciplineModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới khen thưởng màn hình profile c2
        public ActionResult CreateInCellReward([Bind(Prefix = "models")] List<Hre_RewardModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_RewardEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_RewardEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellReward([Bind(Prefix = "models")] List<Hre_RewardModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_RewardEntity, Hre_RewardModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới trình độ tin học màn hình profile c2
        public ActionResult CreateInCellProfileComputingLevel([Bind(Prefix = "models")] List<Hre_ProfileComputingLevelModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_ProfileComputingLevelEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_ProfileComputingLevelEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellProfileComputingLevel([Bind(Prefix = "models")] List<Hre_ProfileComputingLevelModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_ProfileComputingLevelEntity, Hre_ProfileComputingLevelModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới trình độ ngoại ngữ màn hình profile c2
        public ActionResult CreateInCellProfileLanguageLevel([Bind(Prefix = "models")] List<Hre_ProfileLanguageLevelModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var baseServices = new BaseService();
            if (model != null)
            {
                foreach (var ProfileLanguageLevel in model)
                {
                    if (ProfileLanguageLevel.ID == Guid.Empty)
                    {
                        ProfileLanguageLevel.ID = Guid.NewGuid();
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Add(ProfileLanguageLevel.CopyData<Hre_ProfileLanguageLevelEntity>());
                    }
                    else
                    {
                        ProfileLanguageLevel.ProfileID = profileID.Value;
                        string messref = baseServices.Edit(ProfileLanguageLevel.CopyData<Hre_ProfileLanguageLevelEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellProfileLanguageLevel([Bind(Prefix = "models")] List<Hre_ProfileLanguageLevelModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Hre_ProfileLanguageLevelEntity, Hre_ProfileLanguageLevelModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));
            }
            return Json("");
        }
        #endregion

        #region Lưới lương cb màn hình tạo mới profile c2
        [HttpPost]
        public ActionResult GetLstBasicSalaryByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null && profileID != Guid.Empty)
            {
                string status = string.Empty;
                var _BasicSalaryServices = new Sal_BasicSalaryServices();
                var result = _BasicSalaryServices.GetLstBasicSalaryByProfileID(profileID.Value);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult CreateInCellBasicSalary([Bind(Prefix = "models")] List<Sal_BasicSalaryModel> model, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveProfileFirst.TranslateString());
            }
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var curencyServices = new Cat_CurrencyServices();
            var lstCurrency = curencyServices.getListCurrency();
            Guid? defaultCurrent = null;
            if (lstCurrency.Count > 0)
            {
                var currencyVN = lstCurrency.Where(s => s.Code == "VND").FirstOrDefault();
                if (currencyVN != null)
                {
                    defaultCurrent = currencyVN.ID;
                }
                else
                {
                    defaultCurrent = lstCurrency.FirstOrDefault().ID;
                }
            }
            if (model != null)
            {
                foreach (var salary in model)
                {
                    if (salary.ID == Guid.Empty)
                    {
                        if (defaultCurrent == null)
                        {
                            continue;
                        }
                        salary.ID = Guid.NewGuid();
                        salary.ProfileID = profileID.Value;
                        salary.CurrencyID = defaultCurrent.Value;
                        string messref = _BasicSalaryServices.Add(salary.CopyData<Sal_BasicSalaryEntity>());
                    }
                    else
                    {
                        salary.ProfileID = profileID.Value;
                        salary.CurrencyID = defaultCurrent.Value;
                        string messref = _BasicSalaryServices.Edit(salary.CopyData<Sal_BasicSalaryEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult DeleteInCellBasicSalary([Bind(Prefix = "models")] List<Sal_BasicSalaryModel> model)
        {
            ActionService service = new ActionService(UserLogin, LanguageCode);
            foreach (var i in model)
            {
                var result = service.DeleteOrRemove<Sal_BasicSalaryEntity, Sal_BasicSalaryModel>(DeleteType.Remove.ToString() + "," + Common.DotNetToOracle(i.ID.ToString()));

            }

            return Json("");
        }
        #endregion


        [HttpPost]
        // Son.Vo - Màn hình tạo mới ứng viên có hiển thị field mã NV KH hay không.
        public ActionResult IsUpperProfileName()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _ISUPPERPROFILENAME = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISUPPERPROFILENAME);
            if (_ISUPPERPROFILENAME == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - 20160629 - 0069559
        public ActionResult IsInputBasicAndInsuranceAmount()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _ISINPUTBASICANDINSURANCESALARY = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISINPUTBASICANDINSURANCESALARY);
            if (_ISINPUTBASICANDINSURANCESALARY == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }
        //Son.Vo - 20160802 - 
        [HttpPost]
        public ActionResult SendMailProfileWaitingHire([DataSourceRequest] DataSourceRequest request, List<Guid> profileIds)
        {
            var service = new Hre_ProfileServices();
            string result = string.Empty;
            if (profileIds != null && profileIds.Any())
            {
                result = service.ProcessSendMailProfileWaitingHire(profileIds, LanguageCode);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        // Son.Vo - 20160616 - 0068634
        public ActionResult IsDefaultLastEmp()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _ISDEFAULTLASTEMP = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_COPYDATA_ISDEFAULTLASTEMP);
            if (_ISDEFAULTLASTEMP == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20160525 - 0067732
        public string CheckDuplicateCodeEmpCandidateGeneral(string strprofileIDs, string codeEmp)
        {
            if (!string.IsNullOrEmpty(strprofileIDs) && !string.IsNullOrEmpty(codeEmp))
            {
                var profileServices = new Hre_ProfileServices();
                var Sys_Services = new Sys_AttOvertimePermitConfigServices();
                bool _CHECKDUPLICATECODEEMP = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATECODEEMP);
                string message = null;
                var lstProfileIds = strprofileIDs.Split(',').Select(s => Guid.Parse(s)).ToList();
                if (_CHECKDUPLICATECODEEMP == true)
                {
                    message = profileServices.CheckDuplicateCodeEmpCandidateGeneral(lstProfileIds, codeEmp);
                    return message;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        //Son.Vo - 0064165 - sinh ngày HĐ khi chọn loại hđ  ở màn hình cập nhật thông tin ứng viên
        [HttpPost]
        public ActionResult GetDateContractForProfileWaitingHire(string ContractTypeID, DateTime? datestart, string ProfileIDs)
        {
            if (datestart == null || ContractTypeID == null)
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            string status = string.Empty;
            var contractTypeID = Guid.Empty;
            var profileid = Guid.Empty;
            if (!string.IsNullOrEmpty(ContractTypeID))
            {
                contractTypeID = Common.ConvertToGuid(ContractTypeID);
            }
            if (!string.IsNullOrEmpty(ProfileIDs))
            {
                var lstProfileIDs = ProfileIDs.Split(',');
                if (lstProfileIDs.Count() > 0 && lstProfileIDs[0] != null)
                {
                    profileid = Common.ConvertToGuid(lstProfileIDs[0]);
                }
            }

            var actionService = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(contractTypeID, ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status).FirstOrDefault();
            if (lstContractType != null)
            {
                lstContractType.DateStart = datestart.Value;
                lstContractType.DateSigned = datestart.Value;
                int month = 0;
                if (lstContractType.ValueTime != null && lstContractType.Type != HRM.Infrastructure.Utilities.EnumDropDown.TypeContract.E_NODURATION.ToString())
                {
                    month = (int)lstContractType.ValueTime.Value;
                    if (lstContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                    {
                        month = month * 12;
                        lstContractType.ValueTime = month;
                    }
                    if (lstContractType.DateEnd == null)
                    {
                        if (lstContractType.DateStart != null)
                        {
                            lstContractType.DateEnd = lstContractType.DateStart.Value.AddMonths(month);
                        }
                    }
                }
                if (!string.IsNullOrEmpty(lstContractType.Formula))
                {
                    var contractEntity = new Hre_ContractEntity();
                    contractEntity.DateStart = datestart.Value;
                    contractEntity.DateSigned = datestart.Value;
                    contractEntity.ContractTypeID = lstContractType.ID;
                    if (profileid != null && profileid != Guid.Empty)
                    {
                        contractEntity.ProfileID = profileid;
                    }
                    contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                    if (contractEntity.DateEnd != null)
                    {
                        lstContractType.DateEnd = contractEntity.DateEnd;
                    }
                }
            }
            return Json(lstContractType, JsonRequestBehavior.AllowGet);
        }

        //SonVo - 20160129 - 0063215
        public ActionResult ActionWorking(string selectedIds, string status)
        {
            var ids = new List<Guid>();
            if (selectedIds != null)
            {
                ids = selectedIds
                   .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                   .Select(x => Guid.Parse(x))
                   .ToList();
            }
            var services = new Hre_ProfileServices();
            services.ActionWorking(ids, status);
            return Json("");
        }

        //SonVo - 20140904 - chuyển trạng thái NV sang NV đang làm việc
        [HttpPost]
        public ActionResult ActionHire(string selectedIds, string status)
        {
            List<Guid> ids = new List<Guid>();
            if (selectedIds != null)
            {
                ids = selectedIds
                   .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                   .Select(x => Guid.Parse(x))
                   .ToList();
            }
            var lstMealRecordMissing = new List<Hre_ProfileEntity>();
            var services = new Hre_ProfileServices();
            string message = services.SubmitStatus(ids, status, LanguageCode);
            return Json(message);
        }

        [HttpPost]
        // Son.Vo - 20160114 - 0063007
        public ActionResult IsAllowInputResonDeny()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _IsAllowInputResonDeny = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISALLOWINPUTRESONDENY);
            if (_IsAllowInputResonDeny == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public string CheckIsNotEnoughHeath(string ProfileID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileEntity = profileServices.GetProfileDataByID(profileID);
            if (profileEntity != null && profileEntity.IsNotEnoughHealth == true)
            {
                return ConstantDisplay.E_FAILED.TranslateString();
            }
            else
            {
                return ConstantDisplay.E_PASSED.TranslateString();
            }
        }

        //Son.Vo - 20151212 - 0061629 - tự động xóa dấu khi nhập tên nv
        public string RemoveSign4VietnameseString(string str)
        {
            //Tiến hành thay thế , lọc bỏ dấu cho chuỗi
            string[] VietnameseSigns = new string[]{"aAeEoOuUiIdDyY","áàạảãâấầậẩẫăắằặẳẵ","ÁÀẠẢÃÂẤẦẬẨẪĂẮẰẶẲẴ","éèẹẻẽêếềệểễ","ÉÈẸẺẼÊẾỀỆỂỄ",
                 "óòọỏõôốồộổỗơớờợởỡ","ÓÒỌỎÕÔỐỒỘỔỖƠỚỜỢỞỠ","úùụủũưứừựửữ","ÚÙỤỦŨƯỨỪỰỬỮ","íìịỉĩ","ÍÌỊỈĨ","đ","Đ","ýỳỵỷỹ","ÝỲỴỶỸ"};
            for (int i = 1; i < VietnameseSigns.Length; i++)
            {
                for (int j = 0; j < VietnameseSigns[i].Length; j++)
                    str = str.Replace(VietnameseSigns[i][j], VietnameseSigns[0][i - 1]);
            }
            return str;
        }

        public string ValidateUpdateOrgProfile([DataSourceRequest] DataSourceRequest request, Hre_ProfileModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileModel>(LanguageCode, model, "Hre_UpdateOrgProfile", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        public ActionResult GetMPByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_MPEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_MPByProfileId, UserLogin, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult SendMailProbation(Hre_ProfileModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileModel>(LanguageCode, model, "Hre_SendMailProbation", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            if (!string.IsNullOrEmpty(model.listId))
            {
                var profileServices = new Hre_ProfileServices();
                var lisIDs = model.listId.Split(',').Select(x => Guid.Parse(x)).ToList();
                List<string> lstMailTo = model.LstMailSendTo.Split(',').ToList();
                message = profileServices.ProcessSendMailProbation(lstMailTo, lisIDs, UserLogin, LanguageCode);
            }
            return Json(message);
        }

        [HttpPost]
        public ActionResult BackToWaiting(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.BackToWaiting(selectedIds);
            return Json(message);
        }

        public ActionResult LoadDataPosition(string PositionID)
        {
            var service = new Hre_ProfileServices();
            var result = new Cat_PositionEntity();
            if (!string.IsNullOrEmpty(PositionID))
            {
                Guid Id = Guid.Parse(PositionID);
                result = service.LoadDataPosition(Id);
            }
            return Json(result);
        }

        [HttpPost]
        public ActionResult GetRequestInfoModelList([DataSourceRequest] DataSourceRequest request, Hre_RequestInfoSearchModel model)
        {
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            List<object> pataProfile = new List<object>();
            pataProfile.AddRange(new object[14]);
            pataProfile[0] = model.ProfileName;
            pataProfile[1] = model.CodeEmp;
            pataProfile[2] = model.OrgStructureID;
            pataProfile[3] = model.DateApprove;
            pataProfile[4] = model.DateReject;
            pataProfile[5] = model.DateChange;
            pataProfile[6] = model.UserApproveID;
            pataProfile[7] = model.UserRejectID;
            pataProfile[8] = model.Status;
            pataProfile[12] = 1;
            pataProfile[13] = int.MaxValue - 1;
            var status = string.Empty;
            var result = actionServices.GetData<Hre_RequestInfoEntity>(pataProfile, ConstantSql.hrm_hr_sp_get_RequestInfo, ref status);
            var LstReturn = profileServices.GetRequestInfoList(result);
            if (LstReturn != null)
            {
                return Json(LstReturn.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult ExportRequestInfoByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RequestInfoSearchModel model)
        {
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            List<object> pataProfile = new List<object>();
            pataProfile.AddRange(new object[14]);
            pataProfile[0] = model.ProfileName;
            pataProfile[1] = model.CodeEmp;
            pataProfile[2] = model.OrgStructureID;
            pataProfile[3] = model.DateApprove;
            pataProfile[4] = model.DateReject;
            pataProfile[5] = model.DateChange;
            pataProfile[6] = model.UserApproveID;
            pataProfile[7] = model.UserRejectID;
            pataProfile[8] = model.Status;
            pataProfile[12] = 1;
            pataProfile[13] = int.MaxValue - 1;
            var status = string.Empty;
            var LstReturn = new List<Hre_RequestInfoModel>();
            if (!model.IsCreateTemplate)
            {
                var result = actionServices.GetData<Hre_RequestInfoEntity>(pataProfile, ConstantSql.hrm_hr_sp_get_RequestInfo, ref status).ToList();
                if (result != null)
                {
                    result = profileServices.GetRequestInfoList(result);
                    LstReturn = result.Translate<Hre_RequestInfoModel>();
                }
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_RequestInfoModel(),
                    FileName = "Hre_RequestInfoModel",
                    HeaderInfo = null,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty && LstReturn != null)
            {
                var fullPath = ExportService.Export(model.ExportId, LstReturn, null, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            return Json(LstReturn.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Anh.Le][26/10/2015]
        /// Lấy ID, ProfileName,CodeEmp theo IDs
        /// </summary>
        /// <param name="IDs">List ID của nhân viên</param>
        /// <returns>List Hre_ProfileCodeNameModel  </returns> 
        public List<Hre_ProfileCodeNameModel> GetProfileIdNameCode(List<Guid> IDs)
        {
            List<Hre_ProfileCodeNameModel> model = new List<Hre_ProfileCodeNameModel>();
            if (IDs != null && IDs.Count() > 0)
            {
                var _ser = new Hre_ProfileServices();
                model = _ser.GetProfileIdNameCode(IDs).Translate<Hre_ProfileCodeNameModel>();
            }
            return model;
        }

        // Son.Vo - 0058573
        [HttpPost]
        public ActionResult GetProfileQuitListForDropdownNoCheckbox([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureDetailsSearchModel model)
        {
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId != null && orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.ID);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }

            var sysServices = new Sys_AttOvertimePermitConfigServices();
            int? totaldays = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_SHOWPROFILECONFIG);

            if (totaldays != null && totaldays > 0)
            {
                var dateshow = DateTime.Now.AddDays(-totaldays.Value);
                var lstObjProfile = new List<object>();
                lstObjProfile.AddRange(new object[16]);
                lstObjProfile[2] = model.OrgStructureID;
                lstObjProfile[14] = 1;
                lstObjProfile[15] = int.MaxValue - 1;
                var lstProfile = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitOrgStructureDetail, ref status).ToList();
                lstProfile = lstProfile.Where(s => s.DateQuit >= dateshow).ToList();
                if (model.IsExport != null)
                {
                    if ((bool)model.IsExport)
                    {
                        string message = ExportService.Export(Guid.Empty, lstProfile, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                        return Json(message);
                    }
                }
                return Json(lstProfile.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            else
            {
                if (model.IsExport != null)
                {
                    if ((bool)model.IsExport)
                    {
                        var lstObjProfile = new List<object>();
                        lstObjProfile.AddRange(new object[16]);
                        lstObjProfile[2] = model.OrgStructureID;
                        lstObjProfile[14] = 1;
                        lstObjProfile[15] = int.MaxValue - 1;
                        var lstProfile = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitOrgStructureDetail, ref status).ToList();

                        string message = ExportService.Export(Guid.Empty, lstProfile, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                        return Json(message);
                    }
                }
                return GetListDataAndReturn<Hre_ProfileForViewModel, Hre_ProfileForViewEntity, Hre_OrgStructureDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQuitOrgStructureDetail);
            }
        }

        // Son.Vo - 0058573
        [HttpPost]
        public ActionResult GetWorkhistoryQuitListForDropdownNoCheckbox([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureHistoryDetailsSearchModel model)
        {
            //Quyen.Quach 0081415
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.DateEffect == null)
            {
                model.DateEffect = DateTime.Now;
            }
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(model.DateEffect);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_hr_sp_get_OrgStructureHistory_Data_SumProfile, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                //Quyen.quach 06/09/2017 0087679
                if (orgId != null && orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.OrgStructureID.Value);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }
            if (model.IsExport != null)
            {
                if ((bool)model.IsExport)
                {
                    request.PageSize = Int32.MaxValue - 1;
                    var lstProfile = GetListData<Hre_WorkHistoryForViewModel, Hre_WorkHistoryForViewEntity, Hre_OrgStructureHistoryDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryQuitOrgStructureDetail, ref status).ToList();
                    string message = ExportService.Export(Guid.Empty, lstProfile, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                    return Json(message);
                }
            }
            return GetListDataAndReturn<Hre_ProfileForViewModel, Hre_ProfileForViewEntity, Hre_OrgStructureHistoryDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryQuitOrgStructureDetail);
        }

        // Son.Vo - 0058573
        [HttpPost]
        public ActionResult GetProfileQuitListForOrganizationStructure([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureDetailsSearchModel model)
        {
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.ID);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }

            var sysServices = new Sys_AttOvertimePermitConfigServices();
            int? totaldays = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_SHOWPROFILECONFIG);

            if (totaldays != null && totaldays > 0)
            {
                var dateshow = DateTime.Now.AddDays(-totaldays.Value);
                var lstObjProfile = new List<object>();
                lstObjProfile.AddRange(new object[16]);
                lstObjProfile[2] = model.OrgStructureID;
                lstObjProfile[14] = 1;
                lstObjProfile[15] = int.MaxValue - 1;
                var lstProfile = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitOrgStructureDetail, ref status).ToList();
                lstProfile = lstProfile.Where(s => s.DateQuit >= dateshow).ToList();

                var _listResultConcurrent = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitConCurrent, ref status);
                if (lstProfile != null && _listResultConcurrent != null && _listResultConcurrent.Count() > 0)
                {
                    lstProfile.AddRange(_listResultConcurrent);
                    lstProfile = lstProfile.DistinctBy(s => s.ID).ToList();
                }
                return Json(lstProfile.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            else
            {
                var lstObjProfile = new List<object>();
                lstObjProfile.AddRange(new object[16]);
                lstObjProfile[2] = model.OrgStructureID;
                lstObjProfile[14] = 1;
                lstObjProfile[15] = int.MaxValue - 1;
                var _listResult = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitOrgStructureDetail, ref status);
                var _listResultConcurrent = actionService.GetData<Hre_ProfileForViewEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_ProfileQuitConCurrent, ref status);
                if (_listResult != null && _listResultConcurrent != null && _listResultConcurrent.Count() > 0)
                {
                    _listResult.AddRange(_listResultConcurrent);
                    _listResult = _listResult.DistinctBy(s => s.ID).ToList();
                }
                return new JsonResult() { Data = _listResult.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };
            }
        }

        // Son.Vo - lấy thông tin chức vụ load lên màn hình vị trí triển vọng để search
        [HttpPost]
        public ActionResult GetDataPositionByID(Guid? positionID)
        {
            var service = new Cat_PositionServices();
            var status = string.Empty;
            if (positionID != null)
            {
                var position = service.GetDataPositionByID(positionID.Value);
                return Json(position, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(string.Empty);
            }
        }

        // Son.Vo - lấy thông tin chức vụ load lên màn hình vị trí triển vọng để search
        [HttpPost]
        public ActionResult GetDataPositionCreateWorkhistoryByID(Guid? positionID)
        {
            var service = new Cat_PositionServices();
            var status = string.Empty;
            if (positionID != null)
            {
                var position = service.GetDataPositionCreateWorkhistoryByID(positionID.Value);
                return Json(position, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(string.Empty);
            }
        }

        [HttpPost]
        // Son.Vo - cho phép edit mã nv hay không
        public ActionResult IsAllowEditCodeEmp()
        {
            var profileServices = new Hre_ProfileServices();
            Boolean ischeck = profileServices.IsAllowEditCodeEmp(UserLogin);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - Màn hình tạo mới ứng viên có hiển thị field mã NV KH hay không.
        public ActionResult IsUseDefaultStatusSyn()
        {
            var profileServices = new Hre_ProfileServices();
            Boolean ischeck = profileServices.IsUseDefaultStatusSyn();
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult GetDefaultStatusSyn()
        {
            var profileServices = new Hre_ProfileServices();
            var status = profileServices.GetDefaultStatusSyn();
            return Json(status, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetOrgDataOrderNumber(string orderNumber)
        {
            if (orderNumber != null)
            {
                var baseService = new BaseService();
                string status = string.Empty;
                var lstObjOrgByOrderNumberCount = new List<object>();
                lstObjOrgByOrderNumberCount.Add(orderNumber);
                var result = baseService.GetData<Cat_OrgStructureEntity>(lstObjOrgByOrderNumberCount, ConstantSql.hrm_cat_sp_get_OrgStructureByOrderNumber, UserLogin, ref status).FirstOrDefault();
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);

            }
        }

        //Son.Vo - 20151126 - export word ds tất cả nv
        public ActionResult ExportProfileAllByTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var _ActionService = new ActionService(UserLogin, UserLogin);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _ContractServices = new Hre_ContractServices();
            var _DisciplineServices = new Hre_DisciplineServices();
            var _ProfileServices = new Hre_ProfileServices();
            var _RelativesServices = new Hre_RelativesServices();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfile = _ActionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWorkingByListId, ref status);
            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var lstWorkHistoryBylstProfile = workhistoryServices.GetWorkHistoryOrgListByLstProfileID(selectedIds);
            var lstBasicSalaryBylstProfile = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(selectedIds);
            var lstContractbylstProfile = _ContractServices.GetLstContractByProfileIDs(selectedIds);
            var lstDisciplinebylstProfile = _DisciplineServices.GetLstDisciplineByProfileIDs(selectedIds);
            var lstWorkPermitbylstProfile = _ProfileServices.GetLstWorkPermitByProfileIDs(selectedIds);
            var lstVisaInfobylstProfile = _ProfileServices.GetLstVisaInfoByProfileIDs(selectedIds);
            var lstResidentCardbylstProfile = _ProfileServices.GetLstResidenceCardByProfileIDs(selectedIds);
            var lstDependantbylstProfile = _ProfileServices.GetLstDependantByProfileIDs(selectedIds);
            var lstProfileQualificationbylstProfile = _ProfileServices.GetLstProfileQualificationByProfileIDs(selectedIds);
            var lstSalaryInformationbylstProfile = _ProfileServices.GetLstSalaryInformationByProfileIDs(selectedIds);
            var LstRelativesbylstProfile = _ProfileServices.GetLstRelativesByProfileIDs(selectedIds);
            #region Quyen.Quach 07/11/2017 0089491
            var candidateHistoryServices = new Hre_CandidateHistoryServices();
            var lstCandidateHistory = candidateHistoryServices.GetCandidateHistoryByProfile(selectedIds);

            var _TraineeServices = new Tra_TraineeServices();
            var lsttraineeprofile = _TraineeServices.GetTraineeByListTrainee(selectedIds);

            var _Eva_Performation = new Eva_PerformanceServices();
            var lstEvaPerformation = _Eva_Performation.GetProfileEvaperformanceByListTrainee(selectedIds);
            #endregion
            foreach (var profile in lstProfile)
            {
                i++;
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = _ActionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                if (profile.IDDateOfIssue.HasValue)
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                if (profile.DateOfBirth.HasValue)
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");
                if (profile.Salary != null)
                    profile.SalaryFormat = String.Format("{0:0,0}", profile.Salary);
                if (profile.Allowance1 != null)
                    profile.Allowance1Format = String.Format("{0:0,0}", profile.Allowance1);

                if (profile.DayOfBirth > 0 && profile.MonthOfBirth > 0 && profile.YearOfBirth > 0)
                {
                    profile.Birthday = profile.DayOfBirth + "/" + profile.MonthOfBirth + "/" + profile.YearOfBirth;
                }
                if (profile.DateHire.HasValue)
                {
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                profile.DateTimeNow = DateTime.Now;
                if (profile.DateStart.HasValue)
                {
                    profile.DateStartString = "Ngày " + profile.DateStart.Value.Day + " Tháng " + profile.DateStart.Value.Month + " Năm " + profile.DateStart.Value.Year + " ";
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                }
                if (profile.DateEnd.HasValue)
                {
                    profile.DateEndString = "Ngày " + profile.DateEnd.Value.Day + " Tháng " + profile.DateEnd.Value.Month + " Năm " + profile.DateEnd.Value.Year + " ";
                    profile.DateEndFormat = profile.DateEnd.Value.ToString("dd/MM/yyyy");
                }

                var seniority = _ProfileServices.CountYearWorking(profile.ID, profile.DateHire.Value, true);
                if (seniority.CountYear != null)
                {
                    profile.Seniority = seniority.CountYear.ToString();
                }
                var basicSalaryByProfile = lstBasicSalaryBylstProfile.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    profile.E_GrossAmount = basicSalaryByProfile.E_GrossAmount;
                    profile.E_InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount;
                }

                #region MyRegion
                if (profile.DateOfBirth != null)
                {
                    int age = DateTime.Now.Year - profile.DateOfBirth.Value.Year;
                    profile.Age = age;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                #region Son.Vo - 20160625 - 0069521
                var lstWorkHistoryByProfile = new List<Hre_WorkHistoryEntity>();

                if (lstWorkHistoryBylstProfile != null)
                {
                    //Son.Vo - 20160630 - 0069630 - chỉ lấy dòng duyệt
                    lstWorkHistoryByProfile = lstWorkHistoryBylstProfile.Where(s => s.ProfileID == profile.ID && s.Status == WorkHistoryStatus.E_APPROVED.ToString()).OrderByDescending(s => s.DateEffective).ToList();
                    int i1 = 0;
                    int stt = 0;
                    foreach (var WorkHistory in lstWorkHistoryByProfile)
                    {
                        stt++;
                        WorkHistory.STT = stt;
                        if (i1 == 0)
                        {
                            i1++;
                            continue;
                        }
                        if (lstWorkHistoryByProfile[i1 - 1] != null && lstWorkHistoryByProfile[i1 - 1].DateEffective != null)
                        {
                            lstWorkHistoryByProfile[i1].DateEndFormat = lstWorkHistoryByProfile[i1 - 1].DateEffective.AddDays(-1).ToString("dd/MM/yyyy");
                        }
                        i1++;
                    }
                }
                #endregion

                #region Son.Vo - 20160630 - 0069630
                if (profile.Gender != null)
                {
                    if (profile.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                    {
                        profile.GenderViewNew = "Female";
                    }
                    else if (profile.Gender == EnumDropDown.Gender.E_MALE.ToString())
                    {
                        profile.GenderViewNew = "Male";
                    }
                    else if (profile.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                    {
                        profile.GenderViewNew = "Other";
                    }
                }
                #endregion
                var salaryInfoByProfile = lstSalaryInformationbylstProfile.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    profile.BranchName = salaryInfoByProfile.BankBrandName;
                }

                var lstBasicSalaryByProfile = new List<Sal_BasicSalaryEntity>();
                if (lstBasicSalaryBylstProfile != null)
                {
                    //Quyen.Quach 07/11/2017 0089491 Sửa điều kiện thành status = E_APPROVED
                    lstBasicSalaryByProfile = lstBasicSalaryBylstProfile.Where(s => s.ProfileID == profile.ID && s.Status == WorkHistoryStatus.E_APPROVED.ToString()).ToList();
                }

                var lstContractByProfile = new List<Hre_ContractEntity>();
                if (lstContractbylstProfile != null)
                {
                    lstContractByProfile = lstContractbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstDisciplineByProfile = new List<Hre_DisciplineEntity>();
                if (lstDisciplinebylstProfile != null)
                {
                    lstDisciplineByProfile = lstDisciplinebylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstWorkPermitByProfile = new List<Hre_WorkPermitEntity>();
                if (lstWorkPermitbylstProfile != null)
                {
                    lstWorkPermitByProfile = lstWorkPermitbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstResidentCardByProfile = new List<Hre_ResidenceCardEntity>();
                if (lstResidentCardbylstProfile != null)
                {
                    lstResidentCardByProfile = lstResidentCardbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstVisaInfoByProfile = new List<Hre_VisaInfoEntity>();
                if (lstVisaInfobylstProfile != null)
                {
                    lstVisaInfoByProfile = lstVisaInfobylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstDependantByProfile = new List<Hre_DependantEntity>();
                if (lstDependantbylstProfile != null)
                {
                    lstDependantByProfile = lstDependantbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstProfileQualificationByProfile = new List<Hre_ProfileQualificationEntity>();
                if (lstProfileQualificationbylstProfile != null)
                {
                    lstProfileQualificationByProfile = lstProfileQualificationbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                #region Son.Vo - 20160617 - 0069006 - lấy ProfileQualification theo task
                var lstProfileQualificationByProfile1 = new List<Hre_ProfileQualificationEntity>();
                if (lstProfileQualificationbylstProfile != null)
                {
                    lstProfileQualificationByProfile1 = lstProfileQualificationbylstProfile.Where(s => s.ProfileID == profile.ID && s.SpecialLevelID != null).OrderBy(s => s.Order).ToList();
                    int stt = 0;
                    if (lstProfileQualificationByProfile1 != null && lstProfileQualificationByProfile1.Count() > 0)
                    {
                        foreach (var ProfileQualification in lstProfileQualificationByProfile1)
                        {
                            stt++;
                            ProfileQualification.STT = stt;
                        }
                    }
                }
                #endregion

                var lstSalaryInformationByProfile = new List<Sal_SalaryInformationEntity>();
                if (lstSalaryInformationbylstProfile != null)
                {
                    lstSalaryInformationByProfile = lstSalaryInformationbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstRelativesByProfile = new List<Hre_RelativesEntity>();
                if (LstRelativesbylstProfile != null)
                {
                    lstRelativesByProfile = LstRelativesbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }

                #region Son.Vo - 20151208 - 0061323
                var lastContractByProfile = lstContractByProfile.OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lastContractByProfile != null)
                {
                    profile.ContractNo = lastContractByProfile.ContractNo;
                    profile.ContractTypeName = lastContractByProfile.ContractTypeName;
                    if (lastContractByProfile.DateSigned != null)
                    {
                        profile.DateSignedFormat = lastContractByProfile.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                    if (lastContractByProfile.DateStart != null)
                    {
                        profile.DateStartFormat = lastContractByProfile.DateStart.ToString("dd/MM/yyyy");
                    }
                    if (lastContractByProfile.DateEnd != null)
                    {
                        profile.DateEndFormat = lastContractByProfile.DateEnd.Value.ToString("dd/MM/yyyy");
                    }
                    if (lastContractByProfile.Salary != null)
                    {
                        profile.Salary = lastContractByProfile.Salary;
                    }
                    if (lastContractByProfile.Allowance1 != null)
                    {
                        profile.Allowance1 = lastContractByProfile.Allowance1;
                    }
                    if (lastContractByProfile.Allowance2 != null)
                    {
                        profile.Allowance2 = lastContractByProfile.Allowance2;
                    }
                    if (lastContractByProfile.Allowance3 != null)
                    {
                        profile.Allowance3 = lastContractByProfile.Allowance3;
                    }
                }

                var salaryinfobyProfile = lstSalaryInformationByProfile.OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (salaryinfobyProfile != null)
                {
                    profile.BankName = salaryinfobyProfile.BankName;
                    profile.BankName2 = salaryinfobyProfile.BankName2;
                    profile.AccountName = salaryinfobyProfile.AccountName;
                    profile.AccountName2 = salaryinfobyProfile.AccountName2;
                    profile.AccountNo = salaryinfobyProfile.AccountNo;
                    profile.AccountNo2 = salaryinfobyProfile.AccountNo2;
                    profile.BankBrandName = salaryinfobyProfile.BranchName;
                    profile.BankBrandName2 = salaryinfobyProfile.BranchName2;
                    profile.BankBrandName3 = salaryinfobyProfile.BranchName3;
                }
                #endregion

                #region Quyen.Quach 07/11/2017 0089491 Tra_Trainee,Eva_Performance,Hre_CandidateHistory
                var lstProfileTraineeByProfileID = new List<Tra_TraineeEntity>();
                if (lsttraineeprofile != null)
                {
                    lstProfileTraineeByProfileID = lsttraineeprofile.Where(s => s.ProfileID == profile.ID).ToList();
                    foreach (var Trainee in lstProfileTraineeByProfileID)
                    {
                        Trainee.Status = Trainee.Status != null ? Trainee.Status.TranslateString(LanguageCode) : null;
                    }
                }
                var lstCanHistoryByProfileID = new List<Hre_CandidateHistoryEntity>();
                if (lstCandidateHistory != null)
                {
                    lstCanHistoryByProfileID = lstCandidateHistory.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).ToList();
                }
                var lstProfileEvaPerfomationByProfileID = new List<Eva_PerformanceEntity>();
                if (lstEvaPerformation != null)
                {
                    lstProfileEvaPerfomationByProfileID = lstEvaPerformation.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion


                var lstProfiles = new List<Hre_ProfileEntity>();
                lstProfiles.Add(profile);

                var tblProfiles = new DataTable();
                tblProfiles = lstProfiles.Translate();

                var tblWorkHistory = new DataTable();
                tblWorkHistory = lstWorkHistoryByProfile.Translate();

                var tblBasicSalary = new DataTable();
                tblBasicSalary = lstBasicSalaryByProfile.Translate();

                var tblContract = new DataTable();
                tblContract = lstContractByProfile.Translate();

                var tblDiscipline = new DataTable();
                tblDiscipline = lstDisciplineByProfile.Translate();

                var tblWorkPermit = new DataTable();
                tblWorkPermit = lstWorkPermitByProfile.Translate();

                var tblResidentCard = new DataTable();
                tblResidentCard = lstResidentCardByProfile.Translate();

                var tblVisaInfo = new DataTable();
                tblVisaInfo = lstVisaInfoByProfile.Translate();

                var tblDependant = new DataTable();
                tblDependant = lstDependantByProfile.Translate();

                var tblProfileQualification = new DataTable();
                tblProfileQualification = lstProfileQualificationByProfile.Translate();

                var tblProfileQualification1 = new DataTable();
                tblProfileQualification1 = lstProfileQualificationByProfile1.Translate();

                var tblSalaryInformation = new DataTable();
                tblSalaryInformation = lstSalaryInformationByProfile.Translate();

                var tblRelatives = new DataTable();
                tblRelatives = lstRelativesByProfile.Translate();

                var tblCandidateHistory = new DataTable();
                tblCandidateHistory = lstCanHistoryByProfileID.Translate();

                var tblPerformance = new DataTable();
                tblPerformance = lstProfileEvaPerfomationByProfileID.Translate();

                var tblTrainee = new DataTable();
                tblTrainee = lstProfileTraineeByProfileID.Translate();

                var dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblWorkHistory);
                dsData.Tables.Add(tblBasicSalary);
                dsData.Tables.Add(tblContract);
                dsData.Tables.Add(tblDiscipline);
                dsData.Tables.Add(tblWorkPermit);
                dsData.Tables.Add(tblResidentCard);
                dsData.Tables.Add(tblVisaInfo);
                dsData.Tables.Add(tblDependant);
                dsData.Tables.Add(tblProfileQualification);
                dsData.Tables.Add(tblSalaryInformation);
                dsData.Tables.Add(tblRelatives);
                dsData.Tables.Add(tblProfileQualification1);
                dsData.Tables.Add(tblCandidateHistory);
                dsData.Tables.Add(tblPerformance);
                dsData.Tables.Add(tblTrainee);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblWorkHistory";
                dsData.Tables[2].TableName = "tblBasicSalary";
                dsData.Tables[3].TableName = "tblContract";
                dsData.Tables[4].TableName = "tblDiscipline";
                dsData.Tables[5].TableName = "tblWorkPermit";
                dsData.Tables[6].TableName = "tblResidentCard";
                dsData.Tables[7].TableName = "tblVisaInfo";
                dsData.Tables[8].TableName = "tblDependant";
                dsData.Tables[9].TableName = "tblProfileQualification";
                dsData.Tables[10].TableName = "tblSalaryInformation";
                dsData.Tables[11].TableName = "tblRelatives";
                dsData.Tables[12].TableName = "tblProfileQualification1";
                dsData.Tables[13].TableName = "tblCandidateHistory";
                dsData.Tables[14].TableName = "tblPerformance";
                dsData.Tables[15].TableName = "tblTrainee";
                ExportService.ExportWithRegions(outputPath, templatepath, dsData);
            }
            if (lstProfileID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }



        #region Xuat nhan vien rea tuong file

        public ActionResult ExportProfileAllExcellEachFileByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchV2Model model)
        {
            DateTime DateStart = DateTime.Now;
            string status = string.Empty;
            var _ActionService = new ActionService(UserLogin, UserLogin);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _ProfileServices = new Hre_ProfileServices();
            var objs = new List<object>();
            #region Get Profile
            string strIDs = string.Empty;
            foreach (var item in model.selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
            {
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            }

            objs.Add(strIDs);
            var lstProfile = _ActionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWorkingByListId, ref status);
            if (lstProfile == null)
            {
                return null;
            }
            #endregion

            #region Lay thong tin khac
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            var lstBasicSalaryBylstProfile = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(model.selectedIds);
            var lstProfileQualificationbylstProfile = _ProfileServices.GetLstProfileQualificationByProfileIDs(model.selectedIds);
            var lstSalaryInformationbylstProfile = _ProfileServices.GetLstSalaryInformationByProfileIDs(model.selectedIds);
            #endregion
            Dictionary<List<HeaderInfo>, DataTable> dic = new Dictionary<List<Business.Main.Domain.HeaderInfo>, DataTable>();

            var imageFields = new[] { new TemplateBase.ImageField("ImagePath", formatImagePath: Common.GetPath("Images") + "\\{0}") };

            //Đường dẫn file export
            string outPath = string.Empty;
            //Thư mục nén và đường dẫn
            string folderSave = "HreProfileAllV2" + DateTime.Now.ToString("ddMMyyyyHHmmss");
            string dirpath = Common.GetPath(Common.DownloadURL + folderSave);

            foreach (var profile in lstProfile)
            {
                #region Tong Hop thong tin Profile
                if (profile.IDDateOfIssue.HasValue)
                {
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (profile.DateOfBirth.HasValue)
                {
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (profile.Salary != null)
                {
                    profile.SalaryFormat = String.Format("{0:0,0}", profile.Salary);
                }
                if (profile.Allowance1 != null)
                {
                    profile.Allowance1Format = String.Format("{0:0,0}", profile.Allowance1);
                }
                if (profile.DayOfBirth > 0 && profile.MonthOfBirth > 0 && profile.YearOfBirth > 0)
                {
                    profile.Birthday = profile.DayOfBirth + "/" + profile.MonthOfBirth + "/" + profile.YearOfBirth;
                }
                if (profile.DateHire.HasValue)
                {
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                profile.DateTimeNow = DateTime.Now;
                if (profile.DateStart.HasValue)
                {
                    profile.DateStartString = "Ngày " + profile.DateStart.Value.Day + " Tháng " + profile.DateStart.Value.Month + " Năm " + profile.DateStart.Value.Year + " ";
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                }
                if (profile.DateEnd.HasValue)
                {
                    profile.DateEndString = "Ngày " + profile.DateEnd.Value.Day + " Tháng " + profile.DateEnd.Value.Month + " Năm " + profile.DateEnd.Value.Year + " ";
                    profile.DateEndFormat = profile.DateEnd.Value.ToString("dd/MM/yyyy");
                }

                var seniority = _ProfileServices.CountYearWorking(profile.ID, profile.DateHire.Value, true);
                if (seniority.CountYear != null)
                {
                    profile.Seniority = seniority.CountYear.ToString();
                }
                var basicSalaryByProfile = lstBasicSalaryBylstProfile.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    profile.E_GrossAmount = basicSalaryByProfile.E_GrossAmount;
                    profile.E_InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount;
                }

                #region DateOfBirth
                if (profile.DateOfBirth != null)
                {
                    int age = DateTime.Now.Year - profile.DateOfBirth.Value.Year;
                    profile.Age = age;
                }
                #endregion

                var salaryInfoByProfile = lstSalaryInformationbylstProfile.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    profile.BranchName = salaryInfoByProfile.BankBrandName;
                }
                var lstSalaryInformationByProfile = new List<Sal_SalaryInformationEntity>();
                if (lstSalaryInformationbylstProfile != null)
                {
                    lstSalaryInformationByProfile = lstSalaryInformationbylstProfile.Where(s => s.ProfileID == profile.ID).ToList();
                }
                var salaryinfobyProfile = lstSalaryInformationByProfile.OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (salaryinfobyProfile != null)
                {
                    profile.BankName = salaryinfobyProfile.BankName;
                    profile.BankName2 = salaryinfobyProfile.BankName2;
                    profile.AccountName = salaryinfobyProfile.AccountName;
                    profile.AccountName2 = salaryinfobyProfile.AccountName2;
                    profile.AccountNo = salaryinfobyProfile.AccountNo;
                    profile.AccountNo2 = salaryinfobyProfile.AccountNo2;
                    profile.BankBrandName = salaryinfobyProfile.BranchName;
                    profile.BankBrandName2 = salaryinfobyProfile.BranchName2;
                    profile.BankBrandName3 = salaryinfobyProfile.BranchName3;
                }
                #endregion
                #region Tao Header Nhan vien
                var _profiletemp = profile.CopyData<Hre_ProfileForExportEntity>();
                PropertyInfo[] propertyInfos = _profiletemp.GetType().GetProperties();
                List<PropertyInfo> lstPropertyInfo = propertyInfos.ToList();
                List<HeaderInfo> lstheaderinfo = new List<HeaderInfo>();
                foreach (var ippinfo in lstPropertyInfo)
                {
                    HeaderInfo headerInfo = new HeaderInfo() { Name = ippinfo.Name, Value = _profiletemp.GetPropertyValue(ippinfo.Name) };
                    lstheaderinfo.Add(headerInfo);
                }
                #endregion
                #region Get Qualification  By Profile
                var lstQualByPro = new List<Hre_ProfileQualificationEntity>();
                if (lstProfileQualificationbylstProfile != null)
                {
                    var lstQualifiByProTemp = lstProfileQualificationbylstProfile.Where(s => s.ProfileID == profile.ID && s.SpecialLevelID != null).OrderBy(s => s.Order).ToList();
                    if (!Common.CheckListNullOrEmty(lstQualifiByProTemp))
                    {
                        foreach (var iQual in lstQualifiByProTemp)
                        {
                            var _lstTemp = lstQualifiByProTemp.Where(s => s.QualificationName == iQual.QualificationName && s.SpecialLevelID == iQual.SpecialLevelID).ToList();
                            if (_lstTemp.Count == 1)
                            {
                                lstQualByPro.Add(iQual);
                            }
                            else
                            {
                                if (!lstQualByPro.Any(s => s.QualificationName == iQual.QualificationName && s.SpecialLevelID == iQual.SpecialLevelID))
                                {
                                    if (_lstTemp.Where(s => s.DateExpired == null).Count() == _lstTemp.Count())
                                    {
                                        foreach (var iitemp in _lstTemp)
                                        {
                                            lstQualByPro.Add(iitemp);
                                        }
                                    }
                                    else
                                    {
                                        var finlQual = _lstTemp.OrderByDescending(s => s.DateExpired).FirstOrDefault();
                                        lstQualByPro.Add(finlQual);
                                    }
                                }
                            }
                        }
                    }
                }
                var TableQual = new DataTable();
                TableQual = lstQualByPro.Translate();
                TableQual.TableName = "Hre_ProfileQualificationEntity";

                //Add Columns ImagePath to Export Excel
                ExportService.ExcelImageUtility.ResolveExcelImageCellType(TableQual, imageFields, true);
                foreach (DataRow rowTableQual in TableQual.Rows)
                {
                    rowTableQual["ImagePath"] = profile.ImagePath;
                }
                ExportService.ExcelImageUtility.ResolveExcelImageCellValue(TableQual.Rows, imageFields);

                #endregion

                dic.Add(lstheaderinfo, TableQual);
            }

            Boolean isZipfile = false;
            if (dic != null && dic.Count > 1)
            {
                isZipfile = true;
            }

            foreach (var idic in dic)
            {
                var lstHeaderInfo = idic.Key;
                var profileName = lstHeaderInfo.Where(s => s.Name == "ProfileName" && s.Value != null).Select(s => s.Value.ToString()).FirstOrDefault();
                var codeemp = lstHeaderInfo.Where(s => s.Name == "CodeEmp" && s.Value != null).Select(s => s.Value.ToString()).FirstOrDefault();
                var table = idic.Value;

                outPath = ExportService.ExportPlaysip(model.ExportID, profileName + codeemp, null, null, folderSave, table, lstHeaderInfo, ExportFileType.Excel, imageFields);

                if (!isZipfile)
                {
                    string fileName = Common.GetFileName(outPath);
                    var strUrl = fileName.Split('/');
                    var urlDownload = strUrl[0] + "/" + folderSave + "/" + strUrl[1];
                    return Json(urlDownload, JsonRequestBehavior.AllowGet);
                }
            }

            if (isZipfile)
            {
                var outpath = Common.MultiExport("", isZipfile, folderSave);
                return Json(outpath, JsonRequestBehavior.AllowGet);
            }
            return Json("");
        }

        public ActionResult ExportProfileAllExcellEachFileTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchV2Model model)
        {
            #region Tao Header Nhan vien
            var _profiletemp = new Hre_ProfileForExportEntity();
            PropertyInfo[] propertyInfos = _profiletemp.GetType().GetProperties();
            List<PropertyInfo> lstPropertyInfo = propertyInfos.ToList();
            List<HeaderInfo> lstheaderinfo = new List<HeaderInfo>();
            foreach (var ippinfo in lstPropertyInfo)
            {
                HeaderInfo headerInfo = new HeaderInfo() { Name = ippinfo.Name, Value = "" };
                lstheaderinfo.Add(headerInfo);
            }
            #endregion
            #region ProfileQualification
            var lstQualByPro = new List<Hre_ProfileQualificationEntity>();
            var datatable = lstQualByPro.Translate();
            datatable.TableName = "Hre_ProfileQualificationEntity";
            #endregion
            #region Tap template
            var path = Common.GetPath("Templates");
            ExportService exportService = new ExportService();
            ConfigExport cfgExport = new ConfigExport()
            {
                Object = datatable,
                FileName = "Hre_ProfileQualificationEntity",
                OutPutPath = path,
                HeaderInfo = lstheaderinfo,
                DownloadPath = Hrm_Main_Web + "Templates",
                IsDataTable = true

            };
            var str = exportService.CreateTemplate(cfgExport);
            return Json(str);
            #endregion

        }


        #endregion


        public ActionResult GetProfileTemList([DataSourceRequest] DataSourceRequest request, Hre_ProfileTemModel model)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var Lstobj = new List<object>();
            Lstobj.AddRange(new object[3]);
            Lstobj[0] = model.ProfileID;
            Lstobj[1] = 1;
            Lstobj[2] = (int.MaxValue - 1);
            var _profileAll = actionServices.GetData<Hre_ProfileTemEntity>(Lstobj, ConstantSql.hrm_hr_sp_get_ProfileTemp, ref status).Translate<Hre_ProfileTemModel>();
            return Json(_profileAll.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        public string ValidateCopyData([DataSourceRequest] DataSourceRequest request, Hre_ProfileModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileModel>(LanguageCode, model, "Hre_Profile_CopyData", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        public ActionResult CopyData([Bind]Hre_ProfileModel model)
        {
            var service = new Hre_ProfileServices();
            var profileEntity = model.CopyData<Hre_ProfileEntity>();
            var message = service.CopyData(profileEntity);
            return Json(message);
        }

        //Son.Vo - 20161209 - 0076362
        [HttpPost]
        public ActionResult GetDateEndProbation(DateTime? dateHire, int? dayProbations, string probationTimeUnit)
        {
            if (dateHire != null && dayProbations != null && dayProbations > 0) // Son.Vo - 20160917 - 0073467 - Nếu Số ngày thử việc = 0 hoặc = null => Ngày kết thúc thử việc = Null
            {
                DateTime dateEndProbation = dateHire.Value;
                if (!string.IsNullOrEmpty(probationTimeUnit))
                {
                    if (probationTimeUnit == EnumDropDown.ProbationTimeUnit.E_DAY.ToString())
                    {
                        dateEndProbation = dateHire.Value.AddDays((double)dayProbations).AddDays(-1); // Son.Vo - 20160822 - 0072402
                    }
                    else if (probationTimeUnit == EnumDropDown.ProbationTimeUnit.E_WEEK.ToString())
                    {
                        dateEndProbation = dateHire.Value.AddDays((double)(dayProbations * 7)).AddDays(-1); // Son.Vo - 20160822 - 0072402
                    }
                    else
                    {
                        dateEndProbation = dateHire.Value.AddMonths(dayProbations.Value).AddDays(-1);
                    }
                }

                var rs = new { dateEndProbation = dateEndProbation };
                return Json(rs, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 20161209 - 0076362
        [HttpPost]
        public ActionResult GetDateEndProbationUpdateCandidateGeneral(DateTime? dateHire, int? dayProbations)
        {
            if (dateHire != null && dayProbations != null && dayProbations > 0)
            {
                DateTime dateEndProbation = dateHire.Value.AddDays((double)dayProbations).AddDays(-1);
                var rs = new { dateEndProbation = dateEndProbation };
                return Json(rs, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetTotalProbationUpdateCandidateGeneral(DateTime? dateHire, DateTime? dayProbations)
        {
            if (dateHire != null && dayProbations != null)
            {
                //son.Vo - 20161105 - 0072402
                if (dayProbations.Value.Date > dateHire.Value.Date)
                {
                    int? totalDay = (int)dayProbations.Value.Subtract(dateHire.Value).TotalDays + 1;
                    var rs = new { totalDay = totalDay };
                    return Json(rs, JsonRequestBehavior.AllowGet);
                }
                else if (dayProbations.Value.Date == dateHire.Value.Date)
                {
                    int? totalDay = (int)dayProbations.Value.Subtract(dateHire.Value).TotalDays;
                    var rs = new { totalDay = totalDay };
                    return Json(rs, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetTotalProbation(DateTime? dateHire, DateTime? dayProbations)
        {
            if (dateHire != null && dayProbations != null)
            {
                //son.Vo - 20161105 - 0072402
                if (dayProbations.Value.Date > dateHire.Value.Date)
                {
                    int? totalDay = (int)dayProbations.Value.Subtract(dateHire.Value).TotalDays + 1;
                    var rs = new { totalDay = totalDay };
                    return Json(rs, JsonRequestBehavior.AllowGet);
                }
                else if (dayProbations.Value.Date == dateHire.Value.Date)
                {
                    int? totalDay = (int)dayProbations.Value.Subtract(dateHire.Value).TotalDays;
                    var rs = new { totalDay = totalDay };
                    return Json(rs, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
            return null;
        }

        [HttpPost]
        public ActionResult ExportProfileInActiveAll([DataSourceRequest] DataSourceRequest request, Hre_ProfileInActiveSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileInActiveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileInActive);
        }

        public ActionResult UpdateStatusProfile(string selectedIds, string Status)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var profileServices = new Hre_ProfileServices();
                string result = profileServices.UpdateStatusProfile(selectedIds, Status);
                return Json(result);
            }
            return Json(null);
        }

        [HttpPost]
        // Son.Vo - Màn hình tạo mới ứng viên có hiển thị field mã NV KH hay không.
        public ActionResult IsShowMidSupervisor()
        {
            var profileServices = new Hre_ProfileServices();
            Boolean ischeck = profileServices.IsShowMidSupervisor();
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult GetProfileInActiveList([DataSourceRequest] DataSourceRequest request, Hre_ProfileInActiveSearchModel model)
        {
            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileInActive, UserLogin, ref status);

            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;
        }

        [HttpPost]
        public ActionResult ExportProfileInActiveListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileInActiveSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var service = new BaseService();
            object obj = new Hre_ProfileModel();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ProfileModel>();
            if (model != null && !model.IsCreateTemplate)
            {
                result = GetListData<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileInActiveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileInActive, ref status);
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileRetirementByTemplate(List<Guid> selectedIds, string valueFields)
        {
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileRetirementByListId, ref status);
            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var profile in lstProfile)
            {
                if (profile.IDDateOfIssue.HasValue)
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                if (profile.DateOfBirth.HasValue)
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");

                if (profile.SocialInsIssueDate.HasValue)
                    profile.SocialInsIssueDateFormat = profile.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");

                if (profile.Salary != null)
                    profile.SalaryFormat = String.Format("{0:0,0}", profile.Salary);
                if (profile.Allowance1 != null)
                    profile.Allowance1Format = String.Format("{0:0,0}", profile.Allowance1);

                if (profile.DayOfBirth > 0 && profile.MonthOfBirth > 0 && profile.YearOfBirth > 0)
                {
                    profile.Birthday = profile.DayOfBirth + "/" + profile.MonthOfBirth + "/" + profile.YearOfBirth;
                }
                if (profile.DateHire.HasValue)
                {
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                if (profile.DateStart.HasValue)
                {
                    profile.DateStartString = "Ngày " + profile.DateStart.Value.Day + " Tháng " + profile.DateStart.Value.Month + " Năm " + profile.DateStart.Value.Year + " ";
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                }

                if (profile.DateEnd.HasValue)
                {
                    profile.DateEndString = "Ngày " + profile.DateEnd.Value.Day + " Tháng " + profile.DateEnd.Value.Month + " Năm " + profile.DateEnd.Value.Year + " ";
                    profile.DateEndFormat = profile.DateEnd.Value.ToString("dd/MM/yyyy");
                }
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);

                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = actionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lstcontract = new List<Hre_ProfileEntity>();
                lstcontract.Add(profile);
                ExportService.ExportWord(outputPath, templatepath, lstcontract.Translate<Hre_ProfileForExportEntity>());
            }
            if (lstProfileID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public string ValidateProfile([DataSourceRequest] DataSourceRequest request, Hre_ProfileModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileModel>(LanguageCode, model, "Hre_Profile", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return string.Empty;
            }
        }

        public string ValidateProfileC2([DataSourceRequest] DataSourceRequest request, Hre_ProfileModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileModel>(LanguageCode, model, "Hre_ProfileC2", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return string.Empty;
            }
        }

        [HttpPost]
        public ActionResult GetDateStatProfileQuit()
        {
            Sys_AttOvertimePermitConfigServices Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool IsShowSETTLEMENT = Sys_Services.GetConfigValue<bool>(AppConfig.SAL_SETTLEMENT);
            var DateSettlementFrom = DateTime.Now;
            if (IsShowSETTLEMENT)
            {
                double ValueBeforeSettlement = Sys_Services.GetConfigValue<double>(AppConfig.SAL_SETTLEMENT_VALUEBEFOR);
                DateSettlementFrom = DateTime.Now.AddDays(-ValueBeforeSettlement);
                return Json(DateSettlementFrom, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);

            }
        }

        [HttpPost]
        public ActionResult GetDateEndProfileQuit()
        {

            Sys_AttOvertimePermitConfigServices Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool IsShowSETTLEMENT = Sys_Services.GetConfigValue<bool>(AppConfig.SAL_SETTLEMENT);
            var DateSettlementEnd = DateTime.Now;
            if (IsShowSETTLEMENT)
            {
                double ValueAfterSettlement = Sys_Services.GetConfigValue<double>(AppConfig.SAL_SETTLEMENT_VALUEAFTER);
                DateSettlementEnd = DateTime.Now.AddDays(+ValueAfterSettlement);
                return Json(DateSettlementEnd, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult GetDateEndProbationFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var subDaySuspenseExpiry = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_PROBATION_EXPRIDAY_VALUEBEFOR);
            if (subDaySuspenseExpiry >= 0)
            {
                DateFrom = DateTo.AddDays(-subDaySuspenseExpiry);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateEndProbationToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var addDaySuspenseExpiry = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_PROBATION_EXPRIDAY_VALUEAFTER);
            if (addDaySuspenseExpiry >= 0)
            {
                DateFrom = DateTo.AddDays(addDaySuspenseExpiry);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetCandidateGeneralByProfileId(string ProfileIDs)
        {
            var service = new Hre_ProfileServices();
            var status = string.Empty;
            if (!string.IsNullOrEmpty(ProfileIDs))
            {
                var lstCandidateGeneral = service.GetData<Hre_CandidateGeneralEntity>(Common.DotNetToOracle(ProfileIDs), ConstantSql.hrm_hr_sp_get_CandidateGeneralByProfileID, UserLogin, ref status).ToList();
                if (lstCandidateGeneral != null && lstCandidateGeneral.Count >= 1)
                {
                    var candidateByProfile = lstCandidateGeneral.FirstOrDefault();
                    return Json(candidateByProfile, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(string.Empty);
        }

        [HttpPost]
        public JsonResult GetProfileInfo(Guid profileId)
        {
            var service = new Hre_ProfileServices();
            string status = string.Empty;
            var profileInfo = service.GetProfileInfo(profileId, UserLogin);
            return Json(profileInfo, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        // Son.Vo - Màn hình tạo mới ứng viên có hiển thị field mã NV KH hay không.
        public ActionResult IsUseCodeEmpOfCustomer()
        {
            var profileServices = new Hre_ProfileServices();
            Boolean ischeck = profileServices.IsUseCodeEmpOfCustomer();
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - màn hình đánh giá hđ có hiển thị field bậc lương chi tiết kế hay không
        public ActionResult IsNotUpdateRankDetailForNextContract()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_NOTUPDATERANKDETAILFORNEXTCONTRACT);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        // Son.Vo - kiểm tra có thông báo khi nhập nv vượt quá số lượng của phòng ban hay không
        [HttpPost]
        public bool IsAlertIfNumberOfEmpExceedPlan(Guid? OrgStructureID)
        {
            var profileServices = new Hre_ProfileServices();
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISALERTIFNUMBEROFEMPEXCEEDPLAN);
            bool result = false;
            if (ischeck == false || OrgStructureID == null)
            {
                return false;
            }
            string status = string.Empty;
            var baseService = new BaseService();
            var CountProfileByOrgStructureID = baseService.GetData<Hre_ProfileMultiEntity>(Common.DotNetToOracle(OrgStructureID.ToString()), ConstantSql.hrm_hr_sp_get_ProfilebyOrgStructureID, UserLogin, ref status).Count;
            var CountProfileByPlanHeadCount = baseService.GetData<Hre_ProfileMultiEntity>(Common.DotNetToOracle(OrgStructureID.ToString()), ConstantSql.hrm_hr_sp_get_PlanHeadCountbyOrgStructureID, UserLogin, ref status).Count;

            if (CountProfileByOrgStructureID >= CountProfileByPlanHeadCount && CountProfileByPlanHeadCount > 0)
            {
                result = true;
            }
            else
            {
                result = false;
            }
            return result;
        }

        public ActionResult GetOrgMoreInforContractByOrgID([DataSourceRequest] DataSourceRequest request, Guid? OrgStructureID)
        {
            if (OrgStructureID != null && OrgStructureID != Guid.Empty)
            {
                string status = string.Empty;
                var baseService = new BaseService();
                var result = baseService.GetData<Cat_OrgMoreInforContractEntity>(Common.DotNetToOracle(OrgStructureID.ToString()), ConstantSql.hrm_cat_sp_get_OrgMoreInforContractByOrgID, UserLogin, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        [HttpPost]
        // Son.Vo - Màn hình cập nhật hồ sơ ứng viên có nhập theo Rank detail hay nhập bằng tay.
        public ActionResult IsInputGeneralCandidateManual()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_INPUTGENERALCANDIDATEMANUAL);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - 20160924 - 0073541
        public ActionResult IsAutoCreateSalWhenQuitComeBack()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISAUTOCREATESALWHENQUITCOMEBACK);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - 20160711 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duỵet
        public ActionResult IsShowProfileSingByUser()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - 20160629 - 0069559 - Cho Nhập LCB + Lương BH Khi Sử Dụng Bậc Lương Chi Tiết
        public ActionResult IsInputBasicAndInsuranceSalary()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISINPUTBASICANDINSURANCESALARY);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult UpdateSettlementProfiles(List<Guid> ProfileIds, int Settlement, DateTime? DateSettlement)
        {
            Hre_ProfileServices Services = new Hre_ProfileServices();
            bool result = Services.UpdateSettlementProfiles(ProfileIds, Settlement, DateSettlement);
            if (result)
            {
                return Json(new { success = true, mess = ConstantDisplay.Hrm_Succeed.TranslateString() });
            }
            else
            {
                return Json(new { success = false, mess = ConstantDisplay.Hrm_Error.TranslateString() });
            }

        }

        // Son.Vo - kiểm tra thông tin nv khi click nút nhận việc
        [HttpPost]
        public string CheckDataActionHire(string lstProfileID)
        {
            string returnValue = null;
            string status = string.Empty;
            var profileID = Guid.Empty;
            var actionService = new ActionService(UserLogin);
            var profileServices = new Hre_ProfileServices();
            var lstIDs = lstProfileID.Split(',').Select(x => Guid.Parse(x)).ToList();
            var lstprofile = profileServices.GetLstProfileForCheckActionHire(lstIDs);
            var strvalidate = profileServices.StrValidateActionHire();

            if (!string.IsNullOrEmpty(strvalidate))
            {
                string[] valueField = strvalidate.Split(',');

                foreach (var profile in lstprofile)
                {
                    string profiletemp = null;
                    foreach (var value in valueField)
                    {
                        if (profiletemp != profile.CodeCandidate)
                        {
                            if (profile.GetPropertyValue(value.Trim()) == null)
                            {
                                if (profile.CodeCandidate != null)
                                {
                                    profiletemp = profile.CodeCandidate;
                                    returnValue += profile.CodeCandidate + ",";
                                }
                                else
                                {
                                    profiletemp = profile.ProfileName;
                                    returnValue += profile.ProfileName + ",";
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (var profile in lstprofile)
                {
                    if (profile.ProfileName == null || profile.DateHire == null || profile.IDNo == null || profile.Gender == null || profile.YearOfBirth == null
                        || profile.PAddress == null || profile.WorkPlaceID == null || profile.Cellphone == null || profile.OrgStructureID == null
                        || profile.ContractTypeID == null || profile.SalaryClassID == null)
                    {
                        if (profile.CodeCandidate != null)
                        {
                            returnValue += profile.CodeCandidate + ",";
                        }
                        else
                        {
                            returnValue += profile.ProfileName + ",";
                        }
                    }
                }
            }
            if (returnValue != null)
            {
                returnValue = returnValue.Substring(0, returnValue.Length - 1);
            }
            return returnValue;
        }

        //kiem tra la leader hay ko
        [System.Web.Mvc.HttpPost]
        public ActionResult CheckLeader(Guid LeaderID, Guid ProfileID)
        {
            var service = new Hre_ProfileServices();
            bool rs = false;
            rs = service.CheckLeader(LeaderID, ProfileID);
            return Json(rs, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetMultiProfileByParameter(string ProfileIDs)
        {
            string Status = "";
            var actionService = new ActionService(UserLogin);
            var para = new List<object>();
            ProfileIDs = string.Join(",", ProfileIDs.Split(',').Select(x => Common.DotNetToOracle(x.ToString())).ToList());
            para.Add(ProfileIDs);
            var rs = actionService.GetData<Hre_ProfileIdEntity>(para, ConstantSql.hrm_hr_sp_Profile_MultiByPara, ref Status).Select(x => new { x.ID, x.ProfileName }).ToList();
            return Json(rs, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetCandidateGeneralList([DataSourceRequest] DataSourceRequest request, Hre_CandidateGeneralSearchModel model)
        {
            return GetListDataAndReturn<Hre_CandidateGeneralModel, Hre_CandidateGeneralEntity, Hre_CandidateGeneralSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_CandidateGeneral);
        }

        [HttpPost]
        public ActionResult ValidateUpdateFileCandidate(Hre_ProfileTemp model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ProfileTemp>(LanguageCode, model, "Hre_ProfileTemp", ref message);
            if (!checkValidate)
            {
                model.ActionStatus = message;
            }
            else
            {
                model.ActionStatus = "Success";

            }
            return Json(model, JsonRequestBehavior.AllowGet);
            #endregion
        }

        [HttpPost]
        public ActionResult ValidateUpdateBasicSalary(Hre_ProfileTemp model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ProfileTemp>(LanguageCode, model, "Hre_ProfileTempBasicSalary", ref message);
            if (!checkValidate)
            {
                model.ActionStatus = message;
            }
            else
            {
                model.ActionStatus = "Success";

            }
            return Json(model, JsonRequestBehavior.AllowGet);
            #endregion
        }

        [HttpPost]
        public ActionResult ActionApplyCandidateGeneral(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                string message = NotificationType.Success.ToString();
                var actionService = new ActionService(UserLogin);
                var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
                string status = string.Empty;
                List<Guid> lstselectedIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByIDs(lstselectedIds);
                var profileServices = new Hre_ProfileServices();
                var contracttypeServices = new Cat_ContractTypeServices();
                var contractypeentity = new Cat_ContractTypeEntity();
                var salgradeServices = new Sal_GradeServices();
                var attgradeservive = new Att_GradeServices();

                foreach (var CandidateGeneral in lstCandidateGeneral)
                {
                    if (CandidateGeneral.ProfileID == null || CandidateGeneral.EnteringDate == null || CandidateGeneral.OrgStructureID == null || CandidateGeneral.RankRateID == null ||
                        CandidateGeneral.WorkPlaceID == null || CandidateGeneral.ContractTypeID == null || CandidateGeneral.GradePayrollID == null || CandidateGeneral.GradeAttendanceID == null)
                    {
                        message = ConstantDisplay.HRM_Message_DataInvalid.TranslateString();
                        continue;
                    }
                    #region Code Cũ
                    //var datecontract = DateTime.Now;
                    //if (CandidateGeneral.EnteringDate != null)
                    //{
                    //    datecontract = CandidateGeneral.EnteringDate.Value;
                    //}
                    //if (CandidateGeneral.RankRateID != Guid.Empty)
                    //{
                    //    rankEntity = service.GetByIdUseStore<Cat_SalaryRankEntity>(CandidateGeneral.RankRateID.Value,
                    //                        ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status);
                    //}
                    //if(CandidateGeneral.ContractTypeID != Guid.Empty)
                    //{
                    //    contractypeentity = service.GetByIdUseStore<Cat_ContractTypeEntity>(CandidateGeneral.ContractTypeID.Value, ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status);
                    //}

                    //var profileEntity = profileServices.GetData<Hre_ProfileEntity>(Common.DotNetToOracle(CandidateGeneral.ProfileID.ToString()),
                    //        ConstantSql.hrm_hr_sp_get_ProfileById, ref status).FirstOrDefault();

                    //if (contractypeentity != null && contractypeentity.ValueTime != null)
                    //{
                    //    if (contractypeentity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_MONTH.ToString())
                    //    {
                    //        datecontract = datecontract.AddMonths(int.Parse(contractypeentity.ValueTime.Value.ToString()));
                    //    }
                    //    else if (contractypeentity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                    //    {
                    //        datecontract = datecontract.AddYears(int.Parse(contractypeentity.ValueTime.Value.ToString()));
                    //    }
                    //}

                    //if(profileEntity != null)
                    //{
                    //    profileEntity.OrgStructureID = CandidateGeneral.OrgStructureID;
                    //    profileEntity.SalaryClassID = CandidateGeneral.SalaryClassID;
                    //    profileEntity.DateHire = CandidateGeneral.EnteringDate;
                    //    profileEntity.DateEndProbation = datecontract;
                    //    profileEntity.WorkPlaceID = CandidateGeneral.WorkPlaceID;
                    //}

                    // var workplaceServices = new Cat_WorkPlaceServices();
                    // Cat_WorkPlaceEntity workplace = null;
                    //if(CandidateGeneral.WorkPlaceID != Guid.Empty)
                    //{
                    //workplace = workplaceServices.GetData<Cat_WorkPlaceEntity>(Common.DotNetToOracle(CandidateGeneral.WorkPlaceID.ToString()), ConstantSql.hrm_cat_sp_get_WorkPlaceById, ref status).FirstOrDefault();
                    //}

                    //var WorkHistoryEntity = new Hre_WorkHistoryEntity();
                    //    WorkHistoryEntity.ProfileID = CandidateGeneral.ProfileID.Value;
                    //    WorkHistoryEntity.DateEffective = CandidateGeneral.EnteringDate != null ? CandidateGeneral.EnteringDate.Value ? DateTime.Now;
                    //    WorkHistoryEntity.SalaryClassID = CandidateGeneral.SalaryClassID;
                    //    WorkHistoryEntity.OrganizationStructureID = CandidateGeneral.OrgStructureID;
                    //    WorkHistoryEntity.WorkLocation = workplace != null ? workplace.WorkPlaceName : null;
                    //    workHistoryServices.Add(WorkHistoryEntity);
                    //} 
                    #endregion

                    var datecontract = DateTime.Now;
                    if (CandidateGeneral.ContractTypeID != Guid.Empty && CandidateGeneral.ContractTypeID != null)
                    {
                        contractypeentity = contracttypeServices.GetDataContractTypeByID(CandidateGeneral.ContractTypeID.Value);
                    }

                    if (contractypeentity != null && contractypeentity.ValueTime != null)
                    {
                        if (contractypeentity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_MONTH.ToString())
                        {
                            datecontract = datecontract.AddMonths(int.Parse(contractypeentity.ValueTime.Value.ToString()));
                        }
                        else if (contractypeentity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                        {
                            datecontract = datecontract.AddYears(int.Parse(contractypeentity.ValueTime.Value.ToString()));
                        }
                    }
                    profileServices.UpdateSalaryClassNameForProfile(null, CandidateGeneral.ProfileID.ToString(), datecontract, CandidateGeneral.EnteringDate.Value,
                        CandidateGeneral.OrgStructureID.Value, CandidateGeneral.RankRateID.Value, CandidateGeneral.WorkPlaceID.Value, CandidateGeneral.ContractTypeID.Value,
                        CandidateGeneral.BasicSalary.ToString(), UserLogin);
                    //  profileServices.AddDataForContract(CandidateGeneral.BasicSalary.ToString(), CandidateGeneral.ProfileID.ToString(), CandidateGeneral.ContractTypeID.Value, CandidateGeneral.EnteringDate.Value, CandidateGeneral.RankRateID.Value);
                    salgradeServices.AddDataForGrade(CandidateGeneral.ProfileID.ToString(), CandidateGeneral.GradePayrollID.Value, CandidateGeneral.EnteringDate.Value);
                    attgradeservive.AddDataForGrade(CandidateGeneral.ProfileID.ToString(), CandidateGeneral.GradeAttendanceID.Value, CandidateGeneral.EnteringDate.Value);
                }
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult UpdateStatusApprovedProfile(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            service.UpdateStatusApprovedProfile(selectedIds);
            return Json("true", JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetProfileKeepingSalary([DataSourceRequest] DataSourceRequest request, Hre_ProfileKeepingSalarySearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileKeepingSalarySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_KeepingSalary);
        }

        [HttpPost]
        public ActionResult ExportProfileKeepingSalaryList([DataSourceRequest] DataSourceRequest request, Hre_ProfileKeepingSalarySearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfileKeepingSalarySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_KeepingSalary);
        }

        [HttpPost]
        public ActionResult UpdateSalaryClassNameForProfile(string SalaryClassName, string ProfileIDs, DateTime DateEndProbation, DateTime DateHire, Guid OrgStructureID, Guid SalaryRankID, Guid WorkPlaceID, Guid ContractTypeID, string BasicSalary)
        {
            var service = new Hre_ProfileServices();
            service.UpdateSalaryClassNameForProfile(SalaryClassName, ProfileIDs, DateEndProbation, DateHire, OrgStructureID, SalaryRankID, WorkPlaceID, ContractTypeID, BasicSalary, UserLogin);
            return Json(null);
        }

        [HttpPost]
        public ActionResult UpdateDataForProfileWaiting(Hre_ProfileTemp model)
        {
            if (model.TempProfileIDs != null)
            {
                var _ProfileServices = new Hre_ProfileServices();
                var _SalaryRankServices = new Cat_SalaryRankServices();
                string message = string.Empty;
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var lstProfileIds = model.TempProfileIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                var lstProfiles = _ProfileServices.GetLstProfileEntityByLstProfileIDs(lstProfileIds);
                var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
                var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIds);
                Cat_SalaryClassEntity salaryClassEntity = null;
                if (model.SalaryRankID != null)
                {
                    var rankEntity = actionService.GetData<Cat_SalaryRankEntity>(Common.DotNetToOracle(model.SalaryRankID.ToString()), ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status).FirstOrDefault();
                    if (rankEntity != null && rankEntity.SalaryClassID != null)
                    {
                        salaryClassEntity = actionService.GetData<Cat_SalaryClassEntity>(Common.DotNetToOracle(rankEntity.SalaryClassID.ToString()), ConstantSql.hrm_cat_sp_get_SalaryClassById, ref status).FirstOrDefault();
                    }
                }
                var lstObjContractType = new List<object>();
                lstObjContractType.AddRange(new object[5]);
                lstObjContractType[3] = 1;
                lstObjContractType[4] = int.MaxValue - 1;
                var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(lstObjContractType, ConstantSql.hrm_cat_sp_get_ContractType, ref status).ToList();
                foreach (var item in lstProfiles)
                {
                    var candidateGeneralByProfile = lstCandidateGeneral.Where(s => s.ProfileID.Value == item.ID).FirstOrDefault();

                    var objContract = new List<object>();
                    var lstContractByProfileID = actionService.GetData<Hre_ContractEntity>(Common.DotNetToOracle(item.ID.ToString()), ConstantSql.hrm_hr_sp_get_ContractsByProfileId, ref status);
                    var listIdContract = string.Empty;
                    if (lstContractByProfileID != null)
                    {
                        listIdContract = string.Join(",", lstContractByProfileID.Select(d => d.ContractTypeID));
                    }
                    double Salary = 0;
                    if (!string.IsNullOrEmpty(model.BasicSalary))
                        Salary = double.Parse(model.BasicSalary);
                    if (candidateGeneralByProfile == null)
                    {
                        #region Add CandidateGeneral
                        var candidateGeneral = new Hre_CandidateGeneralEntity();
                        candidateGeneral.ProfileID = item.ID;
                        candidateGeneral.BasicSalary = Salary;
                        candidateGeneral.RankRateID = model.SalaryRankID;
                        if (salaryClassEntity != null)
                        {
                            candidateGeneral.SalaryClassID = salaryClassEntity.ID;
                        }
                        candidateGeneral.ContractTypeID = model.ContractTypeID;
                        candidateGeneral.EnteringDate = model.DateHire;
                        candidateGeneral.OrgStructureID = model.OrgStructureID;
                        candidateGeneral.GradeAttendanceID = model.GradeAttendanceID;
                        candidateGeneral.GradePayrollID = model.GradePayrollID;
                        candidateGeneral.WorkPlaceID = model.WorkPlaceID;
                        candidateGeneral.JobTitleID = model.JobTitleID;
                        candidateGeneral.PositionID = model.PositionID;
                        //Quyen.Quach 16/12/2017 0091025
                        candidateGeneral.AllowanceID1 = model.AllowanceID1;
                        candidateGeneral.AllowanceID2 = model.AllowanceID2;
                        candidateGeneral.AllowanceID3 = model.AllowanceID3;
                        candidateGeneral.AllowanceID4 = model.AllowanceID4;
                        candidateGeneral.AllowanceID5 = model.AllowanceID5;
                        candidateGeneral.AllowanceID6 = model.AllowanceID6;
                        candidateGeneral.AllowanceID7 = model.AllowanceID7;
                        candidateGeneral.AllowanceID8 = model.AllowanceID8;
                        candidateGeneral.AllowanceID9 = model.AllowanceID9;
                        candidateGeneral.AllowanceID10 = model.AllowanceID10;
                        candidateGeneral.Allowance1 = model.Allowance1;
                        candidateGeneral.Allowance2 = model.Allowance2;
                        candidateGeneral.Allowance3 = model.Allowance3;
                        candidateGeneral.Allowance4 = model.Allowance4;
                        candidateGeneral.Allowance5 = model.Allowance5;
                        candidateGeneral.Allowance6 = model.Allowance6;
                        candidateGeneral.Allowance7 = model.Allowance7;
                        candidateGeneral.Allowance8 = model.Allowance8;
                        candidateGeneral.Allowance9 = model.Allowance9;
                        candidateGeneral.Allowance10 = model.Allowance10;
                        candidateGeneral.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        candidateGeneral.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        candidateGeneral.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        candidateGeneral.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        candidateGeneral.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        candidateGeneral.CurrencyID = model.CurrencyID;
                        candidateGeneral.ProbationSalary = model.ProbationSalary;
                        candidateGeneral.E_ProbationSalary = model.ProbationSalary != null ? model.ProbationSalary.EncryptValue() : null;
                        candidateGeneral.PITFormulaID = model.PITFormulaID;
                        candidateGeneral.DayOfAnnualLeave = model.DayOfAnnualLeave;

                        //chỉ cập nhật mã nhân viên khi chỉ chọn 1 nhân viên
                        if (lstProfileIds.Count == 1)
                        {
                            candidateGeneral.CodeEmp = model.CodeEmp;
                        }
                        candidateGeneral.AbilityTitleID = model.AbilityTitleID;
                        candidateGeneral.RateProbation = model.RateProbation;
                        candidateGeneral.DateEndProbation = model.DateEndProbation;
                        candidateGeneral.ProfileSingID = model.ProfileSingID;
                        candidateGeneral.PayrollGroupID = model.PayrollGroupID; // Son.Vo - 20160621 - 0068952 Luu them PayrollGroupID
                        candidateGeneral.InsuranceAmount = model.InsuranceAmount; // Son.Vo - 20160808 - 0071887: Chờ nhận việc: Thêm field lương BHXH vào bảng Hre_CandidateGeneral
                        //Son.Vo - 20161122 - 0075904
                        candidateGeneral.CodeAttendance = model.CodeAttendance;
                        candidateGeneral.DateApplyAttendanceCode = model.DateApplyAttendanceCode;
                        candidateGeneral.ProbationDay = model.ProbationDay;
                        candidateGeneral.RegionID = model.RegionID;
                        candidateGeneral.EmployeeGroupID = model.EmployeeGroupID;

                        //Nguyen.Le = 01/12/2017 - 0090597
                        candidateGeneral.SupervisorID = model.SupervisorID;
                        candidateGeneral.VehicleID = model.VehicleID;
                        candidateGeneral.Note = model.Note;

                        //Son.Vo - 20180116 - 0091919
                        candidateGeneral.TotalSalary = model.TotalSalary;
                        candidateGeneral.E_TotalSalary = model.TotalSalary != null ? model.TotalSalary.EncryptValue() : null;

                        message = _CandidateGeneralServices.Add(candidateGeneral);
                        #endregion

                        #region Edit Profile
                        //Edit Profile
                        item.OrgStructureID = model.OrgStructureID;
                        if (salaryClassEntity != null)
                        {
                            item.SalaryClassID = salaryClassEntity.ID;
                        }
                        item.DateOfEffect = model.DateHire;
                        item.DateHire = model.DateHire;

                        item.WorkPlaceID = model.WorkPlaceID;
                        item.ContractTypeID = model.ContractTypeID;
                        item.JobTitleID = model.JobTitleID;
                        item.PositionID = model.PositionID;
                        //chỉ cập nhật mã nhân viên khi chỉ chọn 1 nhân viên
                        if (lstProfileIds.Count == 1)
                        {
                            item.CodeEmp = model.CodeEmp;
                        }
                        item.StatusSyn = ProfileStatusSyn.E_WAITING.ToString();
                        item.PayrollGroupID = model.PayrollGroupID;// Son.Vo - 20160621 - 0068952 Luu them PayrollGroupID
                        //Son.Vo - 20160802 - 0071738
                        if (model.DateEndProbation != null)
                        {
                            item.DateEndProbation = model.DateEndProbation;
                        }
                        item.RegionID = model.RegionID;
                        item.EmployeeGroupID = model.EmployeeGroupID;
                        item.DateApplyAttendanceCode = model.DateApplyAttendanceCode;
                        message = _ProfileServices.Edit(item);
                        #endregion
                    }
                    else
                    {
                        #region Edit CandidateGeneral
                        candidateGeneralByProfile.ProfileID = item.ID;
                        candidateGeneralByProfile.BasicSalary = Salary;
                        candidateGeneralByProfile.RankRateID = model.SalaryRankID;
                        if (salaryClassEntity != null)
                        {
                            candidateGeneralByProfile.SalaryClassID = salaryClassEntity.ID;
                        }
                        candidateGeneralByProfile.ContractTypeID = model.ContractTypeID;
                        candidateGeneralByProfile.EnteringDate = model.DateHire;
                        candidateGeneralByProfile.OrgStructureID = model.OrgStructureID;
                        candidateGeneralByProfile.GradeAttendanceID = model.GradeAttendanceID;
                        candidateGeneralByProfile.GradePayrollID = model.GradePayrollID;
                        candidateGeneralByProfile.WorkPlaceID = model.WorkPlaceID;
                        candidateGeneralByProfile.JobTitleID = model.JobTitleID;
                        candidateGeneralByProfile.PositionID = model.PositionID;
                        candidateGeneralByProfile.AllowanceID1 = model.AllowanceID1;
                        candidateGeneralByProfile.AllowanceID2 = model.AllowanceID2;
                        candidateGeneralByProfile.AllowanceID3 = model.AllowanceID3;
                        candidateGeneralByProfile.AllowanceID4 = model.AllowanceID4;
                        candidateGeneralByProfile.AllowanceID5 = model.AllowanceID5;
                        candidateGeneralByProfile.AllowanceID6 = model.AllowanceID6;
                        candidateGeneralByProfile.AllowanceID7 = model.AllowanceID7;
                        candidateGeneralByProfile.AllowanceID8 = model.AllowanceID8;
                        candidateGeneralByProfile.AllowanceID9 = model.AllowanceID9;
                        candidateGeneralByProfile.AllowanceID10 = model.AllowanceID10;
                        candidateGeneralByProfile.Allowance1 = model.Allowance1;
                        candidateGeneralByProfile.Allowance2 = model.Allowance2;
                        candidateGeneralByProfile.Allowance3 = model.Allowance3;
                        candidateGeneralByProfile.Allowance4 = model.Allowance4;
                        candidateGeneralByProfile.Allowance5 = model.Allowance5;
                        //Quyen.Quach 16/12/2017 0091025
                        candidateGeneralByProfile.Allowance6 = model.Allowance6;
                        candidateGeneralByProfile.Allowance7 = model.Allowance7;
                        candidateGeneralByProfile.Allowance8 = model.Allowance8;
                        candidateGeneralByProfile.Allowance9 = model.Allowance9;
                        candidateGeneralByProfile.Allowance10 = model.Allowance10;
                        candidateGeneralByProfile.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        candidateGeneralByProfile.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        candidateGeneralByProfile.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        candidateGeneralByProfile.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        candidateGeneralByProfile.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        candidateGeneralByProfile.CurrencyID = model.CurrencyID;
                        candidateGeneralByProfile.ProbationSalary = model.ProbationSalary;
                        candidateGeneralByProfile.E_ProbationSalary = model.ProbationSalary != null ? model.ProbationSalary.EncryptValue() : null;
                        candidateGeneralByProfile.PITFormulaID = model.PITFormulaID;
                        candidateGeneralByProfile.DayOfAnnualLeave = model.DayOfAnnualLeave;
                        //chỉ cập nhật mã nhân viên khi chỉ chọn 1 nhân viên
                        if (lstProfileIds.Count == 1)
                        {
                            candidateGeneralByProfile.CodeEmp = model.CodeEmp;
                        }
                        candidateGeneralByProfile.RateProbation = model.RateProbation;
                        candidateGeneralByProfile.DateEndProbation = model.DateEndProbation;
                        candidateGeneralByProfile.ProfileSingID = model.ProfileSingID;
                        candidateGeneralByProfile.AbilityTitleID = model.AbilityTitleID;
                        candidateGeneralByProfile.PayrollGroupID = model.PayrollGroupID;// Son.Vo - 20160621 - 0068952 Luu them PayrollGroupID
                        candidateGeneralByProfile.InsuranceAmount = model.InsuranceAmount; // Son.Vo - 20160808 - 0071887: Chờ nhận việc: Thêm field lương BHXH vào bảng Hre_CandidateGeneral
                        //Son.Vo - 20161122 - 0075904
                        candidateGeneralByProfile.CodeAttendance = model.CodeAttendance;
                        candidateGeneralByProfile.DateApplyAttendanceCode = model.DateApplyAttendanceCode;
                        candidateGeneralByProfile.ProbationDay = model.ProbationDay;
                        candidateGeneralByProfile.RegionID = model.RegionID;
                        candidateGeneralByProfile.EmployeeGroupID = model.EmployeeGroupID;

                        //Nguyen.Le = 01/12/2017 - 0090597
                        candidateGeneralByProfile.SupervisorID = model.SupervisorID;
                        candidateGeneralByProfile.VehicleID = model.VehicleID;
                        candidateGeneralByProfile.Note = model.Note;

                        //Son.Vo - 20180116 - 0091919
                        candidateGeneralByProfile.TotalSalary = model.TotalSalary;
                        candidateGeneralByProfile.E_TotalSalary = model.TotalSalary != null ? model.TotalSalary.EncryptValue() : null;

                        message = _CandidateGeneralServices.Edit(candidateGeneralByProfile);
                        #endregion

                        #region Edit Profile
                        //Edit Profile
                        item.OrgStructureID = model.OrgStructureID;
                        if (salaryClassEntity != null)
                        {
                            item.SalaryClassID = salaryClassEntity.ID;
                        }
                        item.DateOfEffect = model.DateHire;
                        item.DateHire = model.DateHire;
                        item.WorkPlaceID = model.WorkPlaceID;
                        item.ContractTypeID = model.ContractTypeID;
                        item.JobTitleID = model.JobTitleID;
                        item.PositionID = model.PositionID;
                        item.StatusSyn = ProfileStatusSyn.E_WAITING.ToString();
                        //chỉ cập nhật mã nhân viên khi chỉ chọn 1 nhân viên
                        if (lstProfileIds.Count == 1)
                        {
                            item.CodeEmp = model.CodeEmp;
                        }
                        item.PayrollGroupID = model.PayrollGroupID;// Son.Vo - 20160621 - 0068952 Luu them PayrollGroupID
                        //Son.Vo - 20160802 - 0071738
                        if (model.DateEndProbation != null)
                        {
                            item.DateEndProbation = model.DateEndProbation;
                        }
                        item.RegionID = model.RegionID;
                        item.EmployeeGroupID = model.EmployeeGroupID;
                        item.DateApplyAttendanceCode = model.DateApplyAttendanceCode;
                        message = _ProfileServices.Edit(item);
                        #endregion
                    }
                }
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public string CheckDuplicateCodeEmp(Guid? ID, string codeEmp)
        {
            // Kiểm tra có check trùng dữ liệu hay không
            var profileServices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATECODEEMP = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATECODEEMP);
            if (_CHECKDUPLICATECODEEMP == false || codeEmp == null)
            {
                return null;
            }
            if (ID == null)
            {
                ID = Guid.Empty;
            }
            string profile = null;
            var profilename = new Hre_ProfileEntity();
            if (codeEmp != null)
            {
                profilename = profileServices.CheckDuplicateCodeEmp(ID, codeEmp);
                if (profilename != null && profilename.ProfileName != null)
                {
                    profile = profilename.ProfileName;
                }
                return profile;
            }
            else
            {
                return null;
            }

        }

        public string CheckDuplicateCodeAtt(Guid? ID, string codeAtt)
        {
            // Kiểm tra có check trùng dữ liệu hay không
            var profileServices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATECODEATT = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATECODEATT);
            if (_CHECKDUPLICATECODEATT == false || codeAtt == null)
            {
                return null;
            }
            if (ID == null)
            {
                ID = Guid.Empty;
            }
            string profile = null;
            var profilename = new Hre_ProfileEntity();
            if (codeAtt != null)
            {
                profilename = profileServices.CheckDuplicateCodeAtt(ID, codeAtt);
            }

            if (profilename != null)
            {
                profile = profilename.ProfileName;
            }

            return profile;
        }

        public string CheckDuplicateRelatives(Guid? ID, string name)
        {
            // Kiểm tra có check trùng dữ liệu hay không
            var hre_profileservices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATERELATIVES = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATERELATIVES);
            if (_CHECKDUPLICATERELATIVES == false || name == null)
            {
                return null;
            }

            if (ID == null)
            {
                ID = Guid.Empty;
            }
            string result = null;
            bool isduplicate = false;
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objsRelative = new List<object>();
            objsRelative.Add(ID);
            objsRelative.Add(name);
            var lstRelativeName = actionService.GetData<Hre_RelativesEntity>(objsRelative, ConstantSql.hrm_hr_sp_get_Relativebyname, ref status).Select(s => new { s.RelativeName }).ToList();
            if (lstRelativeName != null && lstRelativeName.Count > 0)
            {
                foreach (var item in lstRelativeName)
                {
                    result += item.RelativeName + ", ";
                }
                result = result.Substring(0, result.Length - 2);
            }
            var objsProfile = new List<object>();
            objsProfile.Add(name);
            var lstProfileName = actionService.GetData<Hre_ProfileEntity>(objsProfile, ConstantSql.hrm_hr_sp_get_profilebyname, ref status).Select(s => new { s.CodeEmp, s.ProfileName }).ToList();

            if (lstProfileName != null && lstProfileName.Count > 0)
            {
                foreach (var item in lstProfileName)
                {
                    if (item.CodeEmp == null)
                    {
                        result += item.ProfileName + ", ";
                    }
                    result += item.ProfileName + " - " + item.CodeEmp + ", ";
                }
                result = result.Substring(0, result.Length - 2);
            }

            return result;
        }

        public string CheckDuplicateProfileName(Guid? ID, string profileName)
        {
            // Kiểm tra có check trùng dữ liệu hay không
            var profileServices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATEPROFILENAME = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATEPROFILENAME);
            if (_CHECKDUPLICATEPROFILENAME == false || profileName == null)
            {
                return null;
            }

            if (ID == null)
            {
                ID = Guid.Empty;
            }
            string profile = null;
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(ID);
            objs.Add(profileName);
            objs.Add(1);
            objs.Add(10000000);
            var profilename = new List<Hre_ProfileEntity>();
            if (profileName != null)
            {
                profilename = profileServices.CheckDuplicateProfileName(ID, profileName);
            }

            //Quyen.Quach - 20170714 - 0085049: Điều chỉnh kiểm tra trùng tên NV theo cấu hình “Kiểm tra trùng tên NV”	
            //var relativeNameByprofilename = actionService.GetData<Hre_RelativesEntity>(objs, ConstantSql.hrm_hr_sp_get_RelativeByProfileName, ref status).Select(s => new { s.CodeEmp, s.RelativeName }).ToList();
            //if (relativeNameByprofilename != null && relativeNameByprofilename.Count >= 1)
            //{
            //    string codeemp = "";
            //    foreach (var item in relativeNameByprofilename)
            //    {
            //        if (item.CodeEmp != codeemp)
            //            profile += item.RelativeName + "(" + item.CodeEmp + "), ";
            //        if (item.CodeEmp != null)
            //            codeemp = item.CodeEmp.ToString();
            //    }
            //}
            if (profilename != null && profilename.Count >= 1)
            {
                foreach (var item in profilename)
                {
                    profile += item.ProfileName + " - " + item.CodeEmp + ", ";
                }
            }

            if (profile != null)
                profile = profile.Substring(0, profile.Length - 2);
            return profile;
        }

        public string CheckDuplicateProfileNameAndBirthDay(Guid? ID, string profileName, string day, string month, string year, DateTime? datehire)
        {
            // Kiểm tra có check trùng dữ liệu hay không
            var _profileservices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATEPROFILENAMEANDBIRTHDAY = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATEPROFILENAMEANDBIRTHDAY);
            int? yearofBirth = null;
            if (!string.IsNullOrEmpty(year))
            {
                try
                {
                    yearofBirth = int.Parse(year);
                }
                catch
                {
                    return "InvalidYearOfBirth";
                }
            }
            int? monthofBirth = null;
            if (!string.IsNullOrEmpty(month))
            {
                monthofBirth = int.Parse(month);
            }
            int? dayofBirth = null;
            if (!string.IsNullOrEmpty(day))
            {
                dayofBirth = int.Parse(day);
            }
            if (_CHECKDUPLICATEPROFILENAMEANDBIRTHDAY == false)
            {
                //Son.Vo - 20170516 - 0083626: Điều chỉnh cảnh báo độ tuổi lao động	
                var _ALERTEMPUNDERAGE = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_ALERTEMPUNDERAGE);
                if (_ALERTEMPUNDERAGE != null && datehire != null)
                {
                    string messageAlertEmpUnderAge = _profileservices.AlertEmpUnderAge(yearofBirth, monthofBirth, dayofBirth, datehire.Value, false, _ALERTEMPUNDERAGE);
                    if (!string.IsNullOrEmpty(messageAlertEmpUnderAge))
                    {
                        return messageAlertEmpUnderAge;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
            }
            else
            {
                if (ID == null)
                {
                    ID = Guid.Empty;
                }
                if (!string.IsNullOrEmpty(profileName))
                {
                    string message = _profileservices.CheckduplicateByProfileNameAndBirthDay(ID.Value, yearofBirth, monthofBirth, dayofBirth, profileName);
                    if (!string.IsNullOrEmpty(message))
                    {
                        return message;
                    }
                    else
                    {
                        var _ALERTEMPUNDERAGE = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_ALERTEMPUNDERAGE);
                        if (_ALERTEMPUNDERAGE != null && datehire != null)
                        {
                            string messageAlertEmpUnderAge = _profileservices.AlertEmpUnderAge(yearofBirth, monthofBirth, dayofBirth, datehire.Value, false, _ALERTEMPUNDERAGE);
                            if (!string.IsNullOrEmpty(messageAlertEmpUnderAge))
                            {
                                return messageAlertEmpUnderAge;
                            }
                            else
                            {
                                return null;
                            }
                        }
                        else
                        {
                            return null;
                        }
                    }
                }
                else
                {
                    var _ALERTEMPUNDERAGE = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_ALERTEMPUNDERAGE);
                    if (_ALERTEMPUNDERAGE != null && datehire != null)
                    {
                        string messageAlertEmpUnderAge = _profileservices.AlertEmpUnderAge(yearofBirth, monthofBirth, dayofBirth, datehire.Value, false, _ALERTEMPUNDERAGE);
                        if (!string.IsNullOrEmpty(messageAlertEmpUnderAge))
                        {
                            return messageAlertEmpUnderAge;
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        return null;
                    }
                }
            }
        }

        [HttpPost]
        public ActionResult CheckDuplicateIDNo(Guid? ID, string idNo, DateTime? datehire)
        {
            var profileValidate = new Hre_ProfileDuplicateEntity();
            #region Son.Vo - 20160311 - Validate theo task 0064621
            if (!string.IsNullOrEmpty(idNo))
            {
                if (idNo.Trim().Length != 9 && idNo.Trim().Length != 12)
                {
                    profileValidate.ActionStatus = ConstantDisplay.HRM_HR_Profile_IDNoMust9or12;
                    return Json(profileValidate, JsonRequestBehavior.AllowGet);
                }
            }
            #endregion

            // Kiểm tra có check trùng dữ liệu hay không
            var profileServices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATEIDNO = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATEIDNO);
            bool _ISCHECKDUPLICATEIDCARD = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISCHECKDUPLICATEIDCARD);
            if (_CHECKDUPLICATEIDNO == false || idNo == null)
            {
                return null;
            }

            if (ID == null)
            {
                ID = Guid.Empty;
            }
            bool _BLOCKDUPLICATEIDNO = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_BLOCKDUPLICATEIDNO);
            var profileByIdNo = new Hre_ProfileDuplicateEntity();
            if (idNo != null)
            {
                profileByIdNo = profileServices.CheckDuplicateIDNo(ID, idNo, datehire, _ISCHECKDUPLICATEIDCARD);
            }

            if (profileByIdNo != null)
            {
                if (profileByIdNo.DateOfBirth != null)
                {
                    profileValidate.DateOfBirthFormat = profileByIdNo.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (_ISCHECKDUPLICATEIDCARD == true && profileByIdNo.IDCard != null)
                {
                    profileValidate.IDCard = profileByIdNo.IDCard;
                }
                if (profileByIdNo != null && profileByIdNo.IsBlackList == true)
                {
                    profileValidate.ActionStatus = "Black";
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.IDNo = profileByIdNo.IDNo;
                }
                if (profileByIdNo != null && (profileByIdNo.IsBlackList == null || profileByIdNo.IsBlackList == false))
                {

                    profileValidate.ActionStatus = profileByIdNo.ProfileName;
                    //Nguyen.Le - 20170818 - 0084828
                    profileValidate.DateQuit = profileByIdNo.DateQuit;
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.DateOfBirth = profileByIdNo.DateOfBirth;
                    profileValidate.IDNo = profileByIdNo.IDNo;
                }
                //Son.Vo - 20161230 - 0077440
                if (profileByIdNo != null && profileByIdNo.StatusSyn == ProfileStatusSyn.E_STOP.ToString() && profileByIdNo.DateQuit < datehire)
                {
                    profileValidate.ActionStatus = profileByIdNo.ProfileName;
                    profileValidate.DateQuit = profileByIdNo.DateQuit;
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.DateOfBirth = profileByIdNo.DateOfBirth;
                    profileValidate.IDNo = profileByIdNo.IDNo;
                }
                if (_BLOCKDUPLICATEIDNO == true && profileByIdNo != null)
                {
                    profileValidate.IsBlockIDNo = true;
                }
            }

            return Json(profileValidate, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CheckDuplicateIDCard(Guid? ID, string IDCard, DateTime? datehire)
        {
            var profileValidate = new Hre_ProfileDuplicateEntity();
            // Kiểm tra có check trùng dữ liệu hay không
            var profileServices = new Hre_ProfileServices();
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _CHECKDUPLICATEIDNO = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_CHECKDUPLICATEIDNO);
            bool _ISCHECKDUPLICATEIDCARD = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISCHECKDUPLICATEIDCARD);
            if (_ISCHECKDUPLICATEIDCARD == false || IDCard == null)
            {
                return null;
            }

            if (ID == null)
            {
                ID = Guid.Empty;
            }
            bool _ISBLOCKDUPLICATEIDCARD = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISBLOCKDUPLICATEIDCARD);
            var profileByIdNo = new Hre_ProfileDuplicateEntity();
            if (IDCard != null)
            {
                profileByIdNo = profileServices.CheckDuplicateIDCard(ID, IDCard, datehire, _ISCHECKDUPLICATEIDCARD);
            }

            if (profileByIdNo != null)
            {
                if (profileByIdNo.DateOfBirth != null)
                {
                    profileValidate.DateOfBirthFormat = profileByIdNo.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (_CHECKDUPLICATEIDNO == true && profileByIdNo.IDNo != null)
                {
                    profileValidate.IDNo = profileByIdNo.IDNo;
                }
                if (profileByIdNo != null && profileByIdNo.IsBlackList == true)
                {
                    profileValidate.ActionStatus = "Black";
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.IDCard = profileByIdNo.IDCard;
                }
                if (profileByIdNo != null && (profileByIdNo.IsBlackList == null || profileByIdNo.IsBlackList == false))
                {
                    profileValidate.ActionStatus = profileByIdNo.ProfileName;
                    //Nguyen.Le - 20170818 - 0084828
                    profileValidate.DateQuit = profileByIdNo.DateQuit;
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.DateOfBirth = profileByIdNo.DateOfBirth;
                    profileValidate.IDCard = profileByIdNo.IDCard;
                }
                //Son.Vo - 20161230 - 0077440
                if (profileByIdNo != null && profileByIdNo.StatusSyn == ProfileStatusSyn.E_STOP.ToString() && profileByIdNo.DateQuit < datehire)
                {
                    profileValidate.ActionStatus = profileByIdNo.ProfileName;
                    profileValidate.DateQuit = profileByIdNo.DateQuit;
                    profileValidate.ProfileName = profileByIdNo.ProfileName;
                    profileValidate.CodeEmp = profileByIdNo.CodeEmp;
                    profileValidate.OrgStructureName = profileByIdNo.OrgStructureName;
                    profileValidate.DateOfBirth = profileByIdNo.DateOfBirth;
                    profileValidate.IDCard = profileByIdNo.IDCard;
                }
                if (_ISBLOCKDUPLICATEIDCARD == true)
                {
                    profileValidate.IsBlockIDCard = true;
                }
            }

            return Json(profileValidate, JsonRequestBehavior.AllowGet);
        }

        //[HttpPost]
        /// <summary>
        /// Cập nhật Status và Reasondeny khi chọn nhiều nhân viên trên lưới
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult UpdateReasonDenny([Bind]Hre_ProfileModel model)
        {
            var list = new List<Hre_ProfileEntity>();
            if (!string.IsNullOrEmpty(model.listId))
            {
                List<Guid> lisIDs = model.listId.Split(',').Select(x => Guid.Parse(x)).ToList();
                var ProfileService = new Hre_ProfileServices();
                var Sys_Services = new Sys_AttOvertimePermitConfigServices();
                bool _IsAllowInputResonDeny = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISALLOWINPUTRESONDENY);
                if (_IsAllowInputResonDeny == true)
                {
                    list = ProfileService.CreateReasonDeny(lisIDs, model.txtReasonDeny);
                }
                else
                {
                    list = ProfileService.CreateReasonDeny(lisIDs, model.ReasonDeny);
                }
            }
            return Json(list);
        }
        /// <summary>
        /// Cập nhật phòng ban cho nhân viên
        /// </summary>
        /// <param name="SalaryClassName"></param>
        /// <param name="ProfileIDs"></param>
        /// <param name="DateEndProbation"></param>
        /// <param name="DateHire"></param>
        /// <returns></returns>
        public ActionResult UpdateOrgProfile([Bind]Hre_ProfileModel model)
        {
            string message = null;
            if (!string.IsNullOrEmpty(model.listId) && model.OrgStructureID != null)
            {
                List<Guid> lisIDs = model.listId.Split(',').Select(x => Guid.Parse(x)).ToList();
                var profileService = new Hre_ProfileServices();
                message = profileService.updateOrgProfile(lisIDs, model.OrgStructureID.Value);
                return Json(message);
            }
            else
            {
                return Json(message);
            }
        }

        /// <summary>
        /// [Hien.Nguyen] Hàm lấy mã chuỗi phòng ban cha
        /// </summary>
        /// <param name="ListOrg">List Phòng Ban</param>
        /// <param name="CurrentID">ID Phòng ban hiện tại</param>
        /// <returns></returns>
        public string GetCodeOrgStructure(List<Cat_OrgStructureEntity> ListOrg, Guid CurrentID)
        {

            string result = string.Empty;
            while (true)
            {
                var model = ListOrg.Single(m => m.ID == CurrentID);
                result = result.Insert(0, model.Code + "/");
                CurrentID = (Guid)model.ParentID;

                if (model.ParentID == null)
                {
                    return result;
                }
            }
        }

        /// <summary>
        /// [Hien.Nguyen] Hàm lấy mã chuỗi phòng ban cha
        /// </summary>
        /// <param name="CurrentID">ID Phòng ban hiện tại</param>
        /// <returns></returns>
        public string GetCodeOrgStructure(Guid CurrentID)
        {
            if (CurrentID == Guid.Empty)
            {
                return "";
            }
            string result = string.Empty;
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var _OrgStructureServices = new Cat_OrgStructureServices();
            List<Cat_OrgStructureEntity> ListOrg = new List<Cat_OrgStructureEntity>();
            ListOrg = _OrgStructureServices.GetLstOrg();

            while (true)
            {
                var model = ListOrg.Where(m => m.ID == CurrentID).FirstOrDefault();
                if (model == null)
                {
                    return "";
                }
                result = result.Insert(0, model.Code + "/");
                if (model.ParentID == null)
                {
                    return result.Substring(0, result.Length - 1);
                }
                else
                {
                    CurrentID = (Guid)model.ParentID;
                }
            }
        }

        /// <summary>
        /// [Hien.Nguyen] Hàm lấy mã chuỗi phòng ban cha
        /// </summary>
        /// <param name="CurrentID">ID Phòng ban hiện tại</param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetCodeOrgStructureForID(Guid id)
        {
            return Json(GetCodeOrgStructure(id));
        }

        [HttpPost]
        //Son.Vo - 20161028 - 0074583
        public ActionResult GetNameOrgStructureForID(Guid id)
        {
            if (id == Guid.Empty)
            {
                return Json("");
            }
            string result = string.Empty;
            var _OrgStructureServices = new Cat_OrgStructureServices();
            var ListOrg = new List<Cat_OrgStructureEntity>();
            ListOrg = _OrgStructureServices.GetLstOrg();

            while (true)
            {
                var model = ListOrg.Where(m => m.ID == id).FirstOrDefault();
                if (model == null)
                {
                    return Json("");
                }
                result = result.Insert(0, model.OrgStructureName + "/");
                if (model.ParentID == null)
                {
                    string path = result.Substring(0, result.Length - 1);
                    return Json(path);
                }
                else
                {
                    id = (Guid)model.ParentID;
                }
            }
        }

        public JsonResult GetProfileOrd(string text)
        {
            if (text == null || text == " ")
                text = string.Empty;
            var actionService = new ActionService(UserLogin);
            string status = string.Empty;
            var listEntity = actionService.GetData<Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Profile_multi, ref status);
            if (listEntity != null)
            {
                List<Hre_ProfileMultiModel> listModel = listEntity.Translate<Hre_ProfileMultiModel>();
                listModel = listModel.OrderBy(s => s.ProfileName).ToList();
                return Json(listModel, JsonRequestBehavior.AllowGet);
            }
            return Json(status, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 20161026 - 0074546
        public JsonResult GetMultiProfileActive(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiModel>(text, ConstantSql.hrm_hr_sp_get_ProfileActive_multi);
        }

        //Son.Vo - 20170706 - 84988
        public JsonResult GetMultiProfileByConfig(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiModel>(text, ConstantSql.hrm_hr_sp_get_ProfileByConfig_multi);
        }

        public JsonResult GetMultiProfile(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiModel>(text, ConstantSql.hrm_hr_sp_get_Profile_multi);
        }

        public JsonResult GetMultiDelegateCompany(string text)
        {
            return GetDataForControl<Cat_DelegateCompanyMultiModel, Cat_DelegateCompanyMultiModel>(text, ConstantSql.hrm_cat_sp_get_DelegateCompany_multi);
        }


        //Son.Vo - 20160922 - 0073558
        public JsonResult GetMultiProfileNoPermission(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Profile_multiNoPermisstion);
        }

        //Son.Vo - 20160830 - 0072730
        public JsonResult GetMultiProfileRetirement(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileRetirement_multi);
        }

        //Son.Vo - 20160818 - 0072445
        public JsonResult GetMultiProfileWorkRate(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Profile_WorkRate_Multi);
        }

        //Son.Vo - 20160307 - 0064477
        public JsonResult GetMultiProfileRoot(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileRoot_multi);
        }

        public JsonResult GetMultiProfileForPur(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_pur_sp_get_Profile_Multi);
        }

        public JsonResult GetMultiProfileForRec(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Profile_multiV4);
        }
        public JsonResult GetMultiArchivesTable(string text)
        {
            return GetDataForControl<Hre_ArchivesTableModel, Hre_ArchivesTableEntity>(text, ConstantSql.hrm_hr_sp_get_Hre_ArchivesTable_multi);
        }

        public JsonResult GetMultiProfileByOrderNumber(string text, string orderNumber)
        {
            if (string.IsNullOrEmpty(text))
                text = string.Empty;
            //var service = new BaseService();
            //string status = string.Empty;
            //var listEntity = service.GetData<Hre_ProfileMultiByOrgModel>(text, ConstantSql.hrm_hr_sp_get_Profile_multi, UserLogin, ref status);

            Hre_ProfileServices services = new Hre_ProfileServices();
            //var listEntity = services.GetListProfileByOrg(text, orderNumber, UserID);
            var listEntity = services.GetListProfileMultiByOrg(text, orderNumber, UserID);

            //if (!string.IsNullOrEmpty(orderNumber))
            //{
            //    List<string> ListOrderNumber = orderNumber.Split(',').ToList();
            //    listEntity = listEntity.Where(m => m.OrderNumber.HasValue && ListOrderNumber.Contains(m.OrderNumber.ToString())).ToList();
            //}

            return Json(listEntity, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetMultiProfileQuit(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileQuit_multi);
        }

        [HttpPost]
        public JsonResult GetMultiProfileOrQuit()
        {
            string isProfileQuit = "false";
            if (string.IsNullOrEmpty(isProfileQuit) || isProfileQuit == "false")
            {
                return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(null, ConstantSql.hrm_hr_sp_get_Profile_multi);
            }
            else
            {
                return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(null, ConstantSql.hrm_hr_sp_get_ProfileQuit_multi);
            }
        }

        public JsonResult GetProfileByCodeEmps(string codeemps)
        {
            if (codeemps != "")
                codeemps = codeemps.Replace(" ", "");
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var result = actionService.GetData<Hre_ProfileMultiEntity>(codeemps, ConstantSql.hrm_hr_sp_get_ProfileByCodeEmps, ref status);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetMultiProfileSuspense(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileSuspense_multi);
        }

        public ActionResult GetProfileNameByProfileID(List<Guid> profileIds)
        {
            string status = string.Empty;
            var result = new List<Hre_ProfileMultiModel>();
            var actionService = new ActionService(UserLogin);
            if (profileIds != null)
            {
                result.AddRange(actionService.GetData<Hre_ProfileMultiModel>(Common.DotNetToOracle(string.Join(",", profileIds)), ConstantSql.hrm_hr_sp_get_ProfileByIds, ref status));
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetProfileByStrProfileID(string profileIds)
        {
            string status = string.Empty;
            var result = new List<Hre_ProfileMultiModel>();
            var profileServices = new Hre_ProfileServices();
            if (!string.IsNullOrEmpty(profileIds))
            {
                var lstProfileIds = profileIds.Split(',').Where(x => !string.IsNullOrEmpty(x)).Select(x => Guid.Parse(x)).ToList();
                result = profileServices.GetProfileByLstIDs(lstProfileIds).Translate<Hre_ProfileMultiModel>();
            }
            return Json(result, JsonRequestBehavior.AllowGet);

        }

        public ActionResult GetLstProfileByProfileID(string profileIds)
        {
            string status = string.Empty;
            var result = new List<Hre_ProfileMultiModel>();
            var profileServices = new Hre_ProfileServices();
            if (!string.IsNullOrEmpty(profileIds))
            {
                List<Guid> lstProfileIds = profileIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                result = profileServices.GetProfileByLstIDs(lstProfileIds).Translate<Hre_ProfileMultiModel>();
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllMultiProfile(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_AllProfile_multi);
        }

        public JsonResult GetProfileNotGradeMulti(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileNotGrade_multi);
        }
        [HttpPost]
        public ActionResult GetDataByUserLoginID(string ProfileID)
        {

            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }

            var profileServices = new Hre_ProfileServices();
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var userEntity = service.GetByIdUseStore<Sys_UserInfoEntity>(profileID, ConstantSql.hrm_sys_sp_get_UserbyId, ref status);
            var lstProfile = service.GetByIdUseStore<Hre_ProfileEntity>(userEntity.ProfileID.Value, ConstantSql.hrm_hr_sp_get_ProfileById, ref status);

            if (lstProfile != null)
            {
                return Json(lstProfile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetBasicSalaryByProfileID(string ProfileID)
        {
            string status = string.Empty;
            Guid profileID = Guid.Empty;
            string message = string.Empty;
            if (string.IsNullOrEmpty(ProfileID))
            {
                message = "Error";
                return Json(message);
            }
            profileID = Common.ConvertToGuid(ProfileID);
            var listID = new List<Guid>();
            listID.Add(profileID);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var basicSalaryByProfile = _BasicSalaryServices.GetBasicSalaryBylstProIDs(listID).Where(s => s.DateOfEffect != null).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            if (basicSalaryByProfile == null)
            {
                message = "NoBasicSalary";
                return Json(message);
            }
            return Json(basicSalaryByProfile, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult ReferInsuranceSalary(string ProfileID, DateTime dateStart)
        {
            string status = string.Empty;
            string message = string.Empty;
            Guid profileID = Common.ConvertToGuid(ProfileID);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var insuranceSalary = _BasicSalaryServices.ReferInsuranceSalary(profileID, dateStart);
            if (insuranceSalary == null)
            {
                message = "NoInsuranceSalary";
                return Json(message);
            }
            return Json(insuranceSalary, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDataCashByCashID(string ProfileID)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }

            var actionService = new ActionService(UserLogin);
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(profileID, ConstantSql.hrm_hr_sp_get_ProfileById, ref status).FirstOrDefault();

            if (lstProfile != null)
            {
                return Json(lstProfile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        // Son.Vo - Lấy thông tin nhân viên show lên giao diện
        [HttpPost]
        public ActionResult GetDataByProfileID(string ProfileID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (string.IsNullOrEmpty(ProfileID) || ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileEntity = profileServices.GetProfileDataByID(profileID);
            if (profileEntity != null)
            {
                if (profileEntity.WorkPlaceID != null)
                {
                    var workPlace = profileServices.GetWorkPlaceDataByID(profileEntity.WorkPlaceID.Value);
                    profileEntity.WorkPlaceName = workPlace != null ? workPlace.WorkPlaceName : null;
                }
                if (profileEntity.OrgStructureID != null)
                {
                    var org = profileServices.GetOrgStructureDataByID(profileEntity.OrgStructureID.Value);
                    var orgUnit = profileServices.GetOrgUnitDataByID(profileEntity.OrgStructureID.Value);
                    profileEntity.OrgStructureName = org != null ? org.OrgStructureName : null;
                    profileEntity.OrgStructureCode = org != null ? org.Code : null;
                    profileEntity.E_COMPANY = orgUnit != null ? orgUnit.E_COMPANY : null;
                    profileEntity.E_BRANCH = orgUnit != null ? orgUnit.E_BRANCH : null;
                    profileEntity.E_TEAM = orgUnit != null ? orgUnit.E_TEAM : null;
                    profileEntity.E_SECTION = orgUnit != null ? orgUnit.E_SECTION : null;
                    profileEntity.E_UNIT = orgUnit != null ? orgUnit.E_UNIT : null;
                    profileEntity.E_DEPARTMENT = orgUnit != null ? orgUnit.E_DEPARTMENT : null;
                }
                if (profileEntity.JobTitleID != null)
                {
                    var job = profileServices.GetJobTitleDataByID(profileEntity.JobTitleID.Value);
                    profileEntity.JobTitleName = job != null ? job.JobTitleName : null;
                }
                if (profileEntity.PositionID != null)
                {
                    var pos = profileServices.GetPositionDataByID(profileEntity.PositionID.Value);
                    profileEntity.PositionName = pos != null ? pos.PositionName : null;
                }
                if (profileEntity.SupervisorID != null)
                {
                    var supervisor = profileServices.GetSupervisorDataByID(profileEntity.SupervisorID.Value);
                    profileEntity.SupervisorName = supervisor != null ? supervisor.CodeEmp : null;
                }
                if (profileEntity.HighSupervisorID != null)
                {
                    var highsupervisor = profileServices.GetSupervisorDataByID(profileEntity.HighSupervisorID.Value);
                    profileEntity.HighSupervisor = highsupervisor != null ? highsupervisor.CodeEmp : null;
                }
                if (profileEntity.EmpTypeID != null)
                {
                    var emptype = profileServices.GetEmployeeTypeDataByProfileID(profileEntity.EmpTypeID.Value);
                    profileEntity.EmployeeTypeName = emptype != null ? emptype.EmployeeTypeName : null;
                }
                if (profileEntity.ShopID != null)
                {
                    var shop = profileServices.GetShopDataByProfileID(profileEntity.ShopID.Value);
                    profileEntity.ShopName = shop != null ? shop.ShopName : null;
                }
                var userinfo = profileServices.GetUserInfoDataByProfileID(profileID);
                if (userinfo != null)
                {
                    profileEntity.UserLogin = userinfo != null ? userinfo.UserLogin : null;
                }
                if (profileEntity.PCountryID != null)
                {
                    var country = profileServices.GetCountryDataByID(profileEntity.PCountryID.Value);
                    profileEntity.PCountryName = country != null ? country.CountryName : null;
                }
                if (profileEntity.PProvinceID != null)
                {
                    var Province = profileServices.GetProvinceDataByID(profileEntity.PProvinceID.Value);
                    profileEntity.PProvinceName = Province != null ? Province.ProvinceName : null;
                }
                if (profileEntity.PDistrictID != null)
                {
                    var District = profileServices.GetDistrictDataByID(profileEntity.PDistrictID.Value);
                    profileEntity.PDistrictName = District != null ? District.DistrictName : null;
                }
                if (profileEntity.VillageID != null)
                {
                    var Village = profileServices.GetVillageDataByID(profileEntity.VillageID.Value);
                    profileEntity.PVillageName = Village != null ? Village.VillageName : null;
                }
                if (profileEntity.DateHire != null)
                {
                    profileEntity.IssuedDate = profileEntity.DateHire.Value.AddDays(1);
                }
            }

            if (profileEntity != null)
            {
                return Json(profileEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //Son.Vo - 20161118 - 0075451 - chỉ lấy thông tin người quản lý
        [HttpPost]
        public ActionResult GetSupervisorByProfileID(string ProfileID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (string.IsNullOrEmpty(ProfileID) || ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileEntity = profileServices.GetSupervisorByProfileID(profileID);
            if (profileEntity != null)
            {
                return Json(profileEntity, JsonRequestBehavior.AllowGet);
            }

            return null;
        }

        // Son.Vo - Lấy thông tin nhân viên show lên giao diện
        [HttpPost]
        public ActionResult GetContractDataByProfileID(string contractID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var contractID1 = Guid.Empty;
            if (string.IsNullOrEmpty(contractID) || contractID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(contractID))
            {
                contractID1 = Common.ConvertToGuid(contractID);
            }
            var contractEntity = profileServices.GetContractDataByID(contractID1);
            if (contractEntity != null)
            {
                var profileEntity = profileServices.GetProfileDataByID(contractEntity.ProfileID);
                if (profileEntity != null)
                {
                    if (profileEntity.WorkPlaceID != null)
                    {
                        var workPlace = profileServices.GetWorkPlaceDataByID(profileEntity.WorkPlaceID.Value);
                        profileEntity.WorkPlaceName = workPlace != null ? workPlace.WorkPlaceName : null;
                    }
                    if (profileEntity.OrgStructureID != null)
                    {
                        var org = profileServices.GetOrgStructureDataByID(profileEntity.OrgStructureID.Value);
                        var orgUnit = profileServices.GetOrgUnitDataByID(profileEntity.OrgStructureID.Value);
                        profileEntity.OrgStructureName = org != null ? org.OrgStructureName : null;
                        profileEntity.OrgStructureCode = org != null ? org.Code : null;
                        profileEntity.E_COMPANY = orgUnit != null ? orgUnit.E_COMPANY : null;
                        profileEntity.E_BRANCH = orgUnit != null ? orgUnit.E_BRANCH : null;
                        profileEntity.E_TEAM = orgUnit != null ? orgUnit.E_TEAM : null;
                        profileEntity.E_SECTION = orgUnit != null ? orgUnit.E_SECTION : null;
                        profileEntity.E_UNIT = orgUnit != null ? orgUnit.E_UNIT : null;
                        profileEntity.E_DEPARTMENT = orgUnit != null ? orgUnit.E_DEPARTMENT : null;
                    }
                    if (profileEntity.JobTitleID != null)
                    {
                        var job = profileServices.GetJobTitleDataByID(profileEntity.JobTitleID.Value);
                        profileEntity.JobTitleName = job != null ? job.JobTitleName : null;
                    }
                    if (profileEntity.SupervisorID != null)
                    {
                        var supervisor = profileServices.GetSupervisorDataByID(profileEntity.SupervisorID.Value);
                        profileEntity.SupervisorName = supervisor != null ? supervisor.CodeEmp : null;
                    }
                    if (profileEntity.HighSupervisorID != null)
                    {
                        var highsupervisor = profileServices.GetSupervisorDataByID(profileEntity.HighSupervisorID.Value);
                        profileEntity.HighSupervisor = highsupervisor != null ? highsupervisor.CodeEmp : null;
                    }
                    if (profileEntity.EmpTypeID != null)
                    {
                        var emptype = profileServices.GetEmployeeTypeDataByProfileID(profileEntity.EmpTypeID.Value);
                        profileEntity.EmployeeTypeName = emptype != null ? emptype.EmployeeTypeName : null;
                    }
                    if (profileEntity.ShopID != null)
                    {
                        var shop = profileServices.GetShopDataByProfileID(profileEntity.ShopID.Value);
                        profileEntity.ShopName = shop != null ? shop.ShopName : null;
                    }
                    var userinfo = profileServices.GetUserInfoDataByProfileID(contractEntity.ProfileID);
                    if (userinfo != null)
                    {
                        profileEntity.UserLogin = userinfo != null ? userinfo.UserLogin : null;
                    }
                    if (profileEntity.PCountryID != null)
                    {
                        var country = profileServices.GetCountryDataByID(profileEntity.PCountryID.Value);
                        profileEntity.PCountryName = country != null ? country.CountryName : null;
                    }
                    if (profileEntity.PProvinceID != null)
                    {
                        var Province = profileServices.GetProvinceDataByID(profileEntity.PProvinceID.Value);
                        profileEntity.PProvinceName = Province != null ? Province.ProvinceName : null;
                    }
                    if (profileEntity.PDistrictID != null)
                    {
                        var District = profileServices.GetDistrictDataByID(profileEntity.PDistrictID.Value);
                        profileEntity.PDistrictName = District != null ? District.DistrictName : null;
                    }
                    if (profileEntity.VillageID != null)
                    {
                        var Village = profileServices.GetVillageDataByID(profileEntity.VillageID.Value);
                        profileEntity.PVillageName = Village != null ? Village.VillageName : null;
                    }
                    if (profileEntity.DateHire != null)
                    {
                        profileEntity.IssuedDate = profileEntity.DateHire.Value.AddDays(1);
                    }
                    if (contractEntity.ProfileSingID != null && contractEntity.ProfileSingName != null)
                    {
                        profileEntity.ProfileSingID = contractEntity.ProfileSingID;
                        profileEntity.ProfileSingName = contractEntity.ProfileSingName;
                    }
                    else
                    {

                    }
                }
                if (profileEntity != null)
                {
                    return Json(profileEntity, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
            return null;
        }

        // Son.Vo - Lấy thông tin người ký theo phụ lục gần nhất lên giao diện
        [HttpPost]
        public ActionResult GetProfileSignDataByProfileID(string contractID, DateTime dateStart)
        {
            var _ContractServices = new Hre_ContractServices();
            string status = string.Empty;
            var contractID1 = Guid.Empty;
            if (string.IsNullOrEmpty(contractID) || contractID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(contractID))
            {
                contractID1 = Common.ConvertToGuid(contractID);
            }
            var profileSign = _ContractServices.GetLastProfileSign4CreateContractExtend(contractID1, dateStart);
            if (profileSign != null)
            {
                return Json(profileSign, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        // Son.Vo - 20160712 - lấy thông tin nv khi lưu người duyệt ở màn hình HĐ
        [HttpPost]
        public ActionResult GetProfileDataByID(string ProfileID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (string.IsNullOrEmpty(ProfileID) || ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileEntity = profileServices.GetProfileDataByID(profileID);

            if (profileEntity != null)
            {
                return Json(profileEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        // Son.Vo - Lấy thông tin nhân viên show lên giao diện qúa trình công tác - do lấy 1 số thông tin theo chức vụ nên tách ra
        [HttpPost]
        public ActionResult GetDataViewWorkHistoryByProfileID(string ProfileID)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (string.IsNullOrEmpty(ProfileID) || ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileEntity = profileServices.GetProfileDataViewWorkHistoryByID(profileID);
            if (profileEntity != null)
            {
                if (profileEntity.WorkPlaceID != null)
                {
                    var workPlace = profileServices.GetWorkPlaceDataByID(profileEntity.WorkPlaceID.Value);
                    profileEntity.WorkPlaceName = workPlace != null ? workPlace.WorkPlaceName : null;
                }
                if (profileEntity.OrgStructureID != null)
                {
                    var org = profileServices.GetOrgStructureDataByID(profileEntity.OrgStructureID.Value);
                    var orgUnit = profileServices.GetOrgUnitDataByID(profileEntity.OrgStructureID.Value);
                    profileEntity.OrgStructureName = org != null ? org.OrgStructureName : null;
                    profileEntity.OrgStructureCode = org != null ? org.Code : null;
                    profileEntity.E_COMPANY = orgUnit != null ? orgUnit.E_COMPANY : null;
                    profileEntity.E_BRANCH = orgUnit != null ? orgUnit.E_BRANCH : null;
                    profileEntity.E_TEAM = orgUnit != null ? orgUnit.E_TEAM : null;
                    profileEntity.E_SECTION = orgUnit != null ? orgUnit.E_SECTION : null;
                    profileEntity.E_UNIT = orgUnit != null ? orgUnit.E_UNIT : null;
                    profileEntity.E_DEPARTMENT = orgUnit != null ? orgUnit.E_DEPARTMENT : null;
                }
                if (profileEntity.JobTitleID != null)
                {
                    var job = profileServices.GetJobTitleDataByID(profileEntity.JobTitleID.Value);
                    profileEntity.JobTitleName = job != null ? job.JobTitleName : null;
                }
                if (profileEntity.EmpTypeID != null)
                {
                    var emptype = profileServices.GetEmployeeTypeDataByProfileID(profileEntity.EmpTypeID.Value);
                    profileEntity.EmployeeTypeName = emptype != null ? emptype.EmployeeTypeName : null;
                }
                if (profileEntity.ShopID != null)
                {
                    var shop = profileServices.GetShopDataByProfileID(profileEntity.ShopID.Value);
                    profileEntity.ShopName = shop != null ? shop.ShopName : null;
                }
                var userinfo = profileServices.GetUserInfoDataByProfileID(profileID);
                if (userinfo != null)
                {
                    profileEntity.UserLogin = userinfo != null ? userinfo.UserLogin : null;
                }
                if (profileEntity.PCountryID != null)
                {
                    var country = profileServices.GetCountryDataByID(profileEntity.PCountryID.Value);
                    profileEntity.PCountryName = country != null ? country.CountryName : null;
                }
                if (profileEntity.PProvinceID != null)
                {
                    var Province = profileServices.GetProvinceDataByID(profileEntity.PProvinceID.Value);
                    profileEntity.PProvinceName = Province != null ? Province.ProvinceName : null;
                }
                if (profileEntity.PDistrictID != null)
                {
                    var District = profileServices.GetDistrictDataByID(profileEntity.PDistrictID.Value);
                    profileEntity.PDistrictName = District != null ? District.DistrictName : null;
                }
                if (profileEntity.VillageID != null)
                {
                    var Village = profileServices.GetVillageDataByID(profileEntity.VillageID.Value);
                    profileEntity.PVillageName = Village != null ? Village.VillageName : null;
                }
                if (profileEntity.DateHire != null)
                {
                    profileEntity.IssuedDate = profileEntity.DateHire.Value.AddDays(1);
                }
                //Nguyen.Le - 08/01/2018 - 0092118
                if (profileEntity.RegionID != null)
                {
                    var region = profileServices.GetRegionByID(profileEntity.RegionID.Value);
                    profileEntity.RegionName = region != null ? region.RegionName : null;
                }
                if (profileEntity.CostActivityID != null)
                {
                    var cosAct = profileServices.GetCostActivityByID(profileEntity.CostActivityID.Value);
                    profileEntity.CostActivity = cosAct != null ? cosAct.CostActivity : null;
                }
                if (profileEntity.PayrollCategoryID != null)
                {
                    var payrollCategory = profileServices.GetPayrollCategoryByID(profileEntity.PayrollCategoryID.Value);
                    profileEntity.PayrollCategoryName = payrollCategory != null ? payrollCategory.PayrollCategoryName : null;
                }
                if (profileEntity.ShopID != null)
                {
                    var shop = profileServices.GetShopByID(profileEntity.ShopID.Value);
                    profileEntity.ShopName = shop != null ? shop.ShopName : null;
                }
            }

            if (profileEntity != null)
            {
                return Json(profileEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetWorkHistoryByProfileIdAndDateEffective(Guid profileId, DateTime dateEffective)
        {
            //string status = string.Empty;
            //var actionServices = new ActionService(UserLogin);
            //var objs = new List<object>();
            //objs.Add(profileId);
            //var listBasicSalaryByProfile = actionServices.GetData<Hre_WorkHistoryEntity>(Common.DotNetToOracle(profileId.ToString()), ConstantSql.hrm_hr_sp_get_WorkHistoryByProfileId, ref status);

            //var result = listBasicSalaryByProfile.Select(m => new { m.OrgStructureName, m.PositionName, m.DateEffective, m.Status }).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.DateEffective <= dateEffective && m.Status == WorkHistoryStatus.E_APPROVED.ToString());
            Sal_BasicSalaryServices basicSalaryService = new Sal_BasicSalaryServices();
            Sal_BasicSalaryEntity result = basicSalaryService.GetBasicSalaryByWorkHistory(profileId, dateEffective);

            return Json(result);
        }

        [HttpPost]
        public ActionResult GetDataByProfileIDv2(string ProfileID)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }

            var actionService = new ActionService(UserLogin);
            var lstProfile = actionService.GetData<Hre_ProfileSmallEntityV2>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ProfileByIdv2, ref status).FirstOrDefault();

            var lstContractByProfileID = actionService.GetData<Hre_ContractSmallEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_contractbyproidsv2, ref status)
                .Where(s => s.DateStart <= DateTime.Now).OrderByDescending(s => s.DateStart).FirstOrDefault();
            if (lstContractByProfileID != null)
            {
                lstProfile.ContractTypeName = lstContractByProfileID.ContractTypeName;
            }
            else
            {
                lstProfile.ContractTypeName = "";
            }

            var salary = actionService.GetData<Sal_BasicSalarySmallEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_sal_sp_get_BasicSalaryByProfileIdsv2, ref status)
                .Where(s => s.DateOfEffect <= DateTime.Now)
                .OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            if (salary != null)
            {
                lstProfile.BasicSalary = salary.GrossAmount.ToDouble();
            }

            DateTime dt = DateTime.Now;
            DateTime datehire = new DateTime();
            double seniority = 0;
            if (lstProfile.DateHire != null)
            {
                datehire = (DateTime)lstProfile.DateHire;
                try
                {
                    #region KT thâm niên
                    double _suspensedate = 0;
                    #region tam hoan
                    var objSupense = new List<object>();
                    objSupense.AddRange(new object[14]);
                    objSupense[12] = 1;
                    objSupense[13] = int.MaxValue - 1;
                    var lstSuspense = actionService.GetData<Hre_StopWorkingEntity>(objSupense, ConstantSql.hrm_hr_sp_get_RegisterComback, ref status);
                    #endregion
                    var suspenseEntity = lstSuspense.Where(s => s.ProfileID != null && lstProfile.ID == s.ProfileID.Value).ToList();
                    if (suspenseEntity != null)
                    {
                        foreach (var _item in suspenseEntity)
                        {
                            if (_item.DateStop != null && _item.DateComeBack != null)
                            {
                                _suspensedate += _item.DateComeBack.Value.Subtract(_item.DateStop.Value).TotalDays;
                            }
                        }
                    }
                    var dateSeniority = dt.Subtract(lstProfile.DateHire.Value).TotalDays + 1;
                    seniority = (dateSeniority - _suspensedate) / 365;
                    if (seniority < 0)
                    {
                        seniority = 0;
                    }
                    #endregion
                }
                catch
                {
                    seniority = 0;
                }


            }
            seniority = Math.Round(seniority, 2);
            lstProfile.Seniority = seniority.ToString();
            lstProfile.DateHireFormat = lstProfile.DateHire.Value.ToString("dd/MM/yyyy");
            if (lstContractByProfileID != null)
            {
                lstProfile.DateStartFormat = lstContractByProfileID.DateStart.ToString("dd/MM/yyyy");
                if (lstContractByProfileID.DateEnd != null)
                    lstProfile.DateEndFormat = lstContractByProfileID.DateEnd.Value.ToString("dd/MM/yyyy");
            }

            if (lstProfile != null)
            {
                return Json(lstProfile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        /// <summary>
        /// Load người duyệt cấp cao
        /// </summary>
        /// <param name="ProfileID"></param>
        /// <returns></returns>
        public ActionResult GetHighSupervisor(string ProfileID)
        {
            if (ProfileID == null || ProfileID == string.Empty)
            {
                return Json("");
            }

            string status = string.Empty;
            var actionService = new ActionService(UserLogin);

            #region Load Data
            //Get config theo position
            var keyConfig = AppConfig.E_ConfiOTAllowPosition.ToString();
            var config = actionService.GetData<Sys_AllSettingEntity>(keyConfig, ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
            var profileId = Guid.Empty;
            Guid.TryParse(ProfileID, out profileId);

            var profileID = new Guid(ProfileID);
            var objGrade = new List<object>();
            objGrade.AddRange(new object[4]);
            objGrade[0] = profileID;
            objGrade[2] = 1;
            objGrade[3] = int.MaxValue - 1;
            var profileGrade = actionService.GetData<Att_GradeEntity>(objGrade, ConstantSql.hrm_att_sp_get_GradeAttendanceByProIdCutID, ref status).OrderByDescending(s => s.MonthStart).FirstOrDefault();

            #endregion

            if (config != null)
            {
                //Load danh sách postion
                var objPosition = Common.AddRange(5);
                var lstPosition = actionService.GetData<Cat_PositionEntity>(objPosition, ConstantSql.hrm_cat_sp_get_Position, ref status);
                //Load danh sách user info
                var objUser = new List<object>();
                objUser.AddRange(new object[5]);
                objUser[3] = 1;
                objUser[4] = int.MaxValue - 1;
                var lstUserInfo = actionService.GetData<Sys_UserInfoEntity>(objUser, ConstantSql.hrm_sys_sp_get_users, ref status).ToList();
                if (!string.IsNullOrEmpty(config.Value1) && config.Value1 == "True")
                {

                    var lstPofileByPositionIds = new List<Hre_ProfileMultiField>();

                    Hre_SupervisorEntity result = new Hre_SupervisorEntity();

                    var profileEntity = actionService.GetData<Hre_ProfileMultiField>(profileID, ConstantSql.hrm_hr_sp_get_ProfileDataById, ref status).FirstOrDefault();


                    if (profileEntity != null && profileEntity.PositionID != null)
                    {
                        var positionEntity = lstPosition.Where(s => s.ID == profileEntity.PositionID.Value).FirstOrDefault();

                        if (positionEntity != null)
                        {
                            var strPositionIds = string.Empty;

                            if (positionEntity.ApproverID1 != null)
                            {
                                strPositionIds += positionEntity.ApproverID1.Value + ",";
                            }
                            if (positionEntity.ApproverID2 != null)
                            {
                                strPositionIds += positionEntity.ApproverID2.Value + ",";
                            }

                            if (!string.IsNullOrEmpty(strPositionIds))
                            {
                                lstPofileByPositionIds = actionService.GetData<Hre_ProfileMultiField>(strPositionIds.Substring(0, strPositionIds.Length - 1), ConstantSql.hrm_hr_sp_get_ProfileByPositionIds, ref status).ToList();
                            }

                            if (positionEntity.ApproverID1 != null)
                            {
                                //ng duyet 1
                                var profileFirstApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID1.Value).FirstOrDefault();
                                if (profileFirstApprove != null)
                                {
                                    var userFirstApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileFirstApprove.ID).FirstOrDefault();
                                    result.SupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                    result.SupervisorName = profileFirstApprove.ProfileName;
                                }
                            }


                            if (positionEntity.ApproverID2 != null)
                            {
                                // ng duyet 2
                                var profileLastApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID2.Value).FirstOrDefault();
                                if (profileLastApprove != null)
                                {
                                    var userLastApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileLastApprove.ID).FirstOrDefault();
                                    result.HighSupervisorID = userLastApprove != null ? (Guid?)userLastApprove.ID : Guid.Empty;
                                    result.HighSupervisorName = profileLastApprove.ProfileName;
                                }
                            }


                            if (profileGrade != null)
                            {
                                result.IsChangeApprove = profileGrade.IsChangeApprove;
                                result.FormularDurationType = profileGrade.FormularDurationType;
                            }

                            //[Tin.Nguyen - 20160816] Kiểm tra load ng duyệt theo kiêm nhiêm task (0071697)
                            if (profileGrade != null && profileGrade.IsConCurrent != null && profileGrade.IsConCurrent.Value)
                            {
                                result.IsConCurrent = true;

                                var objGradeConCurrent = Common.AddRange(10);
                                objGradeConCurrent[1] = profileGrade.GradeAttendanceID;
                                var lstGradeConCurrent = actionService.GetData<Att_GradeEntity>(objGradeConCurrent, ConstantSql.hrm_att_sp_get_Att_GradeList, ref status).ToList();
                                var lstProfileIdsByGrade = lstGradeConCurrent.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).ToList();

                                var objConCurrent = Common.AddRange(17);
                                var lstConCurrent = actionService.GetData<Hre_ConCurrentView2Entity>(objConCurrent, ConstantSql.hrm_hr_sp_get_ConCurrent, ref status).ToList();


                                if (positionEntity.ApproverID1 != null)
                                {
                                    result.lstSupervior = new List<Hre_SupervisorDataSourceEntity>();
                                    //ng duyet 1
                                    var profileFirstApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID1.Value).FirstOrDefault();
                                    if (profileFirstApprove != null)
                                    {
                                        var userFirstApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileFirstApprove.ID).FirstOrDefault();
                                        result.SupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                        result.SupervisorName = profileFirstApprove.ProfileName;

                                        var entity = new Hre_SupervisorDataSourceEntity();
                                        entity.SupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                        entity.SupervisorName = profileFirstApprove.ProfileName;

                                        result.lstSupervior.Add(entity);
                                    }

                                    var lstConCurrentByApproveID1 = lstConCurrent.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID1.Value).OrderByDescending(s => s.DateEffective).DistinctBy(s => s.ProfileID).ToList();
                                    foreach (var item in lstConCurrentByApproveID1)
                                    {
                                        if (item.PositionID != null)
                                        {
                                            var positionEntityCon = lstPosition.Where(s => s.ID == item.PositionID.Value).FirstOrDefault();
                                            if (positionEntityCon != null)
                                            {
                                                var lstProfileByPos = actionService.GetData<Hre_ProfileMultiField>(positionEntityCon.ID.ToString(), ConstantSql.hrm_hr_sp_get_ProfileByPositionIds, ref status).ToList();
                                                if (positionEntityCon.ApproverID1 != null)
                                                {
                                                    //ng duyet 1
                                                    var profileFirstApproveCon = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntityCon.ApproverID1.Value).FirstOrDefault();
                                                    if (profileFirstApproveCon != null)
                                                    {
                                                        var entity = new Hre_SupervisorDataSourceEntity();
                                                        var userFirstApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileFirstApproveCon.ID).FirstOrDefault();
                                                        entity.SupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                                        entity.SupervisorName = profileFirstApproveCon.ProfileName;
                                                        result.lstSupervior.Add(entity);
                                                    }
                                                }
                                            }
                                        }

                                        //var userApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == item.ProfileID).FirstOrDefault();
                                        //var entity = new Hre_SupervisorDataSourceEntity();
                                        //entity.SupervisorID = userApprove != null ? (Guid?)userApprove.ID : Guid.Empty;
                                        //entity.SupervisorName = item.ProfileName;
                                        //result.lstSupervior.Add(entity);
                                    }
                                    result.lstSupervior = result.lstSupervior.DistinctBy(s => s.SupervisorID).ToList();

                                }

                                if (positionEntity.ApproverID2 != null)
                                {
                                    result.lstHightSupervior = new List<Hre_SupervisorDataSourceEntity>();

                                    var profileLastApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID2.Value).FirstOrDefault();
                                    if (profileLastApprove != null)
                                    {
                                        var userLastApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileLastApprove.ID).FirstOrDefault();
                                        result.HighSupervisorID = userLastApprove != null ? (Guid?)userLastApprove.ID : Guid.Empty;
                                        result.HighSupervisorName = profileLastApprove.ProfileName;

                                        var entity = new Hre_SupervisorDataSourceEntity();
                                        entity.HighSupervisorID = userLastApprove != null ? (Guid?)userLastApprove.ID : Guid.Empty;
                                        entity.HighSupervisorName = profileLastApprove.ProfileName;

                                        result.lstHightSupervior.Add(entity);
                                    }

                                    var lstConCurrentByApproveID2 = lstConCurrent.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID2.Value).OrderByDescending(s => s.DateEffective).DistinctBy(s => s.ProfileID).ToList();
                                    foreach (var item in lstConCurrentByApproveID2)
                                    {
                                        if (item.PositionID != null)
                                        {
                                            var positionEntityCon = lstPosition.Where(s => s.ID == item.PositionID.Value).FirstOrDefault();
                                            if (positionEntityCon != null)
                                            {
                                                var lstProfileByPos = actionService.GetData<Hre_ProfileMultiField>(positionEntityCon.ID.ToString(), ConstantSql.hrm_hr_sp_get_ProfileByPositionIds, ref status).ToList();
                                                if (positionEntityCon.ApproverID2 != null)
                                                {
                                                    //ng duyet 1
                                                    var profileFirstApproveCon = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntityCon.ApproverID1.Value).FirstOrDefault();
                                                    if (profileFirstApproveCon != null)
                                                    {
                                                        var entity = new Hre_SupervisorDataSourceEntity();
                                                        var userFirstApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileFirstApproveCon.ID).FirstOrDefault();
                                                        entity.HighSupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                                        entity.HighSupervisorName = profileFirstApproveCon.ProfileName;
                                                        result.lstHightSupervior.Add(entity);
                                                    }
                                                }
                                            }
                                        }

                                        //var userApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == item.ProfileID).FirstOrDefault();
                                        //var entity = new Hre_SupervisorDataSourceEntity();
                                        //entity.HighSupervisorID = userApprove != null ? (Guid?)userApprove.ID : Guid.Empty;
                                        //entity.HighSupervisorName = item.ProfileName;
                                        //result.lstHightSupervior.Add(entity);
                                    }
                                    result.lstHightSupervior = result.lstHightSupervior.DistinctBy(s => s.HighSupervisorID).ToList();
                                }
                                return Json(result, JsonRequestBehavior.AllowGet);
                            }

                            return Json(result, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                else
                {

                    var lstPofileByPositionIds = new List<Hre_ProfileMultiField>();

                    if (profileGrade != null)
                    {
                        if (!string.IsNullOrEmpty(profileGrade.TypeApprove) && profileGrade.TypeApprove == EnumDropDown.TypeApproveOTAndLeaveday.E_POSITION.ToString())
                        {
                            Hre_SupervisorEntity result = new Hre_SupervisorEntity();
                            result.IsChangeApprove = profileGrade.IsChangeApprove;
                            result.FormularDurationType = profileGrade.FormularDurationType;

                            var profileEntity = actionService.GetData<Hre_ProfileMultiField>(profileID, ConstantSql.hrm_hr_sp_get_ProfileDataById, ref status).FirstOrDefault();

                            if (profileEntity != null && profileEntity.PositionID != null)
                            {
                                var positionEntity = lstPosition.Where(s => s.ID == profileEntity.PositionID.Value).FirstOrDefault();

                                if (positionEntity != null)
                                {
                                    var strPositionIds = string.Empty;

                                    if (positionEntity.ApproverID1 != null)
                                    {
                                        strPositionIds += positionEntity.ApproverID1 + ",";
                                    }
                                    if (positionEntity.ApproverID2 != null)
                                    {
                                        strPositionIds += positionEntity.ApproverID2 + ",";
                                    }
                                    if (positionEntity.ApproverID3 != null)
                                    {
                                        strPositionIds += positionEntity.ApproverID3 + ",";
                                    }

                                    if (!string.IsNullOrEmpty(strPositionIds))
                                    {
                                        lstPofileByPositionIds = actionService.GetData<Hre_ProfileMultiField>(strPositionIds.Substring(0, strPositionIds.Length - 1), ConstantSql.hrm_hr_sp_get_ProfileByPositionIds, ref status).ToList();
                                    }

                                    if (positionEntity.ApproverID1 != null)
                                    {
                                        //nguoi duyet 1
                                        var profileFirstApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID1.Value).FirstOrDefault();
                                        if (profileFirstApprove != null)
                                        {
                                            var userFirstApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileFirstApprove.ID).FirstOrDefault();
                                            if (userFirstApprove != null)
                                            {
                                                result.SupervisorID = userFirstApprove != null ? (Guid?)userFirstApprove.ID : Guid.Empty;
                                                result.SupervisorName = userFirstApprove != null ? userFirstApprove.UserInfoName : "";
                                            }
                                        }
                                    }


                                    if (positionEntity.ApproverID2 != null)
                                    {
                                        //nguoi duyet 2
                                        var profileMidApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID2.Value).FirstOrDefault();
                                        if (profileMidApprove != null)
                                        {
                                            var userMidApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileMidApprove.ID).FirstOrDefault();
                                            if (userMidApprove != null)
                                            {
                                                result.MidSupervisorID = userMidApprove != null ? (Guid?)userMidApprove.ID : Guid.Empty;
                                                result.SupervisorNextName = userMidApprove != null ? userMidApprove.UserInfoName : "";
                                            }
                                        }
                                    }

                                    if (positionEntity.ApproverID3 != null)
                                    {
                                        //nguoi duyet 3
                                        var profileLastApprove = lstPofileByPositionIds.Where(s => s.PositionID != null && s.PositionID.Value == positionEntity.ApproverID3.Value).FirstOrDefault();
                                        if (profileLastApprove != null)
                                        {
                                            var userLastApprove = lstUserInfo.Where(s => s.ProfileID != null && s.ProfileID.Value == profileLastApprove.ID).FirstOrDefault();
                                            if (userLastApprove != null)
                                            {
                                                result.HighSupervisorID = userLastApprove != null ? (Guid?)userLastApprove.ID : Guid.Empty;
                                                result.HighSupervisorName = userLastApprove != null ? userLastApprove.UserInfoName : "";
                                            }
                                        }
                                    }

                                    return Json(result, JsonRequestBehavior.AllowGet);
                                }

                            }
                        }
                        else
                        {
                            List<Hre_SupervisorEntity> ListSupervisor = new List<Hre_SupervisorEntity>();
                            List<object> lstModel = new List<object>();
                            lstModel.Add(Common.DotNetToOracle(ProfileID));
                            ListSupervisor = actionService.GetData<Hre_SupervisorEntity>(lstModel, ConstantSql.hrm_hre_getdata_Supervisor, ref status).ToList();
                            Hre_SupervisorEntity result = ListSupervisor.FirstOrDefault();
                            if (profileGrade != null)
                            {
                                result.IsChangeApprove = profileGrade.IsChangeApprove;
                                result.FormularDurationType = profileGrade.FormularDurationType;
                            }


                            return Json(result, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        List<Hre_SupervisorEntity> ListSupervisor = new List<Hre_SupervisorEntity>();
                        List<object> lstModel = new List<object>();
                        lstModel.Add(Common.DotNetToOracle(ProfileID));
                        ListSupervisor = actionService.GetData<Hre_SupervisorEntity>(lstModel, ConstantSql.hrm_hre_getdata_Supervisor, ref status).ToList();
                        Hre_SupervisorEntity result = ListSupervisor.FirstOrDefault();
                        result.IsChangeApprove = profileGrade != null ? profileGrade.IsChangeApprove : null;
                        result.FormularDurationType = profileGrade != null ? profileGrade.FormularDurationType : string.Empty;
                        return Json(result, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            else
            {
                List<Hre_SupervisorEntity> ListSupervisor = new List<Hre_SupervisorEntity>();
                List<object> lstModel = new List<object>();
                lstModel.Add(Common.DotNetToOracle(ProfileID));
                ListSupervisor = actionService.GetData<Hre_SupervisorEntity>(lstModel, ConstantSql.hrm_hre_getdata_Supervisor, ref status).ToList();
                Hre_SupervisorEntity result = ListSupervisor.FirstOrDefault();

                return Json(result, JsonRequestBehavior.AllowGet);
            }
            return Json(string.Empty);

        }

        public ActionResult GetAllHre_OrgChart()
        {
            var service = new Hre_ProfileServices();
            var message = service.GetAllHre_OrgChart();
            if (string.IsNullOrEmpty(message))
                message = NotificationType.Success.ToString();
            return Json(message);
        }

        #region Hre_HeadPositionCharts
        public ActionResult GetHre_CharHeadPosition()
        {
            var hreProfileService = new Hre_ProfileServices();
            var message = string.Empty;
            message = hreProfileService.GetHre_CharHeadPosition();
            //Quyen.Quach 05/01/2018
            if (string.IsNullOrEmpty(message))
                message = NotificationType.Success.ToString();
            return Json(message);
        }

        /// <summary>
        /// lấy dữ liệu cho biểu đồ trưởng chuc vu
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetHeadPositionChart(string PositionIDs, string orgstructureIDS)
        {
            var status = string.Empty;
            var actionService = new ActionService(UserLogin, LanguageCode);
            List<Cat_PositionEntity> lstPositionEnity = new List<Cat_PositionEntity>();
            var lstpara = new List<object>();
            lstpara.AddRange(new object[5]);
            if (!string.IsNullOrEmpty(orgstructureIDS))
            {
                lstpara[2] = orgstructureIDS;
            }
            lstpara[3] = 1;
            lstpara[4] = Int32.MaxValue - 1;
            lstPositionEnity = actionService.GetData<Cat_PositionEntity>(lstpara, ConstantSql.hrm_cat_sp_get_Position, ref status);
            if (!string.IsNullOrEmpty(PositionIDs))
            {
                var _PositionID = Guid.Parse(PositionIDs);

                lstChildPositionID = new List<Guid>();
                GetChildPosition(lstPositionEnity, _PositionID);
                lstChildPositionID.Add(_PositionID);
                lstPositionEnity = lstPositionEnity.Where(s => lstChildPositionID.Contains(s.ID)).ToList();
            }
            Hre_OrgChartServices hreOrgChartServices = new Hre_OrgChartServices();
            var listEntity = hreOrgChartServices.GetDataForCharPosition(lstPositionEnity, OrgChartType.E_CHARTS_HEADPOSITION.ToString());
            if (listEntity != null)
            {
                var listModel = listEntity.OrderBy(d => d.Name).Select(d => new Hre_OrgChartPortal()
                {
                    key = d.Key,
                    parent = d.parent == null ? Guid.Empty : d.parent,
                    name = d.Name,
                    title = d.Title,
                    imgpath = d.ImagePath,
                    //boss = d.Boss,
                    code = d.Code,
                    //DateOfEffect = d.DateOfEffect == null ? string.Empty : d.DateOfEffect.ToString("dd/MM/yyyy"),
                    //OrgStructureName = d.OrgStructureName,
                    //DeptPath = d.DeptPath,
                    JobTitleName = d.JobTitleName,
                    //SupervisorName = d.SupervisorName,
                    //MidSupervisorName = d.MidSupervisorName,
                    //HighSupervisorName = d.HighSupervisorName,
                    //EmployeeTypeName = d.EmployeeTypeName,
                    ProfileID = d.ProfileID,
                    //EmployeeGroupName = d.EmployeeGroupName,
                    //PayrollGroupName = d.PayrollGroupName,
                    //SalaryClassName = d.SalaryClassName,
                    //CostCentreName = d.CostCentreName,
                    //CostActivityName = d.CostActivityName,
                    //WorkPlaceName = d.WorkPlaceName,
                    //RegionName = d.RegionName,
                    ProfileName = d.ProfileName
                }).ToList();
                return Json(listModel, JsonRequestBehavior.AllowGet);
            }
            return Json(null);
        }
        #endregion

        #region Hre_HeadOrgCharts
        /// <summary>
        /// xử lý dữ liệu cho biểu đồ trưởng phòng ban
        /// </summary>
        /// <returns></returns>
        public ActionResult GetHre_CharHeadOrgStructure(DateTime? dateofEffect)
        {
            var hreProfileService = new Hre_ProfileServices();
            var message = string.Empty;
            message = hreProfileService.GetHre_CharHeadOrgStructure(dateofEffect);
            //Quyen.Quach 05/01/2018
            if (string.IsNullOrEmpty(message))
                message = NotificationType.Success.ToString();
            return Json(message);
        }

        /// <summary>
        /// lấy dữ liệu cho biểu đồ trưởng phòng ban
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetHeadOrgStructureChart(string OrgStructureIDs, DateTime? dateofEffect)
        {
            var status = string.Empty;
            List<object> para = new List<object>();
            para.AddRange(new object[2]);
            if (!string.IsNullOrEmpty(OrgStructureIDs))
            {
                var _OrgID = Guid.Parse(OrgStructureIDs);

                var actionService = new ActionService(UserLogin);
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var listOrg = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);

                var objOrgById = listOrg.Where(m => m.ID == _OrgID).FirstOrDefault();
                strOrderNumber = string.Empty;
                GetChildOrgStructureID(listOrg, _OrgID);
                if (objOrgById != null && objOrgById.OrderNumber != null)
                {
                    strOrderNumber = strOrderNumber + objOrgById.OrderNumber.ToString();
                }
                para[0] = strOrderNumber;
            }

            //them dk phong ban
            para[1] = OrgChartType.E_CHARTS_HEADORGSTRUCTURE.ToString();
            var baseService = new BaseService();
            var listEntity = baseService.GetData<Hre_OrgChartEntity>(para, ConstantSql.hrm_hr_sp_get_HeadOrgChart, UserLogin, ref status);
            if (listEntity != null)
            {
                //Son.Vo - 20170511 - 0081414
                if (dateofEffect != null)
                {
                    //Nguyen.Le 23/11/2017 - 0088957
                    listEntity = listEntity.Where(s => s.DecisionDate != null && s.DecisionDate.Value.Date <= dateofEffect.Value.Date).ToList();
                }
                else
                {
                    listEntity = listEntity.Where(s => s.DecisionDate == null).ToList();
                }
                var listModel = listEntity.OrderBy(d => d.Name).Select(d => new Hre_OrgChartPortal()
                {
                    key = d.Key,
                    parent = d.parent == null ? Guid.Empty : d.parent,
                    name = d.Name,
                    title = d.Title,
                    imgpath = d.ProfileID != null && d.ProfileID != Guid.Empty ? d.ImagePath : "chamhoi_no_images.png",
                    boss = d.Boss,
                    code = d.Code,
                    DateOfEffect = d.DateOfEffect == null ? string.Empty : d.DateOfEffect.Value.ToString("dd/MM/yyyy"),
                    OrgStructureName = d.OrgStructureName,
                    DeptPath = d.DeptPath,
                    JobTitleName = d.JobTitleName,
                    SupervisorName = d.SupervisorName,
                    MidSupervisorName = d.MidSupervisorName,
                    HighSupervisorName = d.HighSupervisorName,
                    EmployeeTypeName = d.EmployeeTypeName,
                    ProfileID = d.ProfileID,
                    EmployeeGroupName = d.EmployeeGroupName,
                    PayrollGroupName = d.PayrollGroupName,
                    SalaryClassName = d.SalaryClassName,
                    CostCentreName = d.CostCentreName,
                    CostActivityName = d.CostActivityName,
                    WorkPlaceName = d.WorkPlaceName,
                    RegionName = d.RegionName,
                    ProfileName = d.ProfileName
                }).ToList();
                return Json(listModel, JsonRequestBehavior.AllowGet);
            }
            return Json(null);
        }
        #endregion


        [HttpPost]
        public ActionResult SetBlackListProfile(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.SetBlackListProfile(selectedIds);
            return Json(message);
        }

        //Check nv da nghi viec
        public JsonResult CheckProfileStoWorked(Guid profileid)
        {

            ActionService service = new ActionService(UserLogin, LanguageCode);
            if (profileid != Guid.Empty)
            {
                string status = string.Empty;
                var entity = service.GetData<Hre_ProfileEntity>(Common.DotNetToOracle(profileid.ToString()), ConstantSql.hrm_hr_sp_get_ProfileById, ref status).FirstOrDefault();
                if (entity != null && entity.DateQuit != null && entity.DateQuit < DateTime.Now)
                {
                    return Json("error");
                }
            }
            return Json("success");
        }

        //Muti nhân viên đang làm việc
        public JsonResult GetMultiProfileWorking(string text)
        {
            return GetDataForControl<Hre_ProfileModel, Hre_ProfileMultiEntity>(text, ConstantSql.hrm_rec_sp_get_ProfileWorking_Multi);
        }

        string strOrderNumber = string.Empty;

        [HttpPost]
        public ActionResult GetOrgChartPortal()
        {
            var status = string.Empty;
            var listEntity = GetListData<Hre_OrgChartEntity>(ConstantSql.hrm_hr_sp_get_OrgChart);
            if (listEntity != null)
            {
                //var root = listEntity.Select(d => new Hre_OrgChartPortal()
                //{
                //    id = d.ID,
                //    parentId = d.ParentID,
                //    name = d.ProfileName,
                //    title = d.JobTitleName,
                //    image = "/Content/images/org/" + d.ImagePath

                //}).Where(d => d.parentId == null).FirstOrDefault();

                //var listModel = new List<Hre_OrgChartPortal>();
                //listModel.Add(root);

                var listModel = listEntity.OrderBy(d => d.Name).Select(d => new Hre_OrgChartPortal()
                {
                    key = d.Key,
                    parent = d.parent == null ? Guid.Empty : d.parent,
                    name = d.Name,
                    title = d.Title,
                    imgpath = d.ImagePath,
                    boss = d.Boss,
                    code = d.Code,
                    DateOfEffect = d.DateOfEffect == null ? string.Empty : d.DateOfEffect.Value.ToString("dd/MM/yyyy"),
                    OrgStructureName = d.OrgStructureName,
                    DeptPath = d.DeptPath,
                    JobTitleName = d.JobTitleName,
                    SupervisorName = d.SupervisorName,
                    MidSupervisorName = d.MidSupervisorName,
                    HighSupervisorName = d.HighSupervisorName,
                    EmployeeTypeName = d.EmployeeTypeName,
                    ProfileID = d.ProfileID,
                    EmployeeGroupName = d.EmployeeGroupName,
                    PayrollGroupName = d.PayrollGroupName,
                    SalaryClassName = d.SalaryClassName,
                    CostCentreName = d.CostCentreName,
                    CostActivityName = d.CostActivityName,
                    WorkPlaceName = d.WorkPlaceName,
                    RegionName = d.RegionName


                }).ToList();
                //listModel.AddRange(listModel1);
                return Json(listModel, JsonRequestBehavior.AllowGet);
            }

            return Json(null);
        }

        [HttpPost]
        public ActionResult GetCapacityChart(string ProfileID)
        {
            var listCap = new List<Hre_CapacityEntity>();
            #region Code Comment
            //Random rnd = new Random();
            //var status = string.Empty;
            //
            //List<string> lstUnit = new List<string> {
            //    ConstantDisplay.HRM_Magement_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Leader_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Communication_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Task_Assignment_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Training_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Encouragement_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Conflict_Control_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Organisation_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Planning_Skill.TranslateString(),
            //    ConstantDisplay.HRM_Decision_Marking.TranslateString(),
            //    ConstantDisplay.HRM_Change_Managment.TranslateString(),
            //    ConstantDisplay.HRM_Risk_Management.TranslateString(),
            //   };

            //for (int i = 0; i < lstUnit.Count; i++)
            //{
            //    Hre_CapacityEntity capa = new Hre_CapacityEntity();
            //    capa.unit = lstUnit[i];
            //    capa.target = rnd.Next(1286, 4900);
            //    capa.actual = rnd.Next(1100, 4700);
            //    listCap.Add(capa);
            //}
            #endregion
            if (!string.IsNullOrEmpty(ProfileID) && ProfileID != Guid.Empty.ToString())
            {
                var ser = new Hre_ReportServices();
                listCap = ser.GetDataForCharSkill(Guid.Parse(ProfileID));
            }
            return Json(listCap, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// [Hien.Nguyen] Hàm lấy các phòng ban con
        /// </summary>
        /// <param name="source"></param>
        /// <param name="Ids"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        private void GetChildOrgStructureID(List<Cat_OrgStructureTreeViewEntity> source, Guid Ids)
        {
            var listChild = source.Where(m => m.ParentID == Ids).ToList();
            if (listChild.Count <= 0)
            {
                return;
            }
            foreach (var i in listChild)
            {
                strOrderNumber += i.OrderNumber.ToString() + ",";
                GetChildOrgStructureID(source, i.ID);
            }
        }

        /// <summary>
        /// [Hien.Nguyen] Hàm lấy các p
        /// 
        /// </summary>
        /// <param name="source"></param>
        /// <param name="Ids"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        private void GetChildPosition(List<Cat_PositionEntity> source, Guid Ids)
        {
            var listChild = source.Where(m => m.ParentPositionID == Ids).ToList();
            if (listChild.Count <= 0)
            {
                return;
            }
            foreach (var i in listChild)
            {
                lstChildPositionID.Add(i.ID);
                GetChildPosition(source, i.ID);
            }
        }

        /// <summary>
        /// [Hien.Nguyen] DropdownNoCheckbox
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileListForDropdownNoCheckbox([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureDetailsSearchModel model)
        {
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.ID);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }

            if (model.IsExport != null)
            {
                if ((bool)model.IsExport)
                {
                    request.PageSize = Int32.MaxValue - 1;
                    var lstProfile = GetListData<Hre_ProfileForViewModel, Hre_ProfileForViewEntity, Hre_OrgStructureDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileOrgStructureDetail, ref status).ToList();

                    string message = ExportService.Export(Guid.Empty, lstProfile, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                    return Json(message);
                }
            }

            return GetListDataAndReturn<Hre_ProfileForViewModel, Hre_ProfileForViewEntity, Hre_OrgStructureDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileOrgStructureDetail);
        }

        [HttpPost]
        public ActionResult GetWorkHistoryListForDropdownNoCheckbox([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureHistoryDetailsSearchModel model)
        {
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.DateEffect == null)
            {
                model.DateEffect = DateTime.Now;
            }
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(model.DateEffect);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_hr_sp_get_OrgStructureHistory_Data_SumProfile, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.OrgStructureID.Value);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }
            if (model.IsExport != null)
            {
                if ((bool)model.IsExport)
                {
                    request.PageSize = Int32.MaxValue - 1;
                    var lstProfile = GetListData<Hre_WorkHistoryForViewModel, Hre_WorkHistoryForViewEntity, Hre_OrgStructureHistoryDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryOrgStructureDetail, ref status).ToList();

                    string message = ExportService.Export(Guid.Empty, lstProfile, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                    return Json(message);
                }
            }
            return GetListDataAndReturn<Hre_WorkHistoryForViewModel, Hre_WorkHistoryForViewEntity, Hre_OrgStructureHistoryDetailsSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryOrgStructureDetail);
        }

        [HttpPost]
        public ActionResult GetProfileListForOrganizationStructure([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureDetailsSearchModel model)
        {
            var actionService = new ActionService(UserLogin);
            string status = "";
            if (model.OrgStructureID != null)
            {
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.ID);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }
            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model.CopyData<Hre_OrgStructureDetailsSearchModel>())
            };
            var _listResult = actionService.GetData<Hre_ProfileForViewEntity>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileOrgStructureDetail, ref status);
            var _listResultConcurrent = actionService.GetData<Hre_ProfileForViewEntity>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileConCurrent, ref status);
            if (_listResult != null && _listResultConcurrent != null && _listResultConcurrent.Count() > 0)
            {
                _listResult.AddRange(_listResultConcurrent);
                _listResult = _listResult.DistinctBy(s => s.ID).ToList();
            }
            return new JsonResult() { Data = _listResult.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };

        }

        [HttpPost]
        public ActionResult ExportProfileListForDropdownNoCheckbox([DataSourceRequest] DataSourceRequest request, Hre_OrgStructureDetailsSearchModel model)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_Profile";
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            _table = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileOrgStructureDetail, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
            return Json(message);
        }

        //Son.Vo - cập nhật thông tin nhân viên
        public ActionResult EditProfile(Hre_ProfileSaveModel model)
        {
            bool IscheckValidate = false;
            string status = string.Empty;
            if (model != null)
            {
                //Son.Vo - 20161209 - 0076593 - cấu hình có quyền edit dữ liệu với ngày hiệu lực < ngày hiệu lực cũ hay ko
                var salaryservices = new Sal_BasicSalaryServices();
                var SecurityService = new SecurityService();
                bool isloadTabProfileBasicSalary = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_Profile_Create_ProfileBasicSalary.ToString());
                bool isloadTabProfileInsuranceSalary = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_Profile_Create_ProfileInsuranceSalary.ToString());
                bool isloadTabProfileAttGrade = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_Profile_Create_ProfileAttGrade.ToString());
                bool isloadTabProfileSalGrade = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_Profile_Create_ProfileSalGrade.ToString());
                bool isloadTabProfileInsuranceGrade = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_Insurance_InsuranceGrade.ToString());
                var _planheadcountservice = new Hre_PlanHeadCountServices();
                var serviceProfile = new Hre_ProfileServices();
                var modelsave = new Hre_ProfileModel();

                var service = new ActionService(UserLogin, LanguageCode);
                var BaseService = new BaseService();
                var sysServices = new Sys_AttOvertimePermitConfigServices();
                #region Validate
                string message = string.Empty;
                Guid profileID = Guid.Empty;
                if (model.Tab_ProfileBasic != null)
                {
                    profileID = model.Tab_ProfileBasic.ID;
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ProfileBasicModel>(LanguageCode, model.Tab_ProfileBasic, "Hre_Profile", ref message);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message;
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    if (model.ActionStatus != "ConfirmInvalidAge" && model.ActionStatus != "1" && model.ActionStatus != "NotChangeWork" && model.Tab_ProfileBasic.YearOfBirth != null && model.Tab_ProfileBasic.DateHire != null)
                    {
                        var _ALERTEMPUNDERAGE = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_ALERTEMPUNDERAGE);
                        var _ISSTOPEMPUNDERAGE = sysServices.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISSTOPEMPUNDERAGE);
                        string messageref = serviceProfile.AlertEmpUnderAge(model.Tab_ProfileBasic.YearOfBirth, model.Tab_ProfileBasic.MonthOfBirth,
                            model.Tab_ProfileBasic.DayOfBirth, model.Tab_ProfileBasic.DateHire.Value, _ISSTOPEMPUNDERAGE, _ALERTEMPUNDERAGE);
                        if (messageref != null)
                        {
                            model.ActionStatus = messageref;
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (model.Tab_ProfileContact != null)
                {
                    //Quyen.Quach- 0086104
                    model.Tab_ProfileContact.ID = profileID;
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ProfileContactModel>(LanguageCode, model.Tab_ProfileContact, "Hre_Profile", ref message);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message;
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }
                if (model.Tab_ProfileWorkhistory != null)
                {
                    //Son.Vo - 20170814 - 0086581
                    if (model.Tab_ProfileBasic != null && model.Tab_ProfileBasic.DateHire != null && model.Tab_ProfileWorkhistory.DateOfEffect == null)
                    {
                        model.Tab_ProfileWorkhistory.DateOfEffect = model.Tab_ProfileBasic.DateHire;
                    }
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ProfileWorkhistoryModel>(LanguageCode, model.Tab_ProfileWorkhistory, "Hre_Profile", ref message);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message;
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }

                if (model.Tab_ProfileQuit != null)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ProfileQuitModel>(LanguageCode, model.Tab_ProfileQuit, "Hre_Profile", ref message);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message;
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    if (model.Tab_ProfileQuit.DateQuit < model.Tab_ProfileBasic.DateHire)
                    {
                        model.ActionStatus = ConstantDisplay.HRM_ValidateDateQuitDateHire.TranslateString();
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                var HreProfile = new Hre_ProfileModel();
                if (model.ID != Guid.Empty)
                {
                    var profileEntity = serviceProfile.GetProfileDataByID(model.ID);
                    if (profileEntity != null)
                    {
                        HreProfile = profileEntity.CopyData<Hre_ProfileModel>();
                    }
                }

                if (model.Tab_ProfileBasic != null && model.Tab_ProfileBasic.StatusSyn == null && (HreProfile != null && HreProfile.StatusSyn != null))
                {
                    modelsave.StatusSyn = HreProfile.StatusSyn;
                }
                #region Quyen.Quach 30/11/2017 0089729 cảnh báo định biên
                bool ischeck = sysServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISALERTIFNUMBEROFEMPEXCEEDPLAN);
                if (ischeck == true)
                {
                    if (model.Tab_ProfileWorkhistory != null)
                    {
                        #region Quyen.Quach- 03/08/2017 - 0084005 Kiễm tra số số lượng định biên , hiển thị thông báo
                        var lstHeadCountentity4check = _planheadcountservice.getLstPlanheadCount().ToList();
                        var lstcheckeplexible = lstHeadCountentity4check.Where(s => s.Type == HeadType.E_FLEXIBLE.ToString()).ToList();
                        bool ischeckPlanheadcount = _planheadcountservice.CheckValidateHeadCount(profileID.ToString(), model.Tab_ProfileWorkhistory.DateOfEffect, model.Tab_ProfileWorkhistory.OrgStructureID, model.Tab_ProfileWorkhistory.PositionID, model.Tab_ProfileWorkhistory.SalaryClassID, model.Tab_ProfileWorkhistory.JobTitleID, model.Tab_ProfileWorkhistory.EmpTypeID, model.Tab_ProfileWorkhistory.WorkPlaceID, model.Tab_ProfileWorkhistory.CostCentreID, model.Tab_ProfileWorkhistory.RegionID);
                        if (lstcheckeplexible != null && lstcheckeplexible.Count > 0)
                        {
                            IscheckValidate = true;
                        }
                        if (ischeckPlanheadcount == true && IscheckValidate == false)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_NumberOfEmpExceedPlan.TranslateString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                        #endregion
                    }
                }
                #endregion
                //Son.Vo - kiểm tra có thay đổi các thông tin liên quan đến quá trình công tác hay không (để edit or tạo mới qtct) 
                //Kiểm tra model.ActionStatus != "NotChangeWork" vì khi hiện popup click cancel thì không kiểm tra các thông tin này nữa - chạy xuống dưới edit thông tin nv luôn
                if (HreProfile != null && (model.ID == HreProfile.ID) && model.ActionStatus != "1" && model.ActionStatus != "NotChangeWork" && model.ID != Guid.Empty)
                {
                    // Son.Vo - 20151030 - 0059217 - nếu thay đổi mã nv cũng hiển thị thông báo cập nhật vào qtct
                    string[] listFieldName = new[] { "OrgStructureID", "JobTitleID", "PositionID", "LaborType", "EmpTypeID", "EmployeeGroupID",
                        "PayrollGroupID","PayrollCategoryID", "SalaryClassID", "AbilityTileID", "CostCentreID", "CostSourceID", "CostActivityID", "WorkPlaceID", "RegionID", "CodeEmp", "TypeOfTransferID","IsNotComputProductSalary", "SikillLevel" };

                    #region Xử lý edit quá trình công tác

                    #region Son.Vo - validate theo task 0064632
                    if (model.Tab_ProfileWorkhistory != null && model.Tab_ProfileWorkhistory.DateOfEffect > DateTime.Now && model.Tab_ProfileWorkhistory.DateOfEffect > HreProfile.DateOfEffect)
                    {
                        model.SetPropertyValue(Constant.ActionStatus, ConstantDisplay.HRM_HR_Profile_DateEffectGreaterThanNow.ToString());
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    #endregion

                    foreach (var item in listFieldName)
                    {
                        if (model.Tab_ProfileBasic != null && model.Tab_ProfileBasic.HasProperty(item))
                        {
                            var value1 = model.Tab_ProfileBasic.GetPropertyValue(item);
                            var value2 = HreProfile.GetPropertyValue(item);
                            if (((value1 != null && value2 != null) && (value1.ToString() != value2.ToString())) || (value1 != null && value2 == null) || (value1 == null && value2 != null))
                            {
                                model.SetPropertyValue(Constant.ActionStatus, NotificationType.Change.ToString());
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        if (model.Tab_ProfileWorkhistory != null && model.Tab_ProfileWorkhistory.HasProperty(item))
                        {
                            var value1 = model.Tab_ProfileWorkhistory.GetPropertyValue(item);
                            var value2 = HreProfile.GetPropertyValue(item);
                            if (((value1 != null && value2 != null) && (value1.ToString() != value2.ToString())) || (value1 != null && value2 == null) || (value1 == null && value2 != null))
                            {
                                model.SetPropertyValue(Constant.ActionStatus, NotificationType.Change.ToString());
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                    if (model.Tab_ProfileBasic != null && model.Tab_ProfileBasic.ProfileName != HreProfile.ProfileName)
                    {
                        if (model.Tab_ProfileBasic.ProfileName.Contains(' '))
                        {
                            model.Tab_ProfileBasic.FirstName = model.Tab_ProfileBasic.ProfileName.Substring(model.Tab_ProfileBasic.ProfileName.LastIndexOf(' ') + 1);
                            model.Tab_ProfileBasic.NameFamily = model.Tab_ProfileBasic.ProfileName.Substring(0, model.Tab_ProfileBasic.ProfileName.LastIndexOf(' '));
                        }
                        else
                        {
                            model.Tab_ProfileBasic.FirstName = model.Tab_ProfileBasic.ProfileName;
                        }
                    }
                    #endregion
                }

                #region Xử Lý Lưu field DateOfBirth
                var dateOfBirth = string.Empty;
                if (model.Tab_ProfileBasic != null)
                {
                    //Quyen.Quach 14/10/2017 0088838 Loại bỏ logic cảnh báo chung ngày sinh không đc bỏ trống
                    // Son.Vo - 0058542
                    int[] StandardMonth = new int[4] { 4, 6, 9, 11 };
                    if (model.Tab_ProfileBasic.DayOfBirth != null && model.Tab_ProfileBasic.MonthOfBirth != null && model.Tab_ProfileBasic.YearOfBirth != null &&
                        model.Tab_ProfileBasic.DayOfBirth >= 0 && model.Tab_ProfileBasic.MonthOfBirth >= 0 && model.Tab_ProfileBasic.YearOfBirth >= 0)
                    {
                        if (model.Tab_ProfileBasic.DayOfBirth == 30 && model.Tab_ProfileBasic.MonthOfBirth == 2)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_HR_DayOfBirth.TranslateString() + ConstantDisplay.HRM_HR_ErrorYearOfBirth.TranslateString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                        if (model.Tab_ProfileBasic.DayOfBirth == 31 && model.Tab_ProfileBasic.MonthOfBirth == 2)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_HR_DayOfBirth.TranslateString() + ConstantDisplay.HRM_HR_ErrorYearOfBirth.TranslateString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                        for (var i = 0; i < StandardMonth.Length; i++)
                        {
                            if (model.Tab_ProfileBasic.DayOfBirth == 31 && model.Tab_ProfileBasic.MonthOfBirth == StandardMonth[i])
                            {
                                model.ActionStatus = ConstantDisplay.HRM_HR_DayOfBirth.TranslateString() + ConstantDisplay.HRM_HR_ErrorYearOfBirth.TranslateString();
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        if (model.Tab_ProfileBasic.DayOfBirth > 31 || model.Tab_ProfileBasic.MonthOfBirth > 12)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_HR_DayOfBirth.TranslateString() + ConstantDisplay.HRM_HR_ErrorYearOfBirth.TranslateString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                        dateOfBirth = model.Tab_ProfileBasic.MonthOfBirth + "/" + model.Tab_ProfileBasic.DayOfBirth + "/" + model.Tab_ProfileBasic.YearOfBirth;
                        model.Tab_ProfileBasic.DateOfBirth = string.IsNullOrEmpty(dateOfBirth) ? (DateTime?)null : DateTime.Parse(dateOfBirth);
                    }
                }

                #endregion

                if (model.Tab_ProfileWorkhistory != null && model.Tab_ProfileWorkhistory.SalaryClassID != null)
                {
                    if (model.Tab_ProfileWorkhistory.SalaryClassID != null)
                    {
                        var _AbilityTileServices = new Cat_AbilityTileServices();
                        var abilityTitleBySalaryClass = _AbilityTileServices.GetDataAbilityTileBySalaryClassID(model.Tab_ProfileWorkhistory.SalaryClassID.Value);
                        if (abilityTitleBySalaryClass != null)
                        {
                            model.Tab_ProfileWorkhistory.AbilityTileID = abilityTitleBySalaryClass.ID;
                        }
                    }

                    var cat_Position = new Cat_PositionEntity();
                    var _PositionServices = new Cat_PositionServices();
                    if (model.Tab_ProfileWorkhistory.PositionID != null && model.Tab_ProfileWorkhistory.PositionID != Guid.Empty)
                    {
                        cat_Position = _PositionServices.GetDataPositionByID(model.Tab_ProfileWorkhistory.PositionID.Value);
                        if (cat_Position != null)
                        {
                            model.Tab_ProfileWorkhistory.PositionID1 = cat_Position.ApproverID1;
                            model.Tab_ProfileWorkhistory.PositionID2 = cat_Position.ApproverID2;
                            model.Tab_ProfileWorkhistory.PositionID3 = cat_Position.ApproverID3;
                        }
                    }
                }
                bool isAllowCreate = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_ProfileHighPermission.ToString());


                #region Khi edit các thông tin liên quan qtct thì hiện popup - nếu click ok thì xử lý lưu qtct
                if (model.ActionStatus == "1" || model.ActionStatus == "Success" || string.IsNullOrEmpty(model.ActionStatus))
                {
                    var profileEntity = new Hre_ProfileModel();
                    if (model.ID != Guid.Empty)
                    {
                        profileEntity = HreProfile;
                    }
                    bool isAddWorkHistory = false;

                    #region Son.Vo - validate theo task 0064632
                    if (model.Tab_ProfileWorkhistory != null)
                    {
                        //Quyen.Quach -31/07/2017 -Chỉnh sửa logic theo task 0086026
                        if (model.Tab_ProfileWorkhistory.DateOfEffect != null && HreProfile.DateOfEffect != null && model.Tab_ProfileWorkhistory.DateOfEffect > HreProfile.DateOfEffect)
                        {
                            isAddWorkHistory = true;
                        }
                        if (model.Tab_ProfileWorkhistory.DateOfEffect != null && HreProfile.DateOfEffect != null && model.Tab_ProfileWorkhistory.DateOfEffect.Value.Date < HreProfile.DateOfEffect.Value.Date)
                        {
                            //Son.Vo - 20161209 - 0076593 - cấu hình có quyền edit dữ liệu với ngày hiệu lực < ngày hiệu lực cũ hay ko
                            if (isAllowCreate == true)
                            {
                                isAddWorkHistory = true;
                            }
                            else
                            {
                                model.SetPropertyValue(Constant.ActionStatus, ConstantDisplay.HRM_HR_Profile_DateEffectNotAvailable.TranslateString());
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }

                    #endregion

                    bool isAddCandidateWorklist = false;
                    #region Xử lý lưu CardCode
                    var cardservices = new Hre_CardHistoryServices();
                    var workHistoryservices = new Hre_WorkHistoryServices();
                    Hre_CardHistoryEntity cardhistory = null;
                    //Son.Vo - 20170509 - 0082097 - có nhập mã chấm công mới xử lý cardhistory
                    if (model.Tab_ProfileBasic != null && model.Tab_ProfileBasic.CodeAttendance != null)
                    {
                        if (profileEntity != null && model.Tab_ProfileBasic.DateApplyAttendanceCode != null && (model.Tab_ProfileBasic.CodeAttendance != profileEntity.CodeAttendance
                   || model.Tab_ProfileBasic.DateApplyAttendanceCode != profileEntity.DateApplyAttendanceCode))
                        {
                            // Chỉ thay đổi mã chấm công
                            if (model.Tab_ProfileBasic.DateApplyAttendanceCode == profileEntity.DateApplyAttendanceCode && model.Tab_ProfileBasic.CodeAttendance != profileEntity.CodeAttendance)
                            {
                                var history = cardservices.GetDataCardHistoryByProfileID(model.ID);
                                if (history != null)
                                {
                                    history.CardCode = model.Tab_ProfileBasic.CodeAttendance;
                                    cardservices.Edit(history);
                                }
                                else
                                {
                                    history = new Hre_CardHistoryEntity();
                                    history.ProfileID = model.ID;
                                    history.CardCode = model.Tab_ProfileBasic.CodeAttendance;
                                    history.DateEffect = model.Tab_ProfileBasic.DateApplyAttendanceCode;
                                    cardservices.Add(history);
                                }
                            }
                            // Chỉ thay đổi Ngày áp dụng mã chấm công

                            else if (model.Tab_ProfileBasic.CodeAttendance == profileEntity.CodeAttendance && model.Tab_ProfileBasic.DateApplyAttendanceCode != profileEntity.DateApplyAttendanceCode)
                            {
                                if (model.Tab_ProfileBasic.DateApplyAttendanceCode < profileEntity.DateApplyAttendanceCode)
                                {
                                    //Son.Vo - 20161209 - 0076593 - cấu hình có quyền edit dữ liệu với ngày hiệu lực < ngày hiệu lực cũ hay ko
                                    if (isAllowCreate == true)
                                    {
                                        var historyNew = new Hre_CardHistoryEntity();
                                        historyNew.ProfileID = model.ID;
                                        historyNew.CardCode = model.Tab_ProfileBasic.CodeAttendance;
                                        historyNew.DateEffect = model.Tab_ProfileBasic.DateApplyAttendanceCode;
                                        cardservices.Add(historyNew);
                                    }
                                    else
                                    {
                                        model.ActionStatus = "InvalidDateApplyAttendanceCode";
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                else
                                {
                                    var history = cardservices.GetDataCardHistoryByProfileID(model.ID);
                                    if (history != null)
                                    {
                                        history.DateEffect = model.Tab_ProfileBasic.DateApplyAttendanceCode;
                                        cardservices.Edit(history);
                                    }
                                    else
                                    {
                                        history = new Hre_CardHistoryEntity();
                                        history.ProfileID = model.ID;
                                        history.CardCode = model.Tab_ProfileBasic.CodeAttendance;
                                        history.DateEffect = model.Tab_ProfileBasic.DateApplyAttendanceCode;
                                        cardservices.Add(history);
                                    }
                                }
                            }
                        }

                        // Tạo mới NV hoặc thay đổi cả 2( mã chấm công + ngày hiệu lực)
                        if (model != null && model.ID == Guid.Empty || (model != null && profileEntity != null && model.Tab_ProfileBasic.CodeAttendance != profileEntity.CodeAttendance
                                    && model.Tab_ProfileBasic.DateApplyAttendanceCode != profileEntity.DateApplyAttendanceCode))
                        {
                            cardhistory = new Hre_CardHistoryEntity();
                            cardhistory.ProfileID = model.ID;
                            cardhistory.CardCode = model.Tab_ProfileBasic.CodeAttendance;
                            cardhistory.DateEffect = model.Tab_ProfileBasic.DateApplyAttendanceCode;
                        }
                    }


                    #endregion

                    #region Xử lý lưu quá trình công tác (tạo mới)
                    var workHistory = new Hre_WorkHistoryEntity();
                    if (isAddWorkHistory == true)
                    {
                        var workPlaceService = new Cat_WorkPlaceServices();
                        //Son.Vo - 20170804 - 0085864
                        if (model.Tab_ProfileBasic.StatusSyn == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                        {
                            workHistory.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                        }
                        else if (model.Tab_ProfileBasic.StatusSyn == ProfileStatusSyn.E_HIRE.ToString())
                        {
                            workHistory.Status = WorkHistoryStatus.E_APPROVED.ToString();
                        }
                        if (model.Tab_ProfileWorkhistory != null)
                        {
                            workHistory.CostCentreID = model.Tab_ProfileWorkhistory.CostCentreID;
                            workHistory.OrganizationStructureID = model.Tab_ProfileWorkhistory.OrgStructureID;
                            workHistory.PositionID = model.Tab_ProfileWorkhistory.PositionID;
                            workHistory.JobTitleID = model.Tab_ProfileWorkhistory.JobTitleID;
                            workHistory.SalaryClassID = model.Tab_ProfileWorkhistory.SalaryClassID;
                            workHistory.CostSourceID = model.Tab_ProfileWorkhistory.CostSourceID;
                            workHistory.AbilityTileID = model.Tab_ProfileWorkhistory.AbilityTileID;
                            workHistory.CostActivityID = model.Tab_ProfileWorkhistory.CostActivityID;
                            workHistory.Permission = model.Tab_ProfileWorkhistory.Permission;
                            workHistory.JobDescription = model.Tab_ProfileWorkhistory.JobDescription;
                            workHistory.TaskShortTerm = model.Tab_ProfileWorkhistory.TaskShortTerm;
                            workHistory.TaskLongTerm = model.Tab_ProfileWorkhistory.TaskLongTerm;
                            workHistory.PayrollGroupID = model.Tab_ProfileWorkhistory.PayrollGroupID;
                            workHistory.LaborType = model.Tab_ProfileWorkhistory.LaborType;
                            workHistory.EmployeeTypeID = model.Tab_ProfileWorkhistory.EmpTypeID;
                            workHistory.CompanyID = model.Tab_ProfileWorkhistory.CompanyID;
                            // Son.Vo - 20151026 - 0058929
                            workHistory.ShopID = model.Tab_ProfileWorkhistory.ShopID;
                            // Son.Vo - 20151026 - 0061394
                            workHistory.RegionID = model.Tab_ProfileWorkhistory.RegionID;
                            workHistory.WorkPlaceID = model.Tab_ProfileWorkhistory.WorkPlaceID;
                            workHistory.PayrollCategoryID = model.Tab_ProfileWorkhistory.PayrollCategoryID;
                            workHistory.UnitStructureID = model.Tab_ProfileWorkhistory.UnitStructureID;
                            workHistory.TypeOfTransferID = model.Tab_ProfileWorkhistory.TypeOfTransferID;// Son.Vo - 20160905 - 0073053
                            workHistory.EmployeeGroupID = model.Tab_ProfileWorkhistory.EmployeeGroupID;
                            workHistory.UsualAllowanceGroupID = model.Tab_ProfileWorkhistory.UsualAllowanceGroupID;
                            if (model.Tab_ProfileWorkhistory.DateComeBack != null)
                            {
                                workHistory.DateComeBack = model.Tab_ProfileWorkhistory.DateComeBack.Value;
                            }
                            if (workHistory.ID == Guid.Empty)
                            {
                                if (model.Tab_ProfileWorkhistory.DateOfEffect != null)
                                {
                                    workHistory.DateEffective = model.Tab_ProfileWorkhistory.DateOfEffect.Value;
                                }
                                else
                                {
                                    workHistory.DateEffective = DateTime.Now;
                                }
                            }
                            #region Son.Vo - 20160530 - 0068246 - lưu thêm các thông tin người quản lý vào qtct
                            if (model.Tab_ProfileWorkhistory.SupervisorID != null)
                            {
                                var SupervisorID = serviceProfile.getprofileNameAndCodeByListIDs(model.Tab_ProfileWorkhistory.SupervisorID.Value);
                                if (SupervisorID != null)
                                {
                                    workHistory.Supervisor = SupervisorID.CodeEmp;
                                }
                            }
                            if (model.Tab_ProfileWorkhistory.MidSupervisorID != null)
                            {
                                var MidSupervisorID = serviceProfile.getprofileNameAndCodeByListIDs(model.Tab_ProfileWorkhistory.MidSupervisorID.Value);
                                if (MidSupervisorID != null)
                                {
                                    workHistory.MidSupervisor = MidSupervisorID.CodeEmp;
                                }
                            }
                            if (model.Tab_ProfileWorkhistory.HighSupervisorID != null)
                            {
                                var HighSupervisorID = serviceProfile.getprofileNameAndCodeByListIDs(model.Tab_ProfileWorkhistory.HighSupervisorID.Value);
                                if (HighSupervisorID != null)
                                {
                                    workHistory.HighSupervisor = HighSupervisorID.CodeEmp;
                                }
                            }
                            #endregion
                            // Nguyen.Le - 20170927 - 0087395
                            workHistory.IsNotComputProductSalary = model.Tab_ProfileWorkhistory.IsNotComputProductSalary;
                            // Nguyen.Le - 08/01/2018 - 0092118
                            workHistory.SkillLevel = model.Tab_ProfileWorkhistory.SikillLevel;
                        }
                        if (model.Tab_ProfileBasic != null)
                        {
                            workHistory.NationalityGroupID = model.Tab_ProfileBasic.NationalityGroupID;
                            workHistory.CodeEmp = model.Tab_ProfileBasic.CodeEmp;

                            if (profileEntity != null && (model.ActionStatus == "1" || (model.Tab_ProfileWorkhistory.DateOfEffect != profileEntity.DateOfEffect)))
                            {
                                var workPlaceOld = new Cat_WorkPlaceEntity();
                                if (profileEntity.WorkPlaceID != null && profileEntity.WorkPlaceID != Guid.Empty)
                                {
                                    workPlaceOld = workPlaceService.getDataByID(profileEntity.WorkPlaceID.Value);
                                }
                                // Son.Vo - 20151028 - 0058916 - Lưu thông tin quá trình công tác cũ
                                workHistory.OrgStructureOldID = profileEntity.OrgStructureID;
                                workHistory.CostCentreOld = profileEntity.CostCentreName;
                                workHistory.SalaryClassNameOld = profileEntity.SalaryClassName;
                                workHistory.WorkLocationOld = workPlaceOld != null ? workPlaceOld.WorkPlaceName : null;
                                workHistory.PositionOld = profileEntity.PositionName;
                                workHistory.JobTitleOld = profileEntity.JobTitleName;
                                workHistory.LaborTypeOld = profileEntity.LaborType;
                                workHistory.EmployeeTypeOld = profileEntity.EmploymentType;
                                workHistory.PayrollGroupOld = profileEntity.PayrollGroupName;
                            }
                        }
                        if (model.Tab_ProfileQuit != null)
                        {
                            if (model.Tab_ProfileQuit.DateQuit != null && (profileEntity == null || profileEntity.DateQuit != model.Tab_ProfileQuit.DateQuit))
                            {
                                workHistory.DateEffective = model.Tab_ProfileQuit.DateQuit.Value;
                            }
                        }
                    }
                    #endregion
                    var profileSave = serviceProfile.GetProfileDataByID(model.Tab_ProfileBasic.ID).CopyData<Hre_ProfileModel>();
                    if (profileSave != null)
                    {

                        if (model.Tab_ProfileContact != null)
                        {
                            foreach (var item in model.Tab_ProfileContact.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileContact.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileWorkhistory != null)
                        {

                            foreach (var item in model.Tab_ProfileWorkhistory.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileWorkhistory.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileBasicSalary != null)
                        {
                            foreach (var item in model.Tab_ProfileBasicSalary.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileBasicSalary.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileInsuranceSalary != null)
                        {
                            foreach (var item in model.Tab_ProfileInsuranceSalary.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileInsuranceSalary.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileAttGrade != null)
                        {
                            foreach (var item in model.Tab_ProfileAttGrade.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileAttGrade.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileSalGrade != null)
                        {
                            foreach (var item in model.Tab_ProfileSalGrade.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileSalGrade.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileInsurance != null)
                        {
                            foreach (var item in model.Tab_ProfileInsurance.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileInsurance.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileGradeInsurance != null)
                        {
                            foreach (var item in model.Tab_ProfileGradeInsurance.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileGradeInsurance.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileQuit != null)
                        {
                            foreach (var item in model.Tab_ProfileQuit.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileQuit.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileMoreInfo != null)
                        {
                            foreach (var item in model.Tab_ProfileMoreInfo.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileMoreInfo.GetPropertyValue(item.Name));
                            }
                        }

                        //Để tab này cuối cùng để set lại ID đúng nhất
                        if (model.Tab_ProfileBasic != null)
                        {
                            foreach (var item in model.Tab_ProfileBasic.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileBasic.GetPropertyValue(item.Name));
                            }
                        }
                    }
                    profileSave.ID = profileID;
                    var profileModel = service.UpdateOrCreate<Hre_ProfileEntity, Hre_ProfileModel>(profileSave);
                    model.ActionStatus = profileModel.ActionStatus;

                    if (profileModel.ActionStatus == NotificationType.Success.ToString() && profileModel.ID != Guid.Empty)
                    {
                        if (cardhistory != null && profileModel != null && model.Tab_ProfileBasic.CodeAttendance != null)
                        {
                            cardhistory.ProfileID = profileModel.ID;
                            cardservices.Add(cardhistory);
                        }

                        // Son.Vo - nếu thay đổi ngày hiệu lực mới tạo mới quá trình công tác - còn ko thì update
                        if (workHistory != null && profileModel != null && isAddWorkHistory == true)
                        {
                            workHistory.EmployeeTypeID = profileModel.EmpTypeID;
                            workHistory.ProfileID = profileModel.ID;
                            workHistoryservices.Add(workHistory);
                        }
                        else
                        {
                            workHistoryservices.updateWorkHistoryByProfile(profileModel.ID);
                        }

                        #region Son.Vo - 20160624 - 0069165
                        if (isAddCandidateWorklist == true)
                        {
                            if (model.Tab_ProfileWorkhistory != null)
                            {
                                if (model.Tab_ProfileWorkhistory.PositionID != null)
                                {
                                    var lstPositionWorkListByCandidate = serviceProfile.getPositionWorkListbyPositionID(model.Tab_ProfileWorkhistory.PositionID.Value);
                                    foreach (var PositionWorkList in lstPositionWorkListByCandidate)
                                    {
                                        var ProfileWorkList = new Hre_ProfileWorkListEntity();
                                        ProfileWorkList.ProfileID = profileModel.ID;
                                        ProfileWorkList.WorkListID = PositionWorkList.WorkListID;
                                        ProfileWorkList.Type = EnumDropDown.WorkListType.E_NEW.ToString();
                                        //Son.Vo - 20160809 - 0071831
                                        //Quyen.Quach 08/01/2017 0091985 Điều chỉnh trạng thái
                                        if (PositionWorkList.IsResolved == true)
                                        {
                                            ProfileWorkList.Status = WorkListStatus.E_DONE.ToString();
                                        }
                                        else
                                        {
                                            ProfileWorkList.Status = WorkListStatus.E_OPEN.ToString();
                                        }
                                        string strmessage = serviceProfile.Add(ProfileWorkList);
                                    }
                                }
                            }
                            var lstWorkListNotInPosition = serviceProfile.getWorkListNotInPosition();
                            foreach (var WorkList in lstWorkListNotInPosition)
                            {
                                var ProfileWorkList = new Hre_ProfileWorkListEntity();
                                ProfileWorkList.ProfileID = profileModel.ID;
                                ProfileWorkList.WorkListID = WorkList.ID;
                                ProfileWorkList.Type = EnumDropDown.WorkListType.E_NEW.ToString();
                                //Son.Vo - 20160809 - 0071831
                                if (profileModel.DateHire != null && WorkList.Duration != null)
                                {
                                    ProfileWorkList.ResolveDate = profileModel.DateHire.Value.AddDays(WorkList.Duration.Value);
                                }
                                //Quyen.Quach 08/01/2017 0091985 Điều chỉnh trạng thái
                                if (WorkList.IsResolved == true)
                                {
                                    ProfileWorkList.Status = WorkListStatus.E_DONE.ToString();
                                }
                                else
                                {
                                    ProfileWorkList.Status = WorkListStatus.E_OPEN.ToString();
                                }
                                string strmessage = serviceProfile.Add(ProfileWorkList);
                            }
                            #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                            if (model.Tab_ProfileWorkhistory.PositionID != null)
                            {
                                var _DEFAULTSTATUSEMP = sysServices.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_DEFAULTSTATUSEMP);
                                if (_DEFAULTSTATUSEMP == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                                {
                                }
                                else
                                {
                                    var positionServices = new Cat_PositionServices();
                                    var positionByProfile = positionServices.GetDataPositionByID(model.Tab_ProfileWorkhistory.PositionID.Value);
                                    if (positionByProfile != null && positionByProfile.HeadPosProfileID == null)
                                    {
                                        positionByProfile.HeadPosProfileID = profileModel.ID;
                                        positionServices.Edit(positionByProfile);
                                    }
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }

                    //Son.Vo - 20170321 - 0079961

                    string messageRef = serviceProfile.CreateOrUpdateHealthInsuranceCard(profileModel.CopyData<Hre_ProfileEntity>());
                    //Son.Vo - 20170826 - 0087126
                    messageRef = serviceProfile.CreateOrUpdateProfileMoreinfo(profileModel.CopyData<Hre_ProfileEntity>());

                    #region Tạo lương CB
                    if (isloadTabProfileBasicSalary == true && profileModel.GrossAmountSalary != null && profileModel.CurrencyIDSalary != null && profileModel.DateOfEffect != null)
                    {
                        //hau.le-87668-20170905
                        var basicSalaryEntitty = new Sal_BasicSalaryEntity();
                        if (model.Tab_ProfileBasicSalary != null)
                            basicSalaryEntitty = salaryservices.GetBasicSalaryByProAndDateEffect(model.Tab_ProfileBasic.ID, model.Tab_ProfileBasicSalary.DateOfEffectSalary);
                        else
                            basicSalaryEntitty = null;
                        if (basicSalaryEntitty == null)
                        {
                            var salaryEntity = new Sal_BasicSalaryEntity();
                            salaryEntity.ProfileID = profileModel.ID;
                            salaryEntity.JobLevel = profileModel.JobLevelSalary;
                            salaryEntity.SalAdjustmentCampaignID = profileModel.SalAdjustmentCampaignIDSalary;
                            salaryEntity.DecisionNo = profileModel.DecisionNoSalary;
                            salaryEntity.DateOfEffect = profileModel.DateOfEffect.Value;
                            salaryEntity.GrossAmount = profileModel.GrossAmountSalary;
                            salaryEntity.CurrencyID = profileModel.CurrencyIDSalary;
                            salaryEntity.CurrencyInsID = profileModel.CurrencyInsID;
                            salaryEntity.InsuranceAmount = profileModel.InsuranceAmountSalary;
                            salaryEntity.Status = profileModel.Status; // Son.Vo - 20161022 - 0074678
                            salaryEntity.Note = profileModel.NoteSalary;

                            salaryEntity.ClassRateID = profileModel.ClassRateIDSalary;
                            salaryEntity.RankRateID = profileModel.RankRateIDSalary;
                            salaryEntity.PriceTypeID = profileModel.PriceTypeIDSalary;
                            salaryEntity.PersonalRate = profileModel.PersonalRateSalary;
                            salaryEntity.AllowanceType1ID = profileModel.AllowanceType1IDSalary;
                            salaryEntity.AllowanceAmount1 = profileModel.AllowanceAmount1Salary;
                            salaryEntity.CurrencyID1 = profileModel.CurrencyID1Salary;

                            salaryEntity.AllowanceType2ID = profileModel.AllowanceType2IDSalary;
                            salaryEntity.AllowanceAmount2 = profileModel.AllowanceAmount2Salary;
                            salaryEntity.CurrencyID2 = profileModel.CurrencyID2Salary;

                            salaryEntity.AllowanceType3ID = profileModel.AllowanceType3IDSalary;
                            salaryEntity.AllowanceAmount3 = profileModel.AllowanceAmount3Salary;
                            salaryEntity.CurrencyID3 = profileModel.CurrencyID3Salary;

                            salaryEntity.AllowanceType4ID = profileModel.AllowanceType4IDSalary;
                            salaryEntity.AllowanceAmount4 = profileModel.AllowanceAmount4Salary;
                            salaryEntity.CurrencyID4 = profileModel.CurrencyID4Salary;

                            salaryEntity.AllowanceTypeID5 = profileModel.AllowanceTypeID5Salary;
                            salaryEntity.AllowanceAmount5 = profileModel.AllowanceAmount5Salary;
                            salaryEntity.CurrencyID5 = profileModel.CurrencyID5Salary;

                            salaryEntity.AllowanceTypeID6 = profileModel.AllowanceTypeID6Salary;
                            salaryEntity.AllowanceAmount6 = profileModel.AllowanceAmount6Salary;
                            salaryEntity.CurrencyID6 = profileModel.CurrencyID6Salary;

                            salaryEntity.AllowanceTypeID7 = profileModel.AllowanceTypeID7Salary;
                            salaryEntity.AllowanceAmount7 = profileModel.AllowanceAmount7Salary;
                            salaryEntity.CurrencyID7 = profileModel.CurrencyID7Salary;

                            salaryEntity.AllowanceTypeID8 = profileModel.AllowanceTypeID8Salary;
                            salaryEntity.AllowanceAmount8 = profileModel.AllowanceAmount8Salary;
                            salaryEntity.CurrencyID8 = profileModel.CurrencyID8Salary;

                            salaryEntity.AllowanceTypeID9 = profileModel.AllowanceTypeID9Salary;
                            salaryEntity.AllowanceAmount9 = profileModel.AllowanceAmount9Salary;
                            salaryEntity.CurrencyID9 = profileModel.CurrencyID9Salary;

                            salaryEntity.AllowanceTypeID10 = profileModel.AllowanceTypeID10Salary;
                            salaryEntity.AllowanceAmount10 = profileModel.AllowanceAmount10Salary;
                            salaryEntity.CurrencyID10 = profileModel.CurrencyID10Salary;

                            salaryEntity.AllowanceTypeID11 = profileModel.AllowanceTypeID11Salary;
                            salaryEntity.AllowanceAmount11 = profileModel.AllowanceAmount11Salary;
                            salaryEntity.CurrencyID11 = profileModel.CurrencyID11Salary;

                            salaryEntity.AllowanceTypeID12 = profileModel.AllowanceTypeID12Salary;
                            salaryEntity.AllowanceAmount12 = profileModel.AllowanceAmount12Salary;
                            salaryEntity.CurrencyID12 = profileModel.CurrencyID12Salary;

                            salaryEntity.AllowanceTypeID13 = profileModel.AllowanceTypeID13Salary;
                            salaryEntity.AllowanceAmount13 = profileModel.AllowanceAmount13Salary;
                            salaryEntity.CurrencyID13 = profileModel.CurrencyID13Salary;

                            salaryEntity.AllowanceTypeID14 = profileModel.AllowanceTypeID14Salary;
                            salaryEntity.AllowanceAmount14 = profileModel.AllowanceAmount14Salary;
                            salaryEntity.CurrencyID14 = profileModel.CurrencyID14Salary;

                            salaryEntity.AllowanceTypeID15 = profileModel.AllowanceTypeID15Salary;
                            salaryEntity.AllowanceAmount15 = profileModel.AllowanceAmount15Salary;
                            salaryEntity.CurrencyID15 = profileModel.CurrencyID15Salary;
                            //Son.Vo - 20170804 - 0085864
                            if (profileModel.StatusSyn == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                            {
                                salaryEntity.Status = EnumDropDown.Sal_BasicSalaryStatus.E_WATTING_APPROVED.ToString();
                            }
                            else if (profileModel.StatusSyn == ProfileStatusSyn.E_HIRE.ToString())
                            {
                                salaryEntity.Status = EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString();
                            }
                            string messageAddSal = salaryservices.Add(salaryEntity);
                        }
                        else
                        {
                            basicSalaryEntitty.JobLevel = profileModel.JobLevelSalary;
                            basicSalaryEntitty.SalAdjustmentCampaignID = profileModel.SalAdjustmentCampaignIDSalary;
                            basicSalaryEntitty.DecisionNo = profileModel.DecisionNoSalary;
                            basicSalaryEntitty.DateOfEffect = profileModel.DateOfEffect.Value;
                            basicSalaryEntitty.GrossAmount = profileModel.GrossAmountSalary;
                            basicSalaryEntitty.CurrencyID = profileModel.CurrencyIDSalary;
                            basicSalaryEntitty.CurrencyInsID = profileModel.CurrencyInsID;
                            basicSalaryEntitty.InsuranceAmount = profileModel.InsuranceAmountSalary;
                            basicSalaryEntitty.Status = profileModel.StatusSalary;
                            basicSalaryEntitty.Note = profileModel.NoteSalary;
                            basicSalaryEntitty.ClassRateID = profileModel.ClassRateIDSalary;
                            basicSalaryEntitty.RankRateID = profileModel.RankRateIDSalary;
                            basicSalaryEntitty.PriceTypeID = profileModel.PriceTypeIDSalary;
                            basicSalaryEntitty.PersonalRate = profileModel.PersonalRateSalary;
                            basicSalaryEntitty.AllowanceType1ID = profileModel.AllowanceType1IDSalary;
                            basicSalaryEntitty.AllowanceAmount1 = profileModel.AllowanceAmount1Salary;
                            basicSalaryEntitty.CurrencyID1 = profileModel.CurrencyID1Salary;
                            basicSalaryEntitty.AllowanceType2ID = profileModel.AllowanceType2IDSalary;
                            basicSalaryEntitty.AllowanceAmount2 = profileModel.AllowanceAmount2Salary;
                            basicSalaryEntitty.CurrencyID2 = profileModel.CurrencyID2Salary;
                            basicSalaryEntitty.AllowanceType3ID = profileModel.AllowanceType3IDSalary;
                            basicSalaryEntitty.AllowanceAmount3 = profileModel.AllowanceAmount3Salary;
                            basicSalaryEntitty.CurrencyID3 = profileModel.CurrencyID3Salary;
                            basicSalaryEntitty.AllowanceType4ID = profileModel.AllowanceType4IDSalary;
                            basicSalaryEntitty.AllowanceAmount4 = profileModel.AllowanceAmount4Salary;
                            basicSalaryEntitty.CurrencyID4 = profileModel.CurrencyID4Salary;
                            basicSalaryEntitty.AllowanceTypeID5 = profileModel.AllowanceTypeID5Salary;
                            basicSalaryEntitty.AllowanceAmount5 = profileModel.AllowanceAmount5Salary;
                            basicSalaryEntitty.CurrencyID5 = profileModel.CurrencyID5Salary;
                            basicSalaryEntitty.AllowanceTypeID6 = profileModel.AllowanceTypeID6Salary;
                            basicSalaryEntitty.AllowanceAmount6 = profileModel.AllowanceAmount6Salary;
                            basicSalaryEntitty.CurrencyID6 = profileModel.CurrencyID6Salary;
                            basicSalaryEntitty.AllowanceTypeID7 = profileModel.AllowanceTypeID7Salary;
                            basicSalaryEntitty.AllowanceAmount7 = profileModel.AllowanceAmount7Salary;
                            basicSalaryEntitty.CurrencyID7 = profileModel.CurrencyID7Salary;
                            basicSalaryEntitty.AllowanceTypeID8 = profileModel.AllowanceTypeID8Salary;
                            basicSalaryEntitty.AllowanceAmount8 = profileModel.AllowanceAmount8Salary;
                            basicSalaryEntitty.CurrencyID8 = profileModel.CurrencyID8Salary;
                            basicSalaryEntitty.AllowanceTypeID9 = profileModel.AllowanceTypeID9Salary;
                            basicSalaryEntitty.AllowanceAmount9 = profileModel.AllowanceAmount9Salary;
                            basicSalaryEntitty.CurrencyID9 = profileModel.CurrencyID9Salary;
                            basicSalaryEntitty.AllowanceTypeID10 = profileModel.AllowanceTypeID10Salary;
                            basicSalaryEntitty.AllowanceAmount10 = profileModel.AllowanceAmount10Salary;
                            basicSalaryEntitty.CurrencyID10 = profileModel.CurrencyID10Salary;
                            basicSalaryEntitty.AllowanceTypeID11 = profileModel.AllowanceTypeID11Salary;
                            basicSalaryEntitty.AllowanceAmount11 = profileModel.AllowanceAmount11Salary;
                            basicSalaryEntitty.CurrencyID11 = profileModel.CurrencyID11Salary;
                            basicSalaryEntitty.AllowanceTypeID12 = profileModel.AllowanceTypeID12Salary;
                            basicSalaryEntitty.AllowanceAmount12 = profileModel.AllowanceAmount12Salary;
                            basicSalaryEntitty.CurrencyID12 = profileModel.CurrencyID12Salary;
                            basicSalaryEntitty.AllowanceTypeID13 = profileModel.AllowanceTypeID13Salary;
                            basicSalaryEntitty.AllowanceAmount13 = profileModel.AllowanceAmount13Salary;
                            basicSalaryEntitty.CurrencyID13 = profileModel.CurrencyID13Salary;
                            basicSalaryEntitty.AllowanceTypeID14 = profileModel.AllowanceTypeID14Salary;
                            basicSalaryEntitty.AllowanceAmount14 = profileModel.AllowanceAmount14Salary;
                            basicSalaryEntitty.CurrencyID14 = profileModel.CurrencyID14Salary;
                            basicSalaryEntitty.AllowanceTypeID15 = profileModel.AllowanceTypeID15Salary;
                            basicSalaryEntitty.AllowanceAmount15 = profileModel.AllowanceAmount15Salary;
                            basicSalaryEntitty.CurrencyID15 = profileModel.CurrencyID15Salary;
                            //Son.Vo - 20170804 - 0085864
                            if (profileModel.StatusSyn == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                            {
                                basicSalaryEntitty.Status = EnumDropDown.Sal_BasicSalaryStatus.E_WATTING_APPROVED.ToString();
                            }
                            else if (profileModel.StatusSyn == ProfileStatusSyn.E_HIRE.ToString())
                            {
                                basicSalaryEntitty.Status = EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString();
                            }
                            string messageAddSal = salaryservices.Edit(basicSalaryEntitty);
                        }
                    }
                    #endregion

                    #region Tạo lương BHXH
                    if (isloadTabProfileInsuranceSalary == true && profileModel.InsuranceAmountInsurance != null && profileModel.CurrencyIDInsurance != null && profileModel.DateEffectInsurance != null)
                    {
                        var InsuranceSalaryEntity = salaryservices.GetInsuranceSalaryByProAndDateEffect(model.Tab_ProfileBasic.ID, model.Tab_ProfileInsuranceSalary.DateEffectInsurance.Value);
                        if (InsuranceSalaryEntity == null)
                        {
                            var InsuranceSalary = new Sal_InsuranceSalaryEntity();
                            InsuranceSalary.ProfileID = profileModel.ID;
                            InsuranceSalary.DecisionNo = profileModel.DecisionNoInsurance;
                            InsuranceSalary.RankID = profileModel.RankIDInsurance;
                            InsuranceSalary.RankDetailID = profileModel.RankDetailIDInsurance;
                            InsuranceSalary.DateEffect = profileModel.DateEffectInsurance;
                            InsuranceSalary.InsuranceAmount = profileModel.InsuranceAmountInsurance;
                            InsuranceSalary.CurrencyID = profileModel.CurrencyIDInsurance;
                            InsuranceSalary.IsSocialIns = profileModel.IsSocialIns;
                            InsuranceSalary.IsMedicalIns = profileModel.IsMedicalIns;
                            InsuranceSalary.IsUnimploymentIns = profileModel.IsUnimploymentIns;
                            string messageAddSal = salaryservices.Add(InsuranceSalary);
                        }
                        else
                        {
                            InsuranceSalaryEntity.DecisionNo = profileModel.DecisionNoInsurance;
                            InsuranceSalaryEntity.RankID = profileModel.RankIDInsurance;
                            InsuranceSalaryEntity.RankDetailID = profileModel.RankDetailIDInsurance;
                            InsuranceSalaryEntity.DateEffect = profileModel.DateEffectInsurance;
                            InsuranceSalaryEntity.InsuranceAmount = profileModel.InsuranceAmountInsurance;
                            InsuranceSalaryEntity.CurrencyID = profileModel.CurrencyIDInsurance;
                            InsuranceSalaryEntity.IsSocialIns = profileModel.IsSocialIns;
                            InsuranceSalaryEntity.IsMedicalIns = profileModel.IsMedicalIns;
                            InsuranceSalaryEntity.IsUnimploymentIns = profileModel.IsUnimploymentIns;
                            string messageAddSal = salaryservices.Edit(InsuranceSalaryEntity);
                        }
                    }
                    #endregion

                    #region Tạo Chế độ công
                    if (isloadTabProfileAttGrade == true && profileModel.GradeAttendanceIDAttGrade != null && profileModel.MonthStartAttGrade != null)
                    {
                        var gradeAttendance = serviceProfile.GetGradeAttbyProfileIDAndDateEffect(model.ID, profileModel.DateOfEffect.Value);
                        if (gradeAttendance != null)
                        {
                            gradeAttendance.GradeAttendanceID = profileModel.GradeAttendanceIDAttGrade;
                            gradeAttendance.MonthStart = profileModel.MonthStartAttGrade;
                            gradeAttendance.MonthEnd = profileModel.MonthEndAttGrade;
                            string messageAddSal = salaryservices.Edit(gradeAttendance);
                        }
                        else
                        {
                            var attGradeNew = new Att_GradeEntity();
                            attGradeNew.ProfileID = profileModel.ID;
                            attGradeNew.GradeAttendanceID = profileModel.GradeAttendanceIDAttGrade;
                            attGradeNew.MonthStart = profileModel.MonthStartAttGrade;
                            attGradeNew.MonthEnd = profileModel.MonthEndAttGrade;
                            string messageAddSal = salaryservices.Add(attGradeNew);
                        }
                    }
                    #endregion

                    #region Tạo Chế độ lương
                    if (isloadTabProfileSalGrade == true && profileModel.GradePayrollIDSalGrade != null && profileModel.MonthStartSalGrade != null)
                    {
                        var gradePayroll = serviceProfile.GetGradePayrollbyProfileIDAndDateEffect(profileModel.ID, profileModel.DateOfEffect.Value);
                        if (gradePayroll != null)
                        {
                            gradePayroll.GradePayrollID = profileModel.GradePayrollIDSalGrade;
                            gradePayroll.MonthStart = profileModel.MonthStartSalGrade;
                            gradePayroll.MonthEnd = profileModel.MonthEndSalGrade;
                            string messageAddSal = salaryservices.Edit(gradePayroll);
                        }
                        else
                        {
                            var salGradeNew = new Sal_GradeEntity();
                            salGradeNew.ProfileID = profileModel.ID;
                            salGradeNew.GradePayrollID = profileModel.GradePayrollIDSalGrade;
                            salGradeNew.MonthStart = profileModel.MonthStartSalGrade;
                            salGradeNew.MonthEnd = profileModel.MonthEndSalGrade;
                            string messageAddSal = salaryservices.Add(salGradeNew);
                        }
                    }
                    #endregion

                    #region Quyen.Quach - 22/08/2017 - 0087025 Xử lý lưu ngầm Ins_InsuranceGrade
                    if (isloadTabProfileInsuranceGrade == true && profileModel.MonthOfEffect != null && profileModel.InsuranceGradeID != null)
                    {
                        var insuranceGrade = serviceProfile.getInsuranceGradebyProfileID(profileModel.ID);
                        if (insuranceGrade != null)
                        {
                            insuranceGrade.MonthOfEffect = profileModel.MonthOfEffect;
                            insuranceGrade.InsuranceGradeID = profileModel.InsuranceGradeID;
                            string messageAddSal = salaryservices.Edit(insuranceGrade);
                        }
                        else
                        {
                            var insuranceGradeEntity = new Ins_InsuranceGradeEntity();
                            insuranceGradeEntity.ProfileID = profileModel.ID;
                            insuranceGradeEntity.MonthOfEffect = profileModel.MonthOfEffect;
                            insuranceGradeEntity.InsuranceGradeID = profileModel.InsuranceGradeID;
                            string messageAddSal = salaryservices.Add(insuranceGradeEntity);
                        }
                    }
                    #endregion

                    //Son.Vo - 20171024 - Nếu chạy cho ThaCo thì tạo 1 dòng hre_basicgeneral
                    if (Common.ClientID == "Thaco")
                    {
                        string messageref = serviceProfile.UpdateOrgGeneralProfileBasic(profileModel.ID);
                    }
                }
                #endregion
                // Son.Vo - nếu không click ok thì chỉ lưu thông tin NV
                else
                {
                    var profileSave = serviceProfile.GetProfileDataByID(model.Tab_ProfileBasic.ID).CopyData<Hre_ProfileModel>();
                    if (profileSave != null)
                    {

                        if (model.Tab_ProfileContact != null)
                        {
                            foreach (var item in model.Tab_ProfileContact.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileContact.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileWorkhistory != null)
                        {

                            foreach (var item in model.Tab_ProfileWorkhistory.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileWorkhistory.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileBasicSalary != null)
                        {
                            foreach (var item in model.Tab_ProfileBasicSalary.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileBasicSalary.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileInsuranceSalary != null)
                        {
                            foreach (var item in model.Tab_ProfileInsuranceSalary.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileInsuranceSalary.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileAttGrade != null)
                        {
                            foreach (var item in model.Tab_ProfileAttGrade.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileAttGrade.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileSalGrade != null)
                        {
                            foreach (var item in model.Tab_ProfileSalGrade.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileSalGrade.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileInsurance != null)
                        {
                            foreach (var item in model.Tab_ProfileInsurance.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileInsurance.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileQuit != null)
                        {
                            foreach (var item in model.Tab_ProfileQuit.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileQuit.GetPropertyValue(item.Name));
                            }
                        }
                        if (model.Tab_ProfileMoreInfo != null)
                        {
                            foreach (var item in model.Tab_ProfileMoreInfo.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileMoreInfo.GetPropertyValue(item.Name));
                            }
                        }
                        //Để tab này cuối cùng để set lại ID đúng
                        if (model.Tab_ProfileBasic != null)
                        {
                            foreach (var item in model.Tab_ProfileBasic.GetType().GetProperties())
                            {
                                profileSave.SetPropertyValue(item.Name, model.Tab_ProfileBasic.GetPropertyValue(item.Name));
                            }
                        }
                    }
                    profileSave.ID = profileID;
                    var profileModel = service.UpdateOrCreate<Hre_ProfileEntity, Hre_ProfileModel>(profileSave);
                    model.ActionStatus = profileModel.ActionStatus;
                    #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                    if (model.Tab_ProfileWorkhistory != null && model.Tab_ProfileWorkhistory.PositionID != null)
                    {
                        var _DEFAULTSTATUSEMP = sysServices.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_DEFAULTSTATUSEMP);
                        if (_DEFAULTSTATUSEMP == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                        {
                        }
                        else
                        {
                            var _PositionServices = new Cat_PositionServices();
                            var positionByProfile = _PositionServices.GetDataPositionByID(model.Tab_ProfileWorkhistory.PositionID.Value);
                            if (positionByProfile != null && positionByProfile.HeadPosProfileID == null)
                            {
                                positionByProfile.HeadPosProfileID = profileModel.ID;
                                _PositionServices.Edit(positionByProfile);
                            }
                        }
                    }
                    #endregion
                    //Son.Vo - 20170321 - 0079961
                    string messageRef = serviceProfile.CreateOrUpdateHealthInsuranceCard(profileModel.CopyData<Hre_ProfileEntity>());

                    //Son.Vo - 20170826 - 0087126
                    messageRef = serviceProfile.CreateOrUpdateProfileMoreinfo(profileModel.CopyData<Hre_ProfileEntity>());

                    #region Tạo lương CB
                    if (isloadTabProfileBasicSalary == true && profileModel.GrossAmountSalary != null && profileModel.CurrencyIDSalary != null && profileModel.DateOfEffect != null)
                    {
                        var basicSalaryEntitty = salaryservices.GetBasicSalaryByProAndDateEffect(model.Tab_ProfileBasic.ID, model.Tab_ProfileBasicSalary.DateOfEffectSalary);
                        if (basicSalaryEntitty == null)
                        {
                            var salaryEntity = new Sal_BasicSalaryEntity();
                            salaryEntity.ProfileID = profileModel.ID;
                            salaryEntity.JobLevel = profileModel.JobLevelSalary;
                            salaryEntity.SalAdjustmentCampaignID = profileModel.SalAdjustmentCampaignIDSalary;
                            salaryEntity.DecisionNo = profileModel.DecisionNoSalary;
                            salaryEntity.DateOfEffect = profileModel.DateOfEffect.Value;
                            salaryEntity.GrossAmount = profileModel.GrossAmountSalary;
                            salaryEntity.CurrencyID = profileModel.CurrencyIDSalary;
                            salaryEntity.CurrencyInsID = profileModel.CurrencyInsID;
                            salaryEntity.InsuranceAmount = profileModel.InsuranceAmountSalary;
                            salaryEntity.Status = profileModel.Status; // Son.Vo - 20161022 - 0074678
                            salaryEntity.Note = profileModel.NoteSalary;

                            salaryEntity.ClassRateID = profileModel.ClassRateIDSalary;
                            salaryEntity.RankRateID = profileModel.RankRateIDSalary;
                            salaryEntity.PriceTypeID = profileModel.PriceTypeIDSalary;
                            salaryEntity.PersonalRate = profileModel.PersonalRateSalary;
                            salaryEntity.AllowanceType1ID = profileModel.AllowanceType1IDSalary;
                            salaryEntity.AllowanceAmount1 = profileModel.AllowanceAmount1Salary;
                            salaryEntity.CurrencyID1 = profileModel.CurrencyID1Salary;

                            salaryEntity.AllowanceType2ID = profileModel.AllowanceType2IDSalary;
                            salaryEntity.AllowanceAmount2 = profileModel.AllowanceAmount2Salary;
                            salaryEntity.CurrencyID2 = profileModel.CurrencyID2Salary;

                            salaryEntity.AllowanceType3ID = profileModel.AllowanceType3IDSalary;
                            salaryEntity.AllowanceAmount3 = profileModel.AllowanceAmount3Salary;
                            salaryEntity.CurrencyID3 = profileModel.CurrencyID3Salary;

                            salaryEntity.AllowanceType4ID = profileModel.AllowanceType4IDSalary;
                            salaryEntity.AllowanceAmount4 = profileModel.AllowanceAmount4Salary;
                            salaryEntity.CurrencyID4 = profileModel.CurrencyID4Salary;

                            salaryEntity.AllowanceTypeID5 = profileModel.AllowanceTypeID5Salary;
                            salaryEntity.AllowanceAmount5 = profileModel.AllowanceAmount5Salary;
                            salaryEntity.CurrencyID5 = profileModel.CurrencyID5Salary;

                            salaryEntity.AllowanceTypeID6 = profileModel.AllowanceTypeID6Salary;
                            salaryEntity.AllowanceAmount6 = profileModel.AllowanceAmount6Salary;
                            salaryEntity.CurrencyID6 = profileModel.CurrencyID6Salary;

                            salaryEntity.AllowanceTypeID7 = profileModel.AllowanceTypeID7Salary;
                            salaryEntity.AllowanceAmount7 = profileModel.AllowanceAmount7Salary;
                            salaryEntity.CurrencyID7 = profileModel.CurrencyID7Salary;

                            salaryEntity.AllowanceTypeID8 = profileModel.AllowanceTypeID8Salary;
                            salaryEntity.AllowanceAmount8 = profileModel.AllowanceAmount8Salary;
                            salaryEntity.CurrencyID8 = profileModel.CurrencyID8Salary;

                            salaryEntity.AllowanceTypeID9 = profileModel.AllowanceTypeID9Salary;
                            salaryEntity.AllowanceAmount9 = profileModel.AllowanceAmount9Salary;
                            salaryEntity.CurrencyID9 = profileModel.CurrencyID9Salary;

                            salaryEntity.AllowanceTypeID10 = profileModel.AllowanceTypeID10Salary;
                            salaryEntity.AllowanceAmount10 = profileModel.AllowanceAmount10Salary;
                            salaryEntity.CurrencyID10 = profileModel.CurrencyID10Salary;

                            salaryEntity.AllowanceTypeID11 = profileModel.AllowanceTypeID11Salary;
                            salaryEntity.AllowanceAmount11 = profileModel.AllowanceAmount11Salary;
                            salaryEntity.CurrencyID11 = profileModel.CurrencyID11Salary;

                            salaryEntity.AllowanceTypeID12 = profileModel.AllowanceTypeID12Salary;
                            salaryEntity.AllowanceAmount12 = profileModel.AllowanceAmount12Salary;
                            salaryEntity.CurrencyID12 = profileModel.CurrencyID12Salary;

                            salaryEntity.AllowanceTypeID13 = profileModel.AllowanceTypeID13Salary;
                            salaryEntity.AllowanceAmount13 = profileModel.AllowanceAmount13Salary;
                            salaryEntity.CurrencyID13 = profileModel.CurrencyID13Salary;

                            salaryEntity.AllowanceTypeID14 = profileModel.AllowanceTypeID14Salary;
                            salaryEntity.AllowanceAmount14 = profileModel.AllowanceAmount14Salary;
                            salaryEntity.CurrencyID14 = profileModel.CurrencyID14Salary;

                            salaryEntity.AllowanceTypeID15 = profileModel.AllowanceTypeID15Salary;
                            salaryEntity.AllowanceAmount15 = profileModel.AllowanceAmount15Salary;
                            salaryEntity.CurrencyID15 = profileModel.CurrencyID15Salary;
                            //Son.Vo - 20170804 - 0085864
                            if (profileModel.StatusSyn == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                            {
                                salaryEntity.Status = EnumDropDown.Sal_BasicSalaryStatus.E_WATTING_APPROVED.ToString();
                            }
                            else if (profileModel.StatusSyn == ProfileStatusSyn.E_HIRE.ToString())
                            {
                                salaryEntity.Status = EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString();
                            }
                            string messageAddSal = salaryservices.Add(salaryEntity);
                        }
                        else
                        {
                            basicSalaryEntitty.JobLevel = profileModel.JobLevelSalary;
                            basicSalaryEntitty.SalAdjustmentCampaignID = profileModel.SalAdjustmentCampaignIDSalary;
                            basicSalaryEntitty.DecisionNo = profileModel.DecisionNoSalary;
                            basicSalaryEntitty.DateOfEffect = profileModel.DateOfEffect.Value;
                            basicSalaryEntitty.GrossAmount = profileModel.GrossAmountSalary;
                            basicSalaryEntitty.CurrencyID = profileModel.CurrencyIDSalary;
                            basicSalaryEntitty.CurrencyInsID = profileModel.CurrencyInsID;
                            basicSalaryEntitty.InsuranceAmount = profileModel.InsuranceAmountSalary;
                            basicSalaryEntitty.Status = profileModel.StatusSalary;
                            basicSalaryEntitty.Note = profileModel.NoteSalary;
                            basicSalaryEntitty.ClassRateID = profileModel.ClassRateIDSalary;
                            basicSalaryEntitty.RankRateID = profileModel.RankRateIDSalary;
                            basicSalaryEntitty.PriceTypeID = profileModel.PriceTypeIDSalary;
                            basicSalaryEntitty.PersonalRate = profileModel.PersonalRateSalary;
                            basicSalaryEntitty.AllowanceType1ID = profileModel.AllowanceType1IDSalary;
                            basicSalaryEntitty.AllowanceAmount1 = profileModel.AllowanceAmount1Salary;
                            basicSalaryEntitty.CurrencyID1 = profileModel.CurrencyID1Salary;
                            basicSalaryEntitty.AllowanceType2ID = profileModel.AllowanceType2IDSalary;
                            basicSalaryEntitty.AllowanceAmount2 = profileModel.AllowanceAmount2Salary;
                            basicSalaryEntitty.CurrencyID2 = profileModel.CurrencyID2Salary;
                            basicSalaryEntitty.AllowanceType3ID = profileModel.AllowanceType3IDSalary;
                            basicSalaryEntitty.AllowanceAmount3 = profileModel.AllowanceAmount3Salary;
                            basicSalaryEntitty.CurrencyID3 = profileModel.CurrencyID3Salary;
                            basicSalaryEntitty.AllowanceType4ID = profileModel.AllowanceType4IDSalary;
                            basicSalaryEntitty.AllowanceAmount4 = profileModel.AllowanceAmount4Salary;
                            basicSalaryEntitty.CurrencyID4 = profileModel.CurrencyID4Salary;
                            basicSalaryEntitty.AllowanceTypeID5 = profileModel.AllowanceTypeID5Salary;
                            basicSalaryEntitty.AllowanceAmount5 = profileModel.AllowanceAmount5Salary;
                            basicSalaryEntitty.CurrencyID5 = profileModel.CurrencyID5Salary;
                            basicSalaryEntitty.AllowanceTypeID6 = profileModel.AllowanceTypeID6Salary;
                            basicSalaryEntitty.AllowanceAmount6 = profileModel.AllowanceAmount6Salary;
                            basicSalaryEntitty.CurrencyID6 = profileModel.CurrencyID6Salary;
                            basicSalaryEntitty.AllowanceTypeID7 = profileModel.AllowanceTypeID7Salary;
                            basicSalaryEntitty.AllowanceAmount7 = profileModel.AllowanceAmount7Salary;
                            basicSalaryEntitty.CurrencyID7 = profileModel.CurrencyID7Salary;
                            basicSalaryEntitty.AllowanceTypeID8 = profileModel.AllowanceTypeID8Salary;
                            basicSalaryEntitty.AllowanceAmount8 = profileModel.AllowanceAmount8Salary;
                            basicSalaryEntitty.CurrencyID8 = profileModel.CurrencyID8Salary;
                            basicSalaryEntitty.AllowanceTypeID9 = profileModel.AllowanceTypeID9Salary;
                            basicSalaryEntitty.AllowanceAmount9 = profileModel.AllowanceAmount9Salary;
                            basicSalaryEntitty.CurrencyID9 = profileModel.CurrencyID9Salary;
                            basicSalaryEntitty.AllowanceTypeID10 = profileModel.AllowanceTypeID10Salary;
                            basicSalaryEntitty.AllowanceAmount10 = profileModel.AllowanceAmount10Salary;
                            basicSalaryEntitty.CurrencyID10 = profileModel.CurrencyID10Salary;
                            basicSalaryEntitty.AllowanceTypeID11 = profileModel.AllowanceTypeID11Salary;
                            basicSalaryEntitty.AllowanceAmount11 = profileModel.AllowanceAmount11Salary;
                            basicSalaryEntitty.CurrencyID11 = profileModel.CurrencyID11Salary;
                            basicSalaryEntitty.AllowanceTypeID12 = profileModel.AllowanceTypeID12Salary;
                            basicSalaryEntitty.AllowanceAmount12 = profileModel.AllowanceAmount12Salary;
                            basicSalaryEntitty.CurrencyID12 = profileModel.CurrencyID12Salary;
                            basicSalaryEntitty.AllowanceTypeID13 = profileModel.AllowanceTypeID13Salary;
                            basicSalaryEntitty.AllowanceAmount13 = profileModel.AllowanceAmount13Salary;
                            basicSalaryEntitty.CurrencyID13 = profileModel.CurrencyID13Salary;
                            basicSalaryEntitty.AllowanceTypeID14 = profileModel.AllowanceTypeID14Salary;
                            basicSalaryEntitty.AllowanceAmount14 = profileModel.AllowanceAmount14Salary;
                            basicSalaryEntitty.CurrencyID14 = profileModel.CurrencyID14Salary;
                            basicSalaryEntitty.AllowanceTypeID15 = profileModel.AllowanceTypeID15Salary;
                            basicSalaryEntitty.AllowanceAmount15 = profileModel.AllowanceAmount15Salary;
                            basicSalaryEntitty.CurrencyID15 = profileModel.CurrencyID15Salary;
                            //Son.Vo - 20170804 - 0085864
                            if (profileModel.StatusSyn == ProfileStatusSyn.E_WAITING_APPROVE.ToString())
                            {
                                basicSalaryEntitty.Status = EnumDropDown.Sal_BasicSalaryStatus.E_WATTING_APPROVED.ToString();
                            }
                            else if (profileModel.StatusSyn == ProfileStatusSyn.E_HIRE.ToString())
                            {
                                basicSalaryEntitty.Status = EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString();
                            }
                            string messageAddSal = salaryservices.Edit(basicSalaryEntitty);
                        }
                    }
                    #endregion

                    #region Tạo lương BHXH
                    if (isloadTabProfileInsuranceSalary == true && profileModel.InsuranceAmountInsurance != null && profileModel.CurrencyIDInsurance != null && profileModel.DateEffectInsurance != null)
                    {
                        var InsuranceSalaryEntity = salaryservices.GetInsuranceSalaryByProAndDateEffect(model.Tab_ProfileBasic.ID, model.Tab_ProfileInsuranceSalary.DateEffectInsurance.Value);
                        if (InsuranceSalaryEntity == null)
                        {
                            var InsuranceSalary = new Sal_InsuranceSalaryEntity();
                            InsuranceSalary.ProfileID = profileModel.ID;
                            InsuranceSalary.DecisionNo = profileModel.DecisionNoInsurance;
                            InsuranceSalary.RankID = profileModel.RankIDInsurance;
                            InsuranceSalary.RankDetailID = profileModel.RankDetailIDInsurance;
                            InsuranceSalary.DateEffect = profileModel.DateEffectInsurance;
                            InsuranceSalary.InsuranceAmount = profileModel.InsuranceAmountInsurance;
                            InsuranceSalary.CurrencyID = profileModel.CurrencyIDInsurance;
                            InsuranceSalary.IsSocialIns = profileModel.IsSocialIns;
                            InsuranceSalary.IsMedicalIns = profileModel.IsMedicalIns;
                            InsuranceSalary.IsUnimploymentIns = profileModel.IsUnimploymentIns;
                            string messageAddSal = salaryservices.Add(InsuranceSalary);
                        }
                        else
                        {
                            InsuranceSalaryEntity.DecisionNo = profileModel.DecisionNoInsurance;
                            InsuranceSalaryEntity.RankID = profileModel.RankIDInsurance;
                            InsuranceSalaryEntity.RankDetailID = profileModel.RankDetailIDInsurance;
                            InsuranceSalaryEntity.DateEffect = profileModel.DateEffectInsurance;
                            InsuranceSalaryEntity.InsuranceAmount = profileModel.InsuranceAmountInsurance;
                            InsuranceSalaryEntity.CurrencyID = profileModel.CurrencyIDInsurance;
                            InsuranceSalaryEntity.IsSocialIns = profileModel.IsSocialIns;
                            InsuranceSalaryEntity.IsMedicalIns = profileModel.IsMedicalIns;
                            InsuranceSalaryEntity.IsUnimploymentIns = profileModel.IsUnimploymentIns;
                            string messageAddSal = salaryservices.Edit(InsuranceSalaryEntity);
                        }
                    }
                    #endregion

                    #region Tạo Chế độ công
                    if (isloadTabProfileAttGrade == true && profileModel.GradeAttendanceIDAttGrade != null && profileModel.MonthStartAttGrade != null)
                    {
                        var gradeAttendance = serviceProfile.GetGradeAttbyProfileIDAndDateEffect(model.ID, profileModel.DateOfEffect.Value);
                        if (gradeAttendance != null)
                        {
                            gradeAttendance.GradeAttendanceID = profileModel.GradeAttendanceIDAttGrade;
                            gradeAttendance.MonthStart = profileModel.MonthStartAttGrade;
                            gradeAttendance.MonthEnd = profileModel.MonthEndAttGrade;
                            string messageAddSal = salaryservices.Edit(gradeAttendance);
                        }
                        else
                        {
                            var attGradeNew = new Att_GradeEntity();
                            attGradeNew.ProfileID = profileModel.ID;
                            attGradeNew.GradeAttendanceID = profileModel.GradeAttendanceIDAttGrade;
                            attGradeNew.MonthStart = profileModel.MonthStartAttGrade;
                            attGradeNew.MonthEnd = profileModel.MonthEndAttGrade;
                            string messageAddSal = salaryservices.Add(attGradeNew);
                        }

                    }
                    #endregion

                    #region Tạo Chế độ lương
                    if (isloadTabProfileSalGrade == true && profileModel.GradePayrollIDSalGrade != null && profileModel.MonthStartSalGrade != null)
                    {
                        var gradePayroll = serviceProfile.GetGradePayrollbyProfileIDAndDateEffect(profileModel.ID, profileModel.DateOfEffect.Value);
                        if (gradePayroll != null)
                        {
                            gradePayroll.GradePayrollID = profileModel.GradePayrollIDSalGrade;
                            gradePayroll.MonthStart = profileModel.MonthStartSalGrade;
                            gradePayroll.MonthEnd = profileModel.MonthEndSalGrade;
                            string messageAddSal = salaryservices.Edit(gradePayroll);
                        }
                        else
                        {
                            var salGradeNew = new Sal_GradeEntity();
                            salGradeNew.ProfileID = profileModel.ID;
                            salGradeNew.GradePayrollID = profileModel.GradePayrollIDSalGrade;
                            salGradeNew.MonthStart = profileModel.MonthStartSalGrade;
                            salGradeNew.MonthEnd = profileModel.MonthEndSalGrade;
                            string messageAddSal = salaryservices.Add(salGradeNew);
                        }
                    }
                    #endregion

                    #region Quyen.Quach - 22/08/2017 - 0087025 Xử lý lưu Ins_InsuranceGrade Chế độ bảo hiểm
                    if (isloadTabProfileInsuranceGrade == true && profileModel.MonthOfEffect != null && profileModel.InsuranceGradeID != null)
                    {
                        var insuranceGrade = serviceProfile.getInsuranceGradebyProfileID(profileModel.ID);
                        if (insuranceGrade != null)
                        {
                            insuranceGrade.MonthOfEffect = profileModel.MonthOfEffect;
                            insuranceGrade.InsuranceGradeID = profileModel.InsuranceGradeID;
                            string messageAddSal = salaryservices.Edit(insuranceGrade);
                        }
                        else
                        {
                            var insuranceGradeEntity = new Ins_InsuranceGradeEntity();
                            insuranceGradeEntity.ProfileID = profileModel.ID;
                            insuranceGradeEntity.MonthOfEffect = profileModel.MonthOfEffect;
                            insuranceGradeEntity.InsuranceGradeID = profileModel.InsuranceGradeID;
                            string messageAddSal = salaryservices.Add(insuranceGradeEntity);
                        }
                    }
                    #endregion
                    //Son.Vo - 20171024 - Nếu chạy cho ThaCo thì tạo 1 dòng hre_basicgeneral
                    if (Common.ClientID == "Thaco")
                    {
                        string messageref = serviceProfile.UpdateOrgGeneralProfileBasic(profileModel.ID);
                    }
                }
                model.ID = profileID;
                if (model.Tab_ProfileBasic != null)
                {
                    model.Tab_ProfileBasic.ID = profileID;
                }
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        /// [Chuc.Nguyen] - Lấy danh sách dữ liệu cho Nhân Viên (Hre_Profile) theo điều kiện tìm kiếm
        [HttpPost]
        public ActionResult GetProfileList([DataSourceRequest] DataSourceRequest request, Hre_ProfileActiveSearchModel model)
        {
            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileActive, UserLogin, ref status);

            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;
            //return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileActiveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileActive);
        }

        [HttpPost]
        public ActionResult GetProfileDepartmentTransferList([DataSourceRequest] DataSourceRequest request, Hre_ProfileDepartmentTransferModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileDepartmentTransferModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileDepartmentTransfer);
        }

        public ActionResult GetListProfileDuplicate([DataSourceRequest] DataSourceRequest request, Hre_ProfileDuplicateSearchModel model)
        {
            var service = new ActionService(UserLogin, LanguageCode);

            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model.CopyData<Hre_ProfileDuplicateSearchModel>())
            };
            var status = string.Empty;
            List<Hre_ProfileEntity> _listProfile = service.GetData<Hre_ProfileEntity>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileDuplicate, ref status);

            List<Hre_ProfileEntity> _listResult = new List<Hre_ProfileEntity>();

            if (model.IsDuplicateCMND == true)
            {
                var _listCMND = _listProfile.Select(m => m.IDNo).Distinct().ToList();
                foreach (var i in _listCMND)
                {
                    var _listProfileByIdNo = _listProfile.Where(m => m.IDNo == i).ToList();
                    if (_listProfileByIdNo.Count > 1)
                    {
                        _listResult.AddRange(_listProfileByIdNo);
                    }
                }
                _listResult = _listResult.OrderBy(m => m.IDNo).ToList();
            }

            if (model.IsDuplicateCodeTax == true)
            {
                var _listCodeTax = _listProfile.Select(m => m.CodeTax).Distinct().ToList();
                foreach (var i in _listCodeTax)
                {
                    var _listProfileByCodeTax = _listProfile.Where(m => m.CodeTax == i).ToList();
                    if (_listProfileByCodeTax.Count > 1)
                    {
                        _listResult.AddRange(_listProfileByCodeTax);
                    }
                }
                _listResult = _listResult.OrderBy(m => m.CodeTax).ToList();
            }

            if (model.IsDuplicateCodeTax != true && model.IsDuplicateCMND != true)
            {
                _listResult = _listProfile;
            }

            var lstProfileids = _listResult.Select(s => s.ID).ToList();
            var _PayrollTableServices = new Sal_PayrollTableServices();
            var lstPayrollTable = new List<Sal_PayrollTableEntity>();
            if (lstProfileids.Count > 0 && model.MonthSearch != null)
            {
                lstPayrollTable = _PayrollTableServices.GetListAmountPaidByProfileIDAndMonth(lstProfileids, model.MonthSearch.Value);
            }
            foreach (var item in _listResult)
            {
                var payrolltableByPro = lstPayrollTable.Where(s => s.ProfileID == item.ID).FirstOrDefault();
                if (payrolltableByPro != null)
                {
                    item.AmountPaid = payrolltableByPro.E_AmountPaid.DecryptValue();
                }
            }

            return new JsonResult() { Data = _listResult.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };
        }

        //[Chuc.Nguyen] - Lấy danh sách dữ liệu cho Nhân Viên (Hre_Profile) theo điều kiện tìm kiếm
        [HttpPost]
        public ActionResult ExportProfileListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileActiveSearchModel model)
        {
            if (!model.IsCreateTemplate && model.ExportId == Guid.Empty)
            {
                return null;
            }

            var exportservices = new Cat_ExportServices();
            string template = exportservices.checkExistTemplateByExportID(model.ExportId);

            var actionService = new ActionService(UserLogin);
            string status = string.Empty;
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _DependantServices = new Hre_DependantServices();

            //bool isGroup = profileServices.IsGroupByOrgProfileQuit();
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            //var result = new List<Hre_ProfileForExportModel>();
            var _table = new DataTable("Hre_ProfileModel");
            if (!model.IsCreateTemplate)
            {
                ListQueryModel lstModel = new ListQueryModel
                {
                    PageIndex = request.Page,
                    PageSize = request.PageSize,
                    Filters = ExtractFilterAttributes(request),
                    Sorts = ExtractSortAttributes(request),
                    UserLogin = UserLogin,
                    AdvanceFilters = ExtractAdvanceFilterAttributes(model)
                };
                var objBaseService = new BaseService();
                _table = objBaseService.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileActive, UserLogin, ref status);
                _table.TableName = "Hre_ProfileModel";
            }

            #region xuất cho dự án khác
            #region Khai bao table va tao cot
            //DataTable _table = new DataTable("Hre_ProfileModel");
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Hre_ProfileForExportModel));
            foreach (PropertyDescriptor prop in properties)
            {
                if (!_table.Columns.Contains(prop.Name))
                    _table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
            }

            #region DataColumn
            if (!_table.Columns.Contains("TimesOfContract"))
                _table.Columns.Add("TimesOfContract");
            if (!_table.Columns.Contains("UnitTime"))
                _table.Columns.Add("UnitTime");
            if (!_table.Columns.Contains("ValueTime"))
                _table.Columns.Add("ValueTime");
            if (!_table.Columns.Contains("ContractNo"))
                _table.Columns.Add("ContractNo");
            if (!_table.Columns.Contains("ContractTypeName"))
                _table.Columns.Add("ContractTypeName");
            if (!_table.Columns.Contains("DateStartContract"))
                _table.Columns.Add("DateStartContract");
            if (!_table.Columns.Contains("DateEndContract"))
                _table.Columns.Add("DateEndContract");
            if (!_table.Columns.Contains("BankCode"))
                _table.Columns.Add("BankCode");
            if (!_table.Columns.Contains("BankName2"))
                _table.Columns.Add("BankName2");
            if (!_table.Columns.Contains("BankCode2"))
                _table.Columns.Add("BankCode2");
            if (!_table.Columns.Contains("AccountNo2"))
                _table.Columns.Add("AccountNo2");
            if (!_table.Columns.Contains("TerminateDate"))
                _table.Columns.Add("TerminateDate", typeof(DateTime));
            if (!_table.Columns.Contains("SalInfo_Branch"))
                _table.Columns.Add("SalInfo_Branch");
            if (!_table.Columns.Contains("AccountName"))
                _table.Columns.Add("AccountName");

            #region tassk 83733
            if (!_table.Columns.Contains("HourWorkInMonth"))
            {
                _table.Columns.Add("HourWorkInMonth", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractSalary"))
            {
                _table.Columns.Add("ConTractSalary", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance1"))
            {
                _table.Columns.Add("ConTractAllowance1", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance2"))
            {
                _table.Columns.Add("ConTractAllowance2", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance3"))
            {
                _table.Columns.Add("ConTractAllowance3", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance4"))
            {
                _table.Columns.Add("ConTractAllowance4", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance5"))
            {
                _table.Columns.Add("ConTractAllowance5", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance6"))
            {
                _table.Columns.Add("ConTractAllowance6", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance7"))
            {
                _table.Columns.Add("ConTractAllowance7", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance8"))
            {
                _table.Columns.Add("ConTractAllowance8", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance9"))
            {
                _table.Columns.Add("ConTractAllowance9", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance10"))
            {
                _table.Columns.Add("ConTractAllowance10", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance11"))
            {
                _table.Columns.Add("ConTractAllowance11", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance12"))
            {
                _table.Columns.Add("ConTractAllowance12", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance13"))
            {
                _table.Columns.Add("ConTractAllowance13", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance14"))
            {
                _table.Columns.Add("ConTractAllowance14", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance15"))
            {
                _table.Columns.Add("ConTractAllowance15", typeof(double));
            }
            #endregion

            #endregion

            #endregion

            #region tạo Template
            //Nguyen.Le - 14/11/2017 - 0089883
            string Companylogo = string.Empty;
            //if (!Common.CheckListNullOrEmty(result))
            //{
            //    Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            //}
            if (_table.Rows.Count > 0 && _table.Rows[0]["CompanyLogo"] != DBNull.Value)
                Companylogo = (string)_table.Rows[0]["CompanyLogo"];

            //Nguyen.Le - 14/11/2017 - 0089883
            var headerInfo1 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };
            var headerInfo2 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo3 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo4 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            var lstHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = _table;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = _table,
                    FileName = "Hre_ProfileModel",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region Lấy dữ liệu khác để xuất
            var _lstSalaryInfo = new List<Sal_SalaryInformation4ExportProfileEntity>();
            var _lstContract = new List<Hre_ContractEntity>();
            var _lstbasicsalary = new List<Sal_BasicSalarySmall4ExportProfileEntity>();
            var lstbasicsalaryNew = new List<Sal_BasicSalarySmall4ExportProfileEntity>();
            var _lstdependant = new List<Hre_DependantForExportProfileEntity>();
            var lstVisaInfo = new List<Hre_VisaInfoEntity>();
            var _lstQualification = new List<Hre_ProfileQualificationForExportProfileEntity>();
            var lstProfileIDs = new List<Guid>();
            foreach (DataRow row in _table.Rows)
            {
                lstProfileIDs.Add((Guid)row["ID"]);
            }
            if (!model.IsCreateTemplate)
            {
                _lstSalaryInfo = profileServices.GetLstSalaryInformation4ExportByProfileIDs(lstProfileIDs).OrderByDescending(d => d.DateUpdate).ToList();
                _lstContract = contractServices.GetContractData4ExportProfileByLstProfileIDs(lstProfileIDs).OrderByDescending(s => s.DateStart).ToList();
                _lstbasicsalary = _BasicSalaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs).OrderByDescending(s => s.DateOfEffect).ToList();
                var lstGroupSalary = _lstbasicsalary.GroupBy(d => d.ProfileID).ToList();
                foreach (var item in lstGroupSalary)
                {
                    lstbasicsalaryNew.Add(item.FirstOrDefault());
                }
                _lstdependant = _DependantServices.GetListDependantForcountCountDependantByProfile(lstProfileIDs);
                lstVisaInfo = profileServices.GetLstVisaInfoByProfileIDs(lstProfileIDs).OrderByDescending(s => s.DateOfIssue).ToList();
                _lstQualification = profileServices.GetLstProfileQualification4ExportProfileByProfileIDs(lstProfileIDs).OrderByDescending(s => s.GraduationDate).ToList();
            }
            #endregion

            foreach (DataRow row in _table.Rows)
            {
                Guid profileID = (Guid)row["ID"];
                //Quyen.Quach 30/12/2017 Kiểm tra row rỗng
                if (row["DateOfBirth"] != null && row["DateOfBirth"] != DBNull.Value)
                {
                    DateTime dateofbirth = (DateTime)row["DateOfBirth"];
                    var dateofBirthLunar = Common.convertSolar2Lunar(dateofbirth.Day, dateofbirth.Month, dateofbirth.Year, 7);
                    if (dateofBirthLunar != null)
                    {
                        row["DateOfBirthLunar"] = dateofBirthLunar;
                        var strdateofBirthLunar = dateofBirthLunar.Split('/');
                        var lunarinfo = Common.CalculateLunarInfo(int.Parse(strdateofBirthLunar[0]), int.Parse(strdateofBirthLunar[1]), int.Parse(strdateofBirthLunar[2]));
                        if (lunarinfo != null && lunarinfo.Count > 2)
                        {
                            row["TuoiTheoConGiap"] = lunarinfo[0] + ' ' + lunarinfo[1];
                            row["Menh"] = lunarinfo[2];
                        }
                    }
                }
                #region Bank
                var _salaryInfoEntity = _lstSalaryInfo.FirstOrDefault(s => s.ProfileID == profileID);
                if (_salaryInfoEntity != null)
                {
                    row["BankName"] = _salaryInfoEntity.BankName;
                    row["BankCode"] = _salaryInfoEntity.BankCode;
                    row["AccountNo"] = _salaryInfoEntity.AccountNo;
                    row["BankName2"] = _salaryInfoEntity.BankName2;
                    row["BankCode2"] = _salaryInfoEntity.BankCode2;
                    row["AccountNo2"] = _salaryInfoEntity.AccountNo2;
                    row["SalInfo_Branch"] = _salaryInfoEntity.BankBrandName;
                    row["AccountName"] = _salaryInfoEntity.AccountName;
                    row["BankBrandName"] = _salaryInfoEntity.BankBrandName;
                    row["SwiftCode"] = _salaryInfoEntity.SwiftCode;
                }

                #endregion

                #region ConTract
                var contractEntity = _lstContract.FirstOrDefault(s => s.ProfileID == profileID);
                if (contractEntity != null)
                {
                    row["TimesOfContract"] = _lstContract.Count(s => s.ProfileID == profileID);
                    row["UnitTime"] = contractEntity.UnitTime;
                    row["ValueTime"] = contractEntity.ValueTime;
                    row["ContractNo"] = contractEntity.ContractNo;
                    row["ContractTypeName"] = contractEntity.ContractTypeName;
                    row["DateStartContract"] = contractEntity.DateStart;
                    if (contractEntity.DateEnd != null)
                    {
                        row["DateEndContract"] = contractEntity.DateEnd.Value;
                    }
                    if (contractEntity.TerminateDate != null)
                    {
                        row["TerminateDate"] = contractEntity.TerminateDate.Value;
                    }

                    #region tassk 83733
                    if (contractEntity != null)
                    {
                        if (contractEntity.HourWorkInMonth != null)
                        {
                            row["HourWorkInMonth"] = contractEntity.HourWorkInMonth;
                        }
                        if (contractEntity.Salary != null)
                        {
                            row["ConTractSalary"] = contractEntity.Salary;
                        }
                        if (contractEntity.Allowance1 != null)
                        {
                            row["ConTractAllowance1"] = contractEntity.Allowance1;
                        }
                        if (contractEntity.Allowance2 != null)
                        {
                            row["ConTractAllowance2"] = contractEntity.Allowance2;

                        }
                        if (contractEntity.Allowance3 != null)
                        {
                            row["ConTractAllowance3"] = contractEntity.Allowance3;

                        }
                        if (contractEntity.Allowance4 != null)
                        {
                            row["ConTractAllowance4"] = contractEntity.Allowance4;

                        }
                        if (contractEntity.Allowance5 != null)
                        {
                            row["ConTractAllowance5"] = contractEntity.Allowance5;

                        }
                        if (contractEntity.Allowance6 != null)
                        {
                            row["ConTractAllowance6"] = contractEntity.Allowance6;

                        }
                        if (contractEntity.Allowance7 != null)
                        {
                            row["ConTractAllowance7"] = contractEntity.Allowance7;

                        }
                        if (contractEntity.Allowance8 != null)
                        {
                            row["ConTractAllowance8"] = contractEntity.Allowance8;

                        }
                        if (contractEntity.Allowance9 != null)
                        {
                            row["ConTractAllowance9"] = contractEntity.Allowance9;

                        }
                        if (contractEntity.Allowance10 != null)
                        {
                            row["ConTractAllowance10"] = contractEntity.Allowance10;

                        }
                        if (contractEntity.Allowance11 != null)
                        {
                            row["ConTractAllowance11"] = contractEntity.Allowance11;

                        }
                        if (contractEntity.Allowance12 != null)
                        {
                            row["ConTractAllowance12"] = contractEntity.Allowance12;

                        }
                        if (contractEntity.Allowance13 != null)
                        {
                            row["ConTractAllowance13"] = contractEntity.Allowance13;

                        }
                        if (contractEntity.Allowance14 != null)
                        {
                            row["ConTractAllowance14"] = contractEntity.Allowance14;

                        }
                        if (contractEntity.Allowance15 != null)
                        {
                            row["ConTractAllowance15"] = contractEntity.Allowance15;
                        }
                    }

                    #endregion
                }
                #endregion

                #region yêu cầu của task 0055513
                var contractTypeEntity = _lstContract.FirstOrDefault(s => s.ProfileID == profileID && s.Type == "E_OFFICIAL");
                if (contractTypeEntity != null)
                {
                    if (contractTypeEntity.DateSigned != null)
                    {
                        row["DateSigned"] = contractTypeEntity.DateSigned.Value;
                    }
                    row["Type"] = contractTypeEntity.Type;
                }
                var qualificationEntity = _lstQualification.FirstOrDefault(s => s.ProfileID == profileID);
                if (qualificationEntity != null)
                {
                    if (qualificationEntity.DateFinish != null)
                        row["DateFinish"] = qualificationEntity.DateFinish.Value;
                    row["QualificationName"] = qualificationEntity.QualificationName;
                    row["CertificateName"] = qualificationEntity.CertificateName;
                    row["NameEntityName"] = qualificationEntity.NameEntityName;
                    row["TrainingPlace"] = qualificationEntity.TrainingPlace;
                    row["FieldOfTraining"] = qualificationEntity.FieldOfTraining;
                }

                var qualificationMain = _lstQualification.FirstOrDefault(s => s.ProfileID == profileID && s.IsQualificationMain == true);
                if (qualificationMain != null)
                {
                    row["SpecialLevelNameMain"] = qualificationMain.NameEntityName;
                    row["QualificationNameMain"] = qualificationMain.QualificationName;
                    row["FieldOfTrainingMain"] = qualificationMain.FieldOfTraining;
                    row["TrainingPlaceMain"] = qualificationMain.TrainingPlace;
                    row["TrainingAddressMain"] = qualificationMain.TrainingAddress;
                    if (qualificationMain.GraduationDate != null)
                    {
                        row["GraduationDateMain"] = qualificationMain.GraduationDate;
                    }
                }
                #endregion

                #region Son.Vo - 20160421 - 0066770
                var basicsalarybyProfile = lstbasicsalaryNew.FirstOrDefault(s => s.ProfileID == profileID);
                if (basicsalarybyProfile != null)
                {
                    if (basicsalarybyProfile.GrossAmount != null)
                    {
                        row["E_GrossAmount"] = basicsalarybyProfile.GrossAmount;
                    }
                    if (basicsalarybyProfile.AllowanceAmount1 != null)
                    {
                        row["Allowance1"] = basicsalarybyProfile.AllowanceAmount1;
                    }
                    if (basicsalarybyProfile.AllowanceAmount2 != null)
                    {
                        row["Allowance2"] = basicsalarybyProfile.AllowanceAmount2;
                    }
                    if (basicsalarybyProfile.AllowanceAmount3 != null)
                    {
                        row["Allowance3"] = basicsalarybyProfile.AllowanceAmount3;
                    }
                    row["CurencyName"] = basicsalarybyProfile.CurrencyName;
                    if (basicsalarybyProfile.DateOfEffect != null)
                    {
                        row["DateOfEffect"] = basicsalarybyProfile.DateOfEffect;
                    }
                    if (basicsalarybyProfile.InsuranceAmount != null)
                    {
                        row["E_InsuranceAmount"] = basicsalarybyProfile.InsuranceAmount;
                    }
                    if (basicsalarybyProfile.PersonalRate != null)
                    {
                        row["E_PersonalRate"] = basicsalarybyProfile.PersonalRate;
                    }
                }
                row["DependantCount"] = _lstdependant.Count(s => s.ProfileID == profileID);
                #endregion

                //row["ShopName"] = item.ShopName;
                //if (item.ReceiveSocialIns != null)
                //{
                //    row["ReceiveSocialIns"] = item.ReceiveSocialIns;
                //}
                #region Son.Vo - 20160716 - 0071186: thêm thông tin visa
                var visaByProfile = lstVisaInfo.FirstOrDefault(s => s.ProfileID == profileID);
                if (visaByProfile != null)
                {
                    row["VisaNo"] = visaByProfile.VisaNo;
                    if (visaByProfile.DateOfIssue != null)
                    {
                        row["VisaDateOfIssue"] = visaByProfile.DateOfIssue;
                    }
                    if (visaByProfile.PlaceOfIssue != null)
                    {
                        row["VisaPlaceOfIssue"] = visaByProfile.PlaceOfIssue;
                    }
                    //Son.Vo - 20160811 - 0072016
                    if (visaByProfile.DateStart != null)
                    {
                        row["VisaDateStart"] = visaByProfile.DateStart;
                    }
                    if (visaByProfile.DateEnd != null)
                    {
                        row["VisaDateEnd"] = visaByProfile.DateEnd;
                    }
                    row["VisaNotes"] = visaByProfile.Notes;
                }
                #endregion

                //Son.Vo - 20161216 - 0076889
                var firstContractByDatesign = _lstContract.Where(s => s.ProfileID == profileID && s.TypeContractType != EnumDropDown.TypeContract.E_PROBATION.ToString()).OrderBy(s => s.DateSigned).FirstOrDefault();
                if (firstContractByDatesign != null && firstContractByDatesign.DateSigned != null)
                {
                    row["FirstDateSigned"] = firstContractByDatesign.DateSigned;
                }

                //_table.Rows.Add(row);
            }
            #endregion
            //Nguyen.Le - 14/11/2017 - 0089883
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in lstHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var imageFields = new[] { new TemplateBase.ImageField("ImagePath", formatImagePath: Common.GetPath("Images") + "\\{0}") };
                _table = ExportService.ExcelImageUtility.ResolveExcelImageWithCloneTable(_table, imageFields);
                var fullPath = ExportService.Export(model.ExportId, _table, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(_table.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult ExportSelectedProfileListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllExSearchModel model)
        {
            if (!model.IsCreateTemplate && model.ExportId == Guid.Empty)
            {
                return null;
            }

            var exportservices = new Cat_ExportServices();
            string template = exportservices.checkExistTemplateByExportID(model.ExportId);

            var actionService = new ActionService(UserLogin);
            string status = string.Empty;
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _DependantServices = new Hre_DependantServices();
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = new List<Hre_ProfileModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_ProfileModel>(model.ProfileID, ConstantSql.hrm_hr_sp_get_ProfileByIds, ref status);
            }

            #region xuất cho dự án khác
            #region Khai bao table va tao cot
            DataTable _table = new DataTable("Hre_ProfileModel");
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Hre_ProfileForExportModel));
            foreach (PropertyDescriptor prop in properties)
                _table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);

            #region DataColumn
            _table.Columns.Add("UnitTime");
            _table.Columns.Add("ValueTime");
            _table.Columns.Add("BankCode");
            _table.Columns.Add("BankName2");
            _table.Columns.Add("BankCode2");
            _table.Columns.Add("AccountNo2");
            _table.Columns.Add("TerminateDate", typeof(DateTime));
            _table.Columns.Add("SalInfo_Branch");
            _table.Columns.Add("AccountName");

            #region tassk 83733
            if (!_table.Columns.Contains("HourWorkInMonth"))
            {
                _table.Columns.Add("HourWorkInMonth", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractSalary"))
            {
                _table.Columns.Add("ConTractSalary", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance1"))
            {
                _table.Columns.Add("ConTractAllowance1", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance2"))
            {
                _table.Columns.Add("ConTractAllowance2", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance3"))
            {
                _table.Columns.Add("ConTractAllowance3", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance4"))
            {
                _table.Columns.Add("ConTractAllowance4", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance5"))
            {
                _table.Columns.Add("ConTractAllowance5", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance6"))
            {
                _table.Columns.Add("ConTractAllowance6", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance7"))
            {
                _table.Columns.Add("ConTractAllowance7", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance8"))
            {
                _table.Columns.Add("ConTractAllowance8", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance9"))
            {
                _table.Columns.Add("ConTractAllowance9", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance10"))
            {
                _table.Columns.Add("ConTractAllowance10", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance11"))
            {
                _table.Columns.Add("ConTractAllowance11", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance12"))
            {
                _table.Columns.Add("ConTractAllowance12", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance13"))
            {
                _table.Columns.Add("ConTractAllowance13", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance14"))
            {
                _table.Columns.Add("ConTractAllowance14", typeof(double));
            }
            if (!_table.Columns.Contains("ConTractAllowance15"))
            {
                _table.Columns.Add("ConTractAllowance15", typeof(double));
            }
            #endregion

            #endregion

            #endregion

            #region tạo Template
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            var headerInfo1 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };
            var headerInfo2 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo3 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo4 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            var lstHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = _table,
                    FileName = "Hre_ProfileModel",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            var _data = result.Translate<Hre_ProfileForExportModel>();

            #region Lấy dữ liệu khác để xuất
            var lstProfileIDs = result.Select(s => s.ID).Distinct().ToList();
            var _lstSalaryInfo = new List<Sal_SalaryInformation4ExportProfileEntity>();
            var _lstContract = new List<Hre_ContractEntity>();
            var _lstbasicsalary = new List<Sal_BasicSalarySmall4ExportProfileEntity>();
            var _lstdependant = new List<Hre_DependantForExportProfileEntity>();
            var lstVisaInfo = new List<Hre_VisaInfoEntity>();
            var _lstQualification = new List<Hre_ProfileQualificationForExportProfileEntity>();
            if (!model.IsCreateTemplate)
            {
                _lstSalaryInfo = profileServices.GetLstSalaryInformation4ExportByProfileIDs(lstProfileIDs);
                _lstContract = contractServices.GetContractData4ExportProfileByLstProfileIDs(lstProfileIDs);
                _lstbasicsalary = _BasicSalaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);
                _lstdependant = _DependantServices.GetListDependantForcountCountDependantByProfile(lstProfileIDs);
                lstVisaInfo = profileServices.GetLstVisaInfoByProfileIDs(lstProfileIDs);
                _lstQualification = profileServices.GetLstProfileQualification4ExportProfileByProfileIDs(lstProfileIDs);
            }

            #endregion

            var imageFields = new[] { new TemplateBase.ImageField("ImagePath", formatImagePath: Common.GetPath("Images") + "\\{0}") };
            ExportService.ExcelImageUtility.ResolveExcelImageCellType(_table, imageFields);

            foreach (var item in _data)
            {
                DataRow row = _table.NewRow();
                foreach (PropertyDescriptor prop in properties)
                {
                    row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                }

                //Quyen.Quach 30/12/2017 Kiểm tra row rỗng
                if (row["DateOfBirth"] != null && row["DateOfBirth"] != DBNull.Value)
                {
                    DateTime dateofbirth = (DateTime)row["DateOfBirth"];
                    var dateofBirthLunar = Common.convertSolar2Lunar(dateofbirth.Day, dateofbirth.Month, dateofbirth.Year, 7);
                    if (dateofBirthLunar != null)
                    {
                        row["DateOfBirthLunar"] = dateofBirthLunar;
                        var strdateofBirthLunar = dateofBirthLunar.Split('/');
                        var lunarinfo = Common.CalculateLunarInfo(int.Parse(strdateofBirthLunar[0]), int.Parse(strdateofBirthLunar[1]), int.Parse(strdateofBirthLunar[2]));
                        if (lunarinfo != null && lunarinfo.Count > 2)
                        {
                            row["TuoiTheoConGiap"] = lunarinfo[0] + ' ' + lunarinfo[1];
                            row["Menh"] = lunarinfo[2];
                        }
                    }
                }

                row["TaskShortTerm"] = item.TaskShortTerm;

                #region Bank
                var _salaryInfoEntity = _lstSalaryInfo.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (_salaryInfoEntity != null)
                {
                    row["BankName"] = _salaryInfoEntity.BankName;
                    row["BankCode"] = _salaryInfoEntity.BankCode;
                    row["AccountNo"] = _salaryInfoEntity.AccountNo;
                    row["BankName2"] = _salaryInfoEntity.BankName2;
                    row["BankCode2"] = _salaryInfoEntity.BankCode2;
                    row["AccountNo2"] = _salaryInfoEntity.AccountNo2;
                    row["SalInfo_Branch"] = _salaryInfoEntity.BankBrandName;
                    row["AccountName"] = _salaryInfoEntity.AccountName;
                    row["BankBrandName"] = _salaryInfoEntity.BankBrandName;
                    row["SwiftCode"] = _salaryInfoEntity.SwiftCode;
                }

                #endregion

                #region ConTract
                var lsContract = _lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateStart).ToList();
                if (lsContract != null && lsContract.Count() > 0)
                {
                    var contractEntity = lsContract.FirstOrDefault();
                    if (contractEntity.Salary != null)
                    {
                        row["Salary"] = contractEntity.Salary;
                    }
                    row["TimesOfContract"] = lsContract.Count;
                    row["UnitTime"] = contractEntity.UnitTime;
                    row["ValueTime"] = contractEntity.ValueTime;
                    row["ContractNo"] = contractEntity.ContractNo;
                    row["ContractTypeName"] = contractEntity.ContractTypeName;
                    row["DateStartContract"] = contractEntity.DateStart;
                    if (contractEntity.DateEnd != null)
                    {
                        row["DateEndContract"] = contractEntity.DateEnd.Value;
                    }
                    if (contractEntity.TerminateDate != null)
                    {
                        row["TerminateDate"] = contractEntity.TerminateDate.Value;
                    }


                    #region tassk 83733
                    if (contractEntity != null)
                    {
                        if (contractEntity.HourWorkInMonth != null)
                        {
                            row["HourWorkInMonth"] = contractEntity.HourWorkInMonth;
                        }
                        if (contractEntity.Salary != null)
                        {
                            row["ConTractSalary"] = contractEntity.Salary;
                        }
                        if (contractEntity.Allowance1 != null)
                        {
                            row["ConTractAllowance1"] = contractEntity.Allowance1;
                        }
                        if (contractEntity.Allowance2 != null)
                        {
                            row["ConTractAllowance2"] = contractEntity.Allowance2;

                        }
                        if (contractEntity.Allowance3 != null)
                        {
                            row["ConTractAllowance3"] = contractEntity.Allowance3;

                        }
                        if (contractEntity.Allowance4 != null)
                        {
                            row["ConTractAllowance4"] = contractEntity.Allowance4;

                        }
                        if (contractEntity.Allowance5 != null)
                        {
                            row["ConTractAllowance5"] = contractEntity.Allowance5;

                        }
                        if (contractEntity.Allowance6 != null)
                        {
                            row["ConTractAllowance6"] = contractEntity.Allowance6;

                        }
                        if (contractEntity.Allowance7 != null)
                        {
                            row["ConTractAllowance7"] = contractEntity.Allowance7;

                        }
                        if (contractEntity.Allowance8 != null)
                        {
                            row["ConTractAllowance8"] = contractEntity.Allowance8;

                        }
                        if (contractEntity.Allowance9 != null)
                        {
                            row["ConTractAllowance9"] = contractEntity.Allowance9;

                        }
                        if (contractEntity.Allowance10 != null)
                        {
                            row["ConTractAllowance10"] = contractEntity.Allowance10;

                        }
                        if (contractEntity.Allowance11 != null)
                        {
                            row["ConTractAllowance11"] = contractEntity.Allowance11;

                        }
                        if (contractEntity.Allowance12 != null)
                        {
                            row["ConTractAllowance12"] = contractEntity.Allowance12;

                        }
                        if (contractEntity.Allowance13 != null)
                        {
                            row["ConTractAllowance13"] = contractEntity.Allowance13;

                        }
                        if (contractEntity.Allowance14 != null)
                        {
                            row["ConTractAllowance14"] = contractEntity.Allowance14;

                        }
                        if (contractEntity.Allowance15 != null)
                        {
                            row["ConTractAllowance15"] = contractEntity.Allowance15;
                        }
                    }

                    #endregion

                }
                #endregion

                #region yêu cầu của task 0055513
                var lsContractType = _lstContract.Where(s => s.ProfileID == item.ID && s.Type == "E_OFFICIAL").OrderByDescending(s => s.DateStart).ToList();
                if (lsContractType != null && lsContractType.Count() > 0)
                {
                    var contractTypeEntity = lsContractType.FirstOrDefault();
                    if (contractTypeEntity.DateSigned != null)
                    {
                        row["DateSigned"] = contractTypeEntity.DateSigned.Value;
                    }
                    row["Type"] = contractTypeEntity.Type;
                }
                var qualificationEntity = _lstQualification.Where(s => s.ProfileID == item.ID).FirstOrDefault();
                if (qualificationEntity != null)
                {
                    if (qualificationEntity.DateFinish != null)
                        row["DateFinish"] = qualificationEntity.DateFinish.Value;

                    row["QualificationName"] = qualificationEntity.QualificationName;
                    row["CertificateName"] = qualificationEntity.CertificateName;
                    row["NameEntityName"] = qualificationEntity.NameEntityName;
                    row["TrainingPlace"] = qualificationEntity.TrainingPlace;
                    row["FieldOfTraining"] = qualificationEntity.FieldOfTraining;
                }

                var qualificationMain = _lstQualification.Where(s => s.ProfileID == item.ID && s.IsQualificationMain == true).OrderByDescending(s => s.GraduationDate).FirstOrDefault();
                if (qualificationMain != null)
                {
                    row["SpecialLevelNameMain"] = qualificationMain.NameEntityName;
                    row["QualificationNameMain"] = qualificationMain.QualificationName;
                    row["FieldOfTrainingMain"] = qualificationMain.FieldOfTraining;
                    row["TrainingPlaceMain"] = qualificationMain.TrainingPlace;
                    row["TrainingAddressMain"] = qualificationMain.TrainingAddress;
                    if (qualificationMain.GraduationDate != null)
                    {
                        row["GraduationDateMain"] = qualificationMain.GraduationDate;
                    }
                }

                #endregion

                #region Son.Vo - 20160421 - 0066770
                var basicsalarybyProfile = _lstbasicsalary.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicsalarybyProfile != null)
                {
                    row["E_GrossAmount"] = basicsalarybyProfile.GrossAmount;
                    if (basicsalarybyProfile.AllowanceAmount1 != null)
                    {
                        row["Allowance1"] = basicsalarybyProfile.AllowanceAmount1;
                    }
                    if (basicsalarybyProfile.AllowanceAmount2 != null)
                    {
                        row["Allowance2"] = basicsalarybyProfile.AllowanceAmount2;
                    }
                    if (basicsalarybyProfile.AllowanceAmount3 != null)
                    {
                        row["Allowance3"] = basicsalarybyProfile.AllowanceAmount3;
                    }
                    row["CurencyName"] = basicsalarybyProfile.CurrencyName;
                    if (basicsalarybyProfile.DateOfEffect != null)
                    {
                        row["DateOfEffect"] = basicsalarybyProfile.DateOfEffect;
                    }
                    if (basicsalarybyProfile.InsuranceAmount != null)
                    {
                        row["E_InsuranceAmount"] = basicsalarybyProfile.InsuranceAmount;
                    }
                    if (basicsalarybyProfile.PersonalRate != null)
                    {
                        row["E_PersonalRate"] = basicsalarybyProfile.PersonalRate;
                    }

                }
                row["DependantCount"] = _lstdependant.Where(s => s.ProfileID == item.ID).Count();
                #endregion

                row["ShopName"] = item.ShopName;
                if (item.ReceiveSocialIns != null)
                {
                    row["ReceiveSocialIns"] = item.ReceiveSocialIns;
                }
                #region Son.Vo - 20160716 - 0071186: thêm thông tin visa
                var visaByProfile = lstVisaInfo.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateOfIssue).FirstOrDefault();
                if (visaByProfile != null)
                {
                    row["VisaNo"] = visaByProfile.VisaNo;
                    if (visaByProfile.DateOfIssue != null)
                    {
                        row["VisaDateOfIssue"] = visaByProfile.DateOfIssue;
                    }
                    if (visaByProfile.PlaceOfIssue != null)
                    {
                        row["VisaPlaceOfIssue"] = visaByProfile.PlaceOfIssue;
                    }
                    //Son.Vo - 20160811 - 0072016
                    if (visaByProfile.DateStart != null)
                    {
                        row["VisaDateStart"] = visaByProfile.DateStart;
                    }
                    if (visaByProfile.DateEnd != null)
                    {
                        row["VisaDateEnd"] = visaByProfile.DateEnd;
                    }
                    row["VisaNotes"] = visaByProfile.Notes;
                }
                #endregion

                #region Nguyen.Le - 20171009 - 0088627: thêm enum Tên tỉnh/thành, quận/huyện, phường/xã nơi cấp giấy khai
                if (item.ProvinceBirthName != null)
                {
                    row["ProvinceBirthName"] = item.ProvinceBirthName;
                }
                if (item.DistrictBirthName != null)
                {
                    row["DistrictBirthName"] = item.DistrictBirthName;
                }
                if (item.VillageBirthName != null)
                {
                    row["VillageBirthName"] = item.VillageBirthName;
                }
                #endregion

                //Son.Vo - 20161216 - 0076889
                var firstContractByDatesign = _lstContract.Where(s => s.ProfileID == item.ID && s.TypeContractType != EnumDropDown.TypeContract.E_PROBATION.ToString()).OrderBy(s => s.DateSigned).FirstOrDefault();
                if (firstContractByDatesign != null && firstContractByDatesign.DateSigned != null)
                {
                    row["FirstDateSigned"] = firstContractByDatesign.DateSigned;
                }

                ExportService.ExcelImageUtility.ResolveExcelImageCellValue(row, imageFields);

                _table.Rows.Add(row);
            }
            #endregion
            //Nguyen.Le - 14/11/2017 - 0089883
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in lstHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, null, lstHeaderInfo, _table, UserGuidID, model.ExportType, imageFields: imageFields);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        // Son.Vo - lấy logo theo dữ liệu phòng ban search trên giao diện
        public string GetCompanyLogo(string strOrgstructure)
        {
            var actionServices = new ActionService(UserLogin);
            string status = string.Empty;
            string logo = string.Empty;
            var _lsobj = new List<object>();
            _lsobj.AddRange(new object[3]);
            _lsobj[0] = strOrgstructure;
            _lsobj[1] = 1;
            _lsobj[2] = 10;
            var result = actionServices.GetData<Cat_OrgStructureSmallEntity>(_lsobj, ConstantSql.hrm_cat_sp_get_CompanyLogo, ref status);
            if (result != null && result.FirstOrDefault() != null)
            {
                logo = result.FirstOrDefault().Logo;
            }
            return logo;
        }

        [HttpPost]
        public ActionResult ExportProfileAllListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin, LanguageCode);
            var isDataTable = false;
            var service = new BaseService();
            object obj = new Hre_ProfileModel();
            var _ContractServices = new Hre_ContractServices();
            var _DependantServices = new Hre_DependantServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _InsuranceSalaryServices = new Sal_InsuranceSalaryServices();
            var _ProfileServices = new Hre_ProfileServices();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ProfileForExportModel>();
            var _lstSalaryInfo = new List<Sal_SalaryInformation4ExportProfileEntity>();
            var _lstQualification = new List<Hre_ProfileQualificationEntity>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ProfileForExportModel, Hre_ProfileEntity, Hre_ProfileAllSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileAllList, ref status);
            }

            if (result != null)
            {
                var lstProfileIDS = result.Select(s => s.ID).Distinct().ToList();
                var _listbasicSalaryEntity = _BasicSalaryServices.GetBasicSalaryBylstProIDs(lstProfileIDS);
                var _lstInsuranceSalary = _InsuranceSalaryServices.GetLstInsuranceSalaryByProfileIDs(lstProfileIDS);
                #region xuất cho dự án khác
                #region Khai bao table va tao cot
                DataTable _table = new DataTable("Hre_ProfileModel");
                PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Hre_ProfileForExportModel));
                foreach (PropertyDescriptor prop in properties)
                    _table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                #region DataColumn
                _table.Columns.Add("UnitTime");
                _table.Columns.Add("ValueTime");
                _table.Columns.Add("BankCode");
                _table.Columns.Add("BankName2");
                _table.Columns.Add("BankCode2");
                _table.Columns.Add("AccountNo2");
                _table.Columns.Add("AccountName");
                _table.Columns.Add("AccountName2");
                _table.Columns.Add("TerminateDate", typeof(DateTime));
                //  _table.Columns.Add("DependantCount", typeof(int)); đã có trong Hre_ProfileForExportModel

                #endregion
                #endregion

                #region tạo Template
                if (model.IsCreateTemplateForDynamicGrid)
                {
                    obj = result;
                    isDataTable = false;
                }
                if (model != null && model.IsCreateTemplate)
                {
                    var path = Common.GetPath("Templates");
                    ExportService exportService = new ExportService();

                    ConfigExport cfgExport = new ConfigExport()
                    {
                        Object = _table,
                        FileName = "Hre_ProfileModel",
                        OutPutPath = path,
                        DownloadPath = Hrm_Main_Web + "Templates",
                        IsDataTable = true
                    };
                    var str = exportService.CreateTemplate(cfgExport);
                    return Json(str);
                }
                #endregion

                #region task 0055513
                var _lstContract = _ContractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
                var lstContractIDS = _lstContract.Select(s => s.ID).ToList();
                var _lstAppendixContract = _ContractServices.GetLstAppendixContractByProfileIDs(lstContractIDS);
                var _lstDependant = _DependantServices.GetListDependantForcountCountDependantByProfile(lstProfileIDS);
                _lstSalaryInfo = _ProfileServices.GetLstSalaryInformation4ExportByProfileIDs(lstProfileIDS);
                _lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDS);
                #endregion

                var imageFields = new[] { new TemplateBase.ImageField("ImagePath", formatImagePath: Common.GetPath("Images") + "\\{0}") };
                ExportService.ExcelImageUtility.ResolveExcelImageCellType(_table, imageFields);

                foreach (var item in result)
                {
                    DataRow row = _table.NewRow();

                    #region Sal_BasicSalary
                    var _basicsalary = _listbasicSalaryEntity.Where(s => s.ProfileID == item.ID).ToList();
                    if (_basicsalary != null && _basicsalary.Count() > 0)
                    {
                        var fristbasicsalary = _basicsalary.OrderBy(s => s.DateOfEffect).FirstOrDefault();
                        item.FristGrossAmount = fristbasicsalary != null ? fristbasicsalary.GrossAmount : "";
                        var lastbasicsalary = _basicsalary.OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                        item.LastGrossAmount = lastbasicsalary != null ? lastbasicsalary.GrossAmount : "";
                        item.SalaryRankName = lastbasicsalary != null ? lastbasicsalary.SalaryRankName : "";
                    }

                    if (_lstInsuranceSalary != null)
                    {
                        //[To.Le][06/04/2016][]lấy lương bảo hiểm xuất trên excel
                        var InsuranceSalary = _lstInsuranceSalary.Where(s => s.ProfileID == item.ID && s.DateEffect <= item.DateQuit).OrderByDescending(s => s.DateEffect).FirstOrDefault();
                        if (InsuranceSalary != null)
                        {
                            item.InsuranceAmount = InsuranceSalary.InsuranceAmount;
                        }
                    }


                    #endregion

                    foreach (PropertyDescriptor prop in properties)
                    {
                        row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                    }
                    //Quyen.Quach 30/12/2017 Kiểm tra row rỗng
                    if (row["DateOfBirth"] != null && row["DateOfBirth"] != DBNull.Value)
                    {
                        DateTime dateofbirth = (DateTime)row["DateOfBirth"];
                        var dateofBirthLunar = Common.convertSolar2Lunar(dateofbirth.Day, dateofbirth.Month, dateofbirth.Year, 7);
                        if (dateofBirthLunar != null)
                        {
                            row["DateOfBirthLunar"] = dateofBirthLunar;
                            var strdateofBirthLunar = dateofBirthLunar.Split('/');
                            var lunarinfo = Common.CalculateLunarInfo(int.Parse(strdateofBirthLunar[0]), int.Parse(strdateofBirthLunar[1]), int.Parse(strdateofBirthLunar[2]));
                            if (lunarinfo != null && lunarinfo.Count > 2)
                            {
                                row["TuoiTheoConGiap"] = lunarinfo[0] + ' ' + lunarinfo[1];
                                row["Menh"] = lunarinfo[2];
                            }
                        }
                    }

                    #region Bank
                    var _salaryInfoEntity = _lstSalaryInfo.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                    if (_salaryInfoEntity != null)
                    {
                        row["BankName"] = _salaryInfoEntity.BankName;
                        row["BankCode"] = _salaryInfoEntity.BankCode;
                        row["AccountNo"] = _salaryInfoEntity.AccountNo;
                        row["BankName2"] = _salaryInfoEntity.BankName2;
                        row["BankCode2"] = _salaryInfoEntity.BankCode2;
                        row["AccountNo2"] = _salaryInfoEntity.AccountNo2;
                        row["AccountName"] = _salaryInfoEntity.AccountName;
                        row["AccountName2"] = _salaryInfoEntity.AccountName2;
                    }

                    #endregion

                    #region ConTract
                    var lsContract = _lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateStart).ToList();
                    if (lsContract != null && lsContract.Count() > 0)
                    {
                        var contractEntity = lsContract.FirstOrDefault();
                        row["TimesOfContract"] = lsContract.Count;
                        row["UnitTime"] = contractEntity.UnitTime;
                        row["ValueTime"] = contractEntity.ValueTime;
                        row["ContractNo"] = contractEntity.ContractNo;
                        row["ContractTypeName"] = contractEntity.ContractTypeName;
                        row["DateStartContract"] = contractEntity.DateStart;
                        if (contractEntity.DateEnd != null)
                        {
                            row["DateEndContract"] = contractEntity.DateEnd.Value;
                        }
                        if (contractEntity.TerminateDate != null)
                        {
                            row["TerminateDate"] = contractEntity.TerminateDate.Value;
                        }
                        if (contractEntity.DateSigned != null)
                        {
                            row["DateSigned"] = contractEntity.DateSigned.Value;
                        }
                        if (contractEntity.Salary != null)
                        {
                            row["Salary"] = contractEntity.Salary;
                        }
                        if (contractEntity.Allowance1 != null)
                        {
                            row["Allowance1"] = contractEntity.Allowance1;
                        }
                        if (contractEntity.Allowance2 != null)
                        {
                            row["Allowance2"] = contractEntity.Allowance2;
                        }
                        if (contractEntity.Allowance3 != null)
                        {
                            row["Allowance3"] = contractEntity.Allowance3;
                        }
                    }
                    #endregion

                    #region yêu cầu của task 0055513
                    var contractTypeEntity = _lstContract.Where(s => s.ProfileID == item.ID && s.Type == "E_OFFICIAL").OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (contractTypeEntity != null)
                    {
                        if (contractTypeEntity.DateSigned != null)
                        {
                            row["DateSigned"] = contractTypeEntity.DateSigned.Value;
                        }
                        row["Type"] = contractTypeEntity.Type;
                    }
                    var qualification = _lstQualification.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateUpdate).ToList();
                    if (qualification != null && qualification.Count > 0)
                    {
                        var qualificationEntity = qualification.FirstOrDefault();
                        if (qualificationEntity.DateFinish != null)
                            row["DateFinish"] = qualificationEntity.DateFinish.Value;

                        row["QualificationName"] = qualificationEntity.QualificationName;
                        row["CertificateName"] = qualificationEntity.CertificateName;
                        row["NameEntityName"] = qualificationEntity.NameEntityName;
                        row["TrainingPlace"] = qualificationEntity.TrainingPlace;
                        row["FieldOfTraining"] = qualificationEntity.FieldOfTraining;
                    }
                    //HD moi nhat
                    var lastestContract = _lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateEnd).ToList();
                    if (lastestContract != null && lastestContract.Count > 0)
                    {
                        var lastestContractID = lastestContract.FirstOrDefault().ID;
                        var lsAppendix = _lstAppendixContract.Where(s => s.ContractID == lastestContractID).ToList();
                        if (lsAppendix != null && lsAppendix.Count > 0)
                        {
                            var lsAppendixEntity = lsAppendix.FirstOrDefault();
                            row["Code"] = lsAppendixEntity.Code;
                            if (lsAppendixEntity.DateofEffect != null)
                            {
                                row["DateofEffectAppendix"] = lsAppendixEntity.DateofEffect.Value;
                            }
                            if (lsAppendixEntity.DateEndAppendixContract != null)
                            {
                                row["DateEndAppendixContract"] = lsAppendixEntity.DateEndAppendixContract.Value;
                            }
                        }
                    }
                    #endregion
                    //Quyen.Quach 16/10/2017 0088857
                    var qualificationMain = _lstQualification.Where(s => s.ProfileID == item.ID && s.IsQualificationMain == true).OrderByDescending(s => s.GraduationDate).FirstOrDefault();
                    if (qualificationMain != null)
                    {
                        row["SpecialLevelNameMain"] = qualificationMain.NameEntityName;
                        row["FieldOfTrainingMain"] = qualificationMain.FieldOfTraining;
                        row["TrainingPlaceMain"] = qualificationMain.TrainingPlace;
                    }

                    var _lstdependant = _lstDependant.Where(s => s.ProfileID == item.ID).ToList();
                    if (_lstdependant != null)
                    {
                        row["DependantCount"] = _lstdependant.Count();
                    }

                    ExportService.ExcelImageUtility.ResolveExcelImageCellValue(row, imageFields);
                    _table.Rows.Add(row);
                }
                #endregion

                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, null, null, _table, UserGuidID, model.ExportType, imageFields: imageFields);
                    return Json(fullPath);
                }
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        // [Tho.Bui] 
        [HttpPost]
        public ActionResult GetProfileIsBackList([DataSourceRequest] DataSourceRequest request, Hre_ProfileSearchIsBackListModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileSearchIsBackListModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileIsBackList);
        }

        /// [Tho.Bui] - Export Profilebacklist
        [HttpPost]
        public ActionResult ExportProfileIsBackList([DataSourceRequest] DataSourceRequest request, Hre_ProfileSearchIsBackListModel model)
        {
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileSearchIsBackListModel>(LanguageCode, model, "Hre_ReportProfileIsBackListModel", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            string status = string.Empty;

            object obj = new Hre_ReportProfileIsBackListModel();
            var actionService = new ActionService(UserLogin);
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom.Value : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo.Value : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            var result = new List<Hre_ReportProfileIsBackListModel>();
            if (!model.IsCreateTemplate)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ReportProfileIsBackListModel, Hre_ProfileEntity, Hre_ProfileSearchIsBackListModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileIsBackList, ref status);
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportProfileIsBackListModel(),
                    FileName = "Hre_ReportProfileIsBackListModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetDateEndInfoList([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoSearchModel model)
        {
            var service = new ActionService(UserLogin);
            var listObj = new List<object>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = new List<Hre_VisaInfoModel>();
            if (!model.IsCreateTemplate)
            {
                result = service.GetData<Hre_VisaInfoEntity>(listObj, ConstantSql.hrm_hr_sp_get_VisaInfoDateEndList, ref status).ToList().Translate<Hre_VisaInfoModel>();
            }
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom ?? DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo ?? DateTime.Now };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_VisaInfoModel(),
                    FileName = "Hre_VisaInfoModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// [Tho.Bui] 
        [HttpPost]
        public ActionResult GetDateEndAccidentTypeList([DataSourceRequest] DataSourceRequest request, Hre_AccidentModel model)
        {
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_AccidentModel>(LanguageCode, model, "Hre_ReportAccident", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            //DateTime From = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            //DateTime To = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);

            #endregion
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom.Value : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo.Value : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var service = new ActionService(UserLogin);

            List<object> listObj = new List<object>();
            DateTime? From = SqlDateTime.MinValue.Value;
            DateTime? To = SqlDateTime.MaxValue.Value;
            List<Guid?> OrgIds = new List<Guid?>();
            if (model.DateFrom != null)
            {
                From = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                To = model.DateTo.Value;
            }
            listObj.Add(From);
            listObj.Add(To);

            Guid? Acctype = Guid.Empty;
            if (model.AccidentTypeID != Guid.Empty)
            {
                Acctype = model.AccidentTypeID;
            }
            listObj.Add(Acctype);

            string strOrgIDs = null;
            if (!string.IsNullOrEmpty(model.OrgStructureID))
            {
                strOrgIDs = model.OrgStructureID;
            }
            listObj.Add(strOrgIDs);

            string status = string.Empty;
            var result = service.GetData<Hre_AccidentEntity>(listObj, ConstantSql.hrm_hr_sp_get_DateEndAccidentTypeList, ref status).ToList().Translate<Hre_AccidentModel>();
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_AccidentModel(),
                    FileName = "Hre_ReportAccident",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult Translate(string field)
        {
            var strField = field.Replace("\n", "");
            var listField = strField.Split(',');
            Dictionary<string, string> listTranslate = new Dictionary<string, string>();
            for (int i = 0; i < listField.Count() - 1; i++)
            {
                listTranslate.Add(listField[i], listField[i].TranslateString());
            }

            return Json(listTranslate);
        }

        /// [Chuc.Nguyen] - Xuất danh sách dữ liệu cho Nhân Viên (Hre_Profile) theo điều kiện tìm kiếm
        [HttpPost]
        public ActionResult ExportProfileList([DataSourceRequest] DataSourceRequest request, Hre_ProfileActiveSearchModel model)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_Profile";
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            _table = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileActive, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
            return Json(message);
        }



        /// [Tho.Bui] - Xuất danh sách dữ liệu cho Nhân Viên (Hre_Accident) theo điều kiện tìm kiếm
        [HttpPost]
        public ActionResult ExportDateEndAccidentList([DataSourceRequest] DataSourceRequest request, Hre_AccidentModel model)
        {
            var ActionService = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            DateTime? From = SqlDateTime.MinValue.Value;
            DateTime? To = SqlDateTime.MaxValue.Value;
            List<Guid?> OrgIds = new List<Guid?>();
            if (model.DateFrom != null)
            {
                From = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                To = model.DateTo.Value;
            }
            listObj.Add(From);
            listObj.Add(To);
            string strOrgIDs = null;
            if (!string.IsNullOrEmpty(model.OrgStructureID))
            {
                strOrgIDs = model.OrgStructureID;
            }
            listObj.Add(strOrgIDs);
            Guid? Acctype = Guid.Empty;
            if (model.AccidentTypeID != Guid.Empty)
            {
                Acctype = model.AccidentTypeID;
            }
            listObj.Add(Acctype);
            string status = string.Empty;
            var result = ActionService.GetData<Hre_AccidentEntity>(listObj, ConstantSql.hrm_hr_sp_get_DateEndAccidentTypeList, ref status).ToList().Translate<Hre_AccidentModel>();
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// [Tho.Bui]
        [HttpPost]
        public ActionResult ExportDateEndVisaInfoList([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoSearchModel model)
        {
            return ExportAllAndReturn<Hre_VisaInfoEntity, Hre_VisaInfoModel, Hre_VisaInfoSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_VisaInfoDateEndList);
        }

        [HttpPost]
        /// [Chuc.Nguyen] - Xuất các dòng dữ liệu được chọn của Nhân Viên (Hre_Profile) ra file Excel
        public ActionResult ExportSelected(string selectedIds, string valueFields)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_Profile";
            var status = string.Empty;
            List<object> lstObj = new List<object>();
            lstObj.Add(selectedIds);
            _table = objBase.GetDataTable(lstObj, ConstantSql.hrm_hr_sp_get_ProfileByIds, UserLogin, ref status);
            //var fullPath = ExportService.Export(Guid.Empty, _table, null, Guid.Empty, ExportFileType.Excel);
            //return Json(fullPath);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, valueFields.Split(','), null);
            return Json(message);

        }

        //Quyen.Quach - 17/07/2017 - 0085416 Nút export Select theo Id màn hnh NV đăng ký nghỉ việc
        public ActionResult ExportSelectStopWorking(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_StopWorkingByListIds);
        }

        public ActionResult ExportPersionalInformation([DataSourceRequest] DataSourceRequest request, Hre_PersionalInfoSearchModel model)
        {
            var service = new Hre_ProfileServices();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request)
            };
            var isDataTable = false;
            object obj = new DataTable();

            var result = service.GetPersionalInfo(model.id, UserLogin, model.IsCreateTemplate);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_PersionalInformationModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable

                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// [Tho.Bui] - Export seclect Hre_profile Not full data
        public ActionResult ExportProfileNptFullDataSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileEntity, Hre_ProfileModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileNotFullDataByIds);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult GetListProfiles([DataSourceRequest] DataSourceRequest request, Hre_ProfileGeneralMultiSearchModel profileModel)
        {
            var actionService = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            #region [Hien.Nguyen]
            if (profileModel.ProfileID != null && profileModel.ProfileID != Guid.Empty)
                profileModel.Keyword = null;
            #endregion
            // Son.Vo - 20151109 - 0059653
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            var _ProfileServices = new Hre_ProfileServices();
            int? DaysQuitAutoDisableAccount = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_DAYSQUITAUTODISABLEACCOUNT);
            if (profileModel.Keyword == null)
            {
                if (DaysQuitAutoDisableAccount == null)
                {
                    return GetListDataAndReturn<Hre_ProfileGeneralDetailEntity, Hre_ProfileGeneralDetailEntity, Hre_ProfileGeneralMultiSearchModel>(request, profileModel, ConstantSql.hrm_hr_sp_get_Profile_GeneralGrid);
                }
                else
                {
                    //Son.Vo - 20170710 - trường hợp người dùng click từ ds nv + có cấu hình số ngày thì ko load đúng dữ liệu của nv select
                    var lstProfile = _ProfileServices.GetProfileByDateQuitConfig(DaysQuitAutoDisableAccount, profileModel.OrgStructureID);
                    if (profileModel.ProfileID != null && profileModel.ProfileID != Guid.Empty)
                    {
                        lstProfile = lstProfile.Where(s => s.ID == profileModel.ProfileID.Value).ToList();
                    }
                    return Json(lstProfile.ToDataSourceResult(request));
                }
            }
            else
            {
                profileModel.Keyword = profileModel.Keyword.Replace(" ", ",");
                return GetListDataAndReturn<Hre_ProfileGeneralDetailEntity, Hre_ProfileGeneralDetailEntity, Hre_ProfileGeneralMultiSearchModel>(request, profileModel, ConstantSql.hrm_hr_sp_get_Profile_GeneralGrid);
            }
        }

        /// [Hieu.Van] - 2014/07/02 Lấy Mã Thẻ(CardCode) theo mã Nhân Viên(Hre_Profile)
        public JsonResult GetCardCodeByProfileId(Guid id)
        {
            var service = new ActionService(UserLogin);
            var status = string.Empty;
            var fieldData = service.GetFirstData<Hre_ProfileCodeEntity>(id, ConstantSql.hrm_hre_sp_get_Profile_CardCodeByProfileID, ref status);
            List<object> listObj = new List<object>();
            listObj.Add(status);
            listObj.Add(fieldData);
            return Json(listObj, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 20161005 - DS Tất cả nv
        [HttpPost]
        public ActionResult GetProfileAllList([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchModel model)
        {
            return GetDatatable<Hre_ProfileAllSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileAllList);
        }

        //public ActionResult GetProfileAllList([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchModel model)
        //{
        //    return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileAllSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileAllList);
        //}


        /// [Son.Vo] - 2014/07/10
        /// Lấy dữ liệu NV nghỉ việc load lên lưới bằng store
        [HttpPost]
        public ActionResult GetProfileQuitList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQuitListSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }

            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileQuitListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQuit);
        }


        #region DS người quản lý sắp nghỉ việc
        /// [Son.Vo] - 20180207 - 0092965: Trang chủ: thêm cảnh báo DS người quản lý sắp nghỉ việc
        [HttpPost]
        public ActionResult GetSupervisorQuitList([DataSourceRequest] DataSourceRequest request, Hre_SupervisorQuitListSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }
            return GetListDataAndReturn<Hre_ProfileQuitSupervisorModel, Hre_ProfileQuitSupervisorEntity, Hre_SupervisorQuitListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_SupervisorQuit);
        }

        public ActionResult ExportSupervisorQuitByTemplate([DataSourceRequest] DataSourceRequest request, Hre_SupervisorQuitListSearchModel model)
        {
            var status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileQuitSupervisorModel();
            var lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request)
            };
            var result = new List<Hre_ProfileQuitSupervisorModel>();
            if (!model.IsCreateTemplate)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ProfileQuitSupervisorModel, Hre_ProfileQuitSupervisorEntity, Hre_SupervisorQuitListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_SupervisorQuit, ref status);
            }
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();

                var cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileForExportModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty && model.ExportId != null)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportSelectSupervisorQuit(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileQuitSupervisorModel, Hre_ProfileQuitSupervisorEntity>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_SupervisorQuitByIds);
        }

        public ActionResult ExportSupervisorQuitList([DataSourceRequest] DataSourceRequest request, Hre_SupervisorQuitListSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }
            return ExportAllAndReturn<Hre_ProfileQuitSupervisorEntity, Hre_ProfileQuitSupervisorModel, Hre_SupervisorQuitListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_SupervisorQuit);
        }

        #endregion

        //[21/10/2015][To.Le][New Func][0058672]
        //Yêu cầu: Bổ sung: Danh sách tất cả nhân viên nghỉ việc - ProfileQuitAll
        //Xử lý: Bỏ phân quyền. Thấy được tất cả nhân viên nghỉ việc của tất cả phòng ban.
        [HttpPost]
        public ActionResult GetProfileQuitAllList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQuitSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileQuitSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQuitAll);
        }

        public ActionResult ExportProfileQuitList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQuitListSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfileQuitListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQuit);
        }

        //[21/10/2015][To.Le][Modify][0058672]
        //Xuất báo cáo nhân viên nghỉ việc không phân quyền theo phòng ban
        public ActionResult ExportProfileQuitListAll([DataSourceRequest] DataSourceRequest request, Hre_ProfileQuitSearchModel model)
        {
            if (model.SettlementStatus != InsuranceSettlement.E_INS_SETTLEMENT_ALL.ToString())
            {
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_SUCCESS.ToString())
                {
                    model.IsSettlement = true;
                }
                if (model.SettlementStatus == InsuranceSettlement.E_INS_SETTLEMENT_YET.ToString())
                {
                    model.IsSettlement = false;
                }
            }
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfileQuitSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQuitAll);
        }

        public ActionResult ExportProfileQuitListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileQuitListSearchModel model)
        {
            var hreservices = new Hre_ProfileServices();
            var _ContractServices = new Hre_ContractServices();
            var service = new ActionService(UserLogin);

            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileForExportModel();
            var services = new BaseService();
            var rptServices = new Hre_ReportServices();
            var orgServices = new Cat_OrgStructureServices();
            var listModel = new List<object>();
            listModel = new List<object>();
            listModel.AddRange(new object[23]);
            listModel[0] = model.ProfileName;
            listModel[1] = model.CodeEmp;
            listModel[2] = model.OrgStructureID;
            listModel[3] = model.PositionID;
            listModel[6] = model.JobTitleID;
            listModel[8] = model.DateFrom;
            listModel[9] = model.DateTo;
            listModel[10] = model.ResreasonID;
            listModel[11] = model.TypeOfStopID;
            listModel[12] = model.workPlaceID;
            listModel[19] = model.Settlement;
            listModel[20] = model.IsQuitInMonth;
            listModel[21] = 1;
            listModel[22] = int.MaxValue - 1;
            var result = new List<Hre_ProfileModel>();
            if (!model.IsCreateTemplate)
            {
                result = service.GetData<Hre_ProfileModel>(listModel, ConstantSql.hrm_hr_sp_get_ProfileQuit, ref status);
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            var _table = new DataTable("Hre_ProfileModel");
            var properties = TypeDescriptor.GetProperties(typeof(Hre_ProfileForExportModel));
            foreach (PropertyDescriptor prop in properties)
                _table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
            var _data = result.Translate<Hre_ProfileForExportModel>();

            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            var headerInfo3 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };

            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = _table,
                    FileName = "Hre_ProfileQuitModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var lstProfileIDs = result.Select(s => s.ID).Distinct().ToList();
            //var lstDependants = new List<Hre_DependantForExportProfileEntity>();
            //if (!model.IsCreateTemplate && !model.IsCreateTemplateForDynamicGrid)
            //{
            //    lstDependants = hreservices.GetLstDependantForExportProfileQuit(lstProfileIDs);
            //}
            var lstcontractbyProfileIDs = _ContractServices.GetContractForExportProfileQuit(lstProfileIDs);
            var profileServices = new Hre_ProfileServices();
            //Son.Vo - 20160628 - 0069568
            var lstqualificationbyProfileIDs = profileServices.GetLstProfileQualificationForExportProfileQuit(lstProfileIDs);
            var stopWorkingServices = new Hre_StopWorkingServices();
            var lstStopWorking = stopWorkingServices.GetNoteStopWorkingByLstProfileID(lstProfileIDs);
            var lstBasicSalary = profileServices.GetBasicSalaryForExportProfile(lstProfileIDs);
            foreach (var item in _data)
            {
                DataRow dr = _table.NewRow();
                foreach (PropertyDescriptor prop in properties)
                {
                    dr[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                }
                //Son.Vo - 20160628 - 0069568, 20160726 - 0071111
                var qualificationByProfile = lstqualificationbyProfileIDs.Where(s => s.ProfileID == item.ID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationByProfile != null)
                {
                    dr["QualificationName"] = qualificationByProfile.QualificationName;
                    dr["FieldOfTraining"] = qualificationByProfile.FieldOfTraining;
                    dr["TrainingPlace"] = qualificationByProfile.TrainingPlace;
                }
                var StopWorkingByProfile = lstStopWorking.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateStop).FirstOrDefault();
                if (StopWorkingByProfile != null)
                {
                    dr["Notes"] = StopWorkingByProfile.Note;
                }
                var lstContract = lstcontractbyProfileIDs.Where(s => s.ProfileID == item.ID).ToList();
                if (lstContract != null && lstContract.Count > 0)
                {
                    dr["TimesOfContract"] = lstContract.Count;
                    var contractEntity = lstContract.FirstOrDefault();
                    if (contractEntity != null)
                    {
                        dr["ContractNo"] = contractEntity.ContractNo;
                        dr["ContractTypeName"] = contractEntity.ContractTypeName;
                        dr["DateStartContract"] = contractEntity.DateStart;
                        if (contractEntity.DateEnd != null)
                        {
                            dr["DateStartContract"] = contractEntity.DateEnd.Value;
                        }
                    }
                }
                //Son.Vo - 20170105 - Add quá nhiều cột ko load được
                //var lstDependant = lstDependants.Where(s => s.ProfileID == item.ID).ToList();
                //if ( lstDependant != null && lstDependant.Count > 0)
                //{
                //    foreach (var dependant in lstDependant)
                //    {
                //        var titleName = dependant.DependantName + "|" + dependant.RelativeTypeName;
                //        if (!_table.Columns.Contains(titleName))
                //        {
                //            _table.Columns.Add(titleName);
                //        }
                //        if (_table.Columns.Contains(titleName))
                //        {
                //            dr[titleName] = dependant.DependantName;
                //        }
                //    }
                //}
                //Son.Vo - 20161028 - 0074824
                var basicSalary = lstBasicSalary.Where(s => s.ProfileID == item.ID && s.DateOfEffect <= item.DateQuit).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalary != null)
                {
                    dr["SalaryClassName"] = basicSalary.SalaryClassName;
                    dr["SalaryRankName"] = basicSalary.SalaryRankName;
                }
                _table.Rows.Add(dr);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, _table, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetProfileRetirementList([DataSourceRequest] DataSourceRequest request, Hre_ProfileRetirementSearchModel model)
        {
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request)
            };
            var listEntity = new List<Hre_ProfileModel>();
            if (!model.IsCreateTemplate)
            {
                if (model.ExportId == Guid.Empty)
                {
                    var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
                    var fromdays = _ConfigServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWPROFILERETIREMENTFROM);
                    var todays = _ConfigServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWPROFILERETIREMENTTO);
                    if (fromdays != null && todays != null)
                    {
                        //Nguyen.Le - 20171020 - 88946
                        model.DateRetirementFrom = DateTime.Now.AddDays(-Convert.ToDouble(todays.Value));
                        model.DateRetirementTo = DateTime.Now.AddDays(Convert.ToDouble(fromdays.Value));
                    }
                    return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileRetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileRetirement);
                }
                else
                {
                    var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
                    var fromdays = _ConfigServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWPROFILERETIREMENTFROM);
                    var todays = _ConfigServices.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWPROFILERETIREMENTTO);
                    if (fromdays != null && todays != null)
                    {
                        model.DateRetirementFrom = DateTime.Now.AddDays(-Convert.ToDouble(fromdays.Value));
                        model.DateRetirementTo = DateTime.Now.AddDays(Convert.ToDouble(todays.Value));
                    }
                    request.PageSize = int.MaxValue - 1;
                    listEntity = GetListData<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileRetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileRetirement, ref status);
                }
            }

            //Nguyen.Le - 14/11/2017 - 0089883
            var headerInfo1 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo2 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo3 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            var lstHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileModel(),
                    FileName = "Hre_Profile",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in lstHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, listEntity, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(listEntity.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - 2014/07/10
        /// Lấy dữ liệu NV nghỉ việc load lên lưới bằng store
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileWaitingHireList([DataSourceRequest] DataSourceRequest request, Hre_ProfileWaitingHireSearchModel model)
        {
            var objBase = new BaseService();
            var dt = new DataTable();
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileWaitingHire, UserLogin, ref status);
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["E_TotalSalary"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_TotalSalary"].ToString()))
                {
                    dr["TotalSalary"] = dr["E_TotalSalary"].ToString().DecryptValue();
                }
            }
            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;


        }
        /// <summary>
        /// [Tho.Bui] - 2014/07/10
        /// Lấy dữ liệu NV không nhận việc bằng store
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileUnHire([DataSourceRequest] DataSourceRequest request, Hre_ProfileunHireSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileunHireSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileUnHire);
        }

        [HttpPost]
        public ActionResult ExportProfileUnHireList([DataSourceRequest] DataSourceRequest request, Hre_ProfileunHireSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileunHireSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileUnHire);
        }

        /// <summary>
        /// [Tam.Le] - 2014/07/10
        /// Lấy dữ liệu NV thử việc load lên lưới bằng store
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileProbationList([DataSourceRequest] DataSourceRequest request, Hre_ProfileProbationSearchModel model)
        {
            if (model.IsExCludeQuitEmp == true)
            {
                model.Status = "E_WAITING_APPROVE,";
            }
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileProbationSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProbationProfile);

        }

        [HttpPost]
        public ActionResult GetProfileWaitingApprovedList([DataSourceRequest] DataSourceRequest request, Hre_ProfileWaitingApprovedSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileWaitingApproved);

        }

        public ActionResult ExportProfileProbationListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileProbationSearchModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "DateHireFrom", Value = model.DateHireFrom != null ? model.DateHireFrom : DateTime.Now };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateHireTo", Value = model.DateHireTo != null ? model.DateHireTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            if (model.IsExCludeQuitEmp == true)
            {
                model.Status = "E_WAITING_APPROVE,";
            }
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = new List<Hre_ProfileForExportModel>();
            if (!model.IsCreateTemplate)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ProfileForExportModel, Hre_ProfileEntity, Hre_ProfileProbationSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProbationProfile, ref status);
                #region task 0058054
                if (result != null && result.Count > 0)
                {
                    var lstProfileIDs = result.Select(s => s.ID).ToList();
                    var contractServidces = new Hre_ContractServices();
                    var lstContract = contractServidces.GetContractDataByLstProfileIDs(lstProfileIDs);
                    foreach (var item in result)
                    {
                        item.ContractCount = lstContract.Where(s => s.ProfileID == item.ID).Count();
                        var lstContractByProfileID = lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateSigned).FirstOrDefault();
                        if (lstContractByProfileID != null)
                            item.ContractTypeName = lstContractByProfileID.ContractTypeName;
                        if (item.DateEndProbation.HasValue)
                        {
                            item.DateEndProbationFotmat = item.DateEndProbation.Value.ToString("MM/yyyy");
                        }
                    }
                }
                #endregion
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileForExportModel(),
                    FileName = "Hre_Profile",
                    HeaderInfo = listHeaderInfo,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Hre_Profile (Hre_Profile)
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfileProbationList([DataSourceRequest] DataSourceRequest request, Hre_ProfileProbationSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileProbationSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProbationProfile);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Hre_Profile (Hre_Profile)
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfileWaitingHireList([DataSourceRequest] DataSourceRequest request, Hre_ProfileWaitingHireSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileWaitingHireSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileWaitingHire);
        }

        /// <summary>
        /// [Quoc.Do] - Xuất tất cả danh sách dữ liệu cho Hre_Profile (Hre_Profile)
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfileAllList([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSearchModel model)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_Profile";
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            _table = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileAllList, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
            return Json(message);
        }
        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Hre_Profile (Hre_Profile)
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>


        /// <summary>
        /// [Tho.Bui] - Xuất danh sách dữ liệu nhân viên nghĩ hưu cho Hre_Profile (Hre_Profile)
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfileRetirementList([DataSourceRequest] DataSourceRequest request, Hre_ProfileRetirementSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfileRetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileRetirement);
        }

        /// <summary>
        /// Lấy danh sách hồ sơ nhân viên
        /// </summary>
        /// <returns></returns>
        public JsonResult GetProfile()
        {
            string status = string.Empty;
            var service = new Hre_ProfileServices();
            var hre = service.GetAllUseEntity<Hre_ProfileEntity>(ref status);
            var result = hre.Select(item => new Hre_ProfileSelectModel()
            {
                ID = item.ID,
                ProfileName = item.ProfileName
            });
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetProfileByIdAnCutOffId(int id, int cutOffId)
        {
            string status = string.Empty;
            var service = new Hre_ProfileServices();
            var hre = service.GetAllUseEntity<Hre_ProfileEntity>(ref status);
            var result = hre.Select(item => new Hre_ProfileSelectModel()
            {
                ID = item.ID,
                ProfileName = item.ProfileName
            });
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SetStatusHire(string selectedIds, string statusPofile, string statusBasicSalary, string statusWorkHistory, string statusContract)
        {
            string status = string.Empty;
            var service = new BaseService();
            var ActionService = new ActionService(UserLogin);
            var lstObj = new List<object>();
            lstObj.Add(selectedIds);
            lstObj.Add(statusPofile);
            lstObj.Add(statusBasicSalary);
            lstObj.Add(statusWorkHistory);
            lstObj.Add(statusContract);
            var rs = service.UpdateData<Hre_ProfileMultiModel>(lstObj, ConstantSql.hrm_hre_sp_Set_ApproveProfile_Status, ref status);

            var _ProfileServices = new Hre_ProfileServices();
            var lstProfileIDs = selectedIds.Split(',').Select(s => Guid.Parse(s)).ToList();

            if (lstProfileIDs != null && lstProfileIDs.Count > 0)
            {
                status = _ProfileServices.ApprovedProfileWaitingHire(lstProfileIDs);
            }
            if (status != "")
            {
                return Json(status);
            }
            return Json("");
        }

        public ActionResult ExportProfileQuitByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;
            var ActionService = new ActionService(UserLogin);

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var baseService = new BaseService();
            var profileServices = new Hre_ProfileServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _InsuranceSalaryServices = new Sal_InsuranceSalaryServices();
            var _StopWorkingServices = new Hre_StopWorkingServices();
            var _workHistoryServices = new Hre_WorkHistoryServices();
            string strIDs = string.Empty;
            //[to.le][05/03/2016][0064408]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lstQualification = profileServices.GetLstProfileQualificationByProfileIDs(selectedIds);

            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1).ToString();
            var objs = new List<object>();
            objs.AddRange(new object[3]);
            objs[0] = strIDs;
            objs[1] = 1;
            objs[2] = int.MaxValue - 1;
            var lstProfile = ActionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileQuitByListId, ref status);
            if (lstProfile == null || lstProfile.Count == 0)
                return null;

            var _ListcontractEntity = contractServices.GetContractDataByLstProfileIDs(selectedIds);
            var _lstbasicsalary = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(selectedIds);
            var _lstInsuranceSalary = _InsuranceSalaryServices.GetLstInsuranceSalaryByProfileIDs(selectedIds);
            var lstavailableAnlDay = profileServices.GetAnlDayAvailableByProfileID(selectedIds);
            var lstStopWorking = _StopWorkingServices.GetLstStopWorkingByLstProfileID(selectedIds);
            var lstworkHistory = _workHistoryServices.GetCompanyWorkHistoryBylstProfileID(selectedIds);
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstProfile.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var profile in lstProfile)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;

                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
                }
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - 20160714 - 0070555: Danh sách nhân viên nghỉ việc: Bổ sung enum xuất word
                var _qualification = _lstQualification.Where(s => s.ProfileID == profile.ID && s.IsQualificationMain == true).FirstOrDefault();
                if (_qualification != null)
                {
                    profile.HreProfileQualificationName = _qualification.QualificationName;
                    profile.QualificationName = _qualification.QualificationName;
                    profile.FieldOfTraining = _qualification.FieldOfTraining;
                    profile.TrainingPlace = _qualification.TrainingPlace;
                }

                var _contract = _ListcontractEntity.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (_contract != null)
                {
                    profile.LatestFollowNo = _contract.FollowNo;
                    profile.LatestContractTypeName = _contract.ContractTypeName;
                    profile.LatestContractTypeCode = _contract.ContractTypeCode;
                    profile.LatestContracNo = _contract.ContractNo;
                    profile.LatestDateSigned = _contract.DateSigned != null ? _contract.DateSigned.Value.ToString("dd/MM/yyyy") : string.Empty;
                    profile.LatestDateStart = _contract.DateStart != null ? _contract.DateStart.ToString("dd/MM/yyyy") : string.Empty;
                    profile.LatestDateEnd = _contract.DateEnd != null ? _contract.DateEnd.Value.ToString("dd/MM/yyyy") : string.Empty;
                    profile.LatestTerminateDate = _contract.TerminateDate != null ? _contract.TerminateDate.Value.ToString("dd/MM/yyyy") : string.Empty;
                }
                #endregion

                var availableAnlDay = lstavailableAnlDay.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.MonthYear).FirstOrDefault();
                if (availableAnlDay != null)
                {
                    profile.AnlDayAvailable = availableAnlDay.AnlDayAvailable;
                }

                #region Xử lý datetime
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                profile.DateNow_Day = DateTime.Now.Day.ToString();
                profile.DateNow_Month = DateTime.Now.Month.ToString();
                profile.DateNow_Year = DateTime.Now.Year.ToString();

                if (profile.DateStart.HasValue)
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                if (profile.RequestDate.HasValue)
                    profile.RequestDateFormat = profile.RequestDate.Value.ToString("dd/MM/yyyy");
                if (profile.DateQuit.HasValue)
                    profile.DateQuitFormat = profile.DateQuit.Value.ToString("dd/MM/yyyy");
                if (profile.DateHire.HasValue)
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");

                if (profile.DateOfBirth.HasValue)
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");
                if (profile.IDDateOfIssue.HasValue)
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                if (profile.DateSigned.HasValue)
                    profile.DateSignedFormat = profile.DateSigned.Value.ToString("dd/MM/yyyy");
                if (profile.DateQuitSign.HasValue)
                {
                    profile.DateQuitSignFormat = profile.DateQuitSign.Value.ToString("dd/MM/yyyy");
                }
                if (profile.DateQuitRequest.HasValue)
                    profile.DateQuitRequestFormat = profile.DateQuitRequest.Value.ToString("dd/MM/yyyy");
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (profile.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.GraveName = "Ms.";
                    profile.NameByGerder = "Chị ";
                    profile.GraveNames = "Bà";
                    profile.GraveNameEN = "Mrs.";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.GraveName = "Mr.";
                    profile.NameByGerder = "Anh ";
                    profile.GraveNames = "Ông";
                    profile.GraveNameEN = "Mr.";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    profile.GraveName = "Mr/Mrs ";
                    profile.NameByGerder = "Anh/Chị";
                    profile.GraveNames = "Ông/Bà";
                    profile.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region Lấy thông tin lương
                if (_lstbasicsalary != null)
                {
                    //Son.Vo - 20160328 - 0065282
                    var basicsalary = _lstbasicsalary.Where(s => s.ProfileID == profile.ID && s.DateOfEffect <= profile.DateQuit).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                    if (basicsalary != null)
                    {
                        profile.SalaryRankName = basicsalary.SalaryRankName;
                        profile.E_GrossAmount = basicsalary.GrossAmount;
                        profile.Rate = basicsalary.Rate;
                        double all1 = basicsalary.AllowanceAmount1 != null ? basicsalary.AllowanceAmount1.Value : 0;
                        double all2 = basicsalary.AllowanceAmount2 != null ? basicsalary.AllowanceAmount2.Value : 0;
                        double all3 = basicsalary.AllowanceAmount3 != null ? basicsalary.AllowanceAmount3.Value : 0;
                        double all4 = basicsalary.AllowanceAmount4 != null ? basicsalary.AllowanceAmount4.Value : 0;
                        double all5 = basicsalary.AllowanceAmount5 != null ? basicsalary.AllowanceAmount5.Value : 0;
                        double all6 = basicsalary.AllowanceAmount6 != null ? basicsalary.AllowanceAmount6.Value : 0;
                        double all7 = basicsalary.AllowanceAmount7 != null ? basicsalary.AllowanceAmount7.Value : 0;
                        double all8 = basicsalary.AllowanceAmount8 != null ? basicsalary.AllowanceAmount8.Value : 0;
                        double all9 = basicsalary.AllowanceAmount9 != null ? basicsalary.AllowanceAmount9.Value : 0;
                        double all10 = basicsalary.AllowanceAmount10 != null ? basicsalary.AllowanceAmount10.Value : 0;
                        double all11 = basicsalary.AllowanceAmount11 != null ? basicsalary.AllowanceAmount11.Value : 0;
                        double all12 = basicsalary.AllowanceAmount12 != null ? basicsalary.AllowanceAmount12.Value : 0;
                        double all13 = basicsalary.AllowanceAmount13 != null ? basicsalary.AllowanceAmount13.Value : 0;
                        double all14 = basicsalary.AllowanceAmount14 != null ? basicsalary.AllowanceAmount14.Value : 0;
                        double all15 = basicsalary.AllowanceAmount15 != null ? basicsalary.AllowanceAmount15.Value : 0;
                        profile.AllowanceAdditional = all1 + all2 + all3 + all4 + all5 + all6 + all7 + all8 + all9 + all10 + all11 + all12 + all13 + all14 + all15;
                        if (profile.AllowanceAdditional != null && profile.AllowanceAdditional > 0)
                        {
                            var objs1 = new List<object>();
                            objs1.AddRange(new object[1]);
                            objs1[0] = profile.AllowanceAdditional;
                            var amountTranslate = ActionService.GetData<Hre_EntityTranslate>(objs1, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                            if (amountTranslate != null && amountTranslate.FirstOrDefault() != null)
                            {
                                if (amountTranslate.FirstOrDefault() != null)
                                    profile.AllowanceAdditionalTranslate = amountTranslate.FirstOrDefault().AmountVN;
                                if (amountTranslate.FirstOrDefault() != null)
                                    profile.AllowanceAdditionalTranslateEN = amountTranslate.FirstOrDefault().AmountEN;
                            }
                        }
                    }
                }
                if (_lstInsuranceSalary != null)
                {
                    //Son.Vo - 20160328 - 0065282
                    var InsuranceSalary = _lstInsuranceSalary.Where(s => s.ProfileID == profile.ID && s.DateEffect <= profile.DateQuit).OrderByDescending(s => s.DateEffect).FirstOrDefault();
                    if (InsuranceSalary != null)
                    {
                        profile.InsuranceAmount = InsuranceSalary.InsuranceAmount;
                    }
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (profile.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Chị ";
                    profile.ChairmanGraveNameEN1 = "Ms.";
                    profile.ChairmanGraveName = "Bà";
                    profile.ChairmanGraveNameEN = "Mrs.";
                }
                else if (profile.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Anh ";
                    profile.ChairmanGraveNameEN1 = "Mr.";
                    profile.ChairmanGraveName = "Ông";
                    profile.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Son.Vo - 20160328 - 0065282
                var countYearMonth = profileServices.CountYearWorking(profile.ID, profile.DateHire.Value, false);
                if (countYearMonth != null)
                {
                    profile.CountYear = countYearMonth.CountYear;
                    profile.CountYearQuitAllowance = countYearMonth.CountYearQuitAllowance;
                    profile.CountMonth = countYearMonth.CountMonth;
                    profile.CountMonthQuitAllowance = countYearMonth.CountMonthQuitAllowance;
                    profile.CountYearQuitComputeAllowance = countYearMonth.CountYearQuitComputeAllowance;
                    if (countYearMonth.CountYearQuitComputeAllowance != null && profile.InsuranceAmount != null && profile.AllowanceAdditional != null)
                    {
                        profile.QuitAllowance = (profile.InsuranceAmount + profile.AllowanceAdditional) * countYearMonth.CountYearQuitComputeAllowance * 0.5;
                        #region Son.Vo - 20160708 - 0070199 - lấy pc - lý do ds đen (parse thành double)
                        double valueReturn = 0;
                        try
                        {
                            double.TryParse(profile.ResonBackList, out valueReturn);
                        }
                        catch (FormatException)
                        {
                            valueReturn = 0;
                        }
                        profile.TotalRealMoney = profile.QuitAllowance - valueReturn;
                        if (profile.TotalRealMoney > 0)
                        {
                            var objsRealMoney = new List<object>();
                            objsRealMoney.AddRange(new object[1]);
                            objsRealMoney[0] = profile.TotalRealMoney;
                            var RealMoneyTranslate = ActionService.GetData<Hre_EntityTranslate>(objsRealMoney, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                            if (RealMoneyTranslate != null && RealMoneyTranslate.FirstOrDefault() != null)
                            {
                                profile.TotalRealMoneyTranslate = RealMoneyTranslate.FirstOrDefault().AmountVN;
                            }
                        }
                        #endregion
                    }
                    profile.CountDay = countYearMonth.CountDay;
                }
                #endregion

                #region Son.Vo - 20160708 - 0070199: DS Nhân Viên Nghỉ Việc: Bổ sung enum xuất word
                if (profile.DateQuit != null)
                {
                    var dayDateQuit = profile.DateQuit.Value.DayOfWeek;
                    if (dayDateQuit == DayOfWeek.Monday)
                    {
                        profile.ActualDayQuit = profile.DateQuit.Value.AddDays(-2);
                    }
                    else
                    {
                        profile.ActualDayQuit = profile.DateQuit.Value.AddDays(-1);
                    }
                    if (profile.ActualDayQuit != null)
                    {
                        profile.ActualDayQuitFormat = profile.ActualDayQuit.Value.ToString("dd/MM/yyyy");
                    }
                    if (profile.DateQuitRequest != null)
                    {
                        double? countDays = profile.DateQuitRequest.Value.Subtract(profile.DateQuit.Value).TotalDays;
                        profile.CountDayQuitRequest = countDays;
                    }
                }
                #endregion

                var stopWorkingByProfile = lstStopWorking.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStop).FirstOrDefault();
                if (stopWorkingByProfile != null)
                {
                    profile.DateEndUnion = stopWorkingByProfile.DateEndUnion;
                    //Son.Vo - 20161028 - 0074878
                    if (stopWorkingByProfile.DateStop != null)
                    {
                        var dayDateQuit = stopWorkingByProfile.DateStop.Value.AddDays(-1).DayOfWeek;
                        if (dayDateQuit == DayOfWeek.Sunday)
                        {
                            profile.DateStopBefore = stopWorkingByProfile.DateStop.Value.AddDays(-2);
                        }
                        else
                        {
                            profile.DateStopBefore = stopWorkingByProfile.DateStop.Value.AddDays(-1);
                        }
                    }
                }
                //Quyen.Quach bổ sung enum xuất word 0084413
                var workhistorycompany = lstworkHistory.Where(s => s.ProfileID == profile.ID && profile.DateQuit == s.DateEffective).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistorycompany != null)
                {
                    profile.CompanyName = workhistorycompany.CompanyName;
                    profile.CompanyNameEN = workhistorycompany.CompanyNameEN;
                    profile.ChairmanJobtitileVN = workhistorycompany.ChairmanJobtitileVN;
                    profile.ChairmanJobtitleEN = workhistorycompany.ChairmanJobtitleEN;
                    profile.ChairmanNationalityEN = workhistorycompany.ChairmanNationalityEN;
                    profile.ChairmanNationalityVN = workhistorycompany.ChairmanNationalityVN;
                    profile.Phone = workhistorycompany.Phone;
                    profile.Fax = workhistorycompany.Fax;
                    profile.AddressEN = workhistorycompany.AddressEN;
                    profile.AddressVN = workhistorycompany.AddressVN;
                    profile.ChairmanGender = workhistorycompany.ChairmanGender;
                    if (profile.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                    {
                        profile.ChairmanGraveNameEN = "Mr ";
                        profile.ChairmanGraveName = "Anh ";
                    }
                    if (profile.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                    {
                        profile.ChairmanGraveNameEN = "Mrs ";
                        profile.ChairmanGraveName = "Chị ";
                    }
                    if (profile.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                    {
                        profile.ChairmanGraveName = "Anh/Chị ";
                        profile.ChairmanGraveNameEN = "Mr/Mrs ";
                    }
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lstProfileExport = new List<Hre_ProfileEntity>();
                lstProfileExport.Add(profile);
                ExportService.ExportWord(outputPath, templatepath, lstProfileExport.Translate<Hre_ProfileForExportEntity>());
            }
            if (lstProfile.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWordProfileByTemplate(Guid selectedIds, string valueFields)
        {
            var actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var baseService = new BaseService();
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(Common.DotNetToOracle(selectedIds.ToString()), ConstantSql.hrm_hr_sp_get_ProfileById, ref status);
            if (lstProfile == null || lstProfile.Count == 0)
                return null;

            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstProfile.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var profile in lstProfile)
            {
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);

                template = actionService.GetData<Cat_ExportEntity>(lstObjExport, ConstantSql.hrm_cat_sp_get_ExportWord, ref status).Where(s => s.ScreenName == valueFields).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                if (profile.DateStart.HasValue)
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                if (profile.RequestDate.HasValue)
                    profile.RequestDateFormat = profile.RequestDate.Value.ToString("dd/MM/yyyy");
                if (profile.DateQuit.HasValue)
                    profile.DateQuitFormat = profile.DateQuit.Value.ToString("dd/MM/yyyy");


                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstProfile1 = new List<Hre_ProfileEntity>();

                lstProfile1.Add(profile);
                //[To.Le][25/08/2016]Do Hre_ProfileEntity vượt quá giớ hạng field nên Translate qua Hre_ProfileForExportEntity để xuất
                ExportService.ExportWord(outputPath, templatepath, lstProfile1.Translate<Hre_ProfileForExportEntity>());
            }
            if (lstProfile.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20170209 - 0078564 - enum xuất word ds sơ yếu lý lịch
        public ActionResult ExportProfileC2ByTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var ActionService = new ActionService(UserLogin, LanguageCode);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfile = baseService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileC2ByListId, UserLogin, ref status);
            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;

            #region Son.Vo - 20161011 - Lấy ds data = entity để xuất word danh Sách

            var _ProfileServices = new Hre_ProfileServices();
            var lstRelativesbylstProfileID = _ProfileServices.GetLstRelativesByProfileIDs(lstProfileID);
            var lstprofileQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileID);

            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalaryBylstProfileID = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(lstProfileID);

            var candidateHistoryServices = new Hre_CandidateHistoryServices();
            var lstCandidateHistory = candidateHistoryServices.GetCandidateHistoryByProfile(lstProfileID);

            var lstProfilePartyUnion = _ProfileServices.GetListProfilePartyUnionByProfile(lstProfileID);
            var lstProfileLanguageLevel = _ProfileServices.GetListProfileLanguageLevelByProfile(lstProfileID);
            var lstReward = _ProfileServices.GetListRewardByProfile(lstProfileID);
            var lstDiscipline = _ProfileServices.GetListDisciplineByProfile(lstProfileID);
            var lstProfileComputingLevel = _ProfileServices.GetListProfileComputingLevelByProfile(lstProfileID);

            #endregion

            foreach (var profile in lstProfile)
            {
                #region Lấy dữ liệu template
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = ActionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                #endregion

                #region Lấy dữ liệu xuất word
                var lastBasicSalary = lstBasicSalaryBylstProfileID.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (lastBasicSalary != null)
                {
                    profile.SalarySalaryClassName = lastBasicSalary.SalaryClassName;
                    profile.SalarySalaryRankName = lastBasicSalary.SalaryRankName;
                    profile.PersonalRate = lastBasicSalary.PersonalRate;
                    profile.SalaryDateOfEffect = lastBasicSalary.DateOfEffect;
                    profile.AllowanceAmount1 = lastBasicSalary.E_AllowanceAmount1 != null ? lastBasicSalary.E_AllowanceAmount1.DecryptValue() : null;
                    profile.AllowanceAmount2 = lastBasicSalary.E_AllowanceAmount1 != null ? lastBasicSalary.E_AllowanceAmount2.DecryptValue() : null;
                    profile.UsualAllowanceName1 = lastBasicSalary.UsualAllowanceName1;
                    profile.UsualAllowanceName2 = lastBasicSalary.UsualAllowanceName2;
                    profile.GrossAmount = lastBasicSalary.E_GrossAmount != null ? lastBasicSalary.E_GrossAmount.DecryptValue() : null;
                }

                var profilePartyUnion = lstProfilePartyUnion.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (profilePartyUnion != null)
                {
                    profile.PoliticalLevelName = profilePartyUnion.PoliticalLevelName;
                    profile.CommunistPartyPositionName = profilePartyUnion.CommunistPartyPositionName;

                    profile.CommunistPartyEnrolledDate = profilePartyUnion.CommunistPartyEnrolledDate;
                    profile.CommunistPartyReserveDate = profilePartyUnion.CommunistPartyReserveDate;
                    profile.DateJoinPoliticalOrganization = profilePartyUnion.DateJoinPoliticalOrganization;
                    profile.PoliticalOrganizationPosition = profilePartyUnion.PoliticalOrganizationPosition;
                    profile.RevolutionEnrolledDate = profilePartyUnion.RevolutionEnrolledDate;
                    profile.RevolutionEndDate = profilePartyUnion.RevolutionEndDate;
                    profile.ArmedForceTypesName = profilePartyUnion.ArmedForceTypesName;
                    profile.HighestTitle = profilePartyUnion.HighestTitle;
                    profile.WoundedSoldierTypesName = profilePartyUnion.WoundedSoldierTypesName;
                    profile.RelationWithMartyr = profilePartyUnion.RelationWithMartyr;

                }

                #endregion

                #region Template


                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                #endregion

                #region Lấy ds để khởi tạo table
                var lstRelativeByProfileID = new List<Hre_RelativesEntity>();
                if (lstRelativesbylstProfileID != null)
                {
                    lstRelativeByProfileID = lstRelativesbylstProfileID.Where(s => s.ProfileID == profile.ID && (s.IsNotPersonal == false || s.IsNotPersonal == null)).OrderBy(s => s.YearOfBirthDateTime).ToList();
                }

                var lstRelativePersonal = new List<Hre_RelativesEntity>();
                if (lstRelativesbylstProfileID != null)
                {
                    lstRelativePersonal = lstRelativesbylstProfileID.Where(s => s.ProfileID == profile.ID && s.IsNotPersonal == true).OrderBy(s => s.YearOfBirthDateTime).ToList();
                }

                var lstProfileQualificationByProfileID = new List<Hre_ProfileQualificationEntity>();
                if (lstprofileQualification != null)
                {
                    lstProfileQualificationByProfileID = lstprofileQualification.Where(s => s.ProfileID == profile.ID).OrderBy(s => s.DateStart).ToList();
                }

                var lstBasicSalaryByProfileID = new List<Sal_BasicSalaryEntity>();
                if (lstBasicSalaryBylstProfileID != null)
                {
                    lstBasicSalaryByProfileID = lstBasicSalaryBylstProfileID.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstCanHistoryByProfileID = new List<Hre_CandidateHistoryEntity>();
                if (lstCandidateHistory != null)
                {
                    lstCanHistoryByProfileID = lstCandidateHistory.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).ToList();
                }

                var lstProfileLanguageLevelByProfileID = new List<Hre_ProfileLanguageLevelEntity>();
                if (lstProfileLanguageLevel != null)
                {
                    lstProfileLanguageLevelByProfileID = lstProfileLanguageLevel.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstRewardByProfileID = new List<Hre_RewardEntity>();
                if (lstReward != null)
                {
                    lstRewardByProfileID = lstReward.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstDisciplineByProfileID = new List<Hre_DisciplineEntity>();
                if (lstDiscipline != null)
                {
                    lstDisciplineByProfileID = lstDiscipline.Where(s => s.ProfileID == profile.ID).ToList();
                }

                var lstProfileComputingLevelByProfileID = new List<Hre_ProfileComputingLevelEntity>();
                if (lstProfileComputingLevel != null)
                {
                    lstProfileComputingLevelByProfileID = lstProfileComputingLevel.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region lấy dữ liệu cho các bảng export
                var lstProfiles = new List<Hre_ProfileEntity>();
                lstProfiles.Add(profile);
                var tblProfiles = new DataTable();
                tblProfiles = lstProfiles.Translate();

                var tblRelatives = new DataTable();
                tblRelatives = lstRelativeByProfileID.Translate();

                var tblProfileQualification = new DataTable();
                tblProfileQualification = lstProfileQualificationByProfileID.Translate();

                var tblBasicSalary = new DataTable();
                tblBasicSalary = lstBasicSalaryByProfileID.Translate();

                var tblCandidateHistory = new DataTable();
                tblCandidateHistory = lstCanHistoryByProfileID.Translate();

                var tblProfileLanguageLevel = new DataTable();
                tblProfileLanguageLevel = lstProfileLanguageLevelByProfileID.Translate();

                var tblRelativesPersonal = new DataTable();
                tblRelativesPersonal = lstRelativePersonal.Translate();

                var tblReward = new DataTable();
                tblReward = lstRewardByProfileID.Translate();

                var tblDiscipline = new DataTable();
                tblDiscipline = lstDisciplineByProfileID.Translate();

                var tblProfileComputingLevel = new DataTable();
                tblProfileComputingLevel = lstProfileComputingLevelByProfileID.Translate();

                var dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblRelatives);
                dsData.Tables.Add(tblProfileQualification);
                dsData.Tables.Add(tblBasicSalary);
                dsData.Tables.Add(tblCandidateHistory);
                dsData.Tables.Add(tblProfileLanguageLevel);
                dsData.Tables.Add(tblRelativesPersonal);
                dsData.Tables.Add(tblReward);
                dsData.Tables.Add(tblDiscipline);
                dsData.Tables.Add(tblProfileComputingLevel);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblRelatives";
                dsData.Tables[2].TableName = "tblProfileQualification";
                dsData.Tables[3].TableName = "tblBasicSalary";
                dsData.Tables[4].TableName = "tblCandidateHistory";
                dsData.Tables[5].TableName = "tblProfileLanguageLevel";
                dsData.Tables[6].TableName = "tblRelativesPersonal";
                dsData.Tables[7].TableName = "tblReward";
                dsData.Tables[8].TableName = "tblDiscipline";
                dsData.Tables[9].TableName = "tblProfileComputingLevel";
                #endregion
                //Son.Vo - 20160325 - 0065001
                ExportService.ExportWithRegions(outputPath, templatepath, dsData);
            }
            if (lstProfileID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportProfileWorkingByTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var ActionService = new ActionService(UserLogin, LanguageCode);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfile = baseService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWorkingByListId, UserLogin, ref status);

            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;

            #region Son.Vo - 20161011 - Lấy ds data = entity để xuất word danh Sách
            var _ProfileServices = new Hre_ProfileServices();
            var lstDependantBylstProfileID = _ProfileServices.GetLstDependantByProfileIDs(lstProfileID);
            var lstRelativesbylstProfileID = _ProfileServices.GetLstRelativesByProfileIDs(lstProfileID);
            var lstprofileQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileID);
            var lstVisainfo = _ProfileServices.GetLstVisaInfoByProfileIDs(lstProfileID);
            var lstResidentCard = _ProfileServices.GetLstResidenceCardByProfileIDs(lstProfileID);
            var lstWorkPermit = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileID);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalaryBylstProfileID = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(lstProfileID);

            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstprofileWorkHistory = _WorkHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileID);

            //Quyen.Quach -21/07/2017 - 0084550 Thêm ds data enum xuất word
            var lstprofilecomputinglevel = _ProfileServices.GetListProfileComputingLevelByProfile(lstProfileID);
            var lstprofilelanguagelevel = _ProfileServices.GetListProfileLanguageLevelByProfile(lstProfileID);
            var lstprofilesoftskill = _ProfileServices.GetListProfileSoftSkillByProfile(lstProfileID);

            //Nguyen.Le - 06/12/2017 - 0090721 Thêm enum đoàn đảng
            var lstprofilepartyunion = _ProfileServices.GetListProfilePartyUnionByProfile(lstProfileID);

            var candidateHistoryServices = new Hre_CandidateHistoryServices();
            var lstCandidateHistory = candidateHistoryServices.GetCandidateHistoryByProfile(lstProfileID);

            var _TraineeServices = new Tra_TraineeServices();
            var lsttraineeprofile = _TraineeServices.GetTraineeByListTrainee(lstProfileID);

            var _Eva_Performation = new Eva_PerformanceServices();
            var lstEvaPerformation = _Eva_Performation.GetProfileEvaperformanceByListTrainee(lstProfileID);

            #endregion

            var candidateServices = new Rec_CandidateServices();
            var lstcandidateID = lstProfile.Where(s => s.CandidateID != null).Select(s => s.CandidateID.Value).ToList();
            var lstCandidate = candidateServices.GetLstCandidatebyIDs(lstcandidateID);
            var _ContractServices = new Hre_ContractServices();
            var lstcontractDatesign = _ContractServices.GetDateSignContractByLstProfileIDs(lstProfileID);
            var lstcontract = _ContractServices.GetContractByLstProfileIDs(lstProfileID);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformation4ExportByProfileIDs(lstProfileID);
            List<WordTemplateNew> lstWordTemplate = new List<WordTemplateNew>();
            foreach (var profile in lstProfile)
            {
                #region Lấy dữ liệu template
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = ActionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                #endregion

                #region [18/03/2016][phuc.nguyen][0064965] Lương cơ bản, phụ cấp, đếm số ng phụ thuộc
                profile.DependantCount = lstDependantBylstProfileID.Where(s => s.ProfileID == profile.ID).Count();

                var objBasicSalaryProfile = lstBasicSalaryBylstProfileID.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (objBasicSalaryProfile.HasValue())
                {
                    if (objBasicSalaryProfile.DateOfEffect.HasValue())
                    {
                        profile.DateOfEffect = objBasicSalaryProfile.DateOfEffect;
                        profile.DateOfEffectFormat = objBasicSalaryProfile.DateOfEffect.ToString("dd/MM/yyyy");
                    }
                    if (objBasicSalaryProfile.E_GrossAmount.HasValue())
                        profile.E_GrossAmount = objBasicSalaryProfile.GrossAmount;
                    if (objBasicSalaryProfile.E_InsuranceAmount.HasValue())
                        profile.E_InsuranceAmount = objBasicSalaryProfile.InsuranceAmount.ToString();
                    if (objBasicSalaryProfile.AllowanceAmount1.HasValue())
                        profile.Allowance1 = objBasicSalaryProfile.AllowanceAmount1;
                    if (objBasicSalaryProfile.AllowanceAmount2.HasValue())
                        profile.Allowance2 = objBasicSalaryProfile.AllowanceAmount2;
                    if (objBasicSalaryProfile.AllowanceAmount3.HasValue())
                        profile.Allowance3 = objBasicSalaryProfile.AllowanceAmount3;
                    if (objBasicSalaryProfile.AllowanceAmount4.HasValue())
                        profile.Allowance4 = objBasicSalaryProfile.AllowanceAmount4;
                    if (objBasicSalaryProfile.AllowanceAmount5.HasValue())
                        profile.Allowance5 = objBasicSalaryProfile.AllowanceAmount5;
                    if (objBasicSalaryProfile.AllowanceAmount6.HasValue())
                        profile.Allowance6 = objBasicSalaryProfile.AllowanceAmount6;
                    if (objBasicSalaryProfile.AllowanceAmount7.HasValue())
                        profile.Allowance7 = objBasicSalaryProfile.AllowanceAmount7;
                    if (objBasicSalaryProfile.AllowanceAmount8.HasValue())
                        profile.Allowance8 = objBasicSalaryProfile.AllowanceAmount8;
                    if (objBasicSalaryProfile.AllowanceAmount9.HasValue())
                        profile.Allowance9 = objBasicSalaryProfile.AllowanceAmount9;
                    if (objBasicSalaryProfile.AllowanceAmount10.HasValue())
                        profile.Allowance10 = objBasicSalaryProfile.AllowanceAmount10;
                    if (objBasicSalaryProfile.AllowanceAmount11.HasValue())
                        profile.Allowance11 = objBasicSalaryProfile.AllowanceAmount11;
                    if (objBasicSalaryProfile.AllowanceAmount12.HasValue())
                        profile.Allowance12 = objBasicSalaryProfile.AllowanceAmount12;
                    if (objBasicSalaryProfile.AllowanceAmount13.HasValue())
                        profile.Allowance13 = objBasicSalaryProfile.AllowanceAmount13;
                    if (objBasicSalaryProfile.AllowanceAmount14.HasValue())
                        profile.Allowance14 = objBasicSalaryProfile.AllowanceAmount14;
                    if (objBasicSalaryProfile.AllowanceAmount15.HasValue())
                        profile.Allowance15 = objBasicSalaryProfile.AllowanceAmount15;
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (profile.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.GenderEN = "Female";
                    profile.GenderViewNewNN = "Nữ";
                    profile.GraveName = "Ms.";
                    profile.NameByGerder = "Chị ";
                    profile.GraveNames = "Bà";
                    profile.GraveNameEN = "Mrs.";
                    profile.GraveName1 = "Chị";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.GenderEN = "Male";
                    profile.GenderViewNewNN = "Nam";
                    profile.GraveName = "Mr.";
                    profile.NameByGerder = "Anh ";
                    profile.GraveNames = "Ông";
                    profile.GraveNameEN = "Mr.";
                    profile.GraveName1 = "Anh";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    profile.GenderEN = "Other";
                    profile.GraveName = "Mr/Mrs ";
                    profile.NameByGerder = "Anh/Chị";
                    profile.GraveNames = "Ông/Bà";
                    profile.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (profile.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Chị ";
                    profile.ChairmanGraveNameEN1 = "Ms.";
                    profile.ChairmanGraveName = "Bà";
                    profile.ChairmanGraveNameEN = "Mrs.";
                }
                else if (profile.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Anh ";
                    profile.ChairmanGraveNameEN1 = "Mr.";
                    profile.ChairmanGraveName = "Ông";
                    profile.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Xữ lý date time
                if (profile.IDDateOfIssue.HasValue)
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                if (profile.DateOfBirth.HasValue)
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");
                if (profile.Salary != null)
                    profile.SalaryFormat = String.Format("{0:0,0}", profile.Salary);
                if (profile.Allowance1 != null)
                    profile.Allowance1Format = String.Format("{0:0,0}", profile.Allowance1);

                if (profile.DayOfBirth > 0 && profile.MonthOfBirth > 0 && profile.YearOfBirth > 0)
                {
                    profile.Birthday = profile.DayOfBirth + "/" + profile.MonthOfBirth + "/" + profile.YearOfBirth;
                }
                if (profile.DateHire.HasValue)
                {
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                if (profile.DateStart.HasValue)
                {
                    profile.DateStartString = "Ngày " + profile.DateStart.Value.Day + " Tháng " + profile.DateStart.Value.Month + " Năm " + profile.DateStart.Value.Year + " ";
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                }
                if (profile.DateEnd.HasValue)
                {
                    profile.DateEndString = "Ngày " + profile.DateEnd.Value.Day + " Tháng " + profile.DateEnd.Value.Month + " Năm " + profile.DateEnd.Value.Year + " ";
                    profile.DateEndFormat = profile.DateEnd.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Son.Vo - 20161014 - 0074182: Bổ sung Enum thông tin VISA, Thẻ cư trú
                var visaInfoByProfile = lstVisainfo.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (visaInfoByProfile != null)
                {
                    profile.VisaNo = visaInfoByProfile.VisaNo;
                    profile.VisaDateOfIssue = visaInfoByProfile.DateOfIssue;
                    profile.VisaDateStart = visaInfoByProfile.DateStart;
                    profile.VisaDateEnd = visaInfoByProfile.DateEnd;
                    profile.VisaPlaceOfIssue = visaInfoByProfile.PlaceOfIssue;
                    profile.VisaCountryName = visaInfoByProfile.CountryName;
                }
                var residentCardByProfile = lstResidentCard.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (residentCardByProfile != null)
                {
                    profile.ResidenceCardDecisionNo = residentCardByProfile.DecisionNo;
                    profile.ResidenceCardDateAllocated = residentCardByProfile.DateAllocated;
                    profile.ResidenceCardDateStart = residentCardByProfile.DateStart;
                    profile.ResidenceCardDateEnd = residentCardByProfile.DateEnd;
                }
                #endregion

                #region Son.Vo - 20161014 - 0074234
                var workPermitByProfile = lstWorkPermit.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByProfile != null)
                {
                    profile.WorkPermitNo = workPermitByProfile.WorkPermitNo;
                    profile.WorkPermitType = workPermitByProfile.WorkPermitType;
                    profile.WorkPermitAddress = workPermitByProfile.WorkPermitAddress;
                    profile.WorkPermitInsDate = workPermitByProfile.WorkPermitInsDate;
                    profile.WorkPermitExpiredDate = workPermitByProfile.WorkPermitExpiredDate;
                }
                #endregion

                #region CodeTax
                if (!string.IsNullOrEmpty(profile.CodeTax))
                {
                    for (int _i = 1; (_i <= profile.CodeTax.Length && _i <= 13); _i++)
                    {
                        profile.SetPropertyValue(string.Format("CodeTaxChar{0}", _i), profile.CodeTax[_i - 1].ToString());
                    }
                }
                #endregion

                //Son.Vo - 20161031 - 0074690 Lấy salarySugest Candidate
                var candidateByProfile = lstCandidate.Where(s => s.ID == profile.CandidateID).FirstOrDefault();
                if (candidateByProfile != null)
                {
                    profile.SalarySuggest = candidateByProfile.SalarySuggest;
                }

                //Son.Vo - 20161216 - 0076889
                var firstContractByDatesign = lstcontractDatesign.Where(s => s.ProfileID == profile.ID).OrderBy(s => s.DateSigned).FirstOrDefault();
                if (firstContractByDatesign != null)
                {
                    profile.FirstDateSigned = firstContractByDatesign.DateSigned;
                }

                #region Template
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                //hau.le-87870-20170919
                string genneralNameExport = profile.CodeEmp + "_" + ExportService.GenneralFileNameExport(template, profile.ID, i);
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                #endregion

                #region Relatives
                var lstRelativeByProfileID = new List<Hre_RelativesEntity>();
                if (lstRelativesbylstProfileID != null)
                {
                    lstRelativeByProfileID = lstRelativesbylstProfileID.Where(s => s.ProfileID == profile.ID).OrderBy(s => s.OrderNumber).ThenBy(s => s.YearOfBirthDateTime).ToList();
                }
                #endregion

                #region [To.Le][31/03/2017][0080139][New Func] Lấy thong tin trình độ chuyên môn của nhân viên dạng select top 1
                var ProfileQualificationEntity = new Hre_ProfileQualificationEntity();
                if (lstprofileQualification != null)
                {
                    ProfileQualificationEntity = lstprofileQualification.Where(s => s.ProfileID == profile.ID && s.IsQualificationMain == true).FirstOrDefault();
                    if (ProfileQualificationEntity != null)
                    {
                        profile.TrainingPlaceTop1 = ProfileQualificationEntity.TrainingPlace;
                        profile.FieldOfTrainingTop1 = ProfileQualificationEntity.FieldOfTraining;
                        profile.QualificationNameTop1 = ProfileQualificationEntity.QualificationName;
                        if (ProfileQualificationEntity.GraduationDate.HasValue)
                        {
                            profile.GraduationDateTop1 = ProfileQualificationEntity.GraduationDate;
                        }
                    }
                }

                #endregion

                //Lấy số người phụ thuộc theo ngày hiệu lực
                profile.DependantDataEfectiveCount = lstDependantBylstProfileID.Where(s => s.ProfileID == profile.ID && ((s.MonthOfEffect <= DateTime.Now && s.MonthOfExpiry >= DateTime.Now) || (s.MonthOfEffect <= DateTime.Now && s.MonthOfExpiry == null))).Count();
                profile.DependantCount = lstDependantBylstProfileID.Where(s => s.ProfileID == profile.ID).Count();
                #region ProfileQualification
                var lstProfileQualificationByProfileID = new List<Hre_ProfileQualificationEntity>();
                if (lstprofileQualification != null)
                {
                    lstProfileQualificationByProfileID = lstprofileQualification.Where(s => s.ProfileID == profile.ID).OrderBy(s => s.DateStart).ToList();
                }
                #endregion

                #region Hre_Contract
                var lstContractByProfileID = new List<Hre_ContractEntity>();
                if (lstcontract != null && lstcontract.Count > 0)
                {
                    lstContractByProfileID = lstcontract.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region BasicSalary
                var lstBasicSalaryByProfileID = new List<Sal_BasicSalaryEntity>();
                if (lstBasicSalaryBylstProfileID != null)
                {
                    //[To.Le][31/03/2017][0080139]
                    lstBasicSalaryByProfileID = lstBasicSalaryBylstProfileID.Where(s => s.ProfileID == profile.ID && s.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()).ToList();
                }
                #endregion

                #region WorkHistory
                var lstWorkHistoryByProfileID = new List<Hre_WorkHistoryEntity>();
                if (lstprofileWorkHistory != null)
                {
                    lstWorkHistoryByProfileID = lstprofileWorkHistory.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region CandidateHistory
                var lstCanHistoryByProfileID = new List<Hre_CandidateHistoryEntity>();
                if (lstCandidateHistory != null)
                {
                    lstCanHistoryByProfileID = lstCandidateHistory.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateStart).ToList();
                }
                #endregion

                #region Quyen.Quach - 21/07/2017 - Lấy ds xuất word dạng list
                #region ProfileComputingLevel
                var lstProfileComputingLevelByProfileID = new List<Hre_ProfileComputingLevelEntity>();
                if (lstprofilecomputinglevel != null)
                {
                    lstProfileComputingLevelByProfileID = lstprofilecomputinglevel.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region ProfileLanguageLevel
                var lstProfileLanguagelevelByProfileID = new List<Hre_ProfileLanguageLevelEntity>();
                if (lstprofilelanguagelevel != null)
                {
                    lstProfileLanguagelevelByProfileID = lstprofilelanguagelevel.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region SoftSkill
                var lstProfileSoftSkillByProfileID = new List<Hre_SoftSkillEntity>();
                if (lstprofilesoftskill != null)
                {
                    lstProfileSoftSkillByProfileID = lstprofilesoftskill.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #region Tra_Trainee
                var lstProfileTraineeByProfileID = new List<Tra_TraineeEntity>();
                if (lsttraineeprofile != null)
                {
                    lstProfileTraineeByProfileID = lsttraineeprofile.Where(s => s.ProfileID == profile.ID).ToList();
                    foreach (var Trainee in lstProfileTraineeByProfileID)
                    {
                        Trainee.Status = Trainee.Status != null ? Trainee.Status.TranslateString(LanguageCode) : null;
                    }
                }
                #endregion

                #region Eva_Performance
                var lstProfileEvaPerfomationByProfileID = new List<Eva_PerformanceEntity>();
                if (lstEvaPerformation != null)
                {
                    lstProfileEvaPerfomationByProfileID = lstEvaPerformation.Where(s => s.ProfileID == profile.ID).ToList();
                }
                #endregion

                #endregion
                //Son.Vo - 20170426 - 0081867
                var salaryInfomationByprofile = lstSalaryInformation.Where(s => s.ProfileID == profile.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (salaryInfomationByprofile != null)
                {
                    profile.AccountNo = salaryInfomationByprofile.AccountNo;
                    profile.AccountName = salaryInfomationByprofile.AccountName;
                    profile.BankName = salaryInfomationByprofile.BankName;
                }

                #region ProfilePartyUnion - Nguyen.Le - 06/12/2017 - 0090721 Thêm enum đoàn đảng
                var lstPartyUnionByProfileID = lstprofilepartyunion.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (lstPartyUnionByProfileID != null)
                {
                    profile.CommunistPartyEnrolledDate = lstPartyUnionByProfileID.CommunistPartyEnrolledDate;
                    profile.CommunistPartyReserveDate = lstPartyUnionByProfileID.CommunistPartyReserveDate;
                    profile.YouthUnionEnrolledDate = lstPartyUnionByProfileID.YouthUnionEnrolledDate;
                }
                #endregion
                //Quyen.Quach 04/01/2018 0092018 
                profile.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(profile.IDPlaceOfIssue) ? RemoveSign4VietnameseString(profile.IDPlaceOfIssue) : string.Empty;
                #region lấy dữ liệu cho các bảng export
                var lstProfiles = new List<Hre_ProfileEntity>();
                lstProfiles.Add(profile);
                var tblProfiles = new DataTable();
                tblProfiles = lstProfiles.Translate();

                var tblRelatives = new DataTable();
                tblRelatives = lstRelativeByProfileID.Translate();

                var tblProfileQualifications = new DataTable();
                tblProfileQualifications = lstProfileQualificationByProfileID.Translate();

                var tblBasicSalary = new DataTable();
                tblBasicSalary = lstBasicSalaryByProfileID.Translate();

                var tblWorkHistory = new DataTable();
                tblWorkHistory = lstWorkHistoryByProfileID.Translate();

                var tblCandidateHistory = new DataTable();
                tblCandidateHistory = lstCanHistoryByProfileID.Translate();

                var tblContract = new DataTable();
                tblContract = lstContractByProfileID.Translate();

                var tblComputing = new DataTable();
                tblComputing = lstProfileComputingLevelByProfileID.Translate();

                var tblLanguage = new DataTable();
                tblLanguage = lstProfileLanguagelevelByProfileID.Translate();

                var tblPerformance = new DataTable();
                tblPerformance = lstProfileEvaPerfomationByProfileID.Translate();

                var tblTrainee = new DataTable();
                tblTrainee = lstProfileTraineeByProfileID.Translate();

                var tblSoftSkill = new DataTable();
                tblSoftSkill = lstProfileSoftSkillByProfileID.Translate();

                var dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblRelatives);
                dsData.Tables.Add(tblProfileQualifications);
                dsData.Tables.Add(tblBasicSalary);
                dsData.Tables.Add(tblWorkHistory);
                dsData.Tables.Add(tblCandidateHistory);
                dsData.Tables.Add(tblContract);
                dsData.Tables.Add(tblComputing);
                dsData.Tables.Add(tblLanguage);
                dsData.Tables.Add(tblPerformance);
                dsData.Tables.Add(tblTrainee);
                dsData.Tables.Add(tblSoftSkill);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblRelatives";
                dsData.Tables[2].TableName = "tblProfileQualifications";
                dsData.Tables[3].TableName = "tblBasicSalary";
                dsData.Tables[4].TableName = "tblWorkHistory";
                dsData.Tables[5].TableName = "tblCandidateHistory";
                dsData.Tables[6].TableName = "tblContract";
                dsData.Tables[7].TableName = "tblComputing";
                dsData.Tables[8].TableName = "tblLanguage";
                dsData.Tables[9].TableName = "tblPerformance";
                dsData.Tables[10].TableName = "tblTrainee";
                dsData.Tables[11].TableName = "tblSoftSkill";

                #endregion
                //Son.Vo - 20160325 - 0065001
                //ExportService.ExportWithRegions(outputPath, templatepath, dsData);
                WordTemplateNew wordTemplate = new WordTemplateNew();
                wordTemplate.DataSource = dsData;
                wordTemplate.TemplateID = template.ID;
                wordTemplate.ProfileID = profile.ID;
                wordTemplate.FileName = genneralNameExport;
                lstWordTemplate.Add(wordTemplate);
            }
            if (lstProfileID.Count > 1)
            {
                //var fileZip = Common.MultiExport("", true, folderName);
                //string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                ////Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                //var messageReturn = string.Empty;
                //var urlOutPath = Common.GetPath(Common.TemplateURL);
                //var fileZipSplit = fileZip.Split(',');
                //if (fileZipSplit.Count() > 0)
                //{
                //    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                //    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                //    return Json(messageReturn);
                //}
                var fileZip = ExportService.ExportWordByTemplate(folderName, Guid.Parse(valueFields), lstWordTemplate);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20160412 - 0066252
        public ActionResult ExportProfileWorkingByTemplateV2(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var ActionService = new ActionService(UserLogin, LanguageCode);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfile = baseService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWorkingByListId, UserLogin, ref status);
            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;

            //Nguyen.Le - 06/12/2017 - 0090721 Thêm enum đoàn đảng
            var _ProfileServices = new Hre_ProfileServices();
            var lstprofilepartyunion = _ProfileServices.GetListProfilePartyUnionByProfile(lstProfileID);

            foreach (var profile in lstProfile)
            {
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;

                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = ActionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (profile.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.GraveName = "Ms.";
                    profile.NameByGerder = "Chị ";
                    profile.GraveNames = "Bà";
                    profile.GraveNameEN = "Mrs.";

                }
                else if (profile.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.GraveName = "Mr.";
                    profile.NameByGerder = "Anh ";
                    profile.GraveNames = "Ông";
                    profile.GraveNameEN = "Mr.";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    profile.GraveName = "Mr/Mrs ";
                    profile.NameByGerder = "Anh/Chị";
                    profile.GraveNames = "Ông/Bà";
                    profile.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (profile.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Chị ";
                    profile.ChairmanGraveNameEN1 = "Ms.";
                    profile.ChairmanGraveName = "Bà";
                    profile.ChairmanGraveNameEN = "Mrs.";
                }
                else if (profile.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.ChairmanGraveName1 = "Anh ";
                    profile.ChairmanGraveNameEN1 = "Mr.";
                    profile.ChairmanGraveName = "Ông";
                    profile.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                if (profile.IDDateOfIssue.HasValue)
                    profile.IDDateOfIssueFormat = profile.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                if (profile.DateOfBirth.HasValue)
                    profile.DateOfBirthFormat = profile.DateOfBirth.Value.ToString("dd/MM/yyyy");
                if (profile.Salary != null)
                    profile.SalaryFormat = String.Format("{0:0,0}", profile.Salary);
                if (profile.Allowance1 != null)
                    profile.Allowance1Format = String.Format("{0:0,0}", profile.Allowance1);

                if (profile.DayOfBirth > 0 && profile.MonthOfBirth > 0 && profile.YearOfBirth > 0)
                {
                    profile.Birthday = profile.DayOfBirth + "/" + profile.MonthOfBirth + "/" + profile.YearOfBirth;
                }
                if (profile.DateHire.HasValue)
                {
                    profile.DateHireFormat = profile.DateHire.Value.ToString("dd/MM/yyyy");
                }
                profile.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                if (profile.DateStart.HasValue)
                {
                    profile.DateStartString = "Ngày " + profile.DateStart.Value.Day + " Tháng " + profile.DateStart.Value.Month + " Năm " + profile.DateStart.Value.Year + " ";
                    profile.DateStartFormat = profile.DateStart.Value.ToString("dd/MM/yyyy");
                }
                if (profile.DateEnd.HasValue)
                {
                    profile.DateEndString = "Ngày " + profile.DateEnd.Value.Day + " Tháng " + profile.DateEnd.Value.Month + " Năm " + profile.DateEnd.Value.Year + " ";
                    profile.DateEndFormat = profile.DateEnd.Value.ToString("dd/MM/yyyy");
                }
                if (!string.IsNullOrEmpty(profile.CodeTax))
                {
                    for (int _i = 1; (_i <= profile.CodeTax.Length && _i <= 13); _i++)
                    {
                        profile.SetPropertyValue(string.Format("CodeTaxChar{0}", _i), profile.CodeTax[_i - 1].ToString());
                    }
                }

                #region ProfilePartyUnion - Nguyen.Le - 06/12/2017 - 0090721 Thêm enum đoàn đảng
                var lstPartyUnionByProfileID = lstprofilepartyunion.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (lstPartyUnionByProfileID != null)
                {
                    profile.CommunistPartyEnrolledDate = lstPartyUnionByProfileID.CommunistPartyEnrolledDate;
                    profile.CommunistPartyReserveDate = lstPartyUnionByProfileID.CommunistPartyReserveDate;
                    profile.YouthUnionEnrolledDate = lstPartyUnionByProfileID.YouthUnionEnrolledDate;
                }
                #endregion

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                //[07/06/2016][HienNguyen][68425]
                //hau.le-87870-20170919
                string genneralNameExport = profile.CodeEmp + "_" + ExportService.GenneralFileNameExport(template, profile.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var ilProfile = new List<Hre_ProfileEntity>();
                ilProfile.Add(profile);
                ExportService.ExportWord(outputPath, templatepath, ilProfile.Translate<Hre_ProfileForExportEntity>());
            }
            if (lstProfileID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20170414 - 0081197 - do có xử lý for workhistory + lương cb nên phải tách ra hàm riêng để không ảnh hưởng performance
        public ActionResult ExportProfileAllByTemplateV2(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var ActionService = new ActionService(UserLogin, LanguageCode);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfile = baseService.GetData<Hre_Profile4ExportV4Entity>(objs, ConstantSql.hrm_hr_sp_get_Profile4ExportV4ByListId, UserLogin, ref status);

            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileID = lstProfile.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstProfileID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;

            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalaryBylstProfileID = _BasicSalaryServices.GetLstBasicSalaryByProfileIDs(lstProfileID);

            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstprofileWorkHistory = _WorkHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileID);

            var _StopWorkingServices = new Hre_StopWorkingServices();
            var lstStopWorking = _StopWorkingServices.GetLstStopWorkingByLstProfileID(lstProfileID);

            foreach (var profile in lstProfile)
            {
                #region Lấy dữ liệu template
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = ActionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID, i);
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                #endregion

                #region WorkHistory

                var lstWorkHistoryByProfileID = new List<Hre_WorkHistoryEntity>();
                if (lstprofileWorkHistory != null)
                {
                    lstWorkHistoryByProfileID = lstprofileWorkHistory.Where(s => s.ProfileID == profile.ID).OrderBy(s => s.DateEffective).ToList();
                    foreach (var WorkHistory in lstWorkHistoryByProfileID)
                    {
                        var basicSalary = lstBasicSalaryBylstProfileID.Where(s => s.ProfileID == WorkHistory.ProfileID && s.DateOfEffect <= WorkHistory.DateEffective && s.Status == WorkHistoryStatus.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                        if (basicSalary != null)
                        {
                            if (basicSalary.GrossAmount != null)
                            {
                                WorkHistory.Salary = basicSalary.GrossAmount.ToDouble();
                            }
                            WorkHistory.Allowance1 = basicSalary.AllowanceAmount1;
                            WorkHistory.Allowance2 = basicSalary.AllowanceAmount2;
                            WorkHistory.Allowance3 = basicSalary.AllowanceAmount3;
                            WorkHistory.Allowance4 = basicSalary.AllowanceAmount4;
                            WorkHistory.Allowance5 = basicSalary.AllowanceAmount5;
                            WorkHistory.Allowance6 = basicSalary.AllowanceAmount6;
                            WorkHistory.Allowance7 = basicSalary.AllowanceAmount7;
                            WorkHistory.Allowance8 = basicSalary.AllowanceAmount8;
                            WorkHistory.Allowance9 = basicSalary.AllowanceAmount9;
                            WorkHistory.Allowance10 = basicSalary.AllowanceAmount10;
                            WorkHistory.Allowance11 = basicSalary.AllowanceAmount11;
                            WorkHistory.Allowance12 = basicSalary.AllowanceAmount12;
                            WorkHistory.Allowance13 = basicSalary.AllowanceAmount13;
                            WorkHistory.Allowance14 = basicSalary.AllowanceAmount14;
                            WorkHistory.Allowance15 = basicSalary.AllowanceAmount15;
                            double totalAllowance = 0;
                            #region total ALL
                            if (WorkHistory.Allowance1 != null)
                            {
                                totalAllowance += WorkHistory.Allowance1.Value;
                            }
                            if (WorkHistory.Allowance2 != null)
                            {
                                totalAllowance += WorkHistory.Allowance2.Value;
                            }
                            if (WorkHistory.Allowance3 != null)
                            {
                                totalAllowance += WorkHistory.Allowance3.Value;
                            }
                            if (WorkHistory.Allowance4 != null)
                            {
                                totalAllowance += WorkHistory.Allowance4.Value;
                            }
                            if (WorkHistory.Allowance5 != null)
                            {
                                totalAllowance += WorkHistory.Allowance5.Value;
                            }
                            if (WorkHistory.Allowance6 != null)
                            {
                                totalAllowance += WorkHistory.Allowance6.Value;
                            }
                            if (WorkHistory.Allowance7 != null)
                            {
                                totalAllowance += WorkHistory.Allowance7.Value;
                            }
                            if (WorkHistory.Allowance8 != null)
                            {
                                totalAllowance += WorkHistory.Allowance8.Value;
                            }
                            if (WorkHistory.Allowance9 != null)
                            {
                                totalAllowance += WorkHistory.Allowance9.Value;
                            }
                            if (WorkHistory.Allowance10 != null)
                            {
                                totalAllowance += WorkHistory.Allowance10.Value;
                            }
                            if (WorkHistory.Allowance11 != null)
                            {
                                totalAllowance += WorkHistory.Allowance11.Value;
                            }
                            if (WorkHistory.Allowance12 != null)
                            {
                                totalAllowance += WorkHistory.Allowance12.Value;
                            }
                            if (WorkHistory.Allowance13 != null)
                            {
                                totalAllowance += WorkHistory.Allowance13.Value;
                            }
                            if (WorkHistory.Allowance14 != null)
                            {
                                totalAllowance += WorkHistory.Allowance14.Value;
                            }
                            if (WorkHistory.Allowance15 != null)
                            {
                                totalAllowance += WorkHistory.Allowance15.Value;
                            }
                            #endregion
                            WorkHistory.TotalAllowance = totalAllowance;
                        }
                        var stopworking = lstStopWorking.Where(s => s.ProfileID == WorkHistory.ProfileID && s.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && s.DateStop <= WorkHistory.DateEffective
                                && (s.DateComeBack == null || s.DateComeBack > WorkHistory.DateEffective)).FirstOrDefault();
                        if (stopworking != null)
                        {
                            WorkHistory.StatusSyn = ProfileStatusSyn.E_STOP.ToString().TranslateString();
                        }
                        else
                        {
                            WorkHistory.StatusSyn = ProfileStatusSyn.E_HIRE.ToString().TranslateString();
                        }
                    }
                }
                #endregion
                #region lấy dữ liệu cho các bảng export
                var lstProfiles = new List<Hre_Profile4ExportV4Entity>();
                lstProfiles.Add(profile);

                var tblProfiles = new DataTable();
                tblProfiles = lstProfiles.Translate();

                var tblWorkHistory = new DataTable();
                tblWorkHistory = lstWorkHistoryByProfileID.Translate();

                var dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblWorkHistory);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblWorkHistory";
                #endregion
                //Son.Vo - 20160325 - 0065001
                ExportService.ExportWithRegions(outputPath, templatepath, dsData);
            }
            if (lstProfileID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportProfileWaitingHireByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileWaitingHireSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = new List<Hre_ProfileModel>();
            if (model.EmpTypeID != null)
            {
                model.EmpTypeID = Common.DotNetToOracle(model.EmpTypeID);
            }
            if (model.WorkPlaceID != null)
            {
                model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
            }
            if (model.RankID != null)
            {
                model.RankID = Common.DotNetToOracle(model.RankID);
            }
            if (!model.IsCreateTemplate)
            {
                request.Page = 1;
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileWaitingHireSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileWaitingHire, ref status);
            }

            var profileservices = new Hre_CandidateGeneralServices();
            var lstProfileID = result.Select(s => s.ID).ToList();
            var lstCandidateGeneralByProfile = profileservices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileID);
            foreach (var item in result)
            {
                var CandidateGeneralByProfile = lstCandidateGeneralByProfile.Where(s => s.ProfileID == item.ID).FirstOrDefault();
                if (CandidateGeneralByProfile != null)
                {
                    if (!string.IsNullOrEmpty(CandidateGeneralByProfile.E_TotalSalary))
                    {
                        item.TotalSalary = CandidateGeneralByProfile.E_TotalSalary.DecryptValue();
                    }
                }
            }
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DatePrint", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "UserPrint", Value = UserLogin };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };


            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileModel(),
                    FileName = "Hre_Profile",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileWaitingHireSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileWaitingHireSearchModel model)
        {
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = actionService.GetData<Hre_ProfileModel>(model.WorkPlaceID, ConstantSql.hrm_hr_sp_get_ProfileWaitingHireByIds, ref status);
            var profileservices = new Hre_CandidateGeneralServices();
            var lstProfileID = result.Select(s => s.ID).ToList();
            var lstCandidateGeneralByProfile = profileservices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileID);
            foreach (var item in result)
            {
                var CandidateGeneralByProfile = lstCandidateGeneralByProfile.Where(s => s.ProfileID == item.ID).FirstOrDefault();
                if (CandidateGeneralByProfile != null)
                {
                    if (!string.IsNullOrEmpty(CandidateGeneralByProfile.E_TotalSalary))
                    {
                        item.TotalSalary = CandidateGeneralByProfile.E_TotalSalary.DecryptValue();
                    }
                }
            }
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DatePrint", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "UserPrint", Value = UserLogin };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileModel(),
                    FileName = "Hre_Profile",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileRewardListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RewardSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_RewardSearchModel();
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            #region Create tempate
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            var headerInfo3 = new HeaderInfo() { Name = "DateFrom_DateOfIssuance", Value = model.DateFrom_DateOfIssuance == null ? DateTime.Now : model.DateFrom_DateOfIssuance };
            var headerInfo4 = new HeaderInfo() { Name = "DateTo_DateOfIssuance", Value = model.DateTo_DateOfIssuance == null ? DateTime.Now : model.DateTo_DateOfIssuance };
            var headerInfo5 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now };
            var headerInfo6 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo7 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5, headerInfo6, headerInfo7 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_RewardModel(),
                    FileName = "Hre_Reward",
                    HeaderInfo = listHeaderInfo,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            var result = actionService.GetData<Hre_RewardModel>(lstModel, ConstantSql.hrm_hr_sp_get_Reward, ref status);
            #region Logo
            var UserExport = string.Empty;
            var CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                var itemdefaul = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => new { s.UserLoginName, s.CompanyLogo }).FirstOrDefault();
                if (itemdefaul != null)
                {
                    UserExport = itemdefaul.UserLoginName;
                    CompanyLogo = itemdefaul.CompanyLogo;
                }
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportCandidateGeneralListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_CandidateGeneralSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = GetListData<Hre_CandidateGeneralModel, Hre_CandidateGeneralEntity, Hre_CandidateGeneralSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_CandidateGeneral, ref status);
            //if (model.IsCreateTemplateForDynamicGrid)
            //{
            //    obj = result;
            //    isDataTable = false;
            //}
            if (model != null && model.IsCreateTemplate)
            {

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_CandidateGeneralModel(),
                    FileName = "Hre_CandidateGeneral",
                    OutPutPath = path,
                    // HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }


            if (model.ExportId != Guid.Empty)
            {

                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        //ToLE
        public ActionResult ExportRecCandidateHistoryListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RecCandidateHistorySearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_CandidateHistoryModel();
            var result = new List<Hre_CandidateHistoryModel>();
            if (model != null && !model.IsCreateTemplate)
            {
                result = GetListData<Hre_CandidateHistoryModel, Hre_CandidateHistoryEntity, Hre_RecCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RecCandidateHistory, ref status);
            }
            if (model.IsCreateTemplateForDynamicGrid)
                if (model.IsCreateTemplateForDynamicGrid)
                {
                    obj = result;
                    isDataTable = false;
                }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_CandidateHistoryModel",
                    OutPutPath = path,
                    // HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }


            if (model.ExportId != Guid.Empty)
            {

                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileProbationTemplate(List<Guid> selectedIds, string valueFields)
        {
            #region MyRegion


            ActionService service = new ActionService(UserLogin, LanguageCode);
            string[] valueFieldsExportID = valueFields.Split(',');
            valueFields = valueFieldsExportID[0];
            //string _exportID = valueFieldsExportID[1];
            Guid exportID;
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);

            var lstProfileProbation = service.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWaitingHireByListId, ref status).ToList();
            if (lstProfileProbation.Count == 0)
                return null;
            #endregion
            #region ds nguoi than cua nhan vien duoc chon
            string strProfileIDs = "";
            if (lstProfileProbation != null)
            {
                foreach (var ProfileID in lstProfileProbation)
                {
                    string _strProfileID = Common.DotNetToOracle(ProfileID.ID.ToString());
                    strProfileIDs += _strProfileID + ",";
                }
                if (strProfileIDs.IndexOf(",") > 0)
                    strProfileIDs = strProfileIDs.Substring(0, strProfileIDs.Length - 1);
            }
            var lstRelativeByProfileIDs = service.GetData<Hre_RelativesEntity>(strProfileIDs, ConstantSql.hrm_hr_sp_get_RelativeByProfileIds, ref status).ToList();
            #endregion

            #region Duong dan
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstProfileProbation != null && lstProfileProbation.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            #endregion

            #region Hop dong
            List<object> objContract = new List<object>();
            objContract.Add(strIDs);
            objContract.Add(1);
            objContract.Add(int.MaxValue - 1);
            var _ListcontractEntity = service.GetData<Hre_ContractEntity>(objContract, ConstantSql.hrm_hr_sp_get_ContractDataByProfileIDs, ref status).ToList();
            #endregion

            #region Kinhnghiem
            var objCandidate = new List<object>();
            objCandidate.AddRange(new object[2]);
            objCandidate[0] = 1;
            objCandidate[1] = int.MaxValue - 1;
            var _LisCandidate = service.GetData<Hre_CandidateHistoryEntity>(objCandidate, ConstantSql.hrm_rec_sp_get_CandidateHistory, ref status).ToList();
            #endregion

            #region nguoi phu thuoc
            List<object> paraDependant = new List<object>();
            paraDependant.AddRange(new object[12]);
            paraDependant[10] = 1;
            paraDependant[11] = int.MaxValue - 1;
            var lstDependant = service.GetData<Hre_DependantEntity>(paraDependant, ConstantSql.hrm_hr_sp_get_Dependant, ref status).ToList();
            #endregion

            #region lịch sử đào tạo
            var _ListCandidateQualification = service.GetData<Rec_CandidateQualificationModel>(strIDs, ConstantSql.Rec_sp_get_canddquabproids, ref status).ToList();
            #endregion

            foreach (var objProfileProbation in lstProfileProbation)
            {
                i++;
                #region format ngay thang
                if (objProfileProbation.DateOfEffect.HasValue)
                {
                    objProfileProbation.DateOfEffectFormat = objProfileProbation.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileProbation.DateHireCandidate.HasValue)
                {
                    objProfileProbation.DateHireCandidateFormat = objProfileProbation.DateHireCandidate.Value.ToString("dd/MM/yyyy");
                }

                if (objProfileProbation.DateExam.HasValue)
                {
                    objProfileProbation.DateExamFormat = objProfileProbation.DateExam.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileProbation.DateHire.HasValue)
                {
                    objProfileProbation.DayOfDateHire = objProfileProbation.DateHire.Value.Day;
                    objProfileProbation.MonthOfDateHire = objProfileProbation.DateHire.Value.Month;
                    objProfileProbation.YearOfDateHire = objProfileProbation.DateHire.Value.Year;
                    objProfileProbation.DateHireFormat = objProfileProbation.DateHire.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileProbation.DateEndProbation.HasValue)
                {
                    objProfileProbation.DayOfDateProbation = objProfileProbation.DateEndProbation.Value.Day;
                    objProfileProbation.MonthOfDateProbation = objProfileProbation.DateEndProbation.Value.Month;
                    objProfileProbation.YearOfDateProbation = objProfileProbation.DateEndProbation.Value.Year;
                    objProfileProbation.DateEndProbationFormat = objProfileProbation.DateEndProbation.Value.ToString("dd/MM/yyyy");

                }
                objProfileProbation.Salary = objProfileProbation.Salary.HasValue ? objProfileProbation.Salary.Value : 0;
                objProfileProbation.IDDateOfIssueFormat = objProfileProbation.IDDateOfIssue != null ? objProfileProbation.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : string.Empty;
                objProfileProbation.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                objProfileProbation.DateNow_Day = DateTime.Now.Day.ToString();
                objProfileProbation.DateNow_Month = DateTime.Now.Month.ToString();
                objProfileProbation.DateNow_Year = DateTime.Now.Year.ToString();
                objProfileProbation.DateNow_Hour = DateTime.Now.ToString("HH:mm:ss");
                if (objProfileProbation.DateOfBirth == null && objProfileProbation.DayOfBirth != null && objProfileProbation.MonthOfBirth != null && objProfileProbation.YearOfBirth != null)
                {
                    objProfileProbation.DateOfBirth = new DateTime((int)objProfileProbation.YearOfBirth, (int)objProfileProbation.MonthOfBirth, (int)objProfileProbation.DayOfBirth);
                }
                if (objProfileProbation.DateOfBirth != null)
                    objProfileProbation.DateOfBirthFormat = objProfileProbation.DateOfBirth.Value.ToString("dd/MM/yyyy");
                if (objProfileProbation.IDDateOfIssue != null)
                    objProfileProbation.IDDateOfIssueFormat = objProfileProbation.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                #endregion
                #region Export
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);

                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = service.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objProfileProbation.ID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                #endregion

                #region Contract
                var _contract = _ListcontractEntity.Where(s => s.ProfileID == objProfileProbation.ID).OrderByDescending(s => s.DateEnd).FirstOrDefault();
                if (_contract != null)
                {
                    objProfileProbation.LatestContracNo = _contract.ContractNo;
                    objProfileProbation.LatestDateSigned = _contract.DateSigned != null ? _contract.DateSigned.Value.ToString("dd/MM/yyyy") : string.Empty;
                    objProfileProbation.LatestDateStart = _contract.DateStart != null ? _contract.DateStart.ToString("dd/MM/yyyy") : string.Empty;
                    objProfileProbation.LatestDateEnd = _contract.DateEnd != null ? _contract.DateEnd.Value.ToString("dd/MM/yyyy") : string.Empty;
                    objProfileProbation.ContractTypeName = _contract.ContractTypeName;
                }
                #endregion
                var ilContract = new List<Hre_ProfileEntity>();
                ilContract.Add(objProfileProbation);
                DataTable tblProfiles = new DataTable();
                tblProfiles = ilContract.Translate();


                #region lay nguoi than cua tung nhan vien
                List<Hre_RelativesEntity> lstRelativeByProfileID = new List<Hre_RelativesEntity>();
                if (lstRelativeByProfileIDs != null)
                {
                    lstRelativeByProfileID = lstRelativeByProfileIDs.Where(s => s.ProfileID == objProfileProbation.ID).ToList();

                }
                #endregion

                #region kinh nghiem
                var lscandidatebypro = _LisCandidate.Where(s => s.ProfileID == objProfileProbation.ID).OrderBy(s => s.DateStart).ToList();
                foreach (var itemcandidate in lscandidatebypro)
                {
                    itemcandidate.DateStartFormat = itemcandidate.DateStart != null ? itemcandidate.DateStart.Value.ToString("dd/MM/yyyy") : string.Empty;
                    itemcandidate.DateFinishFormat = itemcandidate.DateFinish != null ? itemcandidate.DateFinish.Value.ToString("dd/MM/yyyy") : string.Empty;
                }
                var tblCandidateHistory = new DataTable();
                tblCandidateHistory = lscandidatebypro.Translate();
                #endregion

                #region người phụ thuộc
                var lstDependantbypro = lstDependant.Where(s => s.ProfileID == objProfileProbation.ID).ToList();
                foreach (var itemDependant in lstDependantbypro)
                {
                    itemDependant.DateOfBirthFormat = itemDependant.DateOfBirth != null ? itemDependant.DateOfBirth.Value.ToString("dd/MM/yyyy") : string.Empty;
                }
                DataTable tblDependant = new DataTable();
                tblDependant = lstDependantbypro.Translate();
                #endregion

                #region Lich su dao tao
                var _listCandidateQualificationByProfile = _ListCandidateQualification.Where(s => s.ProfileID == objProfileProbation.ID).OrderBy(s => s.DateStart).ToList();
                foreach (var itemCandidateQualification in _listCandidateQualificationByProfile)
                {
                    itemCandidateQualification.DateStartFormat = itemCandidateQualification.DateStart != null ? itemCandidateQualification.DateStart.Value.ToString("dd/MM/yyyy") : string.Empty;
                    itemCandidateQualification.DateFinishFormat = itemCandidateQualification.DateFinish != null ? itemCandidateQualification.DateFinish.Value.ToString("dd/MM/yyyy") : string.Empty;
                    itemCandidateQualification.GraduationDateFormat = itemCandidateQualification.GraduationDate != null ? itemCandidateQualification.GraduationDate.Value.ToString("dd/MM/yyyy") : string.Empty;
                }
                DataTable tbltCandidateQualification = new DataTable();
                tbltCandidateQualification = _listCandidateQualificationByProfile.Translate();
                #endregion

                #region table
                //var _id = "3E5E8AA20956A94C9B2A8E8B1DA3E8A8";
                DataTable tblRelatives = new DataTable();
                tblRelatives = lstRelativeByProfileID.Translate();
                DataSet dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblRelatives);
                dsData.Tables.Add(tblCandidateHistory);
                dsData.Tables.Add(tblDependant);
                dsData.Tables.Add(tbltCandidateQualification);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblRelatives";
                dsData.Tables[2].TableName = "tblCandidateHistory";
                dsData.Tables[3].TableName = "tblDependant";
                dsData.Tables[4].TableName = "tbltCandidateQualification";
                ExportService.ExportWithRegions(outputPath, templatepath, dsData);
                // ExportService.ExportWord(outputPath, templatepath, ilContract);
                #endregion
            }
            if (lstProfileProbation != null && lstProfileProbation.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWordProfileWaitingHireByTemplate(List<Guid> selectedIds, string valueFields)
        {
            #region MyRegion

            string messages = string.Empty;
            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);
            Cat_ExportEntity template = null;
            string outputPath = string.Empty;
            var lstObjExport = new List<object>();
            lstObjExport.Add(null);
            lstObjExport.Add(null);
            lstObjExport.Add(null);
            lstObjExport.Add(null);
            lstObjExport.Add(1);
            lstObjExport.Add(10000000);
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = service.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
            }

            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
            if (!System.IO.File.Exists(templatepath))
            {
                messages = "NotTemplate";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }

            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            var orgService = new Cat_OrgStructureServices();
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            var baseService = new ActionService(UserLogin);
            var services = new Hre_ProfileServices();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfileWaitingHire = baseService.GetData<Hre_Profile4ExportCandidateGeneralEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileWaitingHireByListId, ref status);
            if (lstProfileWaitingHire == null)
                return null;

            var lstCodeEmp = lstProfileWaitingHire.Select(s => s.SupervisorCode).Distinct().ToList();
            var lstProfileEntity = new List<Hre_ProfileMultiEntity>();
            if (lstCodeEmp != null && lstCodeEmp.Count > 0)
            {
                lstProfileEntity = services.GetProfileByCodeEmp(lstCodeEmp);
            }

            int i = 0;
            var lstProfileIDs = lstProfileWaitingHire.Select(s => s.ID).ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileWaitingHire" + suffix;
            if (lstProfileWaitingHire.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            #endregion
            var lstcandidateGeneralByProfileIDs = baseService.GetData<Hre_CandidateGeneralEntity>(strIDs, ConstantSql.hrm_hr_sp_get_CandidateGeneralByProfileIDs, ref status).ToList();
            var lstRelativeByProfileIDs = services.GetLstRelativesByProfileIDs(lstProfileIDs);
            var lorgids = lstProfileWaitingHire.Where(s => s.OrgStructureID != null).Select(s => s.OrgStructureID).Distinct().ToList();
            var lstDependant = services.GetLstDependantByProfileIDs(lstProfileIDs);
            var contractServices = new Hre_ContractServices();
            var _ListcontractEntity = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var _CandidateHistoryServices = new Hre_CandidateHistoryServices();
            var _LisCandidate = _CandidateHistoryServices.GetCandidateHistoryByLstProfileID(lstProfileIDs);
            var _ListCandidateQualification = services.GetDataNotParam<Rec_CandidateQualificationEntity>(ConstantSql.hrm_rec_sp_get_CandidateQualification, UserLogin, ref status).ToList();
            var lstProfileQualification = services.GetLstProfileQualificationByProfileIDs(lstProfileIDs);

            string fileNameDownload = null;
            foreach (var objProfileWaitingHire in lstProfileWaitingHire)
            {
                if (!string.IsNullOrEmpty(objProfileWaitingHire.SupervisorCode) && lstProfileEntity != null && lstProfileEntity.Count > 0)
                {
                    var _ProfileName = lstProfileEntity.Where(s => s.CodeEmp == objProfileWaitingHire.SupervisorCode).FirstOrDefault();
                    if (_ProfileName != null)
                    {
                        objProfileWaitingHire.SupervisorCodeProfileName = _ProfileName.CodeEmp;
                    }
                }
                double total = 0;
                for (int _i = 1; _i <= 16; _i++)
                {
                    double m = 0;
                    var AllowanceAmount = objProfileWaitingHire.GetPropertyValue("AllowanceAmount" + i);
                    if (AllowanceAmount != null)
                    {
                        double.TryParse(AllowanceAmount.ToString(), out m);
                        total += m;
                    }
                }
                objProfileWaitingHire.TotalUsualAllowance = total;


                #region Format ngay thang
                if (lstcandidateGeneralByProfileIDs != null)
                {
                    var candidateGeneralByProfile = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == objProfileWaitingHire.ID).FirstOrDefault();
                    if (candidateGeneralByProfile != null)
                    {
                        if (candidateGeneralByProfile.BasicSalary != null)
                        {
                            double salary = (double)candidateGeneralByProfile.BasicSalary;
                            objProfileWaitingHire.Salary = (double)candidateGeneralByProfile.BasicSalary;
                            objProfileWaitingHire.SalaryFormat = String.Format("{0:0,0}", objProfileWaitingHire.Salary);
                            objProfileWaitingHire.AllowancePorbation = candidateGeneralByProfile.Allowance1 != null ? (double)candidateGeneralByProfile.Allowance1 : 0;
                            objProfileWaitingHire.AllowanceAfterProbation = (((salary + objProfileWaitingHire.AllowancePorbation) * 100) / 85) - salary;
                            objProfileWaitingHire.AllowanceAfterProbationFormat = String.Format("{0:0,0}", objProfileWaitingHire.AllowanceAfterProbation);
                            objProfileWaitingHire.AllowancePorbationFormat = String.Format("{0:0,0}", objProfileWaitingHire.AllowancePorbation);
                        }

                        objProfileWaitingHire.AllowanceID1Name = candidateGeneralByProfile.AllowanceID1Name;
                        objProfileWaitingHire.AllowanceID2Name = candidateGeneralByProfile.AllowanceID2Name;
                        objProfileWaitingHire.AllowanceID3Name = candidateGeneralByProfile.AllowanceID3Name;
                        objProfileWaitingHire.AllowanceID4Name = candidateGeneralByProfile.AllowanceID5Name;
                        //Quyen.Quach 17/12/2017 0091025
                        objProfileWaitingHire.AllowanceID6Name = candidateGeneralByProfile.AllowanceID6Name;
                        objProfileWaitingHire.AllowanceID7Name = candidateGeneralByProfile.AllowanceID7Name;
                        objProfileWaitingHire.AllowanceID8Name = candidateGeneralByProfile.AllowanceID8Name;
                        objProfileWaitingHire.AllowanceID9Name = candidateGeneralByProfile.AllowanceID9Name;
                        objProfileWaitingHire.AllowanceID10Name = candidateGeneralByProfile.AllowanceID10Name;
                        //Quyen.Quach 03/11/2017 0089268
                        #region Bộ enum Popup cập nhật HSUV
                        objProfileWaitingHire.AllowanceID5Name = candidateGeneralByProfile.AllowanceID4Name;
                        objProfileWaitingHire.GeneralCodeEmp = candidateGeneralByProfile.GeneralCodeEmp;
                        objProfileWaitingHire.GeneralOrgStructureName = candidateGeneralByProfile.OrgStructureName;
                        objProfileWaitingHire.GeneralBasicSalary = candidateGeneralByProfile.BasicSalary.ToString();
                        objProfileWaitingHire.GeneralInsuranceAmount = candidateGeneralByProfile.InsuranceAmount.ToString();
                        objProfileWaitingHire.GeneralGradeAttendanceName = candidateGeneralByProfile.GradeAttendanceName;
                        objProfileWaitingHire.GeneralGradeCfgName = candidateGeneralByProfile.GradeCfgName;
                        objProfileWaitingHire.GeneralAbilityTitleVNI = candidateGeneralByProfile.AbilityTitleVNI;
                        objProfileWaitingHire.GeneralRegionName = candidateGeneralByProfile.RegionName;
                        objProfileWaitingHire.GeneralEmployeeGroupName = candidateGeneralByProfile.EmployeeGroupName;
                        objProfileWaitingHire.GeneralWorkPlaceName = candidateGeneralByProfile.WorkPlaceName;
                        objProfileWaitingHire.GeneralPositionName = candidateGeneralByProfile.PositionName;
                        objProfileWaitingHire.GeneralJobTitleName = candidateGeneralByProfile.JobTitleName;
                        objProfileWaitingHire.GeneralContractTypeName = candidateGeneralByProfile.GeneralCodeEmp;
                        objProfileWaitingHire.GeneralDateEndProbation = candidateGeneralByProfile.DateEndProbation;
                        objProfileWaitingHire.GeneralProfileSingIDName = candidateGeneralByProfile.ProfileSingIDName;
                        objProfileWaitingHire.GeneralPayrollGroupName = candidateGeneralByProfile.PayrollGroupName;
                        objProfileWaitingHire.GeneralRateProbation = candidateGeneralByProfile.RateProbation;
                        objProfileWaitingHire.GeneralSalaryClassName = candidateGeneralByProfile.SalaryClassName;
                        objProfileWaitingHire.GeneralAllowance1 = candidateGeneralByProfile.Allowance1;
                        objProfileWaitingHire.GeneralAllowance2 = candidateGeneralByProfile.Allowance2;
                        objProfileWaitingHire.GeneralAllowance3 = candidateGeneralByProfile.Allowance3;
                        objProfileWaitingHire.GeneralAllowance4 = candidateGeneralByProfile.Allowance4;
                        objProfileWaitingHire.GeneralAllowance5 = candidateGeneralByProfile.Allowance5;
                        //Quyen.Quach 17/12/2017 0091025
                        objProfileWaitingHire.GeneralAllowance6 = candidateGeneralByProfile.E_Allowance6 != null ? candidateGeneralByProfile.E_Allowance6.DecryptValue() : null;
                        objProfileWaitingHire.GeneralAllowance7 = candidateGeneralByProfile.E_Allowance7 != null ? candidateGeneralByProfile.E_Allowance7.DecryptValue() : null;
                        objProfileWaitingHire.GeneralAllowance8 = candidateGeneralByProfile.E_Allowance8 != null ? candidateGeneralByProfile.E_Allowance8.DecryptValue() : null;
                        objProfileWaitingHire.GeneralAllowance9 = candidateGeneralByProfile.E_Allowance9 != null ? candidateGeneralByProfile.E_Allowance9.DecryptValue() : null;
                        objProfileWaitingHire.GeneralAllowance10 = candidateGeneralByProfile.E_Allowance10 != null ? candidateGeneralByProfile.E_Allowance10.DecryptValue() : null;
                        objProfileWaitingHire.GeneralProbationSalary = candidateGeneralByProfile.E_ProbationSalary != null ? candidateGeneralByProfile.E_ProbationSalary.DecryptValue() : null;
                        double totalAllowance = 0;
                        if (candidateGeneralByProfile.BasicSalary != null)
                        {
                            totalAllowance += candidateGeneralByProfile.BasicSalary.Value;
                        }
                        if (candidateGeneralByProfile.InsuranceAmount != null)
                        {
                            totalAllowance += candidateGeneralByProfile.InsuranceAmount.Value;
                        }
                        if (objProfileWaitingHire.GeneralAllowance1 != null)
                        {
                            totalAllowance += objProfileWaitingHire.GeneralAllowance1.Value;
                        }
                        if (objProfileWaitingHire.GeneralAllowance2 != null)
                        {
                            totalAllowance += objProfileWaitingHire.GeneralAllowance2.Value;
                        }
                        if (objProfileWaitingHire.GeneralAllowance3 != null)
                        {
                            totalAllowance += objProfileWaitingHire.GeneralAllowance3.Value;
                        }
                        if (objProfileWaitingHire.GeneralAllowance4 != null)
                        {
                            totalAllowance += objProfileWaitingHire.GeneralAllowance4.Value;
                        }
                        if (objProfileWaitingHire.GeneralAllowance5 != null)
                        {
                            totalAllowance += objProfileWaitingHire.GeneralAllowance5.Value;
                        }
                        objProfileWaitingHire.GeneralTotalSalary = totalAllowance;
                        objProfileWaitingHire.TotalDayAnnualLeaveOnYear = candidateGeneralByProfile.TotalDayAnnualLeaveOnYear;

                        #endregion

                        if (!string.IsNullOrEmpty(candidateGeneralByProfile.E_TotalSalary))
                        {
                            objProfileWaitingHire.TotalSalary = candidateGeneralByProfile.E_TotalSalary.DecryptValue();
                        }
                    }
                }

                if (objProfileWaitingHire.DateHire.HasValue)
                {
                    objProfileWaitingHire.DateHireFormat = objProfileWaitingHire.DateHire.Value.ToString("dd/MM/yyyy");
                    objProfileWaitingHire.DayOfDateHire = objProfileWaitingHire.DateHire.Value.Day;
                    objProfileWaitingHire.MonthOfDateHire = objProfileWaitingHire.DateHire.Value.Month;
                    objProfileWaitingHire.YearOfDateHire = objProfileWaitingHire.DateHire.Value.Year;
                    objProfileWaitingHire.DateHireFormatEN = objProfileWaitingHire.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (objProfileWaitingHire.DateEndProbation.HasValue)
                {
                    objProfileWaitingHire.DateEndProbationFormat = objProfileWaitingHire.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    objProfileWaitingHire.DayOfDateProbation = objProfileWaitingHire.DateEndProbation.Value.Day;
                    objProfileWaitingHire.MonthOfDateProbation = objProfileWaitingHire.DateEndProbation.Value.Month;
                    objProfileWaitingHire.YearOfDateProbation = objProfileWaitingHire.DateEndProbation.Value.Year;
                    objProfileWaitingHire.DateEndProbationFormatEN = objProfileWaitingHire.DateEndProbation.Value.ToString("dd-MM-yyyy");
                }

                if (objProfileWaitingHire.DateHireCandidate.HasValue)
                {
                    objProfileWaitingHire.DateHireCandidateFormat = objProfileWaitingHire.DateHireCandidate.Value.ToString("dd/MM/yyyy");
                }

                if (objProfileWaitingHire.DateExam.HasValue)
                {
                    objProfileWaitingHire.DateExamFormat = objProfileWaitingHire.DateExam.Value.ToString("dd/MM/yyyy");
                }

                objProfileWaitingHire.DateNow = DateTime.Now.ToString("dd/MM/yyyy");

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (objProfileWaitingHire.Gender != null)
                {
                    if (objProfileWaitingHire.Gender == "E_MALE")
                    {
                        objProfileWaitingHire.NameByGerder = "Anh ";
                    }
                    else if (objProfileWaitingHire.Gender == "E_FEMALE")
                    {
                        objProfileWaitingHire.NameByGerder = "Chị ";
                    }
                }
                if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileWaitingHire.GraveName = "Ms.";
                    objProfileWaitingHire.NameByGerder = "Chị ";
                    objProfileWaitingHire.GraveNames = "Bà";
                    objProfileWaitingHire.GraveNameEN = "Mrs.";

                }
                else if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileWaitingHire.GraveName = "Mr.";
                    objProfileWaitingHire.NameByGerder = "Anh ";
                    objProfileWaitingHire.GraveNames = "Ông";
                    objProfileWaitingHire.GraveNameEN = "Mr.";
                }
                else if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objProfileWaitingHire.GraveName = "Mr/Mrs ";
                    objProfileWaitingHire.NameByGerder = "Anh/Chị";
                    objProfileWaitingHire.GraveNames = "Ông/Bà";
                    objProfileWaitingHire.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (objProfileWaitingHire.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileWaitingHire.ChairmanGraveName1 = "Chị ";
                    objProfileWaitingHire.ChairmanGraveNameEN1 = "Ms.";
                    objProfileWaitingHire.ChairmanGraveName = "Bà";
                    objProfileWaitingHire.ChairmanGraveNameEN = "Mrs.";
                }
                else if (objProfileWaitingHire.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileWaitingHire.ChairmanGraveName1 = "Anh ";
                    objProfileWaitingHire.ChairmanGraveNameEN1 = "Mr.";
                    objProfileWaitingHire.ChairmanGraveName = "Ông";
                    objProfileWaitingHire.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                objProfileWaitingHire.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                objProfileWaitingHire.DateNow_Day = DateTime.Now.Day.ToString();
                objProfileWaitingHire.DateNow_Month = DateTime.Now.Month.ToString();
                objProfileWaitingHire.DateNow_Year = DateTime.Now.Year.ToString();
                objProfileWaitingHire.SalaryFormat = String.Format("{0:0,0}", objProfileWaitingHire.Salary);
                // Lấy thông tin HĐ
                if (objProfileWaitingHire.Allowance1 != null)
                    objProfileWaitingHire.Allowance1Format = String.Format("{0:0,0}", objProfileWaitingHire.Allowance1);
                if (objProfileWaitingHire.Allowance2 != null)
                    objProfileWaitingHire.Allowance2Format = String.Format("{0:0,0}", objProfileWaitingHire.Allowance2);
                if (objProfileWaitingHire.Allowance3 != null)
                    objProfileWaitingHire.Allowance3Format = String.Format("{0:0,0}", objProfileWaitingHire.Allowance3);
                if (objProfileWaitingHire.Allowance4 != null)
                    objProfileWaitingHire.Allowance4Format = String.Format("{0:0,0}", objProfileWaitingHire.Allowance4);
                if (objProfileWaitingHire.DateOfBirth == null && objProfileWaitingHire.DayOfBirth != null && objProfileWaitingHire.MonthOfBirth != null && objProfileWaitingHire.YearOfBirth != null)
                {
                    objProfileWaitingHire.DateOfBirth = new DateTime((int)objProfileWaitingHire.YearOfBirth, (int)objProfileWaitingHire.MonthOfBirth, (int)objProfileWaitingHire.DayOfBirth);
                }
                if (objProfileWaitingHire.DateOfBirth != null)
                {
                    objProfileWaitingHire.DateOfBirthFormat = objProfileWaitingHire.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                objProfileWaitingHire.IDDateOfIssueFormat = objProfileWaitingHire.IDDateOfIssue != null ? objProfileWaitingHire.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : string.Empty;
                if (objProfileWaitingHire.SalaryClassID != null)
                {
                    var rankdetailbyProfile = baseService.GetData<Cat_SalaryRankEntity>(Common.DotNetToOracle(objProfileWaitingHire.SalaryClassID.ToString()), ConstantSql.hrm_cat_sp_get_SalaryRankBySalaryClassId, ref status).FirstOrDefault();
                    if (rankdetailbyProfile != null)
                    {
                        objProfileWaitingHire.Salary = rankdetailbyProfile.SalaryStandard;
                    }
                }

                List<object> lstpara = new List<object>();
                lstpara.AddRange(new object[3]);
                lstpara[0] = objProfileWaitingHire.ID;

                var lstunusualallowancebyprofile = baseService.GetData<Sal_UnusualAllowanceEntity>(lstpara, ConstantSql.hrm_sal_sp_get_UnusualAllowanceByProfileid, ref status);
                if (lstunusualallowancebyprofile != null)
                {
                    var PhuCapvung = lstunusualallowancebyprofile.Where(s => s.UnusualEDTypeCode == "PhuCapVung").ToList().FirstOrDefault();
                    var PhucapConNho = lstunusualallowancebyprofile.Where(s => s.UnusualEDTypeCode == "ChildCare").ToList().FirstOrDefault();
                    if (PhuCapvung != null)
                    {
                        objProfileWaitingHire.PCArea = PhuCapvung.Amount;
                    }
                    if (PhucapConNho != null)
                    {
                        objProfileWaitingHire.PCConNho = PhucapConNho.Amount;
                    }
                }

                #endregion

                #region Export


                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objProfileWaitingHire.ID, i);
                fileNameDownload = folferPath + "/" + genneralNameExport;
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                #endregion

                #region Profile

                var ilContract = new List<Hre_Profile4ExportCandidateGeneralEntity>();
                ilContract.Add(objProfileWaitingHire);

                #endregion

                #region lay nguoi than cua tung nhan vien
                List<Hre_RelativesEntity> lstRelativeByProfileID = new List<Hre_RelativesEntity>();
                if (lstRelativeByProfileIDs != null)
                {
                    lstRelativeByProfileID = lstRelativeByProfileIDs.Where(s => s.ProfileID == objProfileWaitingHire.ID).ToList();
                }

                #endregion

                #region Contract
                var _contract = _ListcontractEntity.Where(s => s.ProfileID == objProfileWaitingHire.ID).OrderByDescending(s => s.DateEnd).FirstOrDefault();
                if (_contract != null)
                {
                    objProfileWaitingHire.LatestContracNo = _contract.ContractNo;
                    objProfileWaitingHire.LatestDateSigned = _contract.DateSigned != null ? _contract.DateSigned.Value.ToString("dd/MM/yyyy") : string.Empty;
                    objProfileWaitingHire.LatestDateStart = _contract.DateStart != null ? _contract.DateStart.ToString("dd/MM/yyyy") : string.Empty;
                    objProfileWaitingHire.LatestDateEnd = _contract.DateEnd != null ? _contract.DateEnd.Value.ToString("dd/MM/yyyy") : string.Empty;
                }
                #endregion

                #region kinh nghiem
                var tblCandidateHistory = new DataTable();
                if (_LisCandidate != null)
                {
                    var lscandidatebypro = _LisCandidate.Where(s => s.CandidateID == objProfileWaitingHire.CandidateID).OrderBy(s => s.DateStart).ToList();
                    foreach (var itemcandidate in lscandidatebypro)
                    {
                        if (itemcandidate.SalaryLast != null)
                        {
                            double salaryCandidateHS = (double)itemcandidate.SalaryLast;
                        }

                        itemcandidate.DateStartFormat = itemcandidate.DateStart != null ? itemcandidate.DateStart.Value.ToString("dd/MM/yyyy") : string.Empty;
                        itemcandidate.DateFinishFormat = itemcandidate.DateFinish != null ? itemcandidate.DateFinish.Value.ToString("dd/MM/yyyy") : string.Empty;
                    }
                    tblCandidateHistory = lscandidatebypro.Translate();
                }
                #endregion

                #region người phụ thuộc
                DataTable tblDependant = new DataTable();
                if (lstDependant != null)
                {
                    var lstDependantbypro = lstDependant.Where(s => s.ProfileID == objProfileWaitingHire.ID).ToList();
                    foreach (var itemDependant in lstDependantbypro)
                    {
                        itemDependant.DateOfBirthFormat = itemDependant.DateOfBirth != null ? itemDependant.DateOfBirth.Value.ToString("dd/MM/yyyy") : string.Empty;
                    }
                    tblDependant = lstDependantbypro.Translate();
                }
                #endregion

                #region Lich su dao tao
                DataTable tbltCandidateQualification = new DataTable();
                if (_ListCandidateQualification != null)
                {

                    var _listCandidateQualificationByProfile = _ListCandidateQualification.Where(s => s.CandidateID == objProfileWaitingHire.CandidateID).OrderBy(s => s.DateStart).ToList();
                    foreach (var itemCandidateQualification in _listCandidateQualificationByProfile)
                    {
                        itemCandidateQualification.DateStartFormat = itemCandidateQualification.DateStart != null ? itemCandidateQualification.DateStart.Value.ToString("dd/MM/yyyy") : string.Empty;
                        itemCandidateQualification.DateFinishFormat = itemCandidateQualification.DateFinish != null ? itemCandidateQualification.DateFinish.Value.ToString("dd/MM/yyyy") : string.Empty;
                        itemCandidateQualification.GraduationDateFormat = itemCandidateQualification.GraduationDate != null ? itemCandidateQualification.GraduationDate.Value.ToString("dd/MM/yyyy") : string.Empty;
                    }
                    tbltCandidateQualification = _listCandidateQualificationByProfile.Translate();
                }

                #endregion

                #region Son.Vo - 20160609 - 0068566 - trình độ chuyên môn
                var qualificationByProfile = lstProfileQualification.Where(s => s.ProfileID == objProfileWaitingHire.ID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationByProfile != null)
                {
                    objProfileWaitingHire.QualificationName = qualificationByProfile.QualificationName;
                    objProfileWaitingHire.FieldOfTraining = qualificationByProfile.FieldOfTraining;
                    objProfileWaitingHire.TrainingPlace = qualificationByProfile.TrainingPlace;
                }
                #endregion

                #region Son.Vo - 20161010 - 0074160
                if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileWaitingHire.GenderEN = "Female";
                    objProfileWaitingHire.GraveName = "Ms.";
                    objProfileWaitingHire.GraveName1 = "Chị";
                }
                else if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileWaitingHire.GenderEN = "Male";
                    objProfileWaitingHire.GraveName = "Mr.";
                    objProfileWaitingHire.GraveName1 = "Anh";
                }
                else if (objProfileWaitingHire.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objProfileWaitingHire.GenderEN = "Other";
                    objProfileWaitingHire.GraveName = "Other";
                }
                #endregion

                #region table
                var lstcontract = new List<Hre_Profile4ExportCandidateGeneralEntity>();
                lstcontract.Add(objProfileWaitingHire);
                Hre_Profile4ExportCandidateGeneralEntity objProfile = new Hre_Profile4ExportCandidateGeneralEntity();
                DataTable tblProfiles = new DataTable();
                tblProfiles = lstcontract.Translate();
                DataTable tblRelatives = new DataTable();
                tblRelatives = lstRelativeByProfileID.Translate();
                DataSet dsData = new DataSet();
                dsData.Tables.Add(tblProfiles);
                dsData.Tables.Add(tblRelatives);
                dsData.Tables.Add(tblCandidateHistory);
                dsData.Tables.Add(tblDependant);
                dsData.Tables.Add(tbltCandidateQualification);
                dsData.Tables[0].TableName = "tblProfiles";
                dsData.Tables[1].TableName = "tblRelatives";
                dsData.Tables[2].TableName = "tblCandidateHistory";
                dsData.Tables[3].TableName = "tblDependant";
                dsData.Tables[4].TableName = "tbltCandidateQualification";
                ExportService.ExportWithRegions(outputPath, templatepath, dsData, fileNameDownload);
                #endregion
            }

            if (lstProfileWaitingHire.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        #endregion

        #region Hre_Accident

        /// <summary>
        /// [Chuc.Nguyen] - Lấy danh sách dữ liệu cho bảng Tai Nạn (Hre_Accident) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult GetAccidentList([DataSourceRequest] DataSourceRequest request, Hre_AccidentSearchModel model)
        {
            return GetListDataAndReturn<Hre_AccidentModel, Hre_AccidentEntity, Hre_AccidentSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Accident);
        }

        /// <summary>
        /// [Chuc.Nguyen] - Xuất các dòng dữ liệu được chọn của bảng Tai Nạn (Hre_Accident) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportAccidentSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_AccidentEntity, Hre_AccidentModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_AccidentByIds);
        }

        /// <summary>
        /// [Chuc.Nguyen] - Xuất danh sách dữ liệu cho Nhân Viên (Hre_Profile) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportAccidentList([DataSourceRequest] DataSourceRequest request, Hre_AccidentSearchModel model)
        {
            return ExportAllAndReturn<Hre_AccidentEntity, Hre_AccidentModel, Hre_AccidentSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Accident);
        }

        /// <summary>
        ///[Tho.Bui] Get Discipline theo profileid
        /// </summary>
        /// <param name="request"></param>
        /// <param name="profileID"></param>
        /// <returns></returns>
        public ActionResult GetAccidentProID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(profileID);
            var result = ActionService.GetData<Hre_AccidentViewEntity>(objs, ConstantSql.hrm_hr_sp_get_AccidentprofileId, ref status);
            if (result != null)
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            return null;
        }

        public ActionResult ExportGetAccidentListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_AccidentSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = GetListData<Hre_AccidentModel, Hre_AccidentEntity, Hre_AccidentSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Accident, ref status);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_AccidentModel(),

                    FileName = "Hre_Accident",
                    OutPutPath = path,
                    // HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        #region Hre_Qualification

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho trình độ chuyên môn (Hre_Qualification) theo điều kiện tìm kiếm
        /// </summary>   
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfileQualificationExpiredList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQualificationExpiredSearchModel model)
        {
            //Nguyen.Le - 2017/10/24 - 0088912
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            int? _DayFrom = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWQUALIFICATIONEXPIREDFROM);
            int? _DayTo = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWQUALIFICATIONEXPIREDTO);
            var _dateFrom = _DayFrom.HasValue ? DateTime.Now.AddDays(-_DayFrom.Value) : DateTime.Now;
            var _dateTo = _DayTo.HasValue ? DateTime.Now.AddDays(_DayTo.Value) : DateTime.Now;
            model.DateFrom = _dateFrom;
            model.DateTo = _dateTo;
            return ExportAllAndReturn<Hre_ProfileQualificationEntity, Hre_ProfileQualificationModel, Hre_ProfileQualificationExpiredSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualificationExpired);
        }

        /// <summary>
        /// [11/11/2015][Phuc.Nguyen][Modify Func][0059791] Thêm chức năng xuất excel theo template
        /// </summary>
        public ActionResult ReportProfileQualificationListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileQualificationModelSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var result = new List<Hre_ProfileQualificationModel>();
            if (!model.IsCreateTemplate)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ProfileQualificationModel, Hre_ProfileQualificationEntity, Hre_ProfileQualificationModelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualification, ref status);
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileQualificationModel(),
                    FileName = "Hre_ProfileQualificationModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] -20160608 - 0068599
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileQualificationExpiredList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQualificationExpiredSearchModel model)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            var baseServices = new BaseService();
            int? _DayFrom = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWQUALIFICATIONEXPIREDFROM);
            int? _DayTo = sysServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWQUALIFICATIONEXPIREDTO);
            var _dateFrom = _DayFrom.HasValue ? DateTime.Now.AddDays(-_DayFrom.Value) : DateTime.Now;
            var _dateTo = _DayTo.HasValue ? DateTime.Now.AddDays(_DayTo.Value) : DateTime.Now;
            model.DateFrom = _dateFrom;
            model.DateTo = _dateTo;
            var result = new List<Hre_ProfileQualificationModel>();
            if (!model.IsCreateTemplate && model.ExportId == Guid.Empty)
            {
                return GetListDataAndReturn<Hre_ProfileQualificationModel, Hre_ProfileQualificationEntity, Hre_ProfileQualificationExpiredSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualificationExpired);
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileQualificationModel(),
                    FileName = "Hre_ProfileQualificationModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ProfileQualificationModel, Hre_ProfileQualificationEntity, Hre_ProfileQualificationExpiredSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualificationExpired, ref status);
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho trình độ chuyên môn (Hre_Qualification) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfileQualificationList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQualificationModelSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileQualificationModel, Hre_ProfileQualificationEntity, Hre_ProfileQualificationModelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualification);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho trình độ chuyên môn (Hre_Qualification) theo điều kiện tìm kiếm
        /// </summary>   
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportQualificationList([DataSourceRequest] DataSourceRequest request, Hre_ProfileQualificationModelSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileQualificationEntity, Hre_ProfileQualificationModel, Hre_ProfileQualificationModelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileQualification);
        }

        /// <summary> 
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của trình độ chuyên môn (Hre_Qualification) ra file Excel 
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportQualificationSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_QualificationEntity, Hre_QualificationModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_QualificationByIds);
        }

        public ActionResult ExportProfileQualificationSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileQualificationEntity, Hre_ProfileQualificationModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileQualificationByIds);
        }

        public ActionResult GetQualificationID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(null);
            }
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var result = ActionService.GetData<Hre_ProfileQualificationViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_QualificationByProfileId, ref status);
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Hre_Address
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Adress (Hre_Address) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetAddressList([DataSourceRequest] DataSourceRequest request, Hre_AddressSearchModel model)
        {
            return GetListDataAndReturn<Hre_AddressModel, Hre_AddressEntity, Hre_AddressSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Address);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Adress(Hre_Address) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportAddressList([DataSourceRequest] DataSourceRequest request, Hre_AddressSearchModel model)
        {
            return ExportAllAndReturn<Hre_AddressEntity, Hre_AddressModel, Hre_AddressSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Address);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Adress (Hre_Address) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportAddressSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_AddressEntity, Hre_AddressModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_AddressByIds);
        }

        #endregion

        #region Hre_CardHistory
        [HttpPost]
        public ActionResult IsLastCardHistory(string selectID)
        {
            if (!string.IsNullOrEmpty(selectID))
            {
                var cardhistoryServices = new Hre_CardHistoryServices();
                var ID = selectID.Split(',').Select(s => Guid.Parse(s)).FirstOrDefault();
                var isLastData = cardhistoryServices.IsLastCardHistory(ID);
                if (isLastData == true)
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho CardHistory (Hre_CardHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetCardHistoryList([DataSourceRequest] DataSourceRequest request, Hre_CardHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_CardHistoryModel, Hre_CardHistoryEntity, Hre_CardHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_CardHistory);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho CardHistory(Hre_CardHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportCardHistoryList([DataSourceRequest] DataSourceRequest request, Hre_CardHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_CardHistoryEntity, Hre_CardHistoryModel, Hre_CardHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_CardHistory);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của CardHistory (Hre_CardHistory) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportCardHistorySelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_CardHistoryEntity, Hre_CardHistoryModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_CardHistoryByIds);
        }

        public ActionResult GetCardHistoryByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(profileID);
            var result = ActionService.GetData<Hre_CardHistoryEntity>(objs, ConstantSql.hrm_hr_sp_get_CardHistorysByProfileId, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        #region Hre_Contract

        //Son.Vo - 20171213 - 0090885 có cấu hình hiện thang tiêu chí hay không
        [HttpPost]
        public ActionResult IsShowLadderContract()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISSHOWLADDERCONTRACT);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20171213 - 0090885  - có nằm trong khoảng ordereva đã cấu hình để cho phép chọn kết quả đánh giá hay không
        [HttpPost]
        public ActionResult IsShowEvaResult(Guid? PerformanceEvaId)
        {
            var isShow = false;
            var _ContractServices = new Hre_ContractServices();
            if (PerformanceEvaId != null && PerformanceEvaId != Guid.Empty)
            {
                isShow = _ContractServices.IsShowResultEva(PerformanceEvaId.Value);
            }
            return Json(isShow, JsonRequestBehavior.AllowGet);
        }

        public class models
        {
            public Hre_PerformanceEvaDetailModel[] arrPerformanceEva { get; set; }
        }
        //[HttpPost, ValidateInput(false)] [Bind(Prefix = "listPerformanceEvaDetail")] List<Hre_PerformanceEvaDetailModel> listPerformanceEvaDetail
        public JsonResult SaveListPerformanceEvaDetail(models models)
        {
            var listPerformanceEvaDetail = models.arrPerformanceEva;
            string message = string.Empty;
            if (listPerformanceEvaDetail != null)
            {
                var profileService = new Hre_ProfileServices();
                message = profileService.SavePerformanceEvaDetail(listPerformanceEvaDetail.Translate<Hre_PerformanceEvaDetailEntity>().ToList());
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }


        //Son.Vo - lấy dữ liệu để hiển thị trên màn hình đánh giá        
        public JsonResult GetDataPerformanceEvaByID(Guid? performanceEvaID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                string status = string.Empty;
                var service = new ActionService(UserLogin, LanguageCode);
                var PerformanceEvaEntity = service.GetByIdUseStore<Hre_PerformanceEvaEntity>(performanceEvaID.Value, ConstantSql.hrm_hr_sp_get_PerformanceEvaById, ref status);
                if (PerformanceEvaEntity != null)
                {
                    if (PerformanceEvaEntity.DateEva == null)
                    {
                        PerformanceEvaEntity.DateEva = DateTime.Now;
                    }
                    return Json(PerformanceEvaEntity, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 0088587 - Lưới đánh giá hợp đồng

        public object GetlstPerformanceEvaDetail([DataSourceRequest] DataSourceRequest request, Guid? performanceEvaID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var lstResult = profileServices.GetlstPerformanceEvaDetail(performanceEvaID.Value);
                //Quyen.Quach 19/10/2017 0088587
                if (lstResult != null)
                {
                    lstResult = lstResult.OrderBy(m => m.Stt).ToList();
                    var KPIGroupNames = lstResult.Select(m => m.KPIGroupName).Distinct().ToList();
                    foreach (var KPIGroupName in KPIGroupNames)
                    {
                        var forObjects = lstResult.Where(m => m.KPIGroupName == KPIGroupName).OrderBy(m => m.Stt).ToList();
                        int stt = 1;
                        foreach (var item in forObjects)
                        {
                            item.Stt = stt++;
                        }
                    }
                }
                return Json(lstResult.ToDataSourceResult(request));
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 0088587 - Lưới đánh giá hợp đồng - portal

        public object GetlstPerformanceEvaDetailPortal([DataSourceRequest] DataSourceRequest request, Guid? performanceEvaID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var lstResult = profileServices.GetlstPerformanceEvaDetail(performanceEvaID.Value);
                //Quyen.Quach 19/10/2017
                //return Json(lstResult.ToDataSourceResult(request));
                return Json(lstResult, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }


        //Son.Vo - 0088587 - Lưới lịch sử bảng đánh giá
        public JsonResult GetlstHistoryPerformanceEva([DataSourceRequest] DataSourceRequest request, Guid? performanceEvaID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var lstResult = profileServices.GetlstHistoryPerformanceEva(performanceEvaID.Value);
                return Json(lstResult.ToDataSourceResult(request));
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 0088587 - Lưới lịch sử bảng đánh giá - portal
        public JsonResult GetlstHistoryPerformanceEvaPortal([DataSourceRequest] DataSourceRequest request, Guid? performanceEvaID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var lstResult = profileServices.GetlstHistoryPerformanceEva(performanceEvaID.Value);
                return Json(lstResult, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }


        //Son.Vo - 0088587 - lấy ds chờ đánh giá ở màn hình portal
        [HttpPost]
        public ActionResult GetlstEvaluatorByPerformancePortal(Guid? profileIDUserLogin)
        {
            if (profileIDUserLogin != null && profileIDUserLogin != Guid.Empty)
            {
                var _ProfileServices = new Hre_ProfileServices();
                var lstresult = _ProfileServices.GetlstEvaluatorByPerformancePortal(profileIDUserLogin.Value);
                if (lstresult != null)
                {
                    return Json(lstresult, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetLstEvaluatorByPerformance(Guid? performanceID)
        {
            if (performanceID != null && performanceID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var lstResult = profileServices.GetlstEvaluatorByPerformance(performanceID.Value);
                return Json(lstResult, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        [HttpPost, ValidateInput(false)]
        public ActionResult SaveHreKPIDetail([Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel PerformanceModel, [Bind(Prefix = "listKPI")] List<Hre_PerformanceDetailModel> listKPI)
        {
            string message = string.Empty;
            if (PerformanceModel != null && PerformanceModel.ContractID != null && listKPI != null)
            {
                var profileService = new Hre_ProfileServices();
                //Quyen.Quach 13/12/2017 0089701
                if (PerformanceModel.ID != Guid.Empty)
                {
                    if (PerformanceModel.PerformanceTemplateID != null && PerformanceModel.PerformanceTemplateID != Guid.Empty)
                    {
                        profileService.CheckChangePerformaceTempalteID(PerformanceModel.ID, PerformanceModel.PerformanceTemplateID.Value);
                    }
                }
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_PerformanceModel>(LanguageCode, PerformanceModel, "Hre_Performance_TabContract", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }

                message = profileService.SavePerformanceTemplate(Guid.Parse(PerformanceModel.ContractID),
                    PerformanceModel.CopyData<Hre_PerformanceEntity>(),
                    listKPI.Translate<Hre_PerformanceDetailEntity>().ToList());
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetPerformanceContractList([DataSourceRequest] DataSourceRequest request, Hre_ContractPerformanceSearchModel model)
        {
            var profileservices = new Hre_ProfileServices();
            if (model != null)
            {
                model.PerformanceTemplateID = Common.DotNetToOracle(model.PerformanceTemplateID);
                model.PerformanceID = Common.DotNetToOracle(model.PerformanceID);
            }
            bool ischeck = false;
            if (!string.IsNullOrEmpty(model.PerformanceID) && !string.IsNullOrEmpty(model.PerformanceTemplateID))
            {
                var CheckValidateChange = profileservices.CheckValidateChange(Guid.Parse(model.PerformanceID));
                if (CheckValidateChange.PerformanceTemplateID != Guid.Parse(model.PerformanceTemplateID))
                {
                    ischeck = true;
                }
            }
            if (string.IsNullOrEmpty(model.PerformanceID))
            {
                ischeck = true;
            }
            Guid performanceID = Guid.Empty;
            Guid.TryParse(model.PerformanceID, out performanceID);
            Guid performanceTemplateId = Guid.Empty;
            Guid.TryParse(model.PerformanceTemplateID, out performanceTemplateId);
            var service = new ActionService(UserLogin);
            var lstPerformanceObj = new List<object>();
            lstPerformanceObj.Add(performanceTemplateId);
            lstPerformanceObj.Add(performanceID);
            lstPerformanceObj.Add(1);
            lstPerformanceObj.Add(500);
            var status = string.Empty;
            var listEntity = new List<Hre_KPIEntity>();
            if (!string.IsNullOrEmpty(model.PerformanceID) && model.PerformanceID != Guid.Empty.ToString() && ischeck == false)
            {
                listEntity = service.GetData<Hre_KPIEntity>(lstPerformanceObj, ConstantSql.hrm_hr_sp_get_KpiByPerformanceID, ref status);
            }
            else if (ischeck == true)
            {
                var lstObj = new List<object>();
                lstObj.Add(performanceTemplateId);
                lstObj.Add(1);
                lstObj.Add(50);
                listEntity = service.GetData<Hre_KPIEntity>(lstObj, ConstantSql.hrm_hr_sp_get_KpiByTemplateID, ref status);
            }

            return Json(listEntity.ToDataSourceResult(request, ModelState));
        }

        public JsonResult GetContractMulti(string text)
        {
            return GetDataForControl<Hre_ContractMultiEntity, Hre_ContractMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Contract_multi);
        }

        //Quyen.Quach Tạo nhiều hợp đồng cho màn hình NV chưa có hợp đồng
        #region Quyen.Quach-11/08/2017- 86284 tạo nhiều hợp đồng màn hình NV chưa có hợp đồng
        [HttpPost]
        public ActionResult SaveMultiProfileNotContract([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            string validate = null;
            var lstProfileID = new List<Guid>();
            var insuranceServices = new Sal_InsuranceSalaryServices();
            var ContractServices = new Hre_ContractServices();
            var hrService = new Hre_ProfileServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var actionService = new ActionService(UserLogin);
            var workHistoryServices = new Hre_WorkHistoryServices();
            string message_Error = string.Empty;
            if (model.ID == Guid.Empty)
            {
                model.DateExtend = model.DateEnd;
                //trường hợp tạo mới mà ko nhập nhân viên
                if (model.ProfileIDs == null && model.ProfileID == Guid.Empty)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message_Error;
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            if (model.ProfileIDs != null && model.ProfileIDs.IndexOf(',') > 1)
            {
                var lstID = model.ProfileIDs.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstProfileID.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.ProfileIDs);
                lstProfileID.Add(convertProfileID);
            }
            // Son.Vo - theo task 0057642 - quy trình ký hđ
            validate = ContractServices.checkValidateContract(lstProfileID, model.DateStart, model.IsMLC);
            if (validate != null)
            {
                model.ActionStatus = validate;
                return Json(validate, JsonRequestBehavior.AllowGet);
            }
            var lstProfile = new List<Hre_ProfileEntity>();
            if (model.ProfileIDs != null)
            {
                var lstProfileIds = model.ProfileIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfile = hrService.GetLstProfileEntityByLstProfileIDs(lstProfileIds);
                #region Validate
                if (lstProfile.Count > 0 && lstProfile.FirstOrDefault() != null)
                {
                    model.ProfileID = lstProfile.FirstOrDefault().ID;
                }

                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
                if (!checkValidate)
                {
                    model.ActionStatus = message_Error;
                    return Json(message_Error, JsonRequestBehavior.AllowGet);
                }
                if (model.ContractEvaType == "E_ANNUAL_EVALUATION")
                {
                    checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "EvaContractinfo", "Hre_Contract", false, ref message_Error);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message_Error;
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }

                #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                if (model.ContractTypeID != null && model.ContractTypeID != Guid.Empty)
                {
                    var contractTypeServices = new Cat_ContractTypeServices();
                    var contractType = contractTypeServices.GetDataContractTypeByID(model.ContractTypeID);
                    if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && model.DateEnd == null)
                    {
                        message_Error = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        model.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                #endregion
            }
            var contractTypeService = new Cat_ContractTypeServices();
            var contractTypeEntity = contractTypeService.GetDataContractTypeByID(model.ContractTypeID);
            string typeContractType = contractTypeEntity != null ? contractTypeEntity.Type : null;

            var insuranceConfigServices = new Cat_InsuranceConfigServices();
            var insuranceConfigEntity = insuranceConfigServices.GetDataInsuranceConfigByContractTypeID(model.ContractTypeID);

            #region Son.Vo - 20160712 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duỵet
            var _Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = _Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
            if (model != null && model.UserProfileSingID != null && ischeck == true)
            {
                model.ProfileSingID = model.UserProfileSingID;
            }
            #endregion

            string contractids = string.Empty;
            int countProfile = 0;
            var lstContractTypeByProfile = ContractServices.GetLstContractTypeByProfileIDs(lstProfileID);
            string messageValidateDateHire = ContractServices.ValidateDateStartDateHireContractMulti(model.DateStart, lstProfile);
            if (!string.IsNullOrEmpty(messageValidateDateHire))
            {
                model.ActionStatus = messageValidateDateHire + " " + ConstantDisplay.HRM_HR_InvalidDateStartDateHire.TranslateString();
                return Json(model.ActionStatus, JsonRequestBehavior.AllowGet);
            }
            foreach (var profile in lstProfile)
            {
                //Son.Vo - 20170805 - 0085210 - khác những loại này thì tự + timescontract
                if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    var lastContract = lstContractTypeByProfile.Where(s => s.ProfileID == profile.ID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart < model.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();

                    if (typeContractType != EnumDropDown.TypeContract.E_APPENDIX.ToString() && typeContractType != EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString()
                        && typeContractType != EnumDropDown.TypeContract.E_CASUAL.ToString() && typeContractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                    {
                        if (lastContract != null && lastContract.TimesContract != null)
                        {
                            model.TimesContract = lastContract.TimesContract != null ? lastContract.TimesContract + 1 : 1;
                        }
                        else
                        {
                            model.TimesContract = 1;
                        }
                    }
                }


                model.ProfileID = profile.ID;
                //Son.Vo- 20170418 - 0081506 trường hợp tạo mới mà ko click qua tab nơi đăng ký
                if (model.IsNotLoadTabRegisterPlace == true)
                {
                    model.IDNo = profile.IDNo;
                    model.IDDateOfIssue = profile.IDDateOfIssue;
                    model.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                    model.PAddress = profile.PAddress;
                    model.PCountryID = profile.PCountryID;
                    model.PProvinceID = profile.PProvinceID;
                    model.PDistrictID = profile.PDistrictID;
                    model.PVillageID = profile.VillageID;
                }
                #region Check lấy lương cb theo từng người
                if (model.BasicSalaryForPerson == true)
                {
                    var basicSalaryByProfile = _BasicSalaryServices.GetBasicSalaryByProfileID(profile.ID);
                    var contractgetNo = new Hre_ContractEntity();
                    model.CopyData(contractgetNo);
                    var contract = new Hre_ContractEntity();
                    contract.TimesContract = model.TimesContract;
                    contract.Allowance = model.Allowance;
                    contract.CurenncyID = model.CurenncyID;
                    contract.CurenncyID1 = model.CurenncyID1;
                    contract.CurenncyID2 = model.CurenncyID2;
                    contract.CurenncyID3 = model.CurenncyID3;
                    contract.CurenncyID4 = model.CurenncyID4;
                    contract.CurenncyID5 = model.CurenncyID5;
                    contract.CurenncyID6 = model.CurenncyID6;
                    contract.CurenncyID7 = model.CurenncyID7;
                    contract.CurenncyID8 = model.CurenncyID8;
                    contract.CurenncyID9 = model.CurenncyID9;
                    contract.CurenncyID10 = model.CurenncyID10;
                    contract.CurenncyID11 = model.CurenncyID11;
                    contract.CurenncyID12 = model.CurenncyID12;
                    contract.CurenncyID13 = model.CurenncyID13;
                    contract.CurenncyID14 = model.CurenncyID14;
                    contract.CurenncyID15 = model.CurenncyID15;
                    if (basicSalaryByProfile != null)
                    {
                        contract.AllowanceID1 = basicSalaryByProfile.AllowanceType1ID != null ? basicSalaryByProfile.AllowanceType1ID : null;
                        contract.AllowanceID2 = basicSalaryByProfile.AllowanceType2ID != null ? basicSalaryByProfile.AllowanceType2ID : null;
                        contract.AllowanceID3 = basicSalaryByProfile.AllowanceType3ID != null ? basicSalaryByProfile.AllowanceType3ID : null;
                        contract.AllowanceID4 = basicSalaryByProfile.AllowanceType4ID != null ? basicSalaryByProfile.AllowanceType4ID : null;
                        contract.AllowanceID5 = basicSalaryByProfile.AllowanceTypeID5 != null ? basicSalaryByProfile.AllowanceTypeID5 : null;
                        contract.AllowanceID6 = basicSalaryByProfile.AllowanceTypeID6 != null ? basicSalaryByProfile.AllowanceTypeID6 : null;
                        contract.AllowanceID7 = basicSalaryByProfile.AllowanceTypeID7 != null ? basicSalaryByProfile.AllowanceTypeID7 : null;
                        contract.AllowanceID8 = basicSalaryByProfile.AllowanceTypeID8 != null ? basicSalaryByProfile.AllowanceTypeID8 : null;
                        contract.AllowanceID9 = basicSalaryByProfile.AllowanceTypeID9 != null ? basicSalaryByProfile.AllowanceTypeID9 : null;
                        contract.AllowanceID10 = basicSalaryByProfile.AllowanceTypeID10 != null ? basicSalaryByProfile.AllowanceTypeID10 : null;
                        contract.AllowanceID11 = basicSalaryByProfile.AllowanceTypeID11 != null ? basicSalaryByProfile.AllowanceTypeID11 : null;
                        contract.AllowanceID12 = basicSalaryByProfile.AllowanceTypeID12 != null ? basicSalaryByProfile.AllowanceTypeID12 : null;
                        contract.AllowanceID13 = basicSalaryByProfile.AllowanceTypeID13 != null ? basicSalaryByProfile.AllowanceTypeID13 : null;
                        contract.AllowanceID14 = basicSalaryByProfile.AllowanceTypeID14 != null ? basicSalaryByProfile.AllowanceTypeID14 : null;
                        contract.AllowanceID15 = basicSalaryByProfile.AllowanceTypeID15 != null ? basicSalaryByProfile.AllowanceTypeID15 : null;
                        contract.ClassRateID = basicSalaryByProfile.ClassRateID != null ? basicSalaryByProfile.ClassRateID : null;
                        contract.CurenncyID = basicSalaryByProfile.CurrencyID;
                        contract.CurenncyID1 = basicSalaryByProfile.CurrencyID1 != null ? basicSalaryByProfile.CurrencyID1 : null;
                        contract.CurenncyID2 = basicSalaryByProfile.CurrencyID2 != null ? basicSalaryByProfile.CurrencyID2 : null;
                        contract.CurenncyID3 = basicSalaryByProfile.CurrencyID3 != null ? basicSalaryByProfile.CurrencyID3 : null;
                        contract.CurenncyID4 = basicSalaryByProfile.CurrencyID4 != null ? basicSalaryByProfile.CurrencyID4 : null;
                        contract.CurenncyID5 = basicSalaryByProfile.CurrencyID5 != null ? basicSalaryByProfile.CurrencyID5 : null;
                        contract.CurenncyID6 = basicSalaryByProfile.CurrencyID6 != null ? basicSalaryByProfile.CurrencyID6 : null;
                        contract.CurenncyID7 = basicSalaryByProfile.CurrencyID7 != null ? basicSalaryByProfile.CurrencyID7 : null;
                        contract.CurenncyID8 = basicSalaryByProfile.CurrencyID8 != null ? basicSalaryByProfile.CurrencyID8 : null;
                        contract.CurenncyID9 = basicSalaryByProfile.CurrencyID9 != null ? basicSalaryByProfile.CurrencyID9 : null;
                        contract.CurenncyID10 = basicSalaryByProfile.CurrencyID10 != null ? basicSalaryByProfile.CurrencyID10 : null;
                        contract.CurenncyID11 = basicSalaryByProfile.CurrencyID11 != null ? basicSalaryByProfile.CurrencyID11 : null;
                        contract.CurenncyID12 = basicSalaryByProfile.CurrencyID12 != null ? basicSalaryByProfile.CurrencyID12 : null;
                        contract.CurenncyID13 = basicSalaryByProfile.CurrencyID13 != null ? basicSalaryByProfile.CurrencyID13 : null;
                        contract.CurenncyID14 = basicSalaryByProfile.CurrencyID14 != null ? basicSalaryByProfile.CurrencyID14 : null;
                        contract.CurenncyID15 = basicSalaryByProfile.CurrencyID15 != null ? basicSalaryByProfile.CurrencyID15 : null;
                    }
                    contract.RankRateID = model.RankRateID;
                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        if (model.Salary != null)
                        {
                            contract.E_Salary = model.Salary.ToString().Encrypt();
                        }
                        if (model.InsuranceAmount != null)
                        {
                            contract.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                        }
                        //Quyen.Quach 28/11/2017 Mã hóa lương thử việc
                        if (model.ProbationSalary != null)
                        {
                            contract.E_ProbationSalary = model.ProbationSalary.ToString().Encrypt();
                        }
                        //Quyen.Quach 02/10/2017 0087467
                        contract.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                    }
                    else
                    {
                        if (model.Salary != null)
                        {
                            contract.Salary = model.Salary;
                            contract.E_Salary = model.Salary.ToString().Encrypt();
                        }
                        if (model.InsuranceAmount != null)
                        {
                            contract.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                            contract.InsuranceAmount = model.InsuranceAmount;
                        }
                        //Quyen.Quach 28/11/2017 Mã hóa lương thử việc
                        if (model.ProbationSalary != null)
                        {
                            contract.E_ProbationSalary = model.ProbationSalary.ToString().Encrypt();
                            contract.ProbationSalary = model.ProbationSalary;
                        }
                        contract.Allowance1 = model.Allowance1;
                        contract.Allowance2 = model.Allowance2;
                        contract.Allowance3 = model.Allowance3;
                        contract.Allowance4 = model.Allowance4;
                        contract.Allowance5 = model.Allowance5;
                        contract.Allowance6 = model.Allowance6;
                        contract.Allowance7 = model.Allowance7;
                        contract.Allowance8 = model.Allowance8;
                        contract.Allowance9 = model.Allowance9;
                        contract.Allowance10 = model.Allowance10;
                        contract.Allowance11 = model.Allowance11;
                        contract.Allowance12 = model.Allowance12;
                        contract.Allowance13 = model.Allowance13;
                        contract.Allowance14 = model.Allowance14;
                        contract.Allowance15 = model.Allowance15;
                        contract.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                    }
                    contract.Code = model.Code;
                    contract.CodeEmp = model.CodeEmp;
                    contract.ContractTypeID = model.ContractTypeID;
                    contract.CurenncyIDSalary = model.CurenncyIDSalary;
                    contract.CurenncyInsName = model.CurenncyInsName;
                    contract.CurenncyOAllowanceName = model.CurenncyOAllowanceName;
                    contract.CurrencySalName = model.CurrencySalName;
                    contract.DateAuthorize = model.DateAuthorize;
                    contract.DateCreate = model.DateCreate;
                    contract.DateUpdate = DateTime.Now;
                    contract.DateEnd = model.DateEnd;
                    contract.DateSigned = model.DateSigned;
                    contract.DateStart = model.DateStart;
                    contract.FollowNo = model.FollowNo;
                    contract.Note = model.Note;
                    contract.FormPaySalary = model.FormPaySalary;
                    contract.HourWorkInMonth = model.HourWorkInMonth;
                    contract.IPCreate = model.IPCreate;
                    contract.IPUpdate = model.IPUpdate;
                    contract.PersonalRate = model.PersonalRate;
                    contract.ProfileID = model.ProfileID;
                    contract.ProfileSingID = model.ProfileSingID;
                    contract.QualificationID = model.QualificationID;

                    contract.SalaryClassTypeID = model.SalaryClassTypeID;
                    contract.ServerCreate = model.ServerCreate;
                    contract.ServerUpdate = model.ServerUpdate;
                    contract.WorkPlaceID = model.WorkPlaceID;
                    contract.NextContractTypeID = model.NextContractTypeID;
                    contract.Remark = model.Remark;
                    contract.RankDetailForNextContract = model.RankDetailForNextContract;
                    contract.ContractEvaType = model.ContractEvaType;
                    contract.DateOfContractEva = model.DateOfContractEva;
                    contract.EvaluationResult = model.EvaluationResult;
                    contract.ContractResult = model.ContractResult;
                    contract.TypeOfPass = model.TypeOfPass;
                    contract.DateEndNextContract = model.DateEndNextContract;
                    //Son.Vo - 20151107 - 0059636
                    contract.Duration = model.Duration;
                    contract.DayOfAnnualLeave = model.DayOfAnnualLeave;
                    contract.CompanyID = model.CompanyID;

                    if (model.ContractNo != null)
                    {
                        contract.ContractNo = model.ContractNo;
                    }

                    //Son.Vo - 20160119 - 0063260
                    contract.DateExtend = contract.DateEnd;
                    //Son.Vo - 20160613 - lưu thêm 2 field
                    contract.ProbationPercent = model.ProbationPercent;
                    //Son.Vo - 20160614 - 0068882
                    contract.IsMLC = model.IsMLC;
                    #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                    if (contract.ID == Guid.Empty && contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        string messageref1 = workHistoryServices.UpdateHeadProfile(contract.ProfileID, contract.PositionID);
                    }
                    #endregion
                    contract.ContractStatus = model.ContractStatus;
                    //Son.Vo - 20160912 - 0073153 Trạng thái duyệt mới tạo mới lương cb + bhxh
                    contract.IsCreateBasicSalary = model.IsCreateBasicSalary;
                    contract.IsCreateInsuranceSalary = model.IsCreateInsuranceSalary;
                    contract.Status = model.Status;
                    contract.UserSubmit = model.UserSubmit;
                    contract.UserApproveID = model.UserApproveID;
                    contract.UserApproveID2 = model.UserApproveID2;
                    contract.UserApproveID3 = model.UserApproveID3;
                    contract.UserApproveID4 = model.UserApproveID4;
                    contract.UserProcessID = model.UserProcessID;
                    contract.UserProcessID2 = model.UserProcessID2;
                    contract.UserProcessID3 = model.UserProcessID3;
                    contract.UserProcessID4 = model.UserProcessID4;
                    //Son.Vo - 20161202 - 0074278
                    contract = ContractServices.SetContractDataByWorkHistory(contract);
                    //Son.Vo - 20161221 - 0076839
                    contract.EmployeeTypeID = model.EmployeeTypeID;
                    contract.ReasonChangeSalaryID = model.ReasonChangeSalaryID;
                    contract.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                    #region Son.Vo - 20170217 - 0078889 Lấy thông tin địa chỉ từng người gắn vào HĐ. Trường hợp tạo nhiều dòng
                    if (lstProfile.Count > 1)
                    {
                        contract.IDNo = profile.IDNo;
                        contract.IDDateOfIssue = profile.IDDateOfIssue;
                        contract.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                        contract.PCountryID = profile.PCountryID;
                        contract.PProvinceID = profile.PProvinceID;
                        contract.PDistrictID = profile.PDistrictID;
                        contract.PVillageID = profile.VillageID;
                        contract.PAddress = profile.PAddress;
                        //Son.Vo - 20170220 - xử lý thêm chức vụ + chức danh theo workhistory nếu chọn nhiều nhân viên
                        var workhistoryEntity = workHistoryServices.GetWorkHistoryDataForCreateContract(contract.DateStart, contract.ProfileID);
                        if (workhistoryEntity != null)
                        {
                            contract.JobTitleID = workhistoryEntity.JobTitleID;
                            contract.PositionID = workhistoryEntity.PositionID;
                            contract.OrgStructureID = workhistoryEntity.OrganizationStructureID;
                        }
                    }
                    else
                    {
                        contract.IDNo = model.IDNo;
                        contract.IDDateOfIssue = model.IDDateOfIssue;
                        contract.IDPlaceOfIssue = model.IDPlaceOfIssue;
                        contract.PCountryID = model.PCountryID;
                        contract.PProvinceID = model.PProvinceID;
                        contract.PDistrictID = model.PDistrictID;
                        contract.PVillageID = model.PVillageID;
                        contract.PAddress = model.PAddress;
                        contract.JobTitleID = model.JobTitleID;
                        contract.PositionID = model.PositionID;
                        //Son.Vo - 20160824 - 0072448
                        contract.OrgStructureID = model.OrgStructureID;
                    }
                    #endregion
                    //Son.Vo - 20170316 - 0079910
                    contract.EmployeeGroupID = model.EmployeeGroupID;
                    contract.DelegateCompanyID = model.DelegateCompanyID;
                    //Son.Vo - 20170605 - 0082889
                    contract.GradeAttendanceID = model.GradeAttendanceID;
                    contract.IsIncludeProbationTime = model.IsIncludeProbationTime;

                    if (contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        if (model.IsCreateBasicSalary == true)
                        {
                            #region Son.Vo - 20170710 - 0084759
                            if (string.IsNullOrEmpty(model.IsCreateSal))
                            {
                                var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                                if (isInvalid == true)
                                {
                                    model.ActionStatus = "InvalidSalary";
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            #endregion
                        }
                        if (model.IsCreateInsuranceSalary == true)
                        {
                            #region Son.Vo - 20170710 - 0084759
                            if (string.IsNullOrEmpty(model.IsCreateSal))
                            {
                                var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                                if (isInvalid == true)
                                {
                                    model.ActionStatus = "InvalidSalary";
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            #endregion
                        }
                    }

                    if (contract.ProfileID != null && model.GradeAttendanceID != null)
                    {
                        string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(contract.ProfileID, model.GradeAttendanceID.Value, model.DateStart);
                    }
                    //Quyen.Quach 02/11/2017 0089253
                    contract.AttachFile = model.AttachFile != null ? model.AttachFile : string.Empty;

                    if (model.ID == Guid.Empty)
                    {
                        //Son.Vo - 20170224 - 0075838: Điều chỉnh cơ chế sinh số HĐ khi tạo mới HĐ
                        if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                        {
                            var lstcontractTypeByPro = lstContractTypeByProfile.Where(s => s.ProfileID == contract.ProfileID).Select(s => s.ContractTypeID).Distinct().ToList();
                            var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                            ContractServices.SetNewCodeContract(contractEntityForContractno, lstcontractTypeByPro);
                            contract.ContractNo = contractEntityForContractno.ContractNo;
                        }

                        contract.ID = Guid.NewGuid();
                        contract.ActionStatus = ContractServices.Add(contract);
                        if (lstProfile.Count > 1)
                        {
                            contractids += contract.ID.ToString() + ',';
                        }

                    }
                    else
                    {
                        //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ xong rồi sửa thông tin rồi click lưu lần nữa
                        if (!string.IsNullOrEmpty(model.contractIds) && model.contractIds.Split(',').ToList().Count > 1)
                        {
                            Guid id = Guid.Empty;
                            Guid profileID = Guid.Empty;
                            foreach (var item in model.contractIds.Split(',').ToList())
                            {
                                if (!string.IsNullOrEmpty(item))
                                {
                                    var contractforEdit = ContractServices.GetContractByID(Guid.Parse(item));

                                    if (contractforEdit != null)
                                    {
                                        profileID = contractforEdit.ProfileID;
                                        contractforEdit = contract.CopyData<Hre_ContractEntity>("ProfileID", "ID", "Hre_Profile1", "Hre_Profile");
                                        contractforEdit.ID = Guid.Parse(item);
                                        contractforEdit.ProfileID = profileID;
                                        contractforEdit.ActionStatus = ContractServices.Edit(contractforEdit);
                                        contract.ActionStatus = contractforEdit.ActionStatus;
                                    }
                                }
                            }
                        }
                        else
                        {
                            contract.ID = model.ID;
                            contract.ActionStatus = ContractServices.Edit(contract);
                        }
                    }
                    contract.contractIds = contractids;

                    if (contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        if (model.IsCreateBasicSalary == true)
                        {
                            var _ContractEntity = new Hre_ContractEntity();
                            contract.CopyData(_ContractEntity);
                            _BasicSalaryServices.CreateBasicSalaryByContract(_ContractEntity, profile.ID, _ContractEntity.IsIncludeProbationTime);
                        }
                        if (model.IsCreateInsuranceSalary == true)
                        {
                            var _ContractEntity = new Hre_ContractEntity();
                            contract.CopyData(_ContractEntity);
                            string messagref = _BasicSalaryServices.CreateInsuranceSalaryByContract(_ContractEntity, profile.ID, _ContractEntity.IsIncludeProbationTime);
                        }
                    }

                    //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ
                    if (lstProfile.Count > 1)
                    {
                        countProfile++;
                        if (countProfile == lstProfile.Count)
                        {
                            return Json(contract, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        return Json(contract, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                #region Không check
                var contractgetNoGetBasicSalary = new Hre_ContractEntity();
                model.CopyData(contractgetNoGetBasicSalary);
                var contractNoGetBasicSalary = new Hre_ContractEntity();
                contractNoGetBasicSalary.TimesContract = model.TimesContract;
                contractNoGetBasicSalary.Allowance = model.Allowance;

                contractNoGetBasicSalary.AllowanceID1 = model.AllowanceID1;
                contractNoGetBasicSalary.AllowanceID2 = model.AllowanceID2;
                contractNoGetBasicSalary.AllowanceID3 = model.AllowanceID3;
                contractNoGetBasicSalary.AllowanceID4 = model.AllowanceID4;
                contractNoGetBasicSalary.AllowanceID5 = model.AllowanceID5;
                contractNoGetBasicSalary.AllowanceID6 = model.AllowanceID6;
                contractNoGetBasicSalary.AllowanceID7 = model.AllowanceID7;
                contractNoGetBasicSalary.AllowanceID8 = model.AllowanceID8;
                contractNoGetBasicSalary.AllowanceID9 = model.AllowanceID9;
                contractNoGetBasicSalary.AllowanceID10 = model.AllowanceID10;
                contractNoGetBasicSalary.AllowanceID11 = model.AllowanceID11;
                contractNoGetBasicSalary.AllowanceID12 = model.AllowanceID12;
                contractNoGetBasicSalary.AllowanceID13 = model.AllowanceID13;
                contractNoGetBasicSalary.AllowanceID14 = model.AllowanceID14;
                contractNoGetBasicSalary.AllowanceID15 = model.AllowanceID15;
                contractNoGetBasicSalary.ClassRateID = model.ClassRateID;
                contractNoGetBasicSalary.Code = model.Code;
                contractNoGetBasicSalary.ContractTypeID = model.ContractTypeID;
                contractNoGetBasicSalary.CurenncyID = model.CurenncyID;
                contractNoGetBasicSalary.CurenncyID1 = model.CurenncyID1;
                contractNoGetBasicSalary.CurenncyID2 = model.CurenncyID2;
                contractNoGetBasicSalary.CurenncyID3 = model.CurenncyID3;
                contractNoGetBasicSalary.CurenncyID4 = model.CurenncyID4;
                contractNoGetBasicSalary.CurenncyID5 = model.CurenncyID5;
                contractNoGetBasicSalary.CurenncyID6 = model.CurenncyID6;
                contractNoGetBasicSalary.CurenncyID7 = model.CurenncyID7;
                contractNoGetBasicSalary.CurenncyID8 = model.CurenncyID8;
                contractNoGetBasicSalary.CurenncyID9 = model.CurenncyID9;
                contractNoGetBasicSalary.CurenncyID10 = model.CurenncyID10;
                contractNoGetBasicSalary.CurenncyID11 = model.CurenncyID11;
                contractNoGetBasicSalary.CurenncyID12 = model.CurenncyID12;
                contractNoGetBasicSalary.CurenncyID13 = model.CurenncyID13;
                contractNoGetBasicSalary.CurenncyID14 = model.CurenncyID14;
                contractNoGetBasicSalary.CurenncyID15 = model.CurenncyID15;
                contractNoGetBasicSalary.CurenncyIDSalary = model.CurenncyIDSalary;
                contractNoGetBasicSalary.DateAuthorize = model.DateAuthorize;
                contractNoGetBasicSalary.DateCreate = model.DateCreate;
                contractNoGetBasicSalary.DateEnd = model.DateEnd;
                contractNoGetBasicSalary.DateSigned = model.DateSigned;
                contractNoGetBasicSalary.DateStart = model.DateStart;
                contractNoGetBasicSalary.DateUpdate = DateTime.Now;
                contractNoGetBasicSalary.FollowNo = model.FollowNo;
                contractNoGetBasicSalary.Note = model.Note;
                contractNoGetBasicSalary.FormPaySalary = model.FormPaySalary;
                contractNoGetBasicSalary.HourWorkInMonth = model.HourWorkInMonth;
                contractNoGetBasicSalary.IPCreate = model.IPCreate;
                contractNoGetBasicSalary.IPUpdate = model.IPUpdate;
                contractNoGetBasicSalary.PersonalRate = model.PersonalRate;
                contractNoGetBasicSalary.ProfileID = model.ProfileID;
                contractNoGetBasicSalary.ProfileSingID = model.ProfileSingID;
                contractNoGetBasicSalary.QualificationID = model.QualificationID;
                contractNoGetBasicSalary.RankRateID = model.RankRateID;
                contractNoGetBasicSalary.SalaryClassTypeID = model.SalaryClassTypeID;
                contractNoGetBasicSalary.ServerCreate = model.ServerCreate;
                contractNoGetBasicSalary.ServerUpdate = model.ServerUpdate;
                contractNoGetBasicSalary.WorkPlaceID = model.WorkPlaceID;
                contractNoGetBasicSalary.NextContractTypeID = model.NextContractTypeID;
                contractNoGetBasicSalary.Remark = model.Remark;
                contractNoGetBasicSalary.RankDetailForNextContract = model.RankDetailForNextContract;
                contractNoGetBasicSalary.ContractEvaType = model.ContractEvaType;
                contractNoGetBasicSalary.DateOfContractEva = model.DateOfContractEva;
                contractNoGetBasicSalary.EvaluationResult = model.EvaluationResult;
                contractNoGetBasicSalary.ContractResult = model.ContractResult;
                contractNoGetBasicSalary.TypeOfPass = model.TypeOfPass;
                contractNoGetBasicSalary.DateEndNextContract = model.DateEndNextContract;
                //Son.Vo - 20151107 - 0059636
                contractNoGetBasicSalary.Duration = model.Duration;
                contractNoGetBasicSalary.DayOfAnnualLeave = model.DayOfAnnualLeave;
                contractNoGetBasicSalary.CompanyID = model.CompanyID;
                //Son.Vo - 20160613 - lưu thêm 2 field
                contractNoGetBasicSalary.ProbationPercent = model.ProbationPercent;
                contractNoGetBasicSalary.ProbationSalary = model.ProbationSalary;
                //Son.Vo - 20160614 - 0068882
                contractNoGetBasicSalary.IsMLC = model.IsMLC;
                ////Son.Vo - 20160406 - 0065835
                //if (contractNoGetBasicSalary.OrgStructureID == null)
                //{
                //    contractNoGetBasicSalary.OrgStructureID = profile.OrgStructureID;
                //}

                if (model.ContractNo != null)
                {
                    contractNoGetBasicSalary.ContractNo = model.ContractNo;
                }
                //Son.Vo - 20160119 - 0063260
                contractNoGetBasicSalary.DateExtend = contractNoGetBasicSalary.DateEnd;
                #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                if (contractNoGetBasicSalary.ID == Guid.Empty && contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    string messageref1 = workHistoryServices.UpdateHeadProfile(contractNoGetBasicSalary.ProfileID, contractNoGetBasicSalary.PositionID);
                }
                #endregion
                contractNoGetBasicSalary.ContractStatus = model.ContractStatus;
                //Son.Vo - 20160912 - 0073153 Trạng thái duyệt mới tạo mới lương cb + bhxh
                contractNoGetBasicSalary.IsCreateBasicSalary = model.IsCreateBasicSalary;
                contractNoGetBasicSalary.IsCreateInsuranceSalary = model.IsCreateInsuranceSalary;
                contractNoGetBasicSalary.Status = model.Status;


                contractNoGetBasicSalary.UserSubmit = model.UserSubmit;
                contractNoGetBasicSalary.UserApproveID = model.UserApproveID;
                contractNoGetBasicSalary.UserApproveID2 = model.UserApproveID2;
                contractNoGetBasicSalary.UserApproveID3 = model.UserApproveID3;
                contractNoGetBasicSalary.UserApproveID4 = model.UserApproveID4;
                contractNoGetBasicSalary.UserProcessID = model.UserProcessID;
                contractNoGetBasicSalary.UserProcessID2 = model.UserProcessID2;
                contractNoGetBasicSalary.UserProcessID3 = model.UserProcessID3;
                contractNoGetBasicSalary.UserProcessID4 = model.UserProcessID4;
                //Son.Vo - 20161202 - 0074278
                contractNoGetBasicSalary = ContractServices.SetContractDataByWorkHistory(contractNoGetBasicSalary);
                //Son.Vo - 20161221 - 0076839
                contractNoGetBasicSalary.EmployeeTypeID = model.EmployeeTypeID;
                contractNoGetBasicSalary.ReasonChangeSalaryID = model.ReasonChangeSalaryID;
                contractNoGetBasicSalary.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                #region Son.Vo - 20170217 - 0078889 Lấy thông tin địa chỉ từng người gắn vào HĐ. Trường hợp tạo nhiều dòng
                if (lstProfile.Count > 1)
                {
                    contractNoGetBasicSalary.IDNo = profile.IDNo;
                    contractNoGetBasicSalary.IDDateOfIssue = profile.IDDateOfIssue;
                    contractNoGetBasicSalary.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                    contractNoGetBasicSalary.PCountryID = profile.PCountryID;
                    contractNoGetBasicSalary.PProvinceID = profile.PProvinceID;
                    contractNoGetBasicSalary.PDistrictID = profile.PDistrictID;
                    contractNoGetBasicSalary.PVillageID = profile.VillageID;
                    contractNoGetBasicSalary.PAddress = profile.PAddress;
                    //Son.Vo - 20170220 - xử lý thêm chức vụ + chức danh theo workhistory nếu chọn nhiều nhân viên
                    var workhistoryEntity = workHistoryServices.GetWorkHistoryDataForCreateContract(contractNoGetBasicSalary.DateStart, contractNoGetBasicSalary.ProfileID);
                    if (workhistoryEntity != null)
                    {
                        contractNoGetBasicSalary.JobTitleID = workhistoryEntity.JobTitleID;
                        contractNoGetBasicSalary.PositionID = workhistoryEntity.PositionID;
                        contractNoGetBasicSalary.OrgStructureID = workhistoryEntity.OrganizationStructureID;
                    }
                }
                else
                {
                    contractNoGetBasicSalary.IDNo = model.IDNo;
                    contractNoGetBasicSalary.IDDateOfIssue = model.IDDateOfIssue;
                    contractNoGetBasicSalary.IDPlaceOfIssue = model.IDPlaceOfIssue;
                    contractNoGetBasicSalary.PCountryID = model.PCountryID;
                    contractNoGetBasicSalary.PProvinceID = model.PProvinceID;
                    contractNoGetBasicSalary.PDistrictID = model.PDistrictID;
                    contractNoGetBasicSalary.PVillageID = model.PVillageID;
                    contractNoGetBasicSalary.PAddress = model.PAddress;
                    contractNoGetBasicSalary.JobTitleID = model.JobTitleID;
                    contractNoGetBasicSalary.PositionID = model.PositionID;
                    //Son.Vo - 20160824 - 0072448
                    contractNoGetBasicSalary.OrgStructureID = model.OrgStructureID;
                }
                #endregion
                //Son.Vo - 20170316 - 0079910
                contractNoGetBasicSalary.EmployeeGroupID = model.EmployeeGroupID;
                contractNoGetBasicSalary.DelegateCompanyID = model.DelegateCompanyID;

                //Son.Vo - 20170605 - 0082889
                contractNoGetBasicSalary.GradeAttendanceID = model.GradeAttendanceID;
                contractNoGetBasicSalary.IsIncludeProbationTime = model.IsIncludeProbationTime;

                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                {
                    if (model.Salary != null)
                    {
                        contractNoGetBasicSalary.E_Salary = model.Salary.ToString().Encrypt();
                    }
                    if (model.InsuranceAmount != null)
                    {
                        contractNoGetBasicSalary.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                    }
                    contractNoGetBasicSalary.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }
                else
                {
                    if (model.Salary != null)
                    {
                        contractNoGetBasicSalary.Salary = model.Salary;
                        contractNoGetBasicSalary.E_Salary = model.Salary.ToString().Encrypt();
                    }
                    if (model.InsuranceAmount != null)
                    {
                        contractNoGetBasicSalary.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                        contractNoGetBasicSalary.InsuranceAmount = model.InsuranceAmount;
                    }
                    contractNoGetBasicSalary.Allowance1 = model.Allowance1;
                    contractNoGetBasicSalary.Allowance3 = model.Allowance3;
                    contractNoGetBasicSalary.Allowance2 = model.Allowance2;
                    contractNoGetBasicSalary.Allowance4 = model.Allowance4;
                    contractNoGetBasicSalary.Allowance5 = model.Allowance5;
                    contractNoGetBasicSalary.Allowance6 = model.Allowance6;
                    contractNoGetBasicSalary.Allowance7 = model.Allowance7;
                    contractNoGetBasicSalary.Allowance8 = model.Allowance8;
                    contractNoGetBasicSalary.Allowance9 = model.Allowance9;
                    contractNoGetBasicSalary.Allowance10 = model.Allowance10;
                    contractNoGetBasicSalary.Allowance11 = model.Allowance11;
                    contractNoGetBasicSalary.Allowance12 = model.Allowance12;
                    contractNoGetBasicSalary.Allowance13 = model.Allowance13;
                    contractNoGetBasicSalary.Allowance14 = model.Allowance14;
                    contractNoGetBasicSalary.Allowance15 = model.Allowance15;

                    contractNoGetBasicSalary.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }

                if (contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    if (model.IsCreateBasicSalary == true)
                    {
                        #region Son.Vo - 20170710 - 0084759
                        if (string.IsNullOrEmpty(model.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        #endregion
                    }
                    if (model.IsCreateInsuranceSalary == true)
                    {
                        #region Son.Vo - 20170710 - 0084759
                        if (string.IsNullOrEmpty(model.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        #endregion
                    }
                }

                if (contractNoGetBasicSalary.ProfileID != null && model.GradeAttendanceID != null)
                {
                    string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(contractNoGetBasicSalary.ProfileID, model.GradeAttendanceID.Value, contractNoGetBasicSalary.DateStart);
                }
                //Quyen.Quach 02/11/2017 0089253
                contractNoGetBasicSalary.AttachFile = model.AttachFile != null ? model.AttachFile : string.Empty;

                if (model.ID == Guid.Empty)
                {
                    //Son.Vo - 20170224 - 0075838: Điều chỉnh cơ chế sinh số HĐ khi tạo mới HĐ
                    if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        var lstcontractTypeByPro = lstContractTypeByProfile.Where(s => s.ProfileID == contractNoGetBasicSalary.ProfileID).Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contractNoGetBasicSalary.CopyData<Hre_ContractEntity>();
                        ContractServices.SetNewCodeContract(contractEntityForContractno, lstcontractTypeByPro);
                        contractNoGetBasicSalary.ContractNo = contractEntityForContractno.ContractNo;
                    }
                    contractNoGetBasicSalary.ID = Guid.NewGuid();
                    contractNoGetBasicSalary.ActionStatus = ContractServices.Add(contractNoGetBasicSalary);
                    if (lstProfile.Count > 1)
                    {
                        contractids += contractNoGetBasicSalary.ID.ToString() + ',';
                    }
                }
                else
                {
                    //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ xong rồi sửa thông tin rồi click lưu lần nữa
                    if (!string.IsNullOrEmpty(model.contractIds) && model.contractIds.Split(',').ToList().Count > 1)
                    {
                        Guid id = Guid.Empty;
                        Guid profileID = Guid.Empty;
                        foreach (var item in model.contractIds.Split(',').ToList())
                        {
                            if (!string.IsNullOrEmpty(item))
                            {
                                var contractforEdit = ContractServices.GetContractByID(Guid.Parse(item));

                                if (contractforEdit != null)
                                {
                                    profileID = contractforEdit.ProfileID;
                                    contractforEdit = contractNoGetBasicSalary.CopyData<Hre_ContractEntity>("ProfileID", "ID", "Hre_Profile1", "Hre_Profile");
                                    contractforEdit.ID = Guid.Parse(item);
                                    contractforEdit.ProfileID = profileID;
                                    contractforEdit.ActionStatus = ContractServices.Edit(contractforEdit);
                                    contractNoGetBasicSalary.ActionStatus = contractforEdit.ActionStatus;
                                }
                            }
                        }
                    }
                    else
                    {
                        contractNoGetBasicSalary.ID = model.ID;
                        contractNoGetBasicSalary.ActionStatus = ContractServices.Edit(contractNoGetBasicSalary);
                    }
                }
                contractNoGetBasicSalary.contractIds = contractids;
                message = contractNoGetBasicSalary.ActionStatus;

                if (contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    if (model.IsCreateBasicSalary == true)
                    {
                        var _ContractEntity = new Hre_ContractEntity();
                        contractNoGetBasicSalary.CopyData(_ContractEntity);
                        _BasicSalaryServices.CreateBasicSalaryByContract(contractNoGetBasicSalary, profile.ID, _ContractEntity.IsIncludeProbationTime);
                    }
                    if (model.IsCreateInsuranceSalary == true)
                    {
                        var _ContractEntity = new Hre_ContractEntity();
                        contractNoGetBasicSalary.CopyData(_ContractEntity);
                        string messagref = _BasicSalaryServices.CreateInsuranceSalaryByContract(contractNoGetBasicSalary, profile.ID, _ContractEntity.IsIncludeProbationTime);
                    }
                }

                //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ
                if (lstProfile.Count > 1)
                {
                    countProfile++;
                    if (countProfile == lstProfile.Count)
                    {
                        return Json(contractNoGetBasicSalary, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        continue;
                    }
                }
                else
                {
                    return Json(contractNoGetBasicSalary, JsonRequestBehavior.AllowGet);
                }
                #endregion
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }
        #endregion
        //Quyen.Quach Thêm button xuất báo cao màn hình PL đến hạn
        #region Quyen.Quach - 14/08/2017 - Thêm button xuất báo cáo màn hình PL đến hạn
        //Xuất những báo cáo Phụ lục hợp đồng đến hạn đã chọn
        public ActionResult ExportSelectAppendixExpiredContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ContractExtendModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ContractExtendModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ContractExtendModel>(model.strAppendixID, ConstantSql.hrm_hr_sp_get_ExpiredContractExtendByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ContractExtend",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty && model.ExportID != null)
            {
                var fullPath = ExportService.Export(model.ExportID.Value, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //Xuất tất cả BC theo template
        public ActionResult ExportAllAppendixExpiredContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ExpiredContractExtendSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            string CompanyLogo = string.Empty;
            var result = new List<Hre_ContractExtendModel>();

            #region Create tempate
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            #endregion

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractExtendModel(),
                    FileName = "Hre_ContractExtend",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (!model.IsCreateTemplate)
            {
                if (model.ExportId != Guid.Empty && model.ExportId != null)
                {
                    request.PageSize = int.MaxValue - 1;
                    result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ExpiredContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredContractExtend, ref status);
                }
                else
                {
                    result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ExpiredContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredContractExtend, ref status);
                }
            }
            #region Logo
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = Companylogo;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        public ActionResult ExportExpiredExtendContractSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ContractExtendEntity, Hre_ContractExtendModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ExpiredContractExtendByIds);
        }
        public ActionResult ExportExpiredExtendContractList([DataSourceRequest] DataSourceRequest request, Hre_ExpiredContractExtendSearchModel model)
        {
            return ExportAllAndReturn<Hre_ContractExtendEntity, Hre_ContractExtendModel, Hre_ExpiredContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredContractExtend);
        }

        #endregion

        //Son.Vo - Duyệt đánh giá HĐ ko theo cấp or là cấp duyệt cuối cùng
        [HttpPost]
        public ActionResult ValidateCreateContract(Guid profileID, Guid contractID, DateTime DateStart, double? InsuranceAmount, Guid ContractTypeID, bool? isCreateSal, bool? isCreateIns)
        {
            var ContractServices = new Hre_ContractServices();
            var isInvalid = ContractServices.ValidateCreateContract(profileID, contractID, DateStart, InsuranceAmount, ContractTypeID, isCreateSal, isCreateIns);
            if (isInvalid == true)
            {
                return Json("InvalidSalary", JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(string.Empty, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - có show chế độ công trên màn hình hđ/ plhđ hay không
        public ActionResult IsShowGradeAttendanceContract()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISSHOWGRADEATTENDANCECONTRACT);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ExportSelectedContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            var headerInfo = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo };
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ContractModel();
            var _ProfileServices = new Hre_ProfileServices();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ContractModel>(model.strContractIDs, ConstantSql.hrm_hr_sp_get_ContractByIds, UserLogin, ref status);
            if (result == null)
                return null;
            var lstRegionIDs = result.Where(s => s.RegionID != null).Select(s => s.RegionID.Value).Distinct().ToList();
            var listRegionDetail = _ProfileServices.GetLstRegionDetailByRegionIDs(lstRegionIDs);
            var lstContractIDs = result.Select(s => s.ID).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
            foreach (var item in result)
            {
                //[To.Le][04/07/2016][New Func][0069723]	Ngày bắt đầu ngày kết thúc phụ lục: Lấy lên ngày bắt đầu phụ lục loại gia hạn của hợp đồng TypeAppendix= ‘E_EXTEND’
                var contractExtend = lstContractExtend.Where(s => s.ContractID == item.ID && s.TypeAppendix == EnumDropDown.TypeAppendix.E_EXTEND.ToString()).FirstOrDefault();
                if (contractExtend != null)
                {
                    if (contractExtend.DateStart != null)
                    {
                        item.DateExtendFrom = contractExtend.DateStart;
                    }
                    if (contractExtend.DateEnd != null)
                    {
                        item.DateExtendTo = contractExtend.DateEnd;
                    }
                }
                //Lương vùng đóng BH thấp nhất , cao nhất
                var regionDetail = listRegionDetail.Where(m => m.RegionID == item.RegionID).FirstOrDefault();
                if (regionDetail.HasValue() && regionDetail.MinSalary.HasValue)
                {
                    item.MinSalary = regionDetail.MinSalary;
                }
                if (regionDetail.HasValue() && regionDetail.MaxSalary.HasValue)
                {
                    item.MaxSalary = regionDetail.MaxSalary;
                }
            }
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_RewardModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult EditContract(Hre_ContractSaveModel model)
        {
            #region Validate
            string message = string.Empty;
            var ContractServices = new Hre_ContractServices();
            Guid contractID = Guid.Empty;
            string typeContractType = string.Empty;
            if (model.Tab_ContractBasic != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ContractBasicModel>(LanguageCode, model.Tab_ContractBasic, "Hre_Contract", ref message);
                if (!checkValidate)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }

                //Son.Vo - 20171227 - 0091249
                var listProfileID = new List<Guid>();
                listProfileID.Add(model.Tab_ContractBasic.ProfileID);
                string messageValidate = ContractServices.ValidateDateStartDateHireContract(model.Tab_ContractBasic.DateStart, listProfileID);
                if (!string.IsNullOrEmpty(messageValidate))
                {
                    model.ActionStatus = messageValidate + " " + ConstantDisplay.HRM_HR_InvalidDateStartDateHire.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                if (model.Tab_ContractBasic.ContractTypeID != null && model.Tab_ContractBasic.ContractTypeID != Guid.Empty)
                {
                    var contractTypeServices = new Cat_ContractTypeServices();
                    var contractType = contractTypeServices.GetDataContractTypeByID(model.Tab_ContractBasic.ContractTypeID);
                    typeContractType = contractType != null ? contractType.Type : null;
                    if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && model.Tab_ContractBasic.DateEnd == null)
                    {
                        model.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion
                #region Son.Vo - 20160808 - 0071798: Bổ sung tính năng cảnh báo trùng khi tạo mới hợp đồng
                bool isDuplicate = ContractServices.ValidateDuplicateContract(model.ID, model.Tab_ContractBasic.ProfileID, model.Tab_ContractBasic.DateStart, model.Tab_ContractBasic.DateEnd, model.Tab_ContractBasic.IsMLC);
                if (isDuplicate == true)
                {
                    model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContract.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                #endregion
            }
            if (model.Tab_EvaContract != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_EvaContractModel>(LanguageCode, model.Tab_EvaContract, "Hre_Contract", ref message);
                if (!checkValidate)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            if (model.Tab_RegisterPlace != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_RegisterPlaceModel>(LanguageCode, model.Tab_RegisterPlace, "Hre_Contract", ref message);
                if (!checkValidate)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            #endregion

            var contractSave = new Hre_ContractModel();
            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);
            if (model != null)
            {
                contractSave = service.GetData<Hre_ContractModel>(Common.DotNetToOracle(model.ID.ToString()), ConstantSql.hrm_hr_sp_get_ContractById, ref status).FirstOrDefault();
            }
            if (model.Tab_EvaContract != null)
            {
                if (model.Tab_EvaContract != null)
                {
                    foreach (var item in model.Tab_EvaContract.GetType().GetProperties())
                    {
                        contractSave.SetPropertyValue(item.Name, model.Tab_EvaContract.GetPropertyValue(item.Name));
                    }
                }
            }
            if (model.Tab_RegisterPlace != null)
            {
                if (model.Tab_RegisterPlace != null)
                {
                    foreach (var item in model.Tab_RegisterPlace.GetType().GetProperties())
                    {
                        contractSave.SetPropertyValue(item.Name, model.Tab_RegisterPlace.GetPropertyValue(item.Name));
                    }
                }
            }
            if (model.Tab_ContractBasic != null)
            {
                if (model.Tab_ContractBasic != null)
                {
                    //Nguyen.Le - 20170830 - 0087114
                    //Quyen.Quach 02/10/2017 0087467
                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        if (model.Tab_ContractBasic.Salary != null)
                        {
                            model.Tab_ContractBasic.E_Salary = model.Tab_ContractBasic.Salary.ToString().Encrypt();
                        }
                        if (model.Tab_ContractBasic.InsuranceAmount != null)
                        {
                            model.Tab_ContractBasic.E_InsuranceAmount = model.Tab_ContractBasic.InsuranceAmount.ToString().Encrypt();
                        }
                        model.Tab_ContractBasic.E_Allowance1 = model.Tab_ContractBasic.Allowance1 != null ? model.Tab_ContractBasic.Allowance1.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance2 = model.Tab_ContractBasic.Allowance2 != null ? model.Tab_ContractBasic.Allowance2.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance3 = model.Tab_ContractBasic.Allowance3 != null ? model.Tab_ContractBasic.Allowance3.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance4 = model.Tab_ContractBasic.Allowance4 != null ? model.Tab_ContractBasic.Allowance4.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance5 = model.Tab_ContractBasic.Allowance5 != null ? model.Tab_ContractBasic.Allowance5.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance6 = model.Tab_ContractBasic.Allowance6 != null ? model.Tab_ContractBasic.Allowance6.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance7 = model.Tab_ContractBasic.Allowance7 != null ? model.Tab_ContractBasic.Allowance7.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance8 = model.Tab_ContractBasic.Allowance8 != null ? model.Tab_ContractBasic.Allowance8.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance9 = model.Tab_ContractBasic.Allowance9 != null ? model.Tab_ContractBasic.Allowance9.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance10 = model.Tab_ContractBasic.Allowance10 != null ? model.Tab_ContractBasic.Allowance10.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance11 = model.Tab_ContractBasic.Allowance11 != null ? model.Tab_ContractBasic.Allowance11.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance12 = model.Tab_ContractBasic.Allowance12 != null ? model.Tab_ContractBasic.Allowance12.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance13 = model.Tab_ContractBasic.Allowance13 != null ? model.Tab_ContractBasic.Allowance13.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance14 = model.Tab_ContractBasic.Allowance14 != null ? model.Tab_ContractBasic.Allowance14.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance15 = model.Tab_ContractBasic.Allowance15 != null ? model.Tab_ContractBasic.Allowance15.ToString().Encrypt() : string.Empty;
                    }
                    else
                    {
                        if (model.Tab_ContractBasic.Salary != null)
                        {
                            model.Tab_ContractBasic.E_Salary = model.Tab_ContractBasic.Salary.ToString().Encrypt();
                        }
                        if (model.Tab_ContractBasic.InsuranceAmount != null)
                        {
                            model.Tab_ContractBasic.E_InsuranceAmount = model.Tab_ContractBasic.InsuranceAmount.ToString().Encrypt();
                        }
                        model.Tab_ContractBasic.E_Allowance1 = model.Tab_ContractBasic.Allowance1 != null ? model.Tab_ContractBasic.Allowance1.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance2 = model.Tab_ContractBasic.Allowance2 != null ? model.Tab_ContractBasic.Allowance2.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance3 = model.Tab_ContractBasic.Allowance3 != null ? model.Tab_ContractBasic.Allowance3.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance4 = model.Tab_ContractBasic.Allowance4 != null ? model.Tab_ContractBasic.Allowance4.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance5 = model.Tab_ContractBasic.Allowance5 != null ? model.Tab_ContractBasic.Allowance5.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance6 = model.Tab_ContractBasic.Allowance6 != null ? model.Tab_ContractBasic.Allowance6.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance7 = model.Tab_ContractBasic.Allowance7 != null ? model.Tab_ContractBasic.Allowance7.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance8 = model.Tab_ContractBasic.Allowance8 != null ? model.Tab_ContractBasic.Allowance8.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance9 = model.Tab_ContractBasic.Allowance9 != null ? model.Tab_ContractBasic.Allowance9.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance10 = model.Tab_ContractBasic.Allowance10 != null ? model.Tab_ContractBasic.Allowance10.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance11 = model.Tab_ContractBasic.Allowance11 != null ? model.Tab_ContractBasic.Allowance11.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance12 = model.Tab_ContractBasic.Allowance12 != null ? model.Tab_ContractBasic.Allowance12.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance13 = model.Tab_ContractBasic.Allowance13 != null ? model.Tab_ContractBasic.Allowance13.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance14 = model.Tab_ContractBasic.Allowance14 != null ? model.Tab_ContractBasic.Allowance14.ToString().Encrypt() : string.Empty;
                        model.Tab_ContractBasic.E_Allowance15 = model.Tab_ContractBasic.Allowance15 != null ? model.Tab_ContractBasic.Allowance15.ToString().Encrypt() : string.Empty;
                    }
                    foreach (var item in model.Tab_ContractBasic.GetType().GetProperties())
                    {
                        contractSave.SetPropertyValue(item.Name, model.Tab_ContractBasic.GetPropertyValue(item.Name));
                    }
                }
                // Son.Vo - 20151207 - 0061397
                if (model.Tab_ContractBasic.DateExtend == null && model.Tab_ContractBasic.ID != Guid.Empty)
                {
                    contractSave.DateExtend = model.Tab_ContractBasic.DateEnd;
                }
                else
                {
                    if (model.Tab_ContractBasic.DateEnd > model.Tab_ContractBasic.DateExtend)
                    {
                        contractSave.DateExtend = model.Tab_ContractBasic.DateEnd;
                    }
                }

                #region Son.Vo - 20160701 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duỵet
                var _Services = new Sys_AttOvertimePermitConfigServices();
                bool ischeck = _Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
                if (model.Tab_ContractBasic.UserProfileSingID != null && ischeck == true)
                {
                    contractSave.ProfileSingID = model.Tab_ContractBasic.UserProfileSingID;
                }
                #endregion
                //Son.Vo - 20160912 - 0073153 Trạng thái duyệt mới tạo mới lương cb + bhxh
                if (model.Tab_ContractBasic.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    var lstProfileID = new List<Guid>();
                    lstProfileID.Add(contractSave.ProfileID);
                    var lstContractTypeByProfile = ContractServices.GetLstContractTypeByProfileIDs(lstProfileID);
                    var lastContract = lstContractTypeByProfile.Where(s => s.ProfileID == contractSave.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart < contractSave.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (typeContractType != EnumDropDown.TypeContract.E_APPENDIX.ToString() && typeContractType != EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString() && typeContractType != EnumDropDown.TypeContract.E_CASUAL.ToString() && typeContractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                    {
                        //Son.Vo - 20170805 - 0085210 - khác những loại này thì tự + timescontract
                        if (lastContract != null && lastContract.TimesContract != null)
                        {
                            contractSave.TimesContract = lastContract.TimesContract != null ? lastContract.TimesContract + 1 : 1;
                        }
                        else
                        {
                            contractSave.TimesContract = 1;
                        }
                    }

                    var _ContractEntity = new Hre_ContractEntity();
                    contractSave.CopyData(_ContractEntity);
                    var _BasicSalaryServices = new Sal_BasicSalaryServices();
                    if (model.Tab_ContractBasic.IsCreateBasicSalary == true)
                    {
                        if (string.IsNullOrEmpty(model.Tab_ContractBasic.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(_ContractEntity.ProfileID, _ContractEntity.ID, _ContractEntity.DateStart, _ContractEntity.InsuranceAmount, _ContractEntity.ContractTypeID, _ContractEntity.IsCreateBasicSalary, _ContractEntity.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        _BasicSalaryServices.CreateBasicSalaryByContract(_ContractEntity, _ContractEntity.ProfileID, _ContractEntity.IsIncludeProbationTime);
                    }
                    if (model.Tab_ContractBasic.IsCreateInsuranceSalary == true)
                    {
                        if (string.IsNullOrEmpty(model.Tab_ContractBasic.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(_ContractEntity.ProfileID, _ContractEntity.ID, _ContractEntity.DateStart, _ContractEntity.InsuranceAmount, _ContractEntity.ContractTypeID, _ContractEntity.IsCreateBasicSalary, _ContractEntity.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        string messagref = _BasicSalaryServices.CreateInsuranceSalaryByContract(_ContractEntity, model.Tab_ContractBasic.ProfileID, model.Tab_ContractBasic.IsIncludeProbationTime);
                    }
                }
            }
            bool isadd = false;
            if (model.ID == Guid.Empty)
            {
                isadd = true;
                #region Son.Vo - 20170224 - 0075838: Điều chỉnh cơ chế sinh số HĐ khi tạo mới HĐ
                var lstGuid = new List<Guid>();
                lstGuid.Add(model.Tab_ContractBasic.ProfileID);
                var lstContractTypeByProfile = ContractServices.GetLstContractTypeByProfileIDs(lstGuid);
                var lstcontractTypeByPro = lstContractTypeByProfile.Where(s => s.ProfileID == contractSave.ProfileID).Select(s => s.ContractTypeID).Distinct().ToList();
                var contractEntityForContractno = model.CopyData<Hre_ContractEntity>();
                ContractServices.SetNewCodeContract(contractEntityForContractno, lstcontractTypeByPro);
                contractSave.ContractNo = contractEntityForContractno.ContractNo;
                #endregion
            }
            //Son.Vo - 20170605 - 0082889
            if (contractSave.ProfileID != null && contractSave.GradeAttendanceID != null)
            {
                string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(contractSave.ProfileID, contractSave.GradeAttendanceID.Value, contractSave.DateStart);
            }
            var modelRef = service.UpdateOrCreate<Hre_ContractEntity, Hre_ContractModel>(contractSave);
            contractID = modelRef.ID;
            model.ActionStatus = modelRef.ActionStatus;
            if (isadd == true)
            {
                var entity = modelRef.CopyData<Hre_ContractEntity>();
                string messageref = ContractServices.SaveContractDataByWorkHistory(entity);
            }
            model.ID = contractID;
            if (model.Tab_ContractBasic != null)
            {
                model.Tab_ContractBasic.ID = contractID;
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDataCompanyByID(string strcompanyID)
        {
            string status = string.Empty;
            var companyID = Guid.Empty;
            if (string.IsNullOrEmpty(strcompanyID) || strcompanyID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(strcompanyID))
            {
                companyID = Common.ConvertToGuid(strcompanyID);
            }
            var service = new ActionService(UserLogin, LanguageCode);
            var companyEntity = service.GetByIdUseStore<Cat_CompanyEntity>(companyID, ConstantSql.hrm_cat_sp_get_CompanyById, ref status);
            if (companyEntity != null)
            {
                return Json(companyEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetDataDelegateCompanyByID(string strDelegateCompanyID)
        {
            string status = string.Empty;
            var companyID = Guid.Empty;
            if (string.IsNullOrEmpty(strDelegateCompanyID) || strDelegateCompanyID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(strDelegateCompanyID))
            {
                companyID = Common.ConvertToGuid(strDelegateCompanyID);
            }
            var service = new ActionService(UserLogin, LanguageCode);
            var delegateCompany = service.GetByIdUseStore<Cat_DelegateCompanyEntity>(companyID, ConstantSql.hrm_cat_sp_get_DelegateCompanyById, ref status);
            if (delegateCompany != null)
            {
                return Json(delegateCompany, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetLstDelegateCompanyByCompanyID(string strcompanyID, DateTime? datestart)
        {
            string status = string.Empty;
            var companyID = Guid.Empty;
            if (strcompanyID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(strcompanyID))
            {
                companyID = Common.ConvertToGuid(strcompanyID);
            }
            var obj = new List<object>();
            obj.AddRange(new object[4]);
            obj[0] = companyID;
            obj[1] = datestart;
            obj[2] = 1;
            obj[3] = int.MaxValue - 1;
            var service = new ActionService(UserLogin, LanguageCode);
            var result = service.GetData<Cat_DelegateCompanyModel>(obj, ConstantSql.hrm_cat_sp_get_DelegateCompanybyCompanyID, ref status);
            if (result != null)
            {
                var defaultDelegate = result.Where(s => s.IsDefault == true).ToList();
                if (defaultDelegate != null && defaultDelegate.Count > 0)
                {
                    return Json(defaultDelegate, JsonRequestBehavior.AllowGet);
                }
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDelegateCompanyByCompanyID(string strcompanyID)
        {
            string status = string.Empty;
            var companyID = Guid.Empty;
            if (strcompanyID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(strcompanyID))
            {
                companyID = Common.ConvertToGuid(strcompanyID);
            }
            var obj = new List<object>();
            obj.AddRange(new object[4]);
            obj[0] = companyID;
            obj[1] = null;
            obj[2] = 1;
            obj[3] = int.MaxValue - 1;
            var service = new ActionService(UserLogin, LanguageCode);
            var result = service.GetData<Cat_DelegateCompanyModel>(obj, ConstantSql.hrm_cat_sp_get_DelegateCompanybyCompanyID, ref status);
            if (result != null)
            {
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetMultiLstDelegateCompanyByCompanyID(string text, Guid? companyID)
        {
            string status = string.Empty;
            if (companyID != null && companyID != Guid.Empty)
            {
                var obj = new List<object>();
                obj.AddRange(new object[4]);
                obj[0] = companyID;
                obj[1] = null;
                obj[2] = 1;
                obj[3] = int.MaxValue - 1;
                var service = new ActionService(UserLogin, LanguageCode);
                var result = service.GetData<Cat_DelegateCompanyModel>(obj, ConstantSql.hrm_cat_sp_get_DelegateCompanybyCompanyID, ref status);
                if (!string.IsNullOrEmpty(text))
                {
                    result = result.Where(s => s.ProfileName.Contains(text)).ToList();
                }
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return GetDataForControl<Cat_DelegateCompanyMultiModel, Cat_DelegateCompanyMultiModel>(text, ConstantSql.hrm_cat_sp_get_DelegateCompany_multi);
            }
        }

        [HttpPost]
        public ActionResult IsManageChangeSalaryReason()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_SAL_CONFIG_ISMANAGECHANGESALREASON);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - Duyệt đánh giá HĐ ko theo cấp or là cấp duyệt cuối cùng
        [HttpPost]
        public ActionResult ApprovedEvaContract(string selectedIds, bool notUseRankDetail, bool showSalary, bool isCreateBasicSal, bool isCreateInsuranceSal)
        {
            var ContractServices = new Hre_ContractServices();
            var profileServices = new Hre_ProfileServices();
            var ContractExtendServices = new Hre_ContractExtendServices();
            string message = string.Empty;
            string status = string.Empty;
            var lstIds = selectedIds.Split(',').Select(s => Guid.Parse(s)).ToList();
            var lstContract = ContractServices.GetContractDataByIDs(lstIds);

            var sysServices = new Sys_AttOvertimePermitConfigServices();
            bool isSendmailQuit = sysServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_SENDEMAIL_QUIT);
            bool isSendmailSignNextContract = sysServices.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSENDMAILSIGNNEXTCONTRACT);
            var lstIDsSendMail = new List<Guid>();

            #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
            var _ContractServices = new Hre_ContractServices();
            var services = new Sys_AttOvertimePermitConfigServices();
            var _MAXCASUAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
            var _MAXPROBATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
            var _MAXOFFICIAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
            var _MAXAPPENDIX = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
            var _MAXAPPRENTICESHIP = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
            var _MAXDURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
            var _MAXNODURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
            var isbyCompany = services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
            #endregion

            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workHistoryServices.GetListWorkingDataByLstProfileIDs(lstProfileIDs);
            foreach (var contract in lstContract)
            {
                if (contract.ContractResult == HRM.Infrastructure.Utilities.EnumDropDown.ResultContract.PASS.ToString())
                {
                    if (contract.TypeOfPass == HRM.Infrastructure.Utilities.EnumDropDown.TypeOfPass.E_SIGNED_NEXTCONTRACT.ToString())
                    {
                        //Son.Vo - 20151221 - 0062055 Thay đổi logic lấy RankDetailForNextContract
                        //Son.Vo - 20150625 - 0050448 - theo yêu cầu Thế Anh - nếu bậc lương kế tiếp null thì gắn bậc lương kế = bậc lương
                        //if (contract.RankDetailForNextContract == null)
                        //{
                        //    contract.RankDetailForNextContract = contract.RankRateID;
                        //}
                        // validate cuối cùng theo task 0052230
                        //if (contract.RankDetailForNextContract == null)
                        //{
                        //    message = ConstantDisplay.HRM_HR_Profile_RankDetailForNextContractRequiredInformation.ToString();
                        //    return Json(message);
                        //}
                        if (contract.DateEnd == null)
                        {
                            message = ConstantDisplay.HRM_HR_Profile_DateEndRequiredInformation.ToString();
                            return Json(message);
                        }
                        if (contract.DateEndNextContract == null && contract.TypeNextContract != HRM.Infrastructure.Utilities.EnumDropDown.TypeContract.E_NODURATION.ToString())
                        {
                            message = ConstantDisplay.HRM_HR_Profile_LackOfRequiredInformation.ToString();
                            return Json(message);
                        }
                        if (contract.NextContractTypeID == null)
                        {
                            message = ConstantMessages.WarningContractHaveNotNextContract.ToString();
                            return Json(message);
                        }

                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        if (contract.NextContractTypeID != null)
                        {
                            string messageref = _ContractServices.ValidateMaxTimeSignContract(contract.ProfileID, contract.NextContractTypeID.Value, _MAXCASUAL,
                                                  _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, contract.CompanyID);
                            if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                            {
                                return Json(messageref);
                            }
                        }
                        #endregion

                        lstIDsSendMail.Add(contract.ID);
                        message = ContractServices.ApprovedEvaContractByLevel(contract.ID, Guid.Parse(UserID));
                        message = profileServices.SaveContractAndNextSalaryApprovedEvaluation(contract, notUseRankDetail, showSalary, isCreateBasicSal, isCreateInsuranceSal, lstWorkhistory);

                    }
                    else if (contract.TypeOfPass == HRM.Infrastructure.Utilities.EnumDropDown.TypeOfPass.E_SIGNED_APPENDIXCONTRACT.ToString())
                    {
                        var entity = new Hre_ContractExtendEntity();
                        entity.ContractID = contract.ID;
                        if (contract.DateExtend != null)
                        {
                            entity.DateStart = contract.DateExtend.Value.AddDays(1);
                        }
                        else
                        {
                            entity.DateStart = contract.DateEnd != null ? contract.DateEnd.Value.AddDays(1) : DateTime.Now;
                        }
                        entity.DateEnd = contract.DateEndNextContract;
                        entity.AppendixTypeNextID = contract.AppendixTypeNextID;
                        //Son.Vo - 20160516 - 0067271
                        entity.TypeAppendix = EnumDropDown.TypeAppendix.E_EXTEND.ToString();
                        message = ContractExtendServices.Add(entity);
                        // Son.Vo - theo task 0058429
                        contract.StatusEvaluation = null;
                        //contract.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString();
                        contract.DateExtend = contract.DateEndNextContract;
                        lstIDsSendMail.Add(contract.ID);
                        message = ContractServices.Edit(contract);
                    }
                }
                else
                {
                    #region Son.Vo - 20160726 - 0069714 fix trường hợp double click nút ok
                    if (contract.StatusEvaluation == HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        continue;
                    }
                    #endregion
                    // Son.Vo - 20150630 - 0049458
                    profileServices.SaveStopWorkingOfContract(contract);
                    contract.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString();
                    //Son.Vo - 20170717 - cập nhật theo task 0085219
                    contract.TerminateDate = contract.DateExtend != null ? contract.DateExtend : contract.DateEnd;
                    message = ContractServices.Edit(contract);
                }

                #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                if (contract.PositionID != null)
                {
                    string messageref = ContractServices.UpdateHeadUserWhenApprovedContract(contract.ProfileID, contract.PositionID.Value);
                }
                #endregion
            }

            if (isSendmailQuit)
            {
                Task task = Task.Run(() => ContractServices.ProcessSendmailApprovedContract(lstIds, LanguageCode));
            }
            if (isSendmailSignNextContract == true && lstIDsSendMail.Count > 0)
            {
                var ispass = ContractServices.SendMailWhenSignNextContract(lstIDsSendMail, LanguageCode);
            }

            return Json(message);
        }

        //Son.Vo - Duyệt đánh giá HĐ ko theo cấp and ko là cấp cuối cùng
        public ActionResult ApprovedEvaContractByLevel(string contractID)
        {
            if (!string.IsNullOrEmpty(contractID))
            {
                var ContractServices = new Hre_ContractServices();
                Guid ID = Guid.Parse(contractID);
                string message = ContractServices.ApprovedEvaContractByLevel(ID, Guid.Parse(UserID));
                return Json(message);
            }
            return Json(false);
        }
        //Son.Vo - 20161001 - 0073311 - kiểm tra xem có cấu hình duyệt đánh giá HĐ hay không
        [HttpPost]
        public ActionResult IsApprovedEvacontractByConfig()
        {
            var _ContractServices = new Hre_ContractServices();
            var isConfig = _ContractServices.CheckConfigApprovedEvaContract();
            if (isConfig != null)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20161001 - 0073311 - kiểm tra xem có phải là cấp duyệt cuối cùng hay không
        [HttpPost]
        public ActionResult IsLastApprovedEvaContract(string contractID)
        {
            if (!string.IsNullOrEmpty(contractID))
            {
                var ID = Guid.Parse(contractID);
                var _ContractServices = new Hre_ContractServices();
                bool isLast = _ContractServices.CheckFinalApproved(ID, Guid.Parse(UserID));
                if (isLast == true)
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20161001 - 0073311 - kiểm tra xem có phải là cấp duyệt cuối cùng hay không
        [HttpPost]
        public ActionResult IsCutOrOutAll(string strcontractID)
        {
            if (!string.IsNullOrEmpty(strcontractID))
            {
                var lstIDs = strcontractID.Split(',').Select(s => Guid.Parse(s)).ToList();
                var _ContractServices = new Hre_ContractServices();
                bool isLast = _ContractServices.IsCutOrOutAll(lstIDs);
                if (isLast == true)
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public string ApprovedContract(string lstContractID)
        {
            string message = string.Empty;
            if (!string.IsNullOrEmpty(lstContractID))
            {
                var _ContractServices = new Hre_ContractServices();
                var lstContractIDs = lstContractID.Split(',').Select(x => Guid.Parse(x)).ToList();
                message = _ContractServices.ActionApprovedContract(lstContractIDs, Guid.Parse(UserID));
            }
            return message;
        }

        public string RejectContract(string lstContractID)
        {
            string message = string.Empty;
            if (!string.IsNullOrEmpty(lstContractID))
            {
                var _ContractServices = new Hre_ContractServices();
                var lstContractIDs = lstContractID.Split(',').Select(x => Guid.Parse(x)).ToList();
                message = _ContractServices.ActionRejectContract(lstContractIDs, Guid.Parse(UserID));
            }
            return message;
        }

        public ActionResult GetUserApproveWithType(string userSubmit, string profileID, string Type)
        {
            if (!string.IsNullOrEmpty(userSubmit) || (!string.IsNullOrEmpty(profileID) && profileID != Guid.Empty.ToString()))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _ContractServices = new Hre_ContractServices();
                var entity = _ContractServices.GetHighSuppervisorApprove(profileID, userSubmit, UserID, UserLogin, Type);
                return Json(entity);
            }
            return Json(null);
        }

        //Son.Vo - 230160824 - 0072239
        [HttpPost]
        public ActionResult IsShowOrgEffective()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _ISSHOWORGEFFECTIVE = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWORGEFFECTIVE);
            if (_ISSHOWORGEFFECTIVE == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);

            }
        }

        //Son.Vo - 20160607 - 0068069
        [HttpPost]
        public ActionResult GetContractMLCList([DataSourceRequest] DataSourceRequest request, Hre_ContractMLCSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var action = new ActionService(UserLogin);
            var result = new List<Hre_ContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (model.WorkPlaceID != null)
                {
                    model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
                }
                if (model.ClassRateID != null)
                {
                    model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
                }
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ContractMLCSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractMLCList, ref status);
            }

            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractModel(),
                    FileName = "Hre_Contract",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);
        }

        //Son.Vo - 20160601 - 0068076 - xuất word ở màn hình đánh giá hđ chờ duyệt
        public ActionResult ExportContractWaitAppByTemplate(List<Guid> selectedIds, string valueFields)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var _ProfileServices = new Hre_ProfileServices();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstContract = _actionService.GetData<Hre_ContractEntity>(strIDs, ConstantSql.hrm_hr_sp_get_DataExport_ContractWaitApp, ref status);
            if (lstContract == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);

            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (contract.ExportID.HasValue)
                    template = _actionService.GetData<Cat_ExportEntity>(Common.DotNetToOracle(contract.ExportID.Value.ToString()), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                double total = 0;
                if (contract.NextSalary != null)
                {
                    total += contract.NextSalary.Value;
                }
                if (contract.NextAllowance1 != null)
                {
                    total += contract.NextAllowance1.Value;
                }
                if (contract.NextAllowance2 != null)
                {
                    total += contract.NextAllowance2.Value;
                }
                if (contract.NextAllowance3 != null)
                {
                    total += contract.NextAllowance3.Value;
                }
                if (contract.NextAllowance4 != null)
                {
                    total += contract.NextAllowance4.Value;
                }
                if (contract.NextAllowance5 != null)
                {
                    total += contract.NextAllowance5.Value;
                }

                contract.TotalNextSalary = String.Format("{0:0,0}", total);
                if (contract.DateExtend != null)
                {
                    contract.NextContractDateStartFormat = contract.DateExtend.Value.AddDays(1).ToString("dd/MM/yyyy");
                }
                else if (contract.DateExtend == null && contract.DateEnd != null)
                {
                    contract.NextContractDateStartFormat = contract.DateEnd.Value.AddDays(1).ToString("dd/MM/yyyy");
                }
                if (contract.DateEndNextContract != null)
                {
                    contract.DateEndNextContractFormat = contract.DateEndNextContract.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (contract.IDDateOfIssue != null)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                //Quyen.Quach Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                #region Son.Vo - 20160629 - 0069169 - sửa lại tên enum
                contract.Salary = contract.NextSalary;
                contract.ContractTypeName = contract.NextContractTypeName;
                contract.DateStartFormat = contract.NextContractDateStartFormat;
                contract.DateEndFormat = contract.DateEndNextContractFormat;
                contract.Allowance1 = contract.NextAllowance1;
                contract.Allowance2 = contract.NextAllowance2;
                contract.Allowance3 = contract.NextAllowance3;
                contract.Allowance4 = contract.NextAllowance4;
                contract.Allowance5 = contract.NextAllowance5;
                contract.TotalSalary = contract.TotalNextSalary;
                contract.ProfileSingName = contract.NextProfileSingName;
                #endregion

                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                i++;

                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                //var lstcontract = new List<Hre_ContractEntity>();
                //lstcontract.Add(contract);

                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);

                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20160519 - 0067329 - validate khi cấu hình cam kết thời gian đào tạo
        public string ValidateEvaContractTrain(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
                bool _WARPROQUITNOTCOMTIME = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_TRA_CONFIG_TRAINEEREGISTER_WARPROQUITNOTCOMTIME);
                string messageValidate = null;
                if (_WARPROQUITNOTCOMTIME == true)
                {
                    var _TraineeServices = new Tra_TraineeServices();
                    var _ContractServices = new Hre_ContractServices();
                    var lstIDs = selectedIds.Split(',').Select(s => Guid.Parse(s)).ToList();
                    var lstContract = _ContractServices.GetContractDataByIDs(lstIDs);
                    foreach (var item in lstContract)
                    {
                        if (item.DateExtend != null)
                        {
                            string message = _TraineeServices.ValidateEvaContractTrain(item.ProfileID, item.DateExtend.Value);
                            if (message != null)
                            {
                                messageValidate = message.TranslateString();
                            }
                            else
                            {
                                return null;
                            }
                        }
                        else if (item.DateEnd != null)
                        {
                            string message = _TraineeServices.ValidateEvaContractTrain(item.ProfileID, item.DateEnd.Value);
                            if (message != null)
                            {
                                messageValidate = message.TranslateString();
                            }
                            else
                            {
                                return null;
                            }
                        }
                        else
                        {
                            return null;
                        }
                        return messageValidate;
                    }
                }
                else
                {
                    return null;
                }
                return messageValidate;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        // Son.Vo - 20160409 - 0065837
        public ActionResult IsShowSalaryAndAllowanceWhenEvaluateContract()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _IsShow = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWSALARYANDALLOWANCEWHENEVALUATECONTRACT);
            if (_IsShow == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public string ValidateContractExtendInfo([DataSourceRequest] DataSourceRequest request, Hre_ContractModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract_ContractExtendInfo", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult AddExtendContract([Bind]Hre_ContractModel model)
        {
            string message = string.Empty;
            var contractServices = new Hre_ContractServices();
            message = contractServices.AddExtendContract(model.selectedIds, model.AnnexCode1, model.DateStart, model.DateEnd);
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ExportEvaluationContractWaitingApprovedSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ContractEntity, Hre_ContractModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_EvaluationContractWaitingApprovedByIds);
        }

        [HttpPost]
        public ActionResult ExportEvaluationContractWaitingApprovedList([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractWaitingApprovedSearchModel model)
        {
            return ExportAllAndReturn<Hre_ContractEntity, Hre_ContractModel, Hre_EvaluationContractWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_EvaluationContractWaitingApprove);
        }

        public ActionResult ExportSelectedEvaluationContractWaitingApprovedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            int _page = request.Page;
            var service = new Hre_ReportServices();
            var ActionService = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            string status = string.Empty;
            var baseService = new BaseService();

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart == null ? DateTime.Now : model.DateStart };
                HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd == null ? DateTime.Now : model.DateEnd };
                List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = contractServices.GetDataContractSchema(),
                    FileName = "Hre_ContractEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_ContractEntity>();
            if (!model.IsCreateTemplate)
            {
                var objs = new List<object>();
                string strIDs = string.Empty;
                result = baseService.GetData<Hre_ContractEntity>(model.strContractID, ConstantSql.hrm_hr_sp_get_EvaluationContractWaitingApprovedByIds, UserLogin, ref status);
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            if (model.ExportID != Guid.Empty)
            {
                DataTable tableData = contractServices.GetDataContract(result, UserLogin);
                HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart == null ? DateTime.Now : model.DateStart };
                HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd == null ? DateTime.Now : model.DateEnd };
                List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
                var fullPath = ExportService.Export(model.ExportID, tableData, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);
        }

        [HttpPost]
        public ActionResult GetEvaluationContractWaitingList([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_ContractModel, Hre_ContractEntity, Hre_EvaluationContractWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_EvaluationContractWaitingApprove);
        }

        [HttpPost]
        public ActionResult ExportEvaluationContractWaitingList([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            int _page = request.Page;
            var service = new Hre_ReportServices();
            var ActionService = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            string status = string.Empty;

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart == null ? DateTime.Now : model.DateStart };
                HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd == null ? DateTime.Now : model.DateEnd };
                List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = contractServices.GetDataContractSchema(),
                    FileName = "Hre_ContractEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_ContractModel>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_EvaluationContractWaitingApprovedSearchModel>(request, model,
                ConstantSql.hrm_hr_sp_get_EvaluationContractWaitingApprove, ref status);
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            if (model.ExportID != Guid.Empty)
            {
                var lstContractEntity = result.Translate<Hre_ContractEntity>();
                DataTable tableData = contractServices.GetDataContract(lstContractEntity, UserLogin);
                HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart == null ? DateTime.Now : model.DateStart };
                HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd == null ? DateTime.Now : model.DateEnd };
                List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
                var fullPath = ExportService.Export(model.ExportID, tableData, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);
        }

        public ActionResult GetContractWaitingList([DataSourceRequest] DataSourceRequest request, Hre_ContractWaitingSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.userLoginID = Guid.Parse(UserID);
            }

            return GetListDataAndReturn<Hre_ContractModel, Hre_ContractEntity, Hre_ContractWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractWaiting);
        }

        public ActionResult ExportAllContractWaitingList([DataSourceRequest] DataSourceRequest request, Hre_ContractWaitingSearchModel model)
        {
            var contractServices = new Hre_ContractServices();
            string status = string.Empty;
            var result = new List<Hre_ContractEntity>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ContractEntity, Hre_ContractModel, Hre_ContractWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractWaiting, ref status);
            }
            DataTable tableData = contractServices.GetDataContract(result, UserLogin);
            var isDataTable = false;

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = tableData,
                    FileName = "Hre_ContractEntity",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, tableData, null, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            var listModel = new List<Hre_ContractModel>();
            if (result != null)
            {
                request.Page = 1;
                foreach (var item in result)
                {
                    var newModle = (Hre_ContractModel)typeof(Hre_ContractModel).CreateInstance();
                    foreach (var property in item.GetType().GetProperties())
                    {
                        newModle.SetPropertyValue(property.Name, item.GetPropertyValue(property.Name));
                    }
                    listModel.Add(newModle);
                }
                var dataSourceResult = listModel.ToDataSourceResult(request);
                if (listModel.FirstOrDefault().GetPropertyValue("TotalRow") != null)
                {
                    dataSourceResult.Total = listModel.Count() <= 0 ? 0 : (int)listModel.FirstOrDefault().GetPropertyValue("TotalRow");
                }
                return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
            }
            return Json(result.ToDataSourceResult(request));

        }



        public ActionResult ExportAppendixContractByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var _AppendixContractServices = new Hre_AppendixContractServices();
            var ActionService = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstAppendixContract = ActionService.GetData<Hre_AppendixContractEntity>(objs, ConstantSql.hrm_hr_sp_get_AppendixContractByListId, ref status);
            if (lstAppendixContract == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_AppendixContract" + suffix;
            if (lstAppendixContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;

            var lstOrgStructureIDs = lstAppendixContract.Where(s => s.OrgStructureID != null).Select(s => s.OrgStructureID.Value).Distinct().ToList();
            var _OrgStructureServices = new Cat_OrgStructureServices();
            var orgstructure = _OrgStructureServices.GetLstOrgByIDs(lstOrgStructureIDs);

            #region Phụ lục hợp đồng
            foreach (var objAppendixContract in lstAppendixContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;

                if (objAppendixContract.ExportID.HasValue)
                    template = ActionService.GetData<Cat_ExportEntity>(Common.DotNetToOracle(objAppendixContract.ExportID.Value.ToString()), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                count++;
                ActionService services = new ActionService(UserLogin);
                List<object> listObj = new List<object>();
                listObj.Add(objAppendixContract.ContractID);
                var ResultEntity = services.GetData<Hre_AppendixContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_AppendixContractByIdContractID, ref status);
                if (ResultEntity != null && ResultEntity.Count > 0)
                {
                    if (ResultEntity.Count > 2)
                    {
                        ResultEntity = ResultEntity.Where(s => s.DateSignedAppendixContract < objAppendixContract.DateSignedAppendixContract).ToList();
                        ResultEntity = ResultEntity.OrderByDescending(s => s.DateSignedAppendixContract).ToList();
                        if (ResultEntity.Count > 0)
                        {
                            objAppendixContract.CurrentSalary = ResultEntity[0].Salary;
                            objAppendixContract.ContractNo = ResultEntity[0].ContractNo;
                            objAppendixContract.DateStartContract = ResultEntity[0].DateStart;
                            objAppendixContract.CurrentAllowance1 = ResultEntity[0].Allowance1;
                            objAppendixContract.CurrentAllowance2 = ResultEntity[0].Allowance2;
                            objAppendixContract.CurrentAllowance3 = ResultEntity[0].Allowance3;
                            objAppendixContract.CurrentAllowance4 = ResultEntity[0].Allowance4;
                            objAppendixContract.CurrentAllowance5 = ResultEntity[0].Allowance5;
                            objAppendixContract.CurrentAllowance6 = ResultEntity[0].Allowance6;
                        }
                    }
                    else
                    {
                        var ResultProfile = services.GetByIdUseStore<Hre_ContractEntity>(objAppendixContract.ContractID, ConstantSql.hrm_hr_sp_get_ContractById, ref status);
                        if (ResultProfile != null)
                        {
                            objAppendixContract.CurrentSalary = ResultProfile.Salary;
                            objAppendixContract.ContractNo = ResultProfile.ContractNo;
                            objAppendixContract.DateStartContract = ResultProfile.DateStart;
                            objAppendixContract.CurrentAllowance1 = ResultProfile.Allowance1;
                            objAppendixContract.CurrentAllowance2 = ResultProfile.Allowance2;
                            objAppendixContract.CurrentAllowance3 = ResultProfile.Allowance3;
                            objAppendixContract.CurrentAllowance4 = ResultProfile.Allowance4;
                            objAppendixContract.CurrentAllowance5 = ResultProfile.Allowance5;
                            objAppendixContract.CurrentAllowance6 = ResultProfile.Allowance6;
                        }
                    }
                }

                #region[15/01/2016][To.Le][	New Func][0062146] Lấy báo cáo cho dự án KVP lấy phụ cấp lương cơ bảng từ bảng phụ lục hợp đồng.
                if (objAppendixContract.Salary != null)
                {
                    objAppendixContract.SalaryFormat = String.Format("{0:0,0}", objAppendixContract.Salary);
                }
                else
                {
                    objAppendixContract.Salary = 0;
                }
                if (objAppendixContract.Allowance1 != null)
                {
                    objAppendixContract.AppendixAllowance1 = String.Format("{0:0,0}", objAppendixContract.Allowance1);
                }
                else
                {
                    objAppendixContract.Allowance1 = 0;
                }
                if (objAppendixContract.Allowance2 != null)
                {
                    objAppendixContract.AppendixAllowance2 = String.Format("0:0,0", objAppendixContract.Allowance2);
                }
                else
                {
                    objAppendixContract.Allowance2 = 0;
                }
                if (objAppendixContract.Allowance3 != null)
                {
                    objAppendixContract.AppendixAllowance3 = String.Format("{0:0,0}", objAppendixContract.Allowance3);
                }
                else
                {
                    objAppendixContract.Allowance3 = 0;
                }
                if (objAppendixContract.Allowance4 != null)
                {
                    objAppendixContract.AppendixAllowance4 = String.Format("0:0,0", objAppendixContract.Allowance4);
                }
                else
                {
                    objAppendixContract.Allowance4 = 0;
                }
                if (objAppendixContract.Allowance5 != null)
                {
                    objAppendixContract.AppendixAllowance5 = String.Format("{0:0,0}", objAppendixContract.Allowance5);
                }
                else
                {
                    objAppendixContract.Allowance5 = 0;
                }
                if (objAppendixContract.Allowance6 != null)
                {
                    objAppendixContract.AppendixAllowance6 = String.Format("{0:0,0}", objAppendixContract.Allowance6);
                }
                else
                {
                    objAppendixContract.Allowance6 = 0;
                }
                if (objAppendixContract.Allowance7 != null)
                {
                    objAppendixContract.AppendixAllowance7 = String.Format("{0:0,0}", objAppendixContract.Allowance7);
                }
                else
                {
                    objAppendixContract.Allowance7 = 0;
                }
                if (objAppendixContract.Allowance8 != null)
                {
                    objAppendixContract.AppendixAllowance8 = String.Format("{0:0,0}", objAppendixContract.Allowance8);
                }
                else
                {
                    objAppendixContract.Allowance8 = 0;
                }
                objAppendixContract.SumAllowanceFormat = String.Format("{0:0,0}", (objAppendixContract.Salary.Value + objAppendixContract.Allowance1.Value + objAppendixContract.Allowance2.Value + +objAppendixContract.Allowance3.Value + objAppendixContract.Allowance4.Value + objAppendixContract.Allowance5.Value + objAppendixContract.Allowance6.Value + objAppendixContract.Allowance7.Value + objAppendixContract.Allowance8.Value));
                #endregion


                if (objAppendixContract.DateSignedAppendixContract.HasValue)
                {
                    objAppendixContract.DateSignedAppendixContractFormat = objAppendixContract.DateSignedAppendixContract.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.DateSignedAppendixContract_Day = objAppendixContract.DateSignedAppendixContract.Value.Day.ToString();
                    objAppendixContract.DateSignedAppendixContract_Month = objAppendixContract.DateSignedAppendixContract.Value.Month.ToString();
                    objAppendixContract.DateSignedAppendixContract_Year = objAppendixContract.DateSignedAppendixContract.Value.Year.ToString();
                    objAppendixContract.PLDateSign = objAppendixContract.DateSignedAppendixContract.Value.ToString("dd-MMM-yyyy");
                }

                if (objAppendixContract.DateofEffect.HasValue)
                {
                    objAppendixContract.DateofEffectFormat = objAppendixContract.DateofEffect.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.DateofEffect_Day = objAppendixContract.DateofEffect.Value.Day.ToString();
                    objAppendixContract.DateofEffect_Month = objAppendixContract.DateofEffect.Value.Month.ToString();
                    objAppendixContract.DateofEffect_Year = objAppendixContract.DateofEffect.Value.Year.ToString();
                    objAppendixContract.PLDateStart = objAppendixContract.DateofEffect.Value.ToString("dd-MMM-yyyy");
                }

                if (objAppendixContract.DateEndAppendixContract.HasValue)
                {
                    objAppendixContract.DateEndAppendixContractFormat = objAppendixContract.DateEndAppendixContract.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.DateEndAppendixContract_Day = objAppendixContract.DateEndAppendixContract.Value.Day.ToString();
                    objAppendixContract.DateEndAppendixContract_Month = objAppendixContract.DateEndAppendixContract.Value.Month.ToString();
                    objAppendixContract.DateEndAppendixContract_Year = objAppendixContract.DateEndAppendixContract.Value.Year.ToString();
                    objAppendixContract.PLDateEnd = objAppendixContract.DateEndAppendixContract.Value.ToString("dd-MMM-yyyy");
                }

                if (objAppendixContract.DateOfBirth.HasValue)
                {
                    objAppendixContract.DayOfBirthFormat = objAppendixContract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.DayOfBirth_Day = objAppendixContract.DateOfBirth.Value.Day.ToString();
                    objAppendixContract.DayOfBirth_Month = objAppendixContract.DateOfBirth.Value.Month.ToString();
                    objAppendixContract.DayOfBirth_Year = objAppendixContract.DateOfBirth.Value.Year.ToString();
                }
                if (objAppendixContract.ProfileSingDateOfBirth.HasValue)
                {
                    objAppendixContract.ProfileSingDateOfBirthFormat = objAppendixContract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.ProfileSingDateOfBirth_Day = objAppendixContract.ProfileSingDateOfBirth.Value.Day.ToString();
                    objAppendixContract.ProfileSingDateOfBirth_Month = objAppendixContract.ProfileSingDateOfBirth.Value.Month.ToString();
                    objAppendixContract.ProfileSingDateOfBirth_Year = objAppendixContract.ProfileSingDateOfBirth.Value.Year.ToString();
                }
                if (objAppendixContract.ProfileSingIDDateOfIssue.HasValue)
                {
                    objAppendixContract.ProfileSingIDDateOfIssueFormat = objAppendixContract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.ProfileSingIDDateOfIssue_Day = objAppendixContract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    objAppendixContract.ProfileSingIDDateOfIssue_Month = objAppendixContract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    objAppendixContract.ProfileSingIDDateOfIssue_Year = objAppendixContract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                }
                if (objAppendixContract.IDDateOfIssue.HasValue)
                {
                    objAppendixContract.IDDateOfIssueFormat = objAppendixContract.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.IDDateOfIssue_Day = objAppendixContract.IDDateOfIssue.Value.Day.ToString();
                    objAppendixContract.IDDateOfIssue_Month = objAppendixContract.IDDateOfIssue.Value.Month.ToString();
                    objAppendixContract.IDDateOfIssue_Year = objAppendixContract.IDDateOfIssue.Value.Year.ToString();
                }

                if (objAppendixContract.DateSign.HasValue)
                {
                    objAppendixContract.HDDateSign = objAppendixContract.DateSign.Value.ToString("dd-MMM-yyyy");
                }

                if (objAppendixContract.DateStart.HasValue)
                {
                    objAppendixContract.HDStarDate = objAppendixContract.DateStart.Value.ToString("dd-MMM-yyyy");
                }
                if (objAppendixContract.DateSigned.HasValue)
                {
                    objAppendixContract.DateSignedFormat = objAppendixContract.DateSigned.Value.ToString("dd/MM/yyyy");
                    objAppendixContract.DateSigned_Day = objAppendixContract.DateSigned.Value.Day.ToString();
                    objAppendixContract.DateSigned_Month = objAppendixContract.DateSigned.Value.Month.ToString();
                    objAppendixContract.DateSigned_Year = objAppendixContract.DateSigned.Value.Year.ToString();
                }
                objAppendixContract.ContractSalaryFormat = String.Format("{0:0,0}", objAppendixContract.ContractSalary);
                objAppendixContract.Allowance1Format = String.Format("{0:0,0}", objAppendixContract.Allowance1);

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (objAppendixContract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objAppendixContract.GraveName = "Ms.";
                    objAppendixContract.NameByGerder = "Chị ";
                    objAppendixContract.GraveNames = "Bà";
                    objAppendixContract.GraveNameEN = "Mrs.";

                }
                else if (objAppendixContract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objAppendixContract.GraveName = "Mr.";
                    objAppendixContract.NameByGerder = "Anh ";
                    objAppendixContract.GraveNames = "Ông";
                    objAppendixContract.GraveNameEN = "Mr.";
                }
                else if (objAppendixContract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objAppendixContract.GraveName = "Mr/Mrs ";
                    objAppendixContract.NameByGerder = "Anh/Chị";
                    objAppendixContract.GraveNames = "Ông/Bà";
                    objAppendixContract.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (objAppendixContract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objAppendixContract.ChairmanGraveName1 = "Chị ";
                    objAppendixContract.ChairmanGraveNameEN1 = "Ms.";
                    objAppendixContract.ChairmanGraveName = "Bà";
                    objAppendixContract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (objAppendixContract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objAppendixContract.ChairmanGraveName1 = "Anh ";
                    objAppendixContract.ChairmanGraveNameEN1 = "Mr.";
                    objAppendixContract.ChairmanGraveName = "Ông";
                    objAppendixContract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                if (objAppendixContract.OrgStructureID != null)
                {
                    try
                    {
                        var _org = orgstructure.Where(s => s.ID == objAppendixContract.OrgStructureID).FirstOrDefault();
                        if (_org != null)
                        {
                            while (_org.OrgStructureTypeCode != OrgUnit.E_COMPANY.ToString() && _org.ParentID != null && _org.ParentID != Guid.Empty)
                            {
                                var parent = orgstructure.Where(s => s.ID == _org.ParentID).FirstOrDefault();
                                if (parent != null)
                                {
                                    _org = parent.CopyData<Cat_OrgStructureEntity>();
                                }
                                else
                                {
                                    _org.ParentID = Guid.Empty;
                                }
                            }
                            if (_org.OrgStructureTypeName == OrgUnit.E_COMPANY.ToString())
                            {
                                objAppendixContract.BillingAddress = _org.BillingAddress;
                            }
                            else
                            {
                                objAppendixContract.BillingAddress = string.Empty;
                            }
                        }
                    }
                    catch
                    {
                    }
                }
                if (objAppendixContract.NoPrint == null)
                {
                    objAppendixContract.NoPrint = 1;
                }
                else
                {
                    objAppendixContract.NoPrint++;
                }
                _AppendixContractServices.Edit(objAppendixContract);
                objAppendixContract.PLSalary = String.Format("{0:0,0}", objAppendixContract.Salary);

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objAppendixContract.ProfileID != null ? (Guid)objAppendixContract.ProfileID : Guid.Empty, i, objAppendixContract);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                if (count == lstAppendixContract.Count)
                {
                    ExportService.ExportWord(outputPath, templatepath, lstAppendixContract);
                }
            }
            #endregion
            if (lstAppendixContract.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult ApproveProfileTemporarilyCutContract(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.ApproveTempCutContract(selectedIds);
            return Json(message);
        }

        #region PLHD Đến Hạn
        [HttpPost]
        public ActionResult GetAppendixExpiryContractFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYAPPENDDIXEXPRIDAYFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONTRACT_ALERT_DAYAPPENDDIXEXPRIDAYFROM);
            if (_DAYAPPENDDIXEXPRIDAYFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYAPPENDDIXEXPRIDAYFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetAppendixExpiryContractToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYAPPENDDIXEXPRIDAYTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONTRACT_ALERT_DAYAPPENDDIXEXPRIDAYTO);
            if (_DAYAPPENDDIXEXPRIDAYTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYAPPENDDIXEXPRIDAYTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }
        #endregion

        [HttpPost]
        public ActionResult GetLstRankByRankDetail(Guid? RankDetailID)
        {
            if (RankDetailID != Guid.Empty && RankDetailID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var rankdetail = actionService.GetData<Cat_SalaryRankEntity>(Common.DotNetToOracle(RankDetailID.ToString()), ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status).Select(s => s.SalaryClassID).ToList();
                if (rankdetail != null)
                {
                    var lstObjRank = new List<object>();
                    lstObjRank.Add(null);
                    lstObjRank.Add(1);
                    lstObjRank.Add(int.MaxValue - 1);
                    var lstSalaryClass = actionService.GetData<Cat_SalaryClassEntity>(lstObjRank, ConstantSql.hrm_cat_sp_get_SalaryClass, ref status).ToList();

                    var lstRankByRankDetail = lstSalaryClass.Where(s => rankdetail.Contains(s.ID)).ToList();
                    return Json(lstRankByRankDetail, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }

            }

            return null;
        }

        public ActionResult GetAppendixContractByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(profileID.ToString()));
            var result = actionService.GetData<Hre_AppendixContractEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_AppendixContractByProfileID, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetContractExtendByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(profileID.ToString()));
            var result = actionService.GetData<Hre_ContractExtendViewEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ContractExtendByProfileID, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetLstJobTitleByOrgStructureID(Guid orgID, string ShopFilter)
        {
            string status = string.Empty;


            var actionService = new ActionService(UserLogin);
            var lstObjJobTitle = new List<object>();
            lstObjJobTitle.Add(null);
            lstObjJobTitle.Add(null);
            lstObjJobTitle.Add(null);
            lstObjJobTitle.Add(1);
            lstObjJobTitle.Add(int.MaxValue - 1);
            var lstAlljobtitle = actionService.GetData<Cat_JobTitleEntity>(lstObjJobTitle, ConstantSql.hrm_cat_sp_get_JobTitle, ref status).ToList();
            if (orgID != Guid.Empty)
            {
                if (lstAlljobtitle != null)
                {
                    var lstAlljobtitleByOrg = lstAlljobtitle.Where(s => s.OrgStructureID == orgID).ToList();

                    return Json(lstAlljobtitleByOrg, JsonRequestBehavior.AllowGet);

                    //  return Json(lstAlljobtitle,JsonRequestBehavior.AllowGet);
                }
            }

            return null;
        }

        [HttpPost]
        public ActionResult GetLstCostCentreByOrgStructureID(Guid orgID, string CostcenterFillter)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var lstObjOrg = new List<object>();
            lstObjOrg.Add(null);
            lstObjOrg.Add(null);
            lstObjOrg.Add(null);
            lstObjOrg.Add(1);
            lstObjOrg.Add(int.MaxValue - 1);
            var lstAllOgr = actionService.GetData<Cat_OrgStructureEntity>(orgID, ConstantSql.hrm_cat_sp_get_OrgStructureById, ref status).ToList();

            var lstObjCostCentre = new List<object>();
            lstObjCostCentre.Add(null);
            lstObjCostCentre.Add(null);
            lstObjCostCentre.Add(1);
            lstObjCostCentre.Add(int.MaxValue - 1);
            var lstAllCostCentre = actionService.GetData<Cat_CostCentreEntity>(lstObjCostCentre, ConstantSql.hrm_cat_sp_get_CostCentre, ref status).ToList();
            var org = lstAllOgr.Where(s => s.ID == orgID).FirstOrDefault();
            if (org != null)
            {
                var cost = lstAllCostCentre.Where(s => s.ID == org.GroupCostCentreID).FirstOrDefault();
                return Json(cost, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetLstSalaryClassByOrgStructureID(Guid orgID, string filterSalaryClass)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var lstObjRank = new List<object>();
            lstObjRank.Add(null);
            lstObjRank.Add(1);
            lstObjRank.Add(int.MaxValue - 1);
            var lstSalaryClass = actionService.GetData<Cat_SalaryClassEntity>(lstObjRank, ConstantSql.hrm_cat_sp_get_SalaryClass, ref status).ToList();
            if (orgID != Guid.Empty)
            {
                if (lstSalaryClass != null)
                {
                    var lstAllSalaryClassByOrg = lstSalaryClass.Where(s => s.OrgStructureID == orgID).ToList();

                    return Json(lstAllSalaryClassByOrg, JsonRequestBehavior.AllowGet);

                }
            }

            return null;
        }

        [HttpPost]
        public ActionResult AddNewContractFromExpireContract(string ContractTypeID, string ContractID, int? duration, string unitTime)
        {
            var contractServices = new Hre_ContractServices();
            string status = contractServices.AddNewContractFromExpireContract(ContractTypeID, ContractID, duration, unitTime);
            return Json(status, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetContractEndList([DataSourceRequest] DataSourceRequest request, Hre_ContractEndSearchModel model)
        {
            return GetListDataAndReturn<Hre_ContractModel, Hre_ContractEntity, Hre_ContractEndSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractEnd);
        }

        public ActionResult ExportAllContractEndList([DataSourceRequest] DataSourceRequest request, Hre_ContractEndSearchModel model)
        {
            Hre_ContractServices ActionServices = new Hre_ContractServices();
            string status = string.Empty;
            var result = new List<Hre_ContractModel>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ContractEndSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractEnd, ref status);
            }
            var lstEntity = result.Translate<Hre_ContractEntity>();
            DataTable tb = ActionServices.GetDataContract(lstEntity, UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = tb,
                    FileName = "Hre_ContractEntity",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, tb, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        //Son.Vo - 20160527 - trường hợp edit lại ngày bắt đầu khi đã chọn loại HĐ - màn hình tạo mới HĐ
        [HttpPost]
        public ActionResult GetDateByContractTypeID(string ProfileID, string ContractTypeID, DateTime dateStart, double? duration)
        {
            string status = string.Empty;
            var contractTypeID = Guid.Empty;
            var profileID = Guid.Empty;
            if (!string.IsNullOrEmpty(ContractTypeID))
            {
                contractTypeID = Common.ConvertToGuid(ContractTypeID);
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                if (ProfileID.IndexOf(',') > 1)
                {
                    var profileIDs = ProfileID.Split(',');
                    profileID = Common.ConvertToGuid(profileIDs[0]);
                }
                else
                {
                    profileID = Common.ConvertToGuid(ProfileID);
                }
            }
            var actionService = new ActionService(UserLogin, LanguageCode);
            var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(contractTypeID, ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status).FirstOrDefault();
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileDataByID(profileID);
            var contractServices = new Hre_ContractServices();
            var lstProfileIDs = new List<Guid>();
            lstProfileIDs.Add(profileID);
            var contractByprofile = contractServices.GetLstContractByProfileIDs(lstProfileIDs).OrderByDescending(s => s.DateEnd).FirstOrDefault();
            #region task 0056020
            var keyConfig = AppConfig.HRM_HRE_CONFIG_COPYDATA_ISDATEHIRE.ToString();
            var lstConfig = actionService.GetData<Sys_AllSettingEntity>(keyConfig, ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).ToList();
            var config = lstConfig.FirstOrDefault();
            #endregion
            if (lstContractType != null)
            {
                //Son.Vo - 20170615 - 0084178 - nếu thay đổi thời hạn trên giao diện thì lấy thời hạn trên giao diện rồi 
                if (duration != null)
                {
                    lstContractType.ValueTime = duration;
                }
                lstContractType.DateStart = dateStart;
                if (lstContractType.Type == EnumDropDown.TypeContract.E_PROBATION.ToString() && profile != null)
                {
                    if (profile.DateEndProbation != null)
                    {
                        lstContractType.DateSigned = profile.DateHire;
                        lstContractType.DateEnd = profile.DateEndProbation;
                    }
                }
                else
                {
                    if (contractByprofile != null && contractByprofile.DateEnd != null)
                    {
                        lstContractType.DateSigned = lstContractType.DateStart;
                    }
                    else
                    {
                        if (profile != null && profile.DateHire != null)
                        {
                            lstContractType.DateSigned = profile.DateHire;
                        }
                    }
                }
                if (lstContractType.ValueTime != null && lstContractType.Type != HRM.Infrastructure.Utilities.EnumDropDown.TypeContract.E_NODURATION.ToString())
                {
                    if (lstContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                    {
                        var valueTime = (int)lstContractType.ValueTime.Value;
                        lstContractType.DateEnd = lstContractType.DateStart.Value.AddYears(valueTime);
                    }
                    else if (lstContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_MONTH.ToString())
                    {
                        var valueTime = (int)lstContractType.ValueTime.Value;
                        lstContractType.DateEnd = lstContractType.DateStart.Value.AddMonths(valueTime);
                    }
                    //Son.Vo - 20161028 - 0074744
                    else if (lstContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_DAY.ToString())
                    {
                        var valueTime = (int)lstContractType.ValueTime.Value;
                        lstContractType.DateEnd = lstContractType.DateStart.Value.AddDays(valueTime);
                    }

                    lstContractType.DateStart = dateStart;
                    lstContractType.DateSigned = dateStart;
                }
                if (!string.IsNullOrEmpty(lstContractType.Formula))
                {
                    if (contractByprofile != null)
                    {
                        contractByprofile.DateStart = dateStart;
                        lstContractType.DateStart = dateStart;
                        contractByprofile.DateSigned = dateStart;
                        lstContractType.DateSigned = dateStart;
                        contractByprofile.ContractTypeID = contractTypeID;
                        contractByprofile = contractServices.SetNewDateEndContract(contractByprofile, duration);
                        lstContractType.DateEnd = contractByprofile.DateEnd;
                    }
                    else
                    {
                        var contractEntity = new Hre_ContractEntity();
                        if (config != null && !string.IsNullOrEmpty(config.Value1) && config.Value1 == "True")
                        {
                            contractEntity.DateStart = dateStart;
                            contractEntity.DateSigned = dateStart;
                            lstContractType.DateStart = dateStart;
                            lstContractType.DateSigned = contractEntity.DateSigned;
                        }
                        else
                        {
                            contractEntity.DateStart = dateStart;
                            //Quyen.Quach 27/11/2017 kiểm tra null 
                            contractEntity.DateSigned = profile != null && profile.DateEndProbation != null ? profile.DateEndProbation.Value.AddDays(1) : profile.DateHire;
                            lstContractType.DateStart = dateStart;
                            lstContractType.DateSigned = contractEntity.DateSigned;
                        }
                        contractEntity.ContractTypeID = lstContractType.ID;
                        if (contractEntity.DateEnd != null || contractEntity.DateExtend != null)
                        {
                            contractEntity.DateStart = contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1);
                            lstContractType.DateStart = contractEntity.DateStart;
                            lstContractType.DateSigned = contractEntity.DateStart;
                        }
                        contractEntity = contractServices.SetNewDateEndContract(contractEntity, duration);
                        if (contractEntity.DateEnd != null)
                        {
                            lstContractType.DateEnd = contractEntity.DateEnd;
                        }
                    }
                }
                //Son.Vo - 20161028 - 0074743
                if (lstContractType.DateEnd != null)
                {
                    if (lstContractType.NoneEndContract == true)
                    {
                        lstContractType.DateEnd = lstContractType.DateEnd.Value.AddDays(-1);
                    }
                    else if (lstContractType.NoneEndContract != true && string.IsNullOrEmpty(lstContractType.Formula))
                    {
                        lstContractType.DateEnd = lstContractType.DateEnd.Value.AddDays(-1);
                    }
                }
                //Son.Vo - 20161028 - 0074873
                if (lstContractType.Type == HRM.Infrastructure.Utilities.EnumDropDown.TypeContract.E_PROBATION.ToString()
                    && profile != null && lstContractType.Formula == null && lstContractType.ValueTime == null)
                {
                    lstContractType.DateEnd = profile.DateEndProbation;
                }
            }
            return Json(lstContractType, JsonRequestBehavior.AllowGet);
        }

        public string ValidateEvaContract([DataSourceRequest] DataSourceRequest request, Hre_ContractModel model)
        {
            string message = string.Empty;
            string tableValidate = null;
            if (model.TableValidateEvaContract != null)
            {
                tableValidate = model.TableValidateEvaContract;
            }
            if (model.TableValidateEvaExpire != null)
            {
                tableValidate = model.TableValidateEvaExpire;
            }
            if (model.ContractResult == EnumDropDown.ResultContract.CUT.ToString() || model.ContractResult == EnumDropDown.ResultContract.OUT.ToString())
            {
                tableValidate = "Hre_ExpiredContract_EvaluationContractFailInfo";
            }
            var checkValidate = ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, tableValidate, ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                if (model.ContractResult == EnumDropDown.ResultContract.CUT.ToString() || model.ContractResult == EnumDropDown.ResultContract.OUT.ToString())
                {
                    //Son.Vo - 20161220 - 0076398
                    var sysServices = new Sys_AttOvertimePermitConfigServices();
                    var mustInputResign = sysServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISINPUTRESIGNWHENCUTCONTRACT);
                    if (mustInputResign == true)
                    {
                        if (model.TypeOfStopID == null)
                        {
                            return ConstantDisplay.HRM_Hr_Hre_MustInputResignWhenCutContract.TranslateString();
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    //Son.Vo - 20171207 - 0090773: Điều chỉnh logic validate khi đánh giá hợp đồng	
                    //if (model.TypeOfPass == null)
                    //{
                    //    return ConstantDisplay.HRM_Hr_Hre_MustInputTypeOfPassWhenPassContract.TranslateString();
                    //}
                    //else
                    //{
                    if (model.TypeOfPass == EnumDropDown.TypeOfPass.E_SIGNED_NEXTCONTRACT.ToString())
                    {
                        if (model.NextContractTypeID == null)
                        {
                            return ConstantDisplay.HRM_Hr_Hre_MustInputNextContractTypeWhenPassContract.TranslateString();
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else if (model.TypeOfPass == EnumDropDown.TypeOfPass.E_SIGNED_APPENDIXCONTRACT.ToString())
                    {
                        if (model.DateEndNextContract == null)
                        {
                            return ConstantDisplay.HRM_Hr_Hre_MustInputDateEndNextContractTypeWhenPassContract.TranslateString();
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        return null;
                    }
                    ////}
                }
            }
        }

        public string ValidateEvaContractWaiting([DataSourceRequest] DataSourceRequest request, Hre_ContractModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_EvaContractWaitingApprove_Update", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        //Son.Vo - 20151030 - 0058910 - lấy field loại ký tiếp theo loại HD
        [HttpPost]
        public ActionResult GetTypeOfPassByContract(string ContractID)
        {
            if (!string.IsNullOrEmpty(ContractID))
            {
                var contractTypeServices = new Cat_ContractTypeServices();
                var contractServices = new Hre_ContractServices();
                var contractID = Common.ConvertToGuid(ContractID);
                var lstContract = contractServices.GetContractTypeByContractID(contractID);
                var contractTypeEntity = new Cat_ContractTypeEntity();
                var actionservices = new ActionService(UserLogin, LanguageCode);
                string status = string.Empty;
                if (lstContract != null && lstContract.ContractTypeID != null)
                {
                    contractTypeEntity = actionservices.GetData<Cat_ContractTypeEntity>(Common.DotNetToOracle(lstContract.ContractTypeID.ToString()), ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status).FirstOrDefault();
                    if (contractTypeEntity != null)
                    {
                        return Json(contractTypeEntity, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(null, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult ApprovedContractAll([DataSourceRequest] DataSourceRequest request, Hre_ContractSearchModel model)
        {
            return GetListDataAndReturn<Hre_ContractModel, Hre_ContractEntity, Hre_ContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_set_ApprovedAllContract);
        }

        [HttpPost]
        public ActionResult CheckLastContractExtend(Guid? ContractExtendID)
        {
            Hre_ContractServices _ser = new Hre_ContractServices();
            bool _check = false;
            if (ContractExtendID != null)
                _check = _ser.CheckLastContractExtend((Guid)ContractExtendID);
            return Json(_check, JsonRequestBehavior.AllowGet);
        }

        #region UpdateContractDateExtend
        /// <summary>
        ///[Anh.Le] Cập nhập ngày gia hạn theo gia hạn cuối cùng
        /// </summary>
        /// <param name="ContractExtendID"></param>
        /// <returns></returns>
        public ActionResult UpdateContractDateExtend(Guid ContractExtendID)
        {
            Hre_ContractExtendServices _ser = new Hre_ContractExtendServices();
            string mes = string.Empty;
            mes = _ser.UpdateContractDateExtend(ContractExtendID);
            return Json(mes, JsonRequestBehavior.AllowGet);
        }
        #endregion

        [HttpPost]
        public ActionResult CheckAddNewContract(string ContractTypeID, string ContractID)
        {
            string status = string.Empty;
            var contractTypeID = Guid.Empty;
            var message = string.Empty;
            if (!string.IsNullOrEmpty(ContractTypeID))
            {
                contractTypeID = Common.ConvertToGuid(ContractTypeID);
            }
            var contractID = Common.ConvertToGuid(ContractID);

            ActionService service = new ActionService(UserLogin, LanguageCode);
            var lstContract = service.GetData<Hre_ContractEntity>(contractID, ConstantSql.hrm_hr_sp_get_ContractById, ref status).FirstOrDefault();

            List<object> listObj = new List<object>();

            listObj.Add(1);
            listObj.Add(1000);
            var actionServices = new ActionService(UserLogin);
            var lstBasicSalary = actionServices.GetData<Sal_BasicSalaryEntity>(listObj, ConstantSql.hrm_sal_sp_get_BasicPayrollGetAll, ref status);
            Sal_BasicSalaryEntity basicSalary = new Sal_BasicSalaryEntity();
            if (lstBasicSalary != null && lstBasicSalary.Count != 0)
            {
                basicSalary = lstBasicSalary.Where(s => s.ProfileID == lstContract.ProfileID && s.DateOfEffect <= lstContract.DateEnd && lstContract.ProfileID == s.ProfileID).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            }
            if (basicSalary == null || lstBasicSalary.Count <= 0)
            {
                message = "Error";
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            var result = basicSalary.CopyData<Hre_ReportExpiryContractModel>();
            result.ContractTypeID = contractTypeID;
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CheckAddNextContract(string ContractTypeID, string ContractID, string IsMLC)
        {
            string status = string.Empty;
            Guid convertContractID = Guid.Empty;
            string AddMessage = string.Empty;
            var lstContractID = new List<Guid>();

            #region Xử lý ID CheckAddNextContract
            if (ContractID.IndexOf(",") > 1)
            {
                var lstID = ContractID.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertContractID = Common.ConvertToGuid(lstID[i]);
                    lstContractID.Add(convertContractID);
                }
            }
            else
            {
                convertContractID = Common.ConvertToGuid(ContractID);
                lstContractID.Add(convertContractID);
            }
            #endregion

            var service = new ActionService(UserLogin, LanguageCode);
            var actionServices = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            var _ProfileServices = new Hre_ProfileServices();
            var _ContractServices = new Hre_ContractServices();
            var lstContractSelect = contractServices.GetContractDataByIDs(lstContractID);

            var contractTypeServices = new Cat_ContractTypeServices();
            var lstContractType = contractTypeServices.GetLstContractType();

            var lstProfileIDs = lstContractSelect.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();
            var BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = BasicSalaryServices.GetLstBasicSalaryByProfileIDs(lstProfileIDs).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            var lstProfile = _ProfileServices.GetLstProfileEntityByLstProfileIDs(lstProfileIDs);
            var lstContractallByProfileIDs = contractServices.GetListContractForGenerateContractNoByProfileIDs(lstProfileIDs);

            #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
            var services = new Sys_AttOvertimePermitConfigServices();
            var _MAXCASUAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
            var _MAXPROBATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
            var _MAXOFFICIAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
            var _MAXAPPENDIX = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
            var _MAXAPPRENTICESHIP = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
            var _MAXDURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
            var _MAXNODURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
            var isbyCompany = services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
            #endregion

            var configServices = new Sys_AttOvertimePermitConfigServices();
            string strDataLoadFrom = configServices.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_LOADEVALUATIONDATAFROM);
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = new List<Hre_ContractExtendEntity>();
            if (!string.IsNullOrEmpty(strDataLoadFrom) && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
            {
                lstContractExtend = _ContractExtendServices.GetLastContractExtend4UpdateEvaContract(lstContractID).ToList();
            }

            foreach (var hreContract in lstContractSelect)
            {
                //Son.Vo - 20170529 - 0083090
                if (!string.IsNullOrEmpty(strDataLoadFrom) && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
                {
                    var nextContractTypeID = lstContractType.Where(s => s.ID == hreContract.ContractTypeID).Select(s => s.ContractNextID).FirstOrDefault();
                    if (nextContractTypeID == null || nextContractTypeID == Guid.Empty)
                    {
                        AddMessage = "Error";
                        return Json(AddMessage);
                    }
                    else
                    {
                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        string messageref = _ContractServices.ValidateMaxTimeSignContract(hreContract.ProfileID, nextContractTypeID.Value, _MAXCASUAL,
                                             _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, hreContract.CompanyID);
                        if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                        {
                            return Json(messageref);
                        }

                        #endregion

                        #region Xử lý tạo mới HĐ
                        var contract = new Hre_ContractEntity();
                        hreContract.CopyData(contract);
                        contract.ContractTypeID = nextContractTypeID.Value;
                        var catContractType = new Cat_ContractTypeEntity();
                        catContractType = lstContractType.Where(s => s.ID == nextContractTypeID).FirstOrDefault();
                        contract.DateStart = hreContract.DateEnd.Value.AddDays(1);
                        if (catContractType != null)
                        {
                            contract.Duration = catContractType.ValueTime;
                            contract.UnitTime = catContractType.UnitTime;
                            if (!string.IsNullOrEmpty(catContractType.Formula))
                            {
                                var contractEntity = new Hre_ContractEntity();
                                contractEntity.ProfileID = contract.ProfileID;
                                contractEntity.ContractTypeID = nextContractTypeID.Value;
                                contractEntity.DateStart = contract.DateStart;
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                contract.DateEnd = contractEntity.DateEnd;
                            }
                            else
                            {
                                int month = 0;
                                if (catContractType.ValueTime != null)
                                {
                                    month = (int)catContractType.ValueTime.Value;
                                }
                                if (catContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                                {
                                    month = month * 12;
                                }
                                if (hreContract.DateEnd != null && month > 0)
                                {
                                    contract.DateEnd = contract.DateStart.AddMonths(month);
                                }
                                else
                                {
                                    contract.DateEnd = null;
                                }
                            }
                        }
                        else
                        {
                            contract.DateEnd = null;
                        }
                        #region Son.Vo - 20160927 - 0073816
                        var lstContractByProfile = lstContractallByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).ToList();
                        var listContractTypeIDs = lstContractByProfile.Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                        contractEntityForContractno.ContractNo = null;
                        contractServices.SetNewCodeContract(contractEntityForContractno, listContractTypeIDs);
                        contract.ContractNo = contractEntityForContractno.ContractNo;
                        var profilebyContract = lstProfile.Where(s => s.ID == contract.ProfileID).FirstOrDefault();
                        if (profilebyContract != null)
                        {
                            contract.PCountryID = profilebyContract.PCountryID;
                            contract.PProvinceID = profilebyContract.PProvinceID;
                            contract.PDistrictID = profilebyContract.PDistrictID;
                            contract.PVillageID = profilebyContract.VillageID;
                        }
                        contract.DateSigned = hreContract.DateEnd;
                        contract.DateExtend = contract.DateEnd;
                        #endregion
                        //Xử lý khi tạo hđ kế ở màn hình ds hđ mlc hết hạn
                        if (IsMLC == "True")
                        {
                            contract.IsMLC = true;
                        }
                        #region Nếu cấu hình load từ PLHĐ
                        var lastContractExtend = lstContractExtend.Where(s => s.ContractID == hreContract.ID && s.DateStart > hreContract.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                        if (lastContractExtend != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    contract.E_Salary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    contract.Salary = lastContractExtend.Salary;
                                    contract.E_Salary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = lastContractExtend.InsuranceAmount;
                                    contract.E_InsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.Allowance1 = lastContractExtend.Allowance1;
                                contract.Allowance2 = lastContractExtend.Allowance2;
                                contract.Allowance3 = lastContractExtend.Allowance3;
                                contract.Allowance4 = lastContractExtend.Allowance4;
                                contract.Allowance5 = lastContractExtend.Allowance5;
                                contract.Allowance6 = lastContractExtend.Allowance6;
                                contract.Allowance7 = lastContractExtend.Allowance7;
                                contract.Allowance8 = lastContractExtend.Allowance8;
                                contract.Allowance9 = lastContractExtend.Allowance9;
                                contract.Allowance10 = lastContractExtend.Allowance10;
                                contract.Allowance11 = lastContractExtend.Allowance11;
                                contract.Allowance12 = lastContractExtend.Allowance12;
                                contract.Allowance13 = lastContractExtend.Allowance13;
                                contract.Allowance14 = lastContractExtend.Allowance14;
                                contract.Allowance15 = lastContractExtend.Allowance15;

                                contract.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            contract.CurenncyIDSalary = lastContractExtend.CurrencyIDSalary;
                            contract.CurenncyID = lastContractExtend.CurrencyID;

                            contract.AllowanceID1 = lastContractExtend.AllowanceID1;
                            contract.CurenncyID1 = lastContractExtend.CurrencyID1;

                            contract.AllowanceID2 = lastContractExtend.AllowanceID2;
                            contract.CurenncyID2 = lastContractExtend.CurrencyID2;

                            contract.AllowanceID3 = lastContractExtend.AllowanceID3;
                            contract.CurenncyID3 = lastContractExtend.CurrencyID3;

                            contract.AllowanceID4 = lastContractExtend.AllowanceID4;
                            contract.CurenncyID4 = lastContractExtend.CurrencyID4;

                            contract.AllowanceID5 = lastContractExtend.AllowanceID5;
                            contract.CurenncyID5 = lastContractExtend.CurrencyID5;

                            contract.AllowanceID6 = lastContractExtend.AllowanceID6;
                            contract.CurenncyID6 = lastContractExtend.CurrencyID6;

                            contract.AllowanceID7 = lastContractExtend.AllowanceID7;
                            contract.CurenncyID7 = lastContractExtend.CurrencyID7;

                            contract.AllowanceID8 = lastContractExtend.AllowanceID8;
                            contract.CurenncyID8 = lastContractExtend.CurrencyID8;

                            contract.AllowanceID9 = lastContractExtend.AllowanceID9;
                            contract.CurenncyID9 = lastContractExtend.CurrencyID9;

                            contract.AllowanceID10 = lastContractExtend.AllowanceID10;
                            contract.CurenncyID10 = lastContractExtend.CurrencyID10;

                            contract.AllowanceID11 = lastContractExtend.AllowanceID11;
                            contract.CurenncyID11 = lastContractExtend.CurrencyID11;

                            contract.AllowanceID12 = lastContractExtend.AllowanceID12;
                            contract.CurenncyID12 = lastContractExtend.CurrencyID12;

                            contract.AllowanceID13 = lastContractExtend.AllowanceID13;
                            contract.CurenncyID13 = lastContractExtend.CurrencyID13;

                            contract.AllowanceID14 = lastContractExtend.AllowanceID14;
                            contract.CurenncyID14 = lastContractExtend.CurrencyID14;

                            contract.AllowanceID15 = lastContractExtend.AllowanceID15;
                            contract.CurenncyID15 = lastContractExtend.CurrencyID15;

                            contract.OrgStructureID = lastContractExtend.OrgStructureID;
                            contract.PositionID = lastContractExtend.PositionID;
                            contract.JobTitleID = lastContractExtend.JobTitleID;
                            contract.WorkPlaceID = lastContractExtend.WorkPlaceID;
                            contract.CompanyID = lastContractExtend.CompanyID;
                            contract.PayrollGroupID = lastContractExtend.PayrollGroupID;
                            contract.EmployeeTypeID = lastContractExtend.EmployeeTypeID;
                            contract.CostCentreID = lastContractExtend.CostCentreID;
                            contract.EmployeeGroupID = lastContractExtend.EmployeeGroupID;
                            contract.CostActivityID = lastContractExtend.CostActivityID;
                            contract.LaborType = lastContractExtend.LaborType;
                            contract.AbilityTileID = lastContractExtend.AbilityTileID;
                            contract.PayrollCategoryID = lastContractExtend.PayrollCategoryID;
                            contract.UnitStructureID = lastContractExtend.UnitStructureID;
                            contract.ClassRateID = lastContractExtend.ClassRateID;
                            contract.RankRateID = lastContractExtend.RankRateID;
                            contract.DelegateCompanyID = lastContractExtend.DelegateCompanyID;
                            contract.DateAuthorize = lastContractExtend.DateAuthorize;
                        }
                        #endregion
                        else
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (hreContract.Salary != null)
                                {
                                    contract.E_Salary = hreContract.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = hreContract.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.E_Allowance1 = hreContract.Allowance1 != null ? hreContract.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = hreContract.Allowance2 != null ? hreContract.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = hreContract.Allowance3 != null ? hreContract.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = hreContract.Allowance4 != null ? hreContract.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = hreContract.Allowance5 != null ? hreContract.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = hreContract.Allowance6 != null ? hreContract.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = hreContract.Allowance7 != null ? hreContract.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = hreContract.Allowance8 != null ? hreContract.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = hreContract.Allowance9 != null ? hreContract.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = hreContract.Allowance10 != null ? hreContract.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = hreContract.Allowance11 != null ? hreContract.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = hreContract.Allowance12 != null ? hreContract.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = hreContract.Allowance13 != null ? hreContract.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = hreContract.Allowance14 != null ? hreContract.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = hreContract.Allowance15 != null ? hreContract.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                //Quyen.Quach 24/11/2017 0090389
                                if (hreContract != null && hreContract.Salary != null)
                                {
                                    contract.Salary = hreContract.Salary;
                                    contract.E_Salary = hreContract.Salary.ToString().Encrypt();
                                }
                                if (hreContract != null && hreContract.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = hreContract.InsuranceAmount;
                                    contract.E_InsuranceAmount = hreContract.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.Allowance1 = hreContract.Allowance1;
                                contract.Allowance2 = hreContract.Allowance2;
                                contract.Allowance3 = hreContract.Allowance3;
                                contract.Allowance4 = hreContract.Allowance4;
                                contract.Allowance5 = hreContract.Allowance5;
                                contract.Allowance6 = hreContract.Allowance6;
                                contract.Allowance7 = hreContract.Allowance7;
                                contract.Allowance8 = hreContract.Allowance8;
                                contract.Allowance9 = hreContract.Allowance9;
                                contract.Allowance10 = hreContract.Allowance10;
                                contract.Allowance11 = hreContract.Allowance11;
                                contract.Allowance12 = hreContract.Allowance12;
                                contract.Allowance13 = hreContract.Allowance13;
                                contract.Allowance14 = hreContract.Allowance14;
                                contract.Allowance15 = hreContract.Allowance15;

                                contract.E_Allowance1 = hreContract.Allowance1 != null ? hreContract.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = hreContract.Allowance2 != null ? hreContract.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = hreContract.Allowance3 != null ? hreContract.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = hreContract.Allowance4 != null ? hreContract.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = hreContract.Allowance5 != null ? hreContract.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = hreContract.Allowance6 != null ? hreContract.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = hreContract.Allowance7 != null ? hreContract.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = hreContract.Allowance8 != null ? hreContract.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = hreContract.Allowance9 != null ? hreContract.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = hreContract.Allowance10 != null ? hreContract.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = hreContract.Allowance11 != null ? hreContract.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = hreContract.Allowance12 != null ? hreContract.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = hreContract.Allowance13 != null ? hreContract.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = hreContract.Allowance14 != null ? hreContract.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = hreContract.Allowance15 != null ? hreContract.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            contract.CurenncyIDSalary = hreContract.CurenncyIDSalary;
                            contract.CurenncyID = hreContract.CurenncyID;

                            contract.AllowanceID1 = hreContract.AllowanceID1;
                            contract.CurenncyID1 = hreContract.CurenncyID1;

                            contract.AllowanceID2 = hreContract.AllowanceID2;
                            contract.CurenncyID2 = hreContract.CurenncyID2;

                            contract.AllowanceID3 = hreContract.AllowanceID3;
                            contract.CurenncyID3 = hreContract.CurenncyID3;

                            contract.AllowanceID4 = hreContract.AllowanceID4;
                            contract.CurenncyID4 = hreContract.CurenncyID4;

                            contract.AllowanceID5 = hreContract.AllowanceID5;
                            contract.CurenncyID5 = hreContract.CurenncyID5;

                            contract.AllowanceID6 = hreContract.AllowanceID6;
                            contract.CurenncyID6 = hreContract.CurenncyID6;

                            contract.AllowanceID7 = hreContract.AllowanceID7;
                            contract.CurenncyID7 = hreContract.CurenncyID7;

                            contract.AllowanceID8 = hreContract.AllowanceID8;
                            contract.CurenncyID8 = hreContract.CurenncyID8;

                            contract.AllowanceID9 = hreContract.AllowanceID9;
                            contract.CurenncyID9 = hreContract.CurenncyID9;

                            contract.AllowanceID10 = hreContract.AllowanceID10;
                            contract.CurenncyID10 = hreContract.CurenncyID10;

                            contract.AllowanceID11 = hreContract.AllowanceID11;
                            contract.CurenncyID11 = hreContract.CurenncyID11;

                            contract.AllowanceID12 = hreContract.AllowanceID12;
                            contract.CurenncyID12 = hreContract.CurenncyID12;

                            contract.AllowanceID13 = hreContract.AllowanceID13;
                            contract.CurenncyID13 = hreContract.CurenncyID13;

                            contract.AllowanceID14 = hreContract.AllowanceID14;
                            contract.CurenncyID14 = hreContract.CurenncyID14;

                            contract.AllowanceID15 = hreContract.AllowanceID15;
                            contract.CurenncyID15 = hreContract.CurenncyID15;

                            contract.OrgStructureID = hreContract.OrgStructureID;
                            contract.PositionID = hreContract.PositionID;
                            contract.JobTitleID = hreContract.JobTitleID;
                            contract.WorkPlaceID = hreContract.WorkPlaceID;
                            contract.CompanyID = hreContract.CompanyID;
                            contract.PayrollGroupID = hreContract.PayrollGroupID;
                            contract.EmployeeTypeID = hreContract.EmployeeTypeID;
                            contract.CostCentreID = hreContract.CostCentreID;
                            contract.EmployeeGroupID = hreContract.EmployeeGroupID;
                            contract.CostActivityID = hreContract.CostActivityID;
                            contract.LaborType = hreContract.LaborType;
                            contract.AbilityTileID = hreContract.AbilityTileID;
                            contract.PayrollCategoryID = hreContract.PayrollCategoryID;
                            contract.UnitStructureID = hreContract.UnitStructureID;
                            contract.ClassRateID = hreContract.ClassRateID;
                            contract.RankRateID = hreContract.RankRateID;
                            contract.DelegateCompanyID = hreContract.DelegateCompanyID;
                            contract.DateAuthorize = hreContract.DateAuthorize;
                        }
                        AddMessage = contractServices.Add(contract);
                        #endregion
                    }
                }
                else
                {
                    var nextContractTypeID = lstContractType.Where(s => s.ID == hreContract.ContractTypeID).Select(s => s.ContractNextID).FirstOrDefault();
                    if (nextContractTypeID == null || nextContractTypeID == Guid.Empty)
                    {
                        AddMessage = "Error";
                        return Json(AddMessage);
                    }
                    else
                    {
                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        string messageref = _ContractServices.ValidateMaxTimeSignContract(hreContract.ProfileID, nextContractTypeID.Value, _MAXCASUAL,
                                             _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, hreContract.CompanyID);
                        if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                        {
                            return Json(messageref);
                        }

                        #endregion

                        #region Xử lý tạo mới HĐ
                        var contract = new Hre_ContractEntity();
                        hreContract.CopyData(contract);
                        contract.ContractTypeID = nextContractTypeID.Value;
                        var catContractType = new Cat_ContractTypeEntity();
                        catContractType = lstContractType.Where(s => s.ID == nextContractTypeID).FirstOrDefault();
                        contract.DateStart = hreContract.DateEnd.Value.AddDays(1);
                        if (catContractType != null)
                        {
                            contract.Duration = catContractType.ValueTime;
                            contract.UnitTime = catContractType.UnitTime;
                            if (!string.IsNullOrEmpty(catContractType.Formula))
                            {
                                var contractEntity = new Hre_ContractEntity();
                                contractEntity.ProfileID = contract.ProfileID;
                                contractEntity.ContractTypeID = nextContractTypeID.Value;
                                contractEntity.DateStart = contract.DateStart;
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                contract.DateEnd = contractEntity.DateEnd;
                            }
                            else
                            {
                                int month = 0;
                                if (catContractType.ValueTime != null)
                                {
                                    month = (int)catContractType.ValueTime.Value;
                                }
                                if (catContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                                {
                                    month = month * 12;
                                }
                                if (hreContract.DateEnd != null && month > 0)
                                {
                                    contract.DateEnd = contract.DateStart.AddMonths(month);
                                }
                                else
                                {
                                    contract.DateEnd = null;
                                }
                            }
                        }
                        else
                        {
                            contract.DateEnd = null;
                        }
                        if (lstBasicSalary != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lstBasicSalary.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = lstBasicSalary.InsuranceAmount.ToString().Encrypt();
                                }
                            }
                            else
                            {
                                if (lstBasicSalary.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = lstBasicSalary.InsuranceAmount;
                                    contract.E_InsuranceAmount = lstBasicSalary.InsuranceAmount.ToString().Encrypt();
                                }
                            }
                            contract.CurenncyID1 = lstBasicSalary.CurrencyID1;
                            contract.ClassRateID = lstBasicSalary.ClassRateID;
                            contract.RankRateID = lstBasicSalary.RankRateID;
                        }
                        #region Son.Vo - 20160927 - 0073816
                        var lstContractByProfile = lstContractallByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).ToList();
                        var listContractTypeIDs = lstContractByProfile.Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                        contractEntityForContractno.ContractNo = null;
                        contractServices.SetNewCodeContract(contractEntityForContractno, listContractTypeIDs);
                        contract.ContractNo = contractEntityForContractno.ContractNo;

                        var profilebyContract = lstProfile.Where(s => s.ID == contract.ProfileID).FirstOrDefault();
                        if (profilebyContract != null)
                        {
                            contract.PCountryID = profilebyContract.PCountryID;
                            contract.PProvinceID = profilebyContract.PProvinceID;
                            contract.PDistrictID = profilebyContract.PDistrictID;
                            contract.PVillageID = profilebyContract.VillageID;
                        }
                        contract.DateSigned = hreContract.DateEnd;
                        contract.DateExtend = contract.DateEnd;
                        #endregion
                        //Xử lý khi tạo hđ kế ở màn hình ds hđ mlc hết hạn
                        if (IsMLC == "True")
                        {
                            contract.IsMLC = true;
                        }
                        AddMessage = contractServices.Add(contract);
                        #endregion
                    }
                }
            }
            return Json(AddMessage);
        }

        [HttpPost]
        public ActionResult CheckAddNextMultiContract(string strContractID)
        {
            if (!string.IsNullOrEmpty(strContractID))
            {
                var contractServices = new Hre_ContractServices();
                var lstContractID = strContractID.Split(',').Select(x => Guid.Parse(x)).ToList();
                var isInvalid = contractServices.CheckAddNewMultiContract(lstContractID);
                if (isInvalid == true)
                {
                    return Json(true);
                }
                else
                {
                    return Json(false);
                }
            }
            else
            {
                return Json(false);
            }
        }

        //Son.Vo - 20170721 - 0085171
        [HttpPost]
        public ActionResult AddNextMultiContract(string ContractID, Guid? ContractTypeID, Guid? jobtitleID, Guid? positionID, Guid? salaryClassID, Guid? salaryRankID, double? salary, Guid? currencyID)
        {
            string status = string.Empty;
            Guid convertContractID = Guid.Empty;
            string AddMessage = string.Empty;
            var lstContractID = new List<Guid>();

            #region Xử lý ID CheckAddNextContract
            if (ContractID.IndexOf(",") > 1)
            {
                var lstID = ContractID.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertContractID = Common.ConvertToGuid(lstID[i]);
                    lstContractID.Add(convertContractID);
                }
            }
            else
            {
                convertContractID = Common.ConvertToGuid(ContractID);
                lstContractID.Add(convertContractID);
            }
            #endregion

            var service = new ActionService(UserLogin, LanguageCode);
            var actionServices = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            var _ProfileServices = new Hre_ProfileServices();
            var _ContractServices = new Hre_ContractServices();
            var lstContractSelect = contractServices.GetContractDataByIDs(lstContractID);

            var contractTypeServices = new Cat_ContractTypeServices();
            var lstContractType = contractTypeServices.GetLstContractType();

            var lstProfileIDs = lstContractSelect.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();
            var BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = BasicSalaryServices.GetLstBasicSalaryByProfileIDs(lstProfileIDs).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            var lstProfile = _ProfileServices.GetLstProfileEntityByLstProfileIDs(lstProfileIDs);
            var lstContractallByProfileIDs = contractServices.GetListContractForGenerateContractNoByProfileIDs(lstProfileIDs);

            #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
            var services = new Sys_AttOvertimePermitConfigServices();
            var _MAXCASUAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
            var _MAXPROBATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
            var _MAXOFFICIAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
            var _MAXAPPENDIX = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
            var _MAXAPPRENTICESHIP = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
            var _MAXDURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
            var _MAXNODURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
            var isbyCompany = services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
            #endregion

            var configServices = new Sys_AttOvertimePermitConfigServices();
            string strDataLoadFrom = configServices.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_LOADEVALUATIONDATAFROM);
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = new List<Hre_ContractExtendEntity>();
            if (!string.IsNullOrEmpty(strDataLoadFrom) && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
            {
                lstContractExtend = _ContractExtendServices.GetLastContractExtend4UpdateEvaContract(lstContractID).ToList();
            }

            foreach (var hreContract in lstContractSelect)
            {
                // Son.Vo - 20170721 - 0085171 Nếu field Loại hợp đồng = null.  Cập nhật Hre_Contract.ContractTypeID của từng HĐ mới = Hre_Contract.ContractTypeID của từng HĐ cũ tương ứng
                Guid? nextContractTypeID = null;
                if (ContractTypeID != null && ContractTypeID != Guid.Empty)
                {
                    nextContractTypeID = ContractTypeID.Value;
                }
                else
                {
                    nextContractTypeID = hreContract.ContractTypeID;
                }
                //Son.Vo - 20170529 - 0083090
                if (!string.IsNullOrEmpty(strDataLoadFrom) && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
                {
                    if (nextContractTypeID == null || nextContractTypeID == Guid.Empty)
                    {
                        AddMessage = "Error";
                        return Json(AddMessage);
                    }
                    else
                    {
                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        string messageref = _ContractServices.ValidateMaxTimeSignContract(hreContract.ProfileID, nextContractTypeID.Value, _MAXCASUAL,
                                             _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, hreContract.CompanyID);
                        if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                        {
                            return Json(messageref);
                        }

                        #endregion

                        #region Xử lý tạo mới HĐ
                        var contract = new Hre_ContractEntity();
                        hreContract.CopyData(contract);
                        contract.ContractTypeID = nextContractTypeID.Value;
                        var catContractType = new Cat_ContractTypeEntity();
                        //Son.Vo - Son.Vo - 20170721 - 0085171
                        catContractType = lstContractType.Where(s => s.ID == nextContractTypeID.Value).FirstOrDefault();
                        contract.DateStart = hreContract.DateEnd.Value.AddDays(1);
                        if (catContractType != null)
                        {
                            contract.Duration = catContractType.ValueTime;
                            contract.UnitTime = catContractType.UnitTime;
                            if (!string.IsNullOrEmpty(catContractType.Formula))
                            {
                                var contractEntity = new Hre_ContractEntity();
                                contractEntity.ProfileID = contract.ProfileID;
                                contractEntity.ContractTypeID = nextContractTypeID.Value;
                                contractEntity.DateStart = contract.DateStart;
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                contract.DateEnd = contractEntity.DateEnd;
                            }
                            else
                            {
                                int month = 0;
                                if (catContractType.ValueTime != null)
                                {
                                    month = (int)catContractType.ValueTime.Value;
                                }
                                if (catContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                                {
                                    month = month * 12;
                                }
                                if (hreContract.DateEnd != null && month > 0)
                                {
                                    contract.DateEnd = contract.DateStart.AddMonths(month);
                                }
                                else
                                {
                                    contract.DateEnd = null;
                                }
                            }
                        }
                        else
                        {
                            contract.DateEnd = null;
                        }
                        #region Son.Vo - 20160927 - 0073816
                        var lstContractByProfile = lstContractallByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).ToList();
                        var listContractTypeIDs = lstContractByProfile.Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                        contractEntityForContractno.ContractNo = null;
                        contractServices.SetNewCodeContract(contractEntityForContractno, listContractTypeIDs);
                        contract.ContractNo = contractEntityForContractno.ContractNo;
                        var profilebyContract = lstProfile.Where(s => s.ID == contract.ProfileID).FirstOrDefault();
                        if (profilebyContract != null)
                        {
                            contract.PCountryID = profilebyContract.PCountryID;
                            contract.PProvinceID = profilebyContract.PProvinceID;
                            contract.PDistrictID = profilebyContract.PDistrictID;
                            contract.PVillageID = profilebyContract.VillageID;
                        }
                        contract.DateSigned = hreContract.DateEnd;
                        contract.DateExtend = contract.DateEnd;
                        #endregion
                        //Xử lý khi tạo hđ kế ở màn hình ds hđ mlc hết hạn
                        //if (IsMLC == "True")
                        //{
                        //    contract.IsMLC = true;
                        //}
                        #region Nếu cấu hình load từ PLHĐ
                        var lastContractExtend = lstContractExtend.Where(s => s.ContractID == hreContract.ID && s.DateStart > hreContract.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                        if (lastContractExtend != null)
                        {
                            //Quyen.Quach 02/10/2017 0087467
                            //nếu có cấu hình mã hóa
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                contract.E_Salary = lastContractExtend.Salary != null ? lastContractExtend.Salary.ToString().Encrypt() : string.Empty;
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                contract.Salary = lastContractExtend.Salary;
                                contract.E_Salary = lastContractExtend.Salary != null ? lastContractExtend.Salary.ToString().Encrypt() : string.Empty;
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = lastContractExtend.InsuranceAmount;
                                    contract.E_InsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.Allowance1 = lastContractExtend.Allowance1;
                                contract.Allowance2 = lastContractExtend.Allowance2;
                                contract.Allowance3 = lastContractExtend.Allowance3;
                                contract.Allowance4 = lastContractExtend.Allowance4;
                                contract.Allowance5 = lastContractExtend.Allowance5;
                                contract.Allowance6 = lastContractExtend.Allowance6;
                                contract.Allowance7 = lastContractExtend.Allowance7;
                                contract.Allowance8 = lastContractExtend.Allowance8;
                                contract.Allowance9 = lastContractExtend.Allowance9;
                                contract.Allowance10 = lastContractExtend.Allowance10;
                                contract.Allowance11 = lastContractExtend.Allowance11;
                                contract.Allowance12 = lastContractExtend.Allowance12;
                                contract.Allowance13 = lastContractExtend.Allowance13;
                                contract.Allowance14 = lastContractExtend.Allowance14;
                                contract.Allowance15 = lastContractExtend.Allowance15;

                                contract.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            contract.CurenncyIDSalary = lastContractExtend.CurrencyIDSalary;
                            contract.CurenncyID = lastContractExtend.CurrencyID;

                            contract.AllowanceID1 = lastContractExtend.AllowanceID1;
                            contract.CurenncyID1 = lastContractExtend.CurrencyID1;

                            contract.AllowanceID2 = lastContractExtend.AllowanceID2;
                            contract.CurenncyID2 = lastContractExtend.CurrencyID2;

                            contract.AllowanceID3 = lastContractExtend.AllowanceID3;
                            contract.CurenncyID3 = lastContractExtend.CurrencyID3;

                            contract.AllowanceID4 = lastContractExtend.AllowanceID4;
                            contract.CurenncyID4 = lastContractExtend.CurrencyID4;

                            contract.AllowanceID5 = lastContractExtend.AllowanceID5;
                            contract.CurenncyID5 = lastContractExtend.CurrencyID5;

                            contract.AllowanceID6 = lastContractExtend.AllowanceID6;
                            contract.CurenncyID6 = lastContractExtend.CurrencyID6;

                            contract.AllowanceID7 = lastContractExtend.AllowanceID7;
                            contract.CurenncyID7 = lastContractExtend.CurrencyID7;

                            contract.AllowanceID8 = lastContractExtend.AllowanceID8;
                            contract.CurenncyID8 = lastContractExtend.CurrencyID8;

                            contract.AllowanceID9 = lastContractExtend.AllowanceID9;
                            contract.CurenncyID9 = lastContractExtend.CurrencyID9;

                            contract.AllowanceID10 = lastContractExtend.AllowanceID10;
                            contract.CurenncyID10 = lastContractExtend.CurrencyID10;

                            contract.AllowanceID11 = lastContractExtend.AllowanceID11;
                            contract.CurenncyID11 = lastContractExtend.CurrencyID11;

                            contract.AllowanceID12 = lastContractExtend.AllowanceID12;
                            contract.CurenncyID12 = lastContractExtend.CurrencyID12;

                            contract.AllowanceID13 = lastContractExtend.AllowanceID13;
                            contract.CurenncyID13 = lastContractExtend.CurrencyID13;

                            contract.AllowanceID14 = lastContractExtend.AllowanceID14;
                            contract.CurenncyID14 = lastContractExtend.CurrencyID14;

                            contract.AllowanceID15 = lastContractExtend.AllowanceID15;
                            contract.CurenncyID15 = lastContractExtend.CurrencyID15;

                            contract.OrgStructureID = lastContractExtend.OrgStructureID;
                            if (jobtitleID != null)
                            {
                                contract.JobTitleID = jobtitleID;
                            }
                            if (positionID != null)
                            {
                                contract.PositionID = positionID;
                            }
                            if (salaryClassID != null)
                            {
                                contract.ClassRateID = salaryClassID;
                            }
                            if (salaryRankID != null)
                            {
                                contract.RankRateID = salaryRankID;
                            }

                            if (salary != null && currencyID != null)
                            {
                                contract.CurenncyIDSalary = currencyID;
                                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                {
                                    contract.E_Salary = salary.ToString().Encrypt();
                                }
                                else
                                {
                                    contract.Salary = salary;
                                    contract.E_Salary = salary.ToString().Encrypt();
                                }
                            }
                            contract.WorkPlaceID = lastContractExtend.WorkPlaceID;
                            contract.CompanyID = lastContractExtend.CompanyID;
                            contract.PayrollGroupID = lastContractExtend.PayrollGroupID;
                            contract.EmployeeTypeID = lastContractExtend.EmployeeTypeID;
                            contract.CostCentreID = lastContractExtend.CostCentreID;
                            contract.EmployeeGroupID = lastContractExtend.EmployeeGroupID;
                            contract.CostActivityID = lastContractExtend.CostActivityID;
                            contract.LaborType = lastContractExtend.LaborType;
                            contract.AbilityTileID = lastContractExtend.AbilityTileID;
                            contract.PayrollCategoryID = lastContractExtend.PayrollCategoryID;
                            contract.UnitStructureID = lastContractExtend.UnitStructureID;
                            contract.DelegateCompanyID = lastContractExtend.DelegateCompanyID;
                            contract.DateAuthorize = lastContractExtend.DateAuthorize;
                        }
                        #endregion
                        else
                        {
                            //Quyen.Quach 02/10/2017 0087467
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (hreContract.Salary != null)
                                {
                                    contract.E_Salary = hreContract.Salary.ToString().Encrypt();
                                }
                                if (hreContract.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = hreContract.InsuranceAmount.ToString().Encrypt();
                                }
                            }
                            else
                            {
                                if (hreContract.Salary != null)
                                {
                                    contract.Salary = hreContract.Salary;
                                    contract.E_Salary = hreContract.Salary.ToString().Encrypt();
                                }
                                if (hreContract.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = hreContract.InsuranceAmount;
                                    contract.E_InsuranceAmount = hreContract.InsuranceAmount.ToString().Encrypt();
                                }
                                contract.Allowance1 = hreContract.Allowance1;
                                contract.Allowance2 = hreContract.Allowance2;
                                contract.Allowance3 = hreContract.Allowance3;
                                contract.Allowance4 = hreContract.Allowance4;
                                contract.Allowance5 = hreContract.Allowance5;
                                contract.Allowance6 = hreContract.Allowance6;
                                contract.Allowance7 = hreContract.Allowance7;
                                contract.Allowance8 = hreContract.Allowance8;
                                contract.Allowance9 = hreContract.Allowance9;
                                contract.Allowance10 = hreContract.Allowance10;
                                contract.Allowance11 = hreContract.Allowance11;
                                contract.Allowance12 = hreContract.Allowance12;
                                contract.Allowance13 = hreContract.Allowance13;
                                contract.Allowance14 = hreContract.Allowance14;
                                contract.Allowance15 = hreContract.Allowance15;

                                contract.E_Allowance1 = hreContract.Allowance1 != null ? hreContract.Allowance1.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance2 = hreContract.Allowance2 != null ? hreContract.Allowance2.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance3 = hreContract.Allowance3 != null ? hreContract.Allowance3.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance4 = hreContract.Allowance4 != null ? hreContract.Allowance4.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance5 = hreContract.Allowance5 != null ? hreContract.Allowance5.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance6 = hreContract.Allowance6 != null ? hreContract.Allowance6.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance7 = hreContract.Allowance7 != null ? hreContract.Allowance7.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance8 = hreContract.Allowance8 != null ? hreContract.Allowance8.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance9 = hreContract.Allowance9 != null ? hreContract.Allowance9.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance10 = hreContract.Allowance10 != null ? hreContract.Allowance10.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance11 = hreContract.Allowance11 != null ? hreContract.Allowance11.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance12 = hreContract.Allowance12 != null ? hreContract.Allowance12.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance13 = hreContract.Allowance13 != null ? hreContract.Allowance13.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance14 = hreContract.Allowance14 != null ? hreContract.Allowance14.ToString().Encrypt() : string.Empty;
                                contract.E_Allowance15 = hreContract.Allowance15 != null ? hreContract.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            contract.CurenncyIDSalary = hreContract.CurenncyIDSalary;
                            contract.CurenncyID = hreContract.CurenncyID;

                            contract.AllowanceID1 = hreContract.AllowanceID1;
                            contract.CurenncyID1 = hreContract.CurenncyID1;

                            contract.AllowanceID2 = hreContract.AllowanceID2;
                            contract.CurenncyID2 = hreContract.CurenncyID2;

                            contract.AllowanceID3 = hreContract.AllowanceID3;
                            contract.CurenncyID3 = hreContract.CurenncyID3;

                            contract.AllowanceID4 = hreContract.AllowanceID4;
                            contract.CurenncyID4 = hreContract.CurenncyID4;

                            contract.AllowanceID5 = hreContract.AllowanceID5;
                            contract.CurenncyID5 = hreContract.CurenncyID5;

                            contract.AllowanceID6 = hreContract.AllowanceID6;
                            contract.CurenncyID6 = hreContract.CurenncyID6;

                            contract.AllowanceID7 = hreContract.AllowanceID7;
                            contract.CurenncyID7 = hreContract.CurenncyID7;

                            contract.AllowanceID8 = hreContract.AllowanceID8;
                            contract.CurenncyID8 = hreContract.CurenncyID8;

                            contract.AllowanceID9 = hreContract.AllowanceID9;
                            contract.CurenncyID9 = hreContract.CurenncyID9;

                            contract.AllowanceID10 = hreContract.AllowanceID10;
                            contract.CurenncyID10 = hreContract.CurenncyID10;

                            contract.AllowanceID11 = hreContract.AllowanceID11;
                            contract.CurenncyID11 = hreContract.CurenncyID11;

                            contract.AllowanceID12 = hreContract.AllowanceID12;
                            contract.CurenncyID12 = hreContract.CurenncyID12;

                            contract.AllowanceID13 = hreContract.AllowanceID13;
                            contract.CurenncyID13 = hreContract.CurenncyID13;

                            contract.AllowanceID14 = hreContract.AllowanceID14;
                            contract.CurenncyID14 = hreContract.CurenncyID14;

                            contract.AllowanceID15 = hreContract.AllowanceID15;
                            contract.CurenncyID15 = hreContract.CurenncyID15;

                            contract.OrgStructureID = hreContract.OrgStructureID;
                            if (jobtitleID != null)
                            {
                                contract.JobTitleID = jobtitleID;
                            }
                            if (positionID != null)
                            {
                                contract.PositionID = positionID;
                            }
                            if (salaryClassID != null)
                            {
                                contract.ClassRateID = salaryClassID;
                            }
                            if (salaryRankID != null)
                            {
                                contract.RankRateID = salaryRankID;
                            }
                            if (salary != null && currencyID != null)
                            {
                                contract.CurenncyIDSalary = currencyID;
                                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                {
                                    contract.E_Salary = salary.ToString().Encrypt();
                                }
                                else
                                {
                                    contract.Salary = salary;
                                    contract.E_Salary = salary.ToString().Encrypt();
                                }
                            }
                            contract.WorkPlaceID = hreContract.WorkPlaceID;
                            contract.CompanyID = hreContract.CompanyID;
                            contract.PayrollGroupID = hreContract.PayrollGroupID;
                            contract.EmployeeTypeID = hreContract.EmployeeTypeID;
                            contract.CostCentreID = hreContract.CostCentreID;
                            contract.EmployeeGroupID = hreContract.EmployeeGroupID;
                            contract.CostActivityID = hreContract.CostActivityID;
                            contract.LaborType = hreContract.LaborType;
                            contract.AbilityTileID = hreContract.AbilityTileID;
                            contract.PayrollCategoryID = hreContract.PayrollCategoryID;
                            contract.UnitStructureID = hreContract.UnitStructureID;
                            contract.DelegateCompanyID = hreContract.DelegateCompanyID;
                            contract.DateAuthorize = hreContract.DateAuthorize;
                        }
                        AddMessage = contractServices.Add(contract);
                        #endregion
                    }
                }
                else
                {
                    if (nextContractTypeID == null || nextContractTypeID == Guid.Empty)
                    {
                        AddMessage = "Error";
                        return Json(AddMessage);
                    }
                    else
                    {
                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        string messageref = _ContractServices.ValidateMaxTimeSignContract(hreContract.ProfileID, nextContractTypeID.Value, _MAXCASUAL,
                                             _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, hreContract.CompanyID);
                        if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                        {
                            return Json(messageref);
                        }
                        #endregion

                        #region Xử lý tạo mới HĐ
                        var contract = new Hre_ContractEntity();
                        hreContract.CopyData(contract);
                        contract.ContractTypeID = nextContractTypeID.Value;
                        var catContractType = new Cat_ContractTypeEntity();
                        catContractType = lstContractType.Where(s => s.ID == nextContractTypeID).FirstOrDefault();
                        contract.DateStart = hreContract.DateEnd.Value.AddDays(1);
                        if (catContractType != null)
                        {
                            contract.Duration = catContractType.ValueTime;
                            contract.UnitTime = catContractType.UnitTime;
                            if (!string.IsNullOrEmpty(catContractType.Formula))
                            {
                                var contractEntity = new Hre_ContractEntity();
                                contractEntity.ProfileID = contract.ProfileID;
                                contractEntity.ContractTypeID = nextContractTypeID.Value;
                                contractEntity.DateStart = contract.DateStart;
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                contract.DateEnd = contractEntity.DateEnd;
                            }
                            else
                            {
                                int month = 0;
                                if (catContractType.ValueTime != null)
                                {
                                    month = (int)catContractType.ValueTime.Value;
                                }
                                if (catContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                                {
                                    month = month * 12;
                                }

                                if (hreContract.DateEnd != null && month > 0)
                                {
                                    contract.DateEnd = contract.DateStart.AddMonths(month);
                                }
                                else
                                {
                                    contract.DateEnd = null;
                                }
                            }
                        }
                        else
                        {
                            contract.DateEnd = null;
                        }
                        if (lstBasicSalary != null)
                        {
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lstBasicSalary.InsuranceAmount != null)
                                {
                                    contract.E_InsuranceAmount = lstBasicSalary.InsuranceAmount.ToString().Encrypt();
                                }
                            }
                            else
                            {
                                if (lstBasicSalary.InsuranceAmount != null)
                                {
                                    contract.InsuranceAmount = lstBasicSalary.InsuranceAmount;
                                    contract.E_InsuranceAmount = lstBasicSalary.InsuranceAmount.ToString().Encrypt();
                                }
                            }
                            contract.CurenncyID1 = lstBasicSalary.CurrencyID1;
                            contract.ClassRateID = lstBasicSalary.ClassRateID;
                            contract.RankRateID = lstBasicSalary.RankRateID;
                        }
                        #region Son.Vo - 20160927 - 0073816
                        var lstContractByProfile = lstContractallByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).ToList();
                        var listContractTypeIDs = lstContractByProfile.Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                        contractEntityForContractno.ContractNo = null;
                        contractServices.SetNewCodeContract(contractEntityForContractno, listContractTypeIDs);
                        contract.ContractNo = contractEntityForContractno.ContractNo;

                        var profilebyContract = lstProfile.Where(s => s.ID == contract.ProfileID).FirstOrDefault();
                        if (profilebyContract != null)
                        {
                            contract.PCountryID = profilebyContract.PCountryID;
                            contract.PProvinceID = profilebyContract.PProvinceID;
                            contract.PDistrictID = profilebyContract.PDistrictID;
                            contract.PVillageID = profilebyContract.VillageID;
                        }
                        contract.DateSigned = hreContract.DateEnd;
                        contract.DateExtend = contract.DateEnd;
                        if (jobtitleID != null)
                        {
                            contract.JobTitleID = jobtitleID;
                        }
                        if (positionID != null)
                        {
                            contract.PositionID = positionID;
                        }
                        if (salaryClassID != null)
                        {
                            contract.ClassRateID = salaryClassID;
                        }
                        if (salaryRankID != null)
                        {
                            contract.RankRateID = salaryRankID;
                        }
                        if (salary != null && currencyID != null)
                        {
                            contract.CurenncyIDSalary = currencyID;
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                contract.E_Salary = salary.ToString().Encrypt();
                            }
                            else
                            {
                                contract.Salary = salary;
                                contract.E_Salary = salary.ToString().Encrypt();
                            }
                        }
                        #endregion
                        //Xử lý khi tạo hđ kế ở màn hình ds hđ mlc hết hạn
                        //if (IsMLC == "True")
                        //{
                        //    contract.IsMLC = true;
                        //}
                        AddMessage = contractServices.Add(contract);
                        #endregion
                    }
                }
            }
            return Json(AddMessage);
        }

        //Son.Vo - sinh ngày HĐ khi chọn loại hđ ở màn hình tạo mới HĐ
        [HttpPost]
        public ActionResult GetDateContractByContractType(string ContractTypeID, string ProfileID, string IsMLC, int? duration, bool? IsIncludeProbationTime)
        {
            string status = string.Empty;
            var contractTypeID = Guid.Empty;
            var profileID = Guid.Empty;
            if (!string.IsNullOrEmpty(ContractTypeID))
            {
                contractTypeID = Common.ConvertToGuid(ContractTypeID);
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                if (ProfileID.IndexOf(',') > 1)
                {
                    var profileIDs = ProfileID.Split(',');
                    profileID = Common.ConvertToGuid(profileIDs[0]);
                }
                else
                {
                    profileID = Common.ConvertToGuid(ProfileID);
                }
            }
            var actionService = new ActionService(UserLogin);
            var contractTypeEntity = actionService.GetData<Cat_ContractTypeEntity>(contractTypeID, ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status).FirstOrDefault();
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileForCreateContract(profileID);
            var contractServices = new Hre_ContractServices();
            var lstcontractByprofile = contractServices.GetLstContractByProfileID(profileID).Where(s => s.Status != EnumDropDown.Status.E_REJECTED.ToString() || s.Status == null).ToList();
            //Son.Vo - 20160928 - 0073739
            if (IsMLC == "True")
            {
                lstcontractByprofile = lstcontractByprofile.Where(s => s.IsMLC == true).ToList();
            }
            else
            {
                lstcontractByprofile = lstcontractByprofile.Where(s => s.IsMLC == null || s.IsMLC == false).ToList();
            }
            if (contractTypeEntity != null)
            {
                //Son.Vo - 20170615 - 0084178 - nếu thay đổi thời hạn trên giao diện thì lấy thời hạn trên giao diện rồi 
                if (duration != null)
                {
                    contractTypeEntity.ValueTime = duration;
                }
                string E_NODURATION = EnumDropDown.TypeContract.E_NODURATION.ToString();
                string E_PROBATION = EnumDropDown.TypeContract.E_PROBATION.ToString();
                string E_APPRENTICESHIP = EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString();
                //Son.Vo - 20170711 - 0084848
                if (IsIncludeProbationTime == true)
                {
                    if (profile.DatehireNew == null)
                    {
                        contractTypeEntity.DateStart = profile.DateHire;
                        contractTypeEntity.DateSigned = profile.DateHire;
                    }
                    else
                    {
                        contractTypeEntity.DateStart = profile.DatehireNew;
                        contractTypeEntity.DateSigned = profile.DatehireNew;
                    }
                }
                else
                {
                    //Son.Vo - 20160823 - 0072348: Điều chỉnh logic xử lý ngày bắt đầu hợp đồng
                    //Nguyen.Le - 06/12/2017 - 0090727 Điều chỉnh logic load ngày bắt đầu HĐ
                    if (profile.DatehireNew == null || profile.DatehireNew == profile.DateHire)
                    {
                        if (lstcontractByprofile.Count == 0)
                        {
                            //Son.Vo - 20161213 - 0076514 - điều chỉnh task 0072348
                            if (contractTypeEntity.Type == E_PROBATION || contractTypeEntity.Type == E_APPRENTICESHIP)
                            {
                                DateTime dateStart = profile.DateHire != null ? profile.DateHire.Value : DateTime.Now;
                                contractTypeEntity.DateStart = dateStart;
                                contractTypeEntity.DateSigned = dateStart;
                            }
                            else
                            {
                                if (profile.DateEndProbation != null)
                                {
                                    DateTime dateStart = profile.DateEndProbation.Value.AddDays(1);
                                    contractTypeEntity.DateStart = dateStart;
                                    contractTypeEntity.DateSigned = dateStart;
                                }
                                else
                                {
                                    DateTime dateStart = profile.DateHire != null ? profile.DateHire.Value : DateTime.Now;
                                    contractTypeEntity.DateStart = dateStart;
                                    contractTypeEntity.DateSigned = dateStart;
                                }
                            }
                        }
                        else
                        {
                            var lastContract = lstcontractByprofile.Where(s => s.ProfileID == profileID && (s.Status != EnumDropDown.Status.E_REJECTED.ToString())).OrderByDescending(s => s.DateStart).FirstOrDefault();
                            if (lastContract != null)
                            {
                                //Son.Vo - 20170623 - 0084604
                                if (lastContract.TerminateDate != null)
                                {
                                    contractTypeEntity.DateStart = lastContract.TerminateDate;
                                    contractTypeEntity.DateSigned = lastContract.TerminateDate;
                                }
                                else
                                {
                                    //Son.Vo - 20180126 - 0092692
                                    if (lastContract.DateExtend != null)
                                    {
                                        contractTypeEntity.DateStart = lastContract.DateExtend.Value.AddDays(1);
                                        contractTypeEntity.DateSigned = lastContract.DateExtend.Value.AddDays(1);
                                    }
                                    else if (lastContract.DateEnd != null)
                                    {
                                        contractTypeEntity.DateStart = lastContract.DateEnd.Value.AddDays(1);
                                        contractTypeEntity.DateSigned = lastContract.DateEnd.Value.AddDays(1);
                                    }
                                    else
                                    {
                                        contractTypeEntity.DateStart = DateTime.Now;
                                        contractTypeEntity.DateSigned = DateTime.Now;
                                    }
                                }
                            }
                            else
                            {
                                contractTypeEntity.DateStart = DateTime.Now;
                                contractTypeEntity.DateSigned = DateTime.Now;
                            }
                        }
                    }
                    else
                    {
                        if (lstcontractByprofile.Count == 0)
                        {
                            DateTime DateStart = profile.DatehireNew != null ? profile.DatehireNew.Value : DateTime.Now;
                            contractTypeEntity.DateStart = DateStart;
                            contractTypeEntity.DateSigned = DateStart;
                        }
                        else
                        {
                            var lastContract = lstcontractByprofile.Where(s => s.ProfileID == profileID && s.Status != EnumDropDown.Status.E_REJECTED.ToString()).OrderByDescending(s => s.DateStart).FirstOrDefault();
                            if (lastContract != null && lastContract.DateStart >= profile.DatehireNew)
                            {
                                //Son.Vo - 20170623 - 0084604
                                if (lastContract.TerminateDate != null)
                                {
                                    contractTypeEntity.DateStart = lastContract.TerminateDate;
                                    contractTypeEntity.DateSigned = lastContract.TerminateDate;
                                }
                                else
                                {
                                    //Son.Vo - 20180126 - 0092692
                                    if (lastContract.DateExtend != null)
                                    {
                                        contractTypeEntity.DateStart = lastContract.DateExtend.Value.AddDays(1);
                                        contractTypeEntity.DateSigned = lastContract.DateExtend.Value.AddDays(1);
                                    }
                                    else if (lastContract.DateEnd != null)
                                    {
                                        contractTypeEntity.DateStart = lastContract.DateEnd.Value.AddDays(1);
                                        contractTypeEntity.DateSigned = lastContract.DateEnd.Value.AddDays(1);
                                    }
                                    else
                                    {
                                        DateTime DateStart = profile.DatehireNew != null ? profile.DatehireNew.Value : DateTime.Now;
                                        contractTypeEntity.DateStart = DateStart;
                                        contractTypeEntity.DateSigned = DateStart;
                                    }
                                }
                            }
                            else
                            {
                                DateTime DateStart = profile.DatehireNew != null ? profile.DatehireNew.Value : DateTime.Now;
                                contractTypeEntity.DateStart = DateStart;
                                contractTypeEntity.DateSigned = DateStart;
                            }
                        }
                    }
                }

                if (contractTypeEntity.ValueTime != null && contractTypeEntity.Type != E_NODURATION)
                {
                    if (contractTypeEntity.UnitTime == EnumDropDown.UnitType.E_YEAR.ToString())
                    {
                        var valueTime = (int)contractTypeEntity.ValueTime.Value;
                        contractTypeEntity.DateEnd = contractTypeEntity.DateStart.Value.AddYears(valueTime);
                    }
                    else if (contractTypeEntity.UnitTime == EnumDropDown.UnitType.E_MONTH.ToString())
                    {
                        var valueTime = (int)contractTypeEntity.ValueTime.Value;
                        contractTypeEntity.DateEnd = contractTypeEntity.DateStart.Value.AddMonths(valueTime);
                    }
                    //Son.Vo - 20161028 - 0074744
                    else if (contractTypeEntity.UnitTime == EnumDropDown.UnitType.E_DAY.ToString())
                    {
                        var valueTime = (int)contractTypeEntity.ValueTime.Value;
                        contractTypeEntity.DateEnd = contractTypeEntity.DateStart.Value.AddDays(valueTime);
                    }
                }
                if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                {
                    if (contractTypeEntity != null)
                    {
                        var contractEntity = new Hre_ContractEntity();
                        contractEntity.ProfileID = profileID;
                        contractEntity.ContractTypeID = contractTypeEntity.ID;
                        contractEntity.DateStart = contractTypeEntity.DateStart.Value;
                        contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                        contractTypeEntity.DateEnd = contractEntity.DateEnd;
                    }
                }
                //Son.Vo - 20161028 - 0074743
                if (contractTypeEntity.DateEnd != null)
                {
                    if (contractTypeEntity.NoneEndContract == true)
                    {
                        contractTypeEntity.DateEnd = contractTypeEntity.DateEnd.Value.AddDays(-1);
                    }
                    else if (contractTypeEntity.NoneEndContract != true && string.IsNullOrEmpty(contractTypeEntity.Formula))
                    {
                        contractTypeEntity.DateEnd = contractTypeEntity.DateEnd.Value.AddDays(-1);
                    }
                }
                //Son.Vo - 20161028 - 0074873
                if (contractTypeEntity.Type == E_PROBATION
                    && profile != null && contractTypeEntity.Formula == null && contractTypeEntity.ValueTime == null)
                {
                    contractTypeEntity.DateEnd = profile.DateEndProbation;
                }
                //Son.Vo - 20170412 - 0081200
                if (contractTypeEntity.IsSocialInsurance == true || contractTypeEntity.IsHealthInsurance == true || contractTypeEntity.IsUnEmployInsurance == true)
                {
                    contractTypeEntity.IsCreateInsuranceSalary = true;
                }
            }
            return Json(contractTypeEntity, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - sinh ngày HĐ khi chọn loại hđ
        [HttpPost]
        public ActionResult GetWorkHistoryDataForCreateContract(DateTime? dateStart, string ProfileID)
        {
            if (dateStart != null && !string.IsNullOrEmpty(ProfileID))
            {
                var workhistoryServices = new Hre_WorkHistoryServices();
                Guid profileID = Common.ConvertToGuid(ProfileID);
                var workhistoryEntity = workhistoryServices.GetWorkHistoryDataForCreateContract(dateStart.Value, profileID);
                return Json(workhistoryEntity, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult UpdateStatusApprovedContract(string selectedIds, string Status)
        {
            var service = new Hre_ContractServices();
            service.SubmitStatus(selectedIds, Status);
            return Json("true", JsonRequestBehavior.AllowGet);
        }

        // Son.Vo - 20150529 - cập nhật kết quả đánh giá HĐ
        [HttpPost]
        public ActionResult UpdateEvaContract([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstContractEidt = new List<Hre_ContractEntity>();
            var lstIDs = new List<Guid>();
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }

            var actionService = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            var lstContract = contractServices.GetContractDataByIDs(lstIDs);

            foreach (var item in lstContract)
            {
                if (model.RankDetailForNextContract != null)
                {
                    item.RankDetailForNextContract = model.RankDetailForNextContract;
                }

                if (model.DateEndNextContract != null)
                {
                    item.DateEndNextContract = model.DateEndNextContract;
                }

                // Son.Vo - 20150613 - theo task 0049393
                if (lstContract.Count == 1 && model.RankDetailForNextContract == null)
                {
                    item.RankDetailForNextContract = item.RankRateID;
                }

                message = contractServices.Edit(item);
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }

        // Son.Vo - 20150529 - Gia hạn HĐ
        [HttpPost]
        public ActionResult ExtendContract([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstIDs = new List<Guid>();
            var ContractServices = new Hre_ContractServices();
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }
            var lstContract = ContractServices.GetContractDataByIDs(lstIDs);

            foreach (var item in lstContract)
            {
                item.DateExtend = model.DateExtendTo;
                ContractServices.Edit(item);
                var Entity = new Hre_ContractExtendEntity();
                Entity.ContractID = item.ID;
                Entity.DateStart = model.DateExtendFrom;
                Entity.DateEnd = model.DateExtendTo;
                //Son.Vo - 20160714 - 0070308:DS hợp đồng đến hạn: Update loại phụ lục
                Entity.TypeAppendix = EnumDropDown.TypeAppendix.E_EXTEND.ToString();
                message = ContractServices.Add(Entity);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Contract (Hre_Contract) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetContractList([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            if (model.WorkPlaceID != null)
            {
                model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
            }
            if (model.ClassRateID != null)
            {
                model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
            }

            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ContractList, UserLogin, ref status);
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["E_Salary"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Salary"].ToString()))
                {
                    dr["Salary"] = dr["E_Salary"].ToString().DecryptValue();
                }
                if (dr["E_InsuranceAmount"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_InsuranceAmount"].ToString()))
                {
                    dr["InsuranceAmount"] = dr["E_InsuranceAmount"].ToString().DecryptValue();
                }
                if (dr["E_Allowance"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance"].ToString()))
                {
                    dr["Allowance"] = dr["E_Allowance"].ToString().DecryptValue();
                }
                if (dr["E_Allowance1"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance1"].ToString()))
                {
                    dr["Allowance1"] = dr["E_Allowance1"].ToString().DecryptValue();
                }
                if (dr["E_Allowance2"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance2"].ToString()))
                {
                    dr["Allowance2"] = dr["E_Allowance2"].ToString().DecryptValue();
                }
                if (dr["E_Allowance3"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance3"].ToString()))
                {
                    dr["Allowance3"] = dr["E_Allowance3"].ToString().DecryptValue();
                }
                if (dr["E_Allowance4"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance4"].ToString()))
                {
                    dr["Allowance4"] = dr["E_Allowance4"].ToString().DecryptValue();
                }
                if (dr["E_Allowance5"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance5"].ToString()))
                {
                    dr["Allowance5"] = dr["E_Allowance5"].ToString().DecryptValue();
                }
                if (dr["E_Allowance6"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance6"].ToString()))
                {
                    dr["Allowance6"] = dr["E_Allowance6"].ToString().DecryptValue();
                }
                if (dr["E_Allowance7"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance7"].ToString()))
                {
                    dr["Allowance7"] = dr["E_Allowance7"].ToString().DecryptValue();
                }
                if (dr["E_Allowance8"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance8"].ToString()))
                {
                    dr["Allowance8"] = dr["E_Allowance8"].ToString().DecryptValue();
                }
                if (dr["E_Allowance9"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance9"].ToString()))
                {
                    dr["Allowance9"] = dr["E_Allowance9"].ToString().DecryptValue();
                }
                if (dr["E_Allowance10"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance10"].ToString()))
                {
                    dr["Allowance10"] = dr["E_Allowance10"].ToString().DecryptValue();
                }
                if (dr["E_Allowance11"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance11"].ToString()))
                {
                    dr["Allowance11"] = dr["E_Allowance11"].ToString().DecryptValue();
                }
                if (dr["E_Allowance12"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance12"].ToString()))
                {
                    dr["Allowance12"] = dr["E_Allowance12"].ToString().DecryptValue();
                }
                if (dr["E_Allowance13"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance13"].ToString()))
                {
                    dr["Allowance13"] = dr["E_Allowance13"].ToString().DecryptValue();
                }
                if (dr["E_Allowance14"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance14"].ToString()))
                {
                    dr["Allowance14"] = dr["E_Allowance14"].ToString().DecryptValue();
                }
                if (dr["E_Allowance15"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance15"].ToString()))
                {
                    dr["Allowance15"] = dr["E_Allowance15"].ToString().DecryptValue();
                }
            }
            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;
        }

        [HttpPost]
        public ActionResult ExportExcelContractList([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var action = new ActionService(UserLogin);
            var _ProfileServices = new Hre_ProfileServices();
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            var result = new List<Hre_ContractModel>();
            var lstProfileIDs = new List<Guid>();

            if (!model.IsCreateTemplate)
            {
                if (model.WorkPlaceID != null)
                {
                    model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
                }
                if (model.ClassRateID != null)
                {
                    model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
                }
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractList, ref status);
                var lstRegionIDs = result.Where(s => s.RegionID != null).Select(s => s.RegionID.Value).Distinct().ToList();
                var listRegionDetail = _ProfileServices.GetLstRegionDetailByRegionIDs(lstRegionIDs);
                var lstContractIDs = result.Select(s => s.ID).ToList();
                var _ContractExtendServices = new Hre_ContractExtendServices();
                var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
                foreach (var item in result)
                {
                    //[To.Le][04/07/2016][New Func][0069723]	Ngày bắt đầu ngày kết thúc phụ lục: Lấy lên ngày bắt đầu phụ lục loại gia hạn của hợp đồng TypeAppendix= ‘E_EXTEND’
                    var contractExtend = lstContractExtend.Where(s => s.ContractID == item.ID && s.TypeAppendix == EnumDropDown.TypeAppendix.E_EXTEND.ToString()).FirstOrDefault();
                    if (contractExtend != null)
                    {
                        if (contractExtend.DateStart != null)
                        {
                            item.DateExtendFrom = contractExtend.DateStart;
                        }
                        if (contractExtend.DateEnd != null)
                        {
                            item.DateExtendTo = contractExtend.DateEnd;
                        }
                    }
                    //Lương vùng đóng BH thấp nhất , cao nhất
                    var regionDetail = listRegionDetail.Where(m => m.RegionID == item.RegionID).FirstOrDefault();
                    if (regionDetail.HasValue() && regionDetail.MinSalary.HasValue)
                    {
                        item.MinSalary = regionDetail.MinSalary;
                    }
                    if (regionDetail.HasValue() && regionDetail.MaxSalary.HasValue)
                    {
                        item.MaxSalary = regionDetail.MaxSalary;
                    }
                }
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            var HeaderInfo1 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };
            var headerInfo2 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var lstHeaderInfo = new List<HeaderInfo>() { HeaderInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractModel(),
                    FileName = "Hre_ContractModel",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);
        }

        [HttpPost]
        public ActionResult GetReportContractDetailAllList([DataSourceRequest] DataSourceRequest request, Hre_ReportContractDetailAllSearchModel model)
        {
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo4 };
            string status = string.Empty;
            var isDataTable = false;
            request.PageSize = Int16.MaxValue - 1;
            if (model.IsLastestContract == true)
            {
                request.PageSize = int.MaxValue - 1;
            }
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            #region tao table
            DataTable table = new DataTable("Hre_ReportContractDetailModel");
            table.Columns.Add("Stt", typeof(int));
            table.Columns.Add("CodeEmp");
            table.Columns.Add("ProfileName");
            table.Columns.Add("CodeEmpClient");
            table.Columns.Add("OrgStructureCode");
            table.Columns.Add("OrgStructureName");
            table.Columns.Add("E_DIVISION");
            table.Columns.Add("E_DIVISION_CODE");
            table.Columns.Add("E_DEPARTMENT");
            table.Columns.Add("E_DEPARTMENT_CODE");
            table.Columns.Add("E_SECTION");
            table.Columns.Add("E_SECTION_CODE");
            table.Columns.Add("E_OU_L8");
            table.Columns.Add("E_OU_L8_CODE");
            table.Columns.Add("E_OU_L9");
            table.Columns.Add("E_OU_L9_CODE");
            table.Columns.Add("E_OU_L10");
            table.Columns.Add("E_OU_L10_CODE");
            table.Columns.Add("E_OU_L11");
            table.Columns.Add("E_OU_L11_CODE");
            table.Columns.Add("RegionName");
            table.Columns.Add("WorkPlaceName");
            table.Columns.Add("DateHire", typeof(DateTime));
            table.Columns.Add("DatehireNew", typeof(DateTime));
            table.Columns.Add("ContractCount", typeof(int));
            table.Columns.Add("AppendixContractCout", typeof(int));
            table.Columns.Add("LastContractNo");
            table.Columns.Add("LastContractDateStart", typeof(DateTime));
            table.Columns.Add("LastContractDateEnd", typeof(DateTime));
            table.Columns.Add("LastAppContractDateEnd", typeof(DateTime));
            table.Columns.Add("RestEffectiveTime", typeof(double));
            table.Columns.Add("LastTypeOfContractName");
            table.Columns.Add("ContracProbationNo");
            table.Columns.Add("ContracProbationDateStart", typeof(DateTime));
            table.Columns.Add("ContracProbationDateEnd", typeof(DateTime));
            table.Columns.Add("DateQuit", typeof(DateTime));
            table.Columns.Add("TypeOfStopName");
            table.Columns.Add("ContractStatus");
            for (int i = 1; i <= 3; i++)
            {
                table.Columns.Add("ContractNo_" + i);
                //Son.Vo - 20160418 - 0066547
                table.Columns.Add("ContractTypeName_" + i);
                table.Columns.Add("DateStart_" + i, typeof(DateTime));
                table.Columns.Add("DateEnd_" + i, typeof(DateTime));
                for (int j = 1; j <= 5; j++)
                {
                    table.Columns.Add("AppendixNo_" + i + "_" + j);
                    //Son.Vo - 20160418 - 0066547
                    table.Columns.Add("AppendixContractTypeName_" + i + "_" + j);
                    table.Columns.Add("AppendixStatus_" + i + "_" + j);
                    table.Columns.Add("AppendixDateStart_" + i + "_" + j, typeof(DateTime));
                    table.Columns.Add("AppendixDateEnd_" + i + "_" + j, typeof(DateTime));
                }
            }
            #endregion
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = table,
                    FileName = "Hre_ReportContractDetailModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_ReportContractDetailModel>();

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ReportContractDetailModel, Hre_ContractEntity, Hre_ReportContractDetailAllSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptContractContractDetailAll, ref status);
            }

            result = result.Where(s => s.ProfileID != null && s.ProfileID != Guid.Empty).ToList();
            var LstProIDs = result.Select(s => s.ProfileID).Distinct().ToList();
            var LstContractIDs = result.Select(s => s.ID).Distinct().ToList();

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var obj = new List<object>();
            obj.AddRange(new object[5]);
            obj[2] = EnumDropDown.TypeContract.E_PROBATION.ToString();
            obj[3] = 1;
            obj[4] = int.MaxValue - 1;
            var lstContracttype = _ActionService.GetData<Cat_ContractTypeEntity>(obj, ConstantSql.hrm_cat_sp_get_ContractType, ref status);

            var _ContractServices = new Hre_ContractServices();
            //var lstAppendixContract = _ContractServices.GetAppendixContractDataByLstContractIDs(LstContractIDs);
            var lstContractExtend = _ContractServices.GetContractExtendByLstContractIDs(LstContractIDs);
            int count = 0;
            foreach (var item in LstProIDs)
            {
                count++;
                var row = table.NewRow();
                var probationid = lstContracttype.Where(s => s.Type == EnumDropDown.TypeContract.E_PROBATION.ToString()).Select(s => s.ID);
                var ListContractByProfile = result.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateStart).Take(3).ToList();
                var ListContractCount = result.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateStart).ToList();

                var ContractProbation = ListContractByProfile.Where(s => probationid.Contains(s.ContractTypeID)).OrderByDescending(s => s.DateEnd).FirstOrDefault();

                var listcontractids = ListContractByProfile.Select(s => s.ID).ToList();
                //var Appdixcontractbyid = lstAppendixContract.Where(s => listcontractids.Contains(s.ContractID)).OrderByDescending(s => s.DateStart).Take(9).ToList();
                //Son.Vo - 20160531 - 0068313 - chuyển từ appendixcontract qua contractextend
                var lstcontractExtendByContract = lstContractExtend.Where(s => s.ContractID != null && listcontractids.Contains(s.ContractID.Value)).OrderByDescending(s => s.DateStart).ToList();
                if (ListContractByProfile != null && ListContractByProfile.Count() > 0 && ListContractByProfile[0] != null)
                {
                    var _lastcontract = ListContractByProfile.FirstOrDefault();
                    row["Stt"] = count;
                    row["CodeEmp"] = _lastcontract.CodeEmp;
                    row["ProfileName"] = _lastcontract.ProfileName;
                    row["CodeEmpClient"] = _lastcontract.CodeEmpClient;

                    row["OrgStructureCode"] = _lastcontract.OrgStructureCode;
                    row["OrgStructureName"] = _lastcontract.OrgStructureName;
                    row["RegionName"] = _lastcontract.RegionName;
                    row["WorkPlaceName"] = _lastcontract.WorkPlaceName;

                    row["E_DIVISION"] = _lastcontract.E_DIVISION;
                    row["E_DIVISION_CODE"] = _lastcontract.E_DIVISION_CODE;
                    row["E_DEPARTMENT"] = _lastcontract.E_DEPARTMENT;
                    row["E_DEPARTMENT_CODE"] = _lastcontract.E_DEPARTMENT_CODE;
                    row["E_SECTION"] = _lastcontract.E_SECTION;
                    row["E_SECTION_CODE"] = _lastcontract.E_SECTION_CODE;
                    row["E_OU_L8"] = _lastcontract.E_OU_L8;
                    row["E_OU_L8_CODE"] = _lastcontract.E_OU_L8_CODE;
                    row["E_OU_L9"] = _lastcontract.E_OU_L9;
                    row["E_OU_L9_CODE"] = _lastcontract.E_OU_L9_CODE;
                    row["E_OU_L10"] = _lastcontract.E_OU_L10;
                    row["E_OU_L10_CODE"] = _lastcontract.E_OU_L10_CODE;
                    row["E_OU_L11"] = _lastcontract.E_OU_L11;
                    row["E_OU_L11_CODE"] = _lastcontract.E_OU_L11_CODE;
                    if (_lastcontract.DatehireNew != null)
                    {
                        row["DatehireNew"] = _lastcontract.DatehireNew.Value;
                    }
                    if (_lastcontract.ContractStatus != null)
                    {
                        row["ContractStatus"] = _lastcontract.ContractStatus.TranslateString();
                    }
                    if (_lastcontract.DateHire != null)
                        row["DateHire"] = _lastcontract.DateHire;
                    row["ContractCount"] = ListContractCount.Count();
                    if (lstcontractExtendByContract != null)
                        row["AppendixContractCout"] = lstcontractExtendByContract.Count();
                    row["LastContractNo"] = _lastcontract.ContractNo;

                    if (_lastcontract.DateStart != null)
                        row["LastContractDateStart"] = _lastcontract.DateStart;
                    if (_lastcontract.DateEnd != null)
                        row["LastContractDateEnd"] = _lastcontract.DateEnd;
                    var contractExtend = lstcontractExtendByContract.FirstOrDefault();
                    if (contractExtend != null && contractExtend.DateEnd != null)
                        row["LastAppContractDateEnd"] = contractExtend.DateEnd;
                    double Month = 0;
                    if (_lastcontract.DateEnd != null)
                    {
                        try
                        {
                            Month = (Convert.ToDouble((_lastcontract.DateEnd - DateTime.Now).ToString().Substring(0, (_lastcontract.DateEnd - DateTime.Now).ToString().IndexOf('.')))) / 30;
                        }
                        catch
                        {
                            Month = 0;
                        }
                        if (Month < 0)
                        {
                            Month = 0;
                        }
                    }
                    row["RestEffectiveTime"] = Month;
                    row["LastTypeOfContractName"] = _lastcontract.ContractTypeName;
                    if (ContractProbation != null)
                    {
                        row["ContracProbationNo"] = ContractProbation.ContractNo;
                        if (ContractProbation.DateStart != null)
                            row["ContracProbationDateStart"] = ContractProbation.DateStart;
                        if (ContractProbation.DateEnd != null)
                            row["ContracProbationDateEnd"] = ContractProbation.DateEnd;
                    }
                    if (_lastcontract.DateQuit != null)
                        row["DateQuit"] = _lastcontract.DateQuit;
                    row["TypeOfStopName"] = _lastcontract.TypeOfStopName;
                    int _i = 0;
                    foreach (var _item in ListContractByProfile.OrderBy(s => s.DateStart))
                    {
                        _i++;
                        row["ContractNo_" + _i] = _item.ContractNo;
                        row["ContractTypeName_" + _i] = _item.ContractTypeName;
                        if (_item.DateStart != null)
                            row["DateStart_" + _i] = _item.DateStart;
                        if (_item.DateEnd != null)
                            row["DateEnd_" + _i] = _item.DateEnd;
                        int _j = 0;
                        var lstContractExByContract = lstcontractExtendByContract.Where(s => s.ContractID == _item.ID).ToList();
                        foreach (var extend in lstContractExByContract.OrderBy(s => s.DateStart).Take(5))
                        {
                            _j++;
                            row["AppendixNo_" + _i + "_" + _j] = extend.AnnexCode;
                            //Son.Vo - 20160531 - 0068313 - lấy loại pl theo TypeAppendix
                            if (extend.TypeAppendix != null)
                            {
                                row["AppendixContractTypeName_" + _i + "_" + _j] = extend.TypeAppendix.TranslateString();
                            }
                            if (extend.AppendixStatus != null)
                            {
                                row["AppendixStatus_" + _i + "_" + _j] = extend.AppendixStatus.TranslateString();
                            }
                            if (extend.DateStart != null)
                                row["AppendixDateStart_" + _i + "_" + _j] = extend.DateStart;
                            if (extend.DateEnd != null)
                                row["AppendixDateEnd_" + _i + "_" + _j] = extend.DateEnd;
                        }
                    }
                    table.Rows.Add(row);
                }
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, table, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return new JsonResult() { Data = table.ConfigTable(true).ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        [HttpPost]
        public ActionResult GetReportContractDetailList([DataSourceRequest] DataSourceRequest request, Hre_ReportContractDetailSearchModel model)
        {
            //Nguyen.Le - 14/11/2017 - 0089883
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };

            string status = string.Empty;
            var isDataTable = false;
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportContractDetailModel(),
                    FileName = "Hre_Contract",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_ReportContractDetailModel>();

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ReportContractDetailModel, Hre_ContractEntity, Hre_ReportContractDetailSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ReportContractDetail, ref status);
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            //Nguyen.Le - 14/11/2017 - 0089883
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);
        }

        public ActionResult ExportContractListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var lstResult = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractList, ref status);
            DataTable tb = new DataTable();
            var actionServices = new ActionService(UserLogin);
            var _ConstractSearchModel = new Hre_ContractSearchModel();
            var _lsContractAll = lstResult;

            var Lstobj = new List<object>();
            Lstobj.AddRange(new object[2]);
            Lstobj[0] = 1;
            Lstobj[1] = (int.MaxValue - 1);
            var _profileAll = actionServices.GetData<Hre_ProfileEntity>(Lstobj, ConstantSql.hrm_HR_SP_GET_onlyPROFILE, ref status);

            if (model.IsLastestContract == true && lstResult != null)
            {
                var lstProfileID = lstResult.Select(s => s.ProfileID).Distinct().ToList();
                if (lstProfileID.Count > 0)
                {
                    lstResult = lstResult.Where(s => lstProfileID.Contains(s.ProfileID)).OrderByDescending(s => s.DateStart).DistinctBy(s => s.ProfileID).ToList();
                }
            }

            #region lay thong tin hop dong
            for (int i = 0; i < lstResult.Count; i++)
            {
                #region Lay thong tin Profile
                var _profile = _profileAll.Where(s => s.ID == lstResult[i].ProfileID && lstResult[i].ProfileID != null).FirstOrDefault();
                if (_profile != null)
                {
                    if (_profile.DateOfBirth != null)
                        lstResult[i].DateOfBirth = _profile.DateOfBirth;
                    if (_profile.PlaceOfBirth != null)
                        lstResult[i].PlaceOfBirth = _profile.PlaceOfBirth;
                    if (_profile.JobTitleName != null)
                        lstResult[i].JobTitleName = _profile.JobTitleName;
                    if (_profile.PositionName != null)
                        lstResult[i].PositionName = _profile.PositionName;
                    if (_profile.PAddress != null)
                        lstResult[i].PAddress = _profile.PAddress;

                    if (_profile.PDistrictName != null)
                        lstResult[i].PDistrictName = _profile.PDistrictName;

                    if (_profile.PCountryName != null)
                        lstResult[i].PCountryName = _profile.PCountryName;

                    if (_profile.PProvinceName != null)
                        lstResult[i].PProvinceName = _profile.PProvinceName;

                    if (lstResult[i].ProfileName != null)
                    {
                        var _profilename = lstResult[i].ProfileName.Split(' ');
                        if (_profilename.Count() == 1)
                        {
                            lstResult[i].FristName = lstResult[i].ProfileName;
                        }
                        else
                        {
                            if (_profilename.Count() == 2)
                            {
                                lstResult[i].FristName = _profilename[0];
                                lstResult[i].LastName = _profilename[1];
                            }
                            else
                            {
                                lstResult[i].FristName = _profilename[0];
                                lstResult[i].LastName = _profilename[_profilename.Count() - 1];
                                for (int j = 1; j < _profilename.Count() - 1; j++)
                                {
                                    lstResult[i].TenDem = lstResult[i].TenDem + _profilename[j];
                                }
                            }

                        }
                    }
                }
                #endregion
                #region Lay thong tin hopn dong truoc do
                var _lsContract = _lsContractAll.Where(s => s.ProfileID == lstResult[i].ProfileID && lstResult[i].ProfileID != null).ToList();
                if (_lsContract != null && _lsContract.Count >= 2)
                {
                    _lsContract = _lsContract.Where(m => m.DateStart <= lstResult[i].DateStart && m.ID != lstResult[i].ID).ToList();
                    if (_lsContract != null && _lsContract.Count > 0)
                    {
                        Hre_ContractModel _contract = new Hre_ContractModel();
                        _contract = _lsContract.OrderByDescending(m => m.DateSigned).FirstOrDefault();
                        if (_contract.DateStart != null)
                        {
                            lstResult[i].DateStartOld = _contract.DateStart;
                            lstResult[i].DateStartOld_Day = _contract.DateStart.Day.ToString();
                            lstResult[i].DateStartOld_Month = _contract.DateStart.Month.ToString();
                            lstResult[i].DateStartOld_Year = _contract.DateStart.Year.ToString();
                        }
                        if (_contract.DateEnd != null)
                        {
                            lstResult[i].DateEndOld = _contract.DateEnd;
                            lstResult[i].DateEndOld_Day = _contract.DateEnd.Value.Day.ToString();
                            lstResult[i].DateEndOld_Month = _contract.DateEnd.Value.Month.ToString();
                            lstResult[i].DateEndOld_Year = _contract.DateEnd.Value.Year.ToString();
                        }
                        if (_contract.DateSigned != null)
                        {
                            lstResult[i].DateSignedOld = _contract.DateSigned;
                            lstResult[i].DateSignedOld_Day = _contract.DateSigned.Value.Day.ToString();
                            lstResult[i].DateSignedOld_Month = _contract.DateSigned.Value.Month.ToString();
                            lstResult[i].DateSignedOld_Year = _contract.DateSigned.Value.Year.ToString();
                        }
                    }
                }
                #endregion
            }
            #endregion

            var lstEntity = lstResult.Translate<Hre_ContractEntity>();
            tb = contractServices.GetDataContract(lstEntity, UserLogin);

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = tb,
                    FileName = "Hre_Contract",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, tb, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(lstResult.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Contract (Hre_Contract) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportContractList([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            BaseService objBase = new BaseService();
            DataTable _table = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            _table = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ContractList, UserLogin, ref status);
            //Nguyen.Le - 13/11/2017 - 0089928
            string message = ExportService.ExportDataTable(Guid.Empty, _table, model.ValueFields.Split(','), null);
            return Json(message);
            //return ExportAllAndReturn<Hre_ContractEntity, Hre_ContractModel, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractList);
        }

        [HttpPost]
        public ActionResult ExportContractMLCList([DataSourceRequest] DataSourceRequest request, Hre_ContractMLCSearchModel model)
        {
            return ExportAllAndReturn<Hre_ContractEntity, Hre_ContractModel, Hre_ContractMLCSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractMLCList);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Contract (Hre_Contract) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportContractSelected(string selectedIds, string valueFields)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_Contract";
            var status = string.Empty;
            List<object> lstObj = new List<object>();
            lstObj.Add(selectedIds);
            _table = objBase.GetDataTable(lstObj, ConstantSql.hrm_hr_sp_get_ContractByIds, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, valueFields.Split(','), null);
            return Json(message);

            //return ExportSelectedAndReturn<Hre_ContractEntity, Hre_ContractModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ContractByIds);
        }

        public ActionResult GetContractByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var result = ActionService.GetData<Hre_ContractViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ContractsByProfileId, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        #region Tất cả các hàm xuất word HĐ
        //Son.Vo - Xuất word theo loại HD9 ở màn hình DS HĐ
        //Son.Vo - chú ý thêm enum xuất word ở hàm này nhớ thêm luôn vào hàm ExportContractAllByTemplate
        public ActionResult ExportContractByTemplate(List<Guid> selectedIds, string valueFields, bool IsRar)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string dirpathZip = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpathZip))
                Directory.CreateDirectory(dirpathZip);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            var objs = new List<object>();
            var lstContract = _actionService.GetData<Hre_ContractEntity>(string.Join(",", selectedIds), ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status);
            if (lstContract == null || lstContract.Count == 0)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            String suffixZip = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folferPathZip = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            string folderNameZip = "ExportHreContractZip" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);

                folferPathZip = dirpath + "/" + folderNameZip;
                Directory.CreateDirectory(folferPathZip);
            }
            else
            {
                folferPath = dirpath;
                folferPathZip = dirpathZip;
            }
            var fileDoc = string.Empty;
            var fileDocZip = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            var lstProvince = _ProfileServices.GetProvinceDataAll();
            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            var lstExportID = lstContract.Where(s => s.ExportID != null).Select(s => s.ExportID.Value).Distinct().ToList();
            var exportServices = new Cat_ExportServices();
            var lstExportall = exportServices.GetListExport(lstExportID);
            var ExportToCheckOrder = lstExportall.FirstOrDefault();
            if (ExportToCheckOrder != null && ExportToCheckOrder.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(ExportToCheckOrder.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(ExportToCheckOrder.OrderNumber)).ToList();
                }
            }
            #endregion

            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var lstExportallcontemp = exportServices.GetListExportAll();
            string fileNameDownload = null;

            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(selectedIds);
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string outputPath = string.Empty;
                string outputPathZip = string.Empty;
                string templatepath = string.Empty;
                if (contract.ExportID.HasValue)
                    template = lstExportall.Where(s => s.ID == contract.ExportID).FirstOrDefault();

                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769  
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    //Nguyen.Le - 30/11/2017 - 0090371
                    //Quyen.Quach 23/12/2017 0091763
                    if (!string.IsNullOrEmpty(contract.E_ProbationSalary))
                    {
                        contract.ProbationSalary = contract.E_ProbationSalary.DecryptValue();
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance1))
                    {
                        var ProbationAllowance1 = double.Parse(contract.E_Allowance1.Decrypt());
                        contract.ProbationAllowance1 = (ProbationAllowance1 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance2))
                    {
                        var ProbationAllowance2 = double.Parse(contract.E_Allowance2.Decrypt());
                        contract.ProbationAllowance2 = (ProbationAllowance2 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance3))
                    {
                        var ProbationAllowance3 = double.Parse(contract.E_Allowance3.Decrypt());
                        contract.ProbationAllowance3 = (ProbationAllowance3 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance4))
                    {
                        var ProbationAllowance4 = double.Parse(contract.E_Allowance4.Decrypt());
                        contract.ProbationAllowance4 = (ProbationAllowance4 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance5))
                    {
                        var ProbationAllowance5 = double.Parse(contract.E_Allowance5.Decrypt());
                        contract.ProbationAllowance5 = (ProbationAllowance5 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance6))
                    {
                        var ProbationAllowance6 = double.Parse(contract.E_Allowance6.Decrypt());
                        contract.ProbationAllowance6 = (ProbationAllowance6 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance7))
                    {
                        var ProbationAllowance7 = double.Parse(contract.E_Allowance7.Decrypt());
                        contract.ProbationAllowance7 = (ProbationAllowance7 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance8))
                    {
                        var ProbationAllowance8 = double.Parse(contract.E_Allowance8.Decrypt());
                        contract.ProbationAllowance8 = (ProbationAllowance8 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance9))
                    {
                        var ProbationAllowance9 = double.Parse(contract.E_Allowance9.Decrypt());
                        contract.ProbationAllowance9 = (ProbationAllowance9 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance10))
                    {
                        var ProbationAllowance10 = double.Parse(contract.E_Allowance10.Decrypt());
                        contract.ProbationAllowance10 = (ProbationAllowance10 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance11))
                    {
                        var ProbationAllowance11 = double.Parse(contract.E_Allowance11.Decrypt());
                        contract.ProbationAllowance11 = (ProbationAllowance11 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance12))
                    {
                        var ProbationAllowance12 = double.Parse(contract.E_Allowance12.Decrypt());
                        contract.ProbationAllowance12 = (ProbationAllowance12 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance13))
                    {
                        var ProbationAllowance13 = double.Parse(contract.E_Allowance13.Decrypt());
                        contract.ProbationAllowance13 = (ProbationAllowance13 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance14))
                    {
                        var ProbationAllowance14 = double.Parse(contract.E_Allowance14.Decrypt());
                        contract.ProbationAllowance14 = (ProbationAllowance14 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance15))
                    {
                        var ProbationAllowance15 = double.Parse(contract.E_Allowance15.Decrypt());
                        contract.ProbationAllowance15 = (ProbationAllowance15 * contract.ProbationPercent) / 100;
                    }
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Quyen.Quach Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                #region Tong Salary
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary != null && totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv != null && totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                #endregion

                #region Son.Vo - 20170222 - 0079071 tổng lương thử việc + Phụ cấp
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region Tổng lương
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #region Tổng lương thử việc
                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion


                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);

                //Son.Vo - 20160615 - 0068977
                #region Salary Information
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                #endregion

                //Son.Vo - 20161018 - 0074557
                #region translate field salary
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                #endregion

                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }
                contractServices.Edit(contract);

                i++;
                #region WorkPermit
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                #endregion

                #region WorkhistoryByProsing
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }
                #endregion

                if (contract.ProfileIDCard != null)
                {
                    contract.IDCardNo = contract.ProfileIDCard;
                    contract.DateIDCardNo = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardNo = contract.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    contract.IDCardNo = contract.ProfileIDNo;
                    contract.DateIDCardNo = contract.ProfileIDDateOfIssue;
                    contract.PlaceIDCardNo = contract.IDPlaceOfIssue;
                }
                //hau.le-87891-20170919
                contract.IDPlaceOfIssueEN = contract.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(contract.IDPlaceOfIssueEN);

                #region Son.Vo - 20170228 - 0079357 - IDCard
                if (contract.PassportNo != null)
                {
                    contract.NoIDCardPass = contract.PassportNo;
                    contract.DateIDCardPass = contract.PassportDateOfIssue;
                    contract.PlaceIDCardPass = contract.PassportPlaceOfIssue;
                }
                if (contract.ProfileIDCard != null)
                {
                    contract.NoIDCardPass = contract.ProfileIDCard;
                    contract.DateIDCardPass = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardPass = contract.ProfileIDCardPlaceOfIssue;
                }
                if (contract.IDNo != null)
                {
                    contract.NoIDCardPass = contract.IDNo;
                    contract.DateIDCardPass = contract.IDDateOfIssue;
                    contract.PlaceIDCardPass = contract.IDPlaceOfIssue;
                }

                #endregion

                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion

                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                //Quyen.Quach 07/11/2017 0089648
                if (contract.DateStart23Plus != null)
                {
                    contract.DateStart23PlusFormat = contract.DateStart23Plus.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateStart24Plus != null)
                {
                    contract.DateStart24PlusFormat = contract.DateStart24Plus.Value.ToString("dd/MM/yyyy");
                }
                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(contract.PAddress) && contract.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = contract.PAddress.Split('#').ToList();
                    contract.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    contract.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion
                //Quyen.Quach 23/11/2017 0090325
                if (contract.DateEndProbation != null)
                {
                    contract.DateEndProbation1Plus = contract.DateEndProbation.Value.AddDays(1);
                    contract.DateEndProbation1PlusFormat = contract.DateEndProbation1Plus != null ? contract.DateEndProbation1Plus.Value.ToString("dd/MM/yyyy") : null;
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region Nguyen.Le 30/11/2017 0090489  xuất word hợp đồng nơi sinh tiếng Anh
                #endregion

                #region  Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                double? totalInsuranceAndAllowance = 0;
                double? totalAllowanceAmount = 0;
                if (contract.E_Allowance1 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance1.DecryptValue();
                }
                if (contract.E_Allowance2 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance2.DecryptValue();
                }
                if (contract.E_Allowance3 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance3.DecryptValue();
                }
                if (contract.E_Allowance4 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance4.DecryptValue();
                }
                if (contract.E_Allowance5 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance5.DecryptValue();
                }
                if (contract.E_Allowance6 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance6.DecryptValue();
                }
                if (contract.E_Allowance7 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance7.DecryptValue();
                }
                if (contract.E_Allowance8 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance8.DecryptValue();
                }
                if (contract.E_Allowance9 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance9.DecryptValue();
                }
                if (contract.E_Allowance10 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance10.DecryptValue();
                }
                if (contract.E_Allowance11 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance11.DecryptValue();
                }
                if (contract.E_Allowance12 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance12.DecryptValue();
                }
                if (contract.E_Allowance13 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance13.DecryptValue();
                }
                if (contract.E_Allowance14 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance14.DecryptValue();
                }
                if (contract.E_Allowance15 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance15.DecryptValue();
                }
                if (contract.E_InsuranceAmount != null)
                {
                    contract.InsuranceAmount = contract.E_InsuranceAmount.DecryptValue();
                    totalInsuranceAndAllowance = totalAllowanceAmount + contract.E_InsuranceAmount.DecryptValue();
                }
                contract.TotalAllowanceAmount = totalAllowanceAmount;
                contract.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion
                //Quyen.Quach 04/01/2018 0092018 
                contract.PlaceOfBirthEN = !string.IsNullOrEmpty(contract.PlaceOfBirth) ? RemoveSign4VietnameseString(contract.PlaceOfBirth) : string.Empty;
                contract.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(contract.ProfileIDPlaceOfIssue) ? RemoveSign4VietnameseString(contract.ProfileIDPlaceOfIssue) : string.Empty;
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (IsRar)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(dirpathDownload, urlOutPath, ext, lstFileOrder, fileNameDownload);
                        //var urlTask0085182 = Common.MultiExportMoreFile("", true, urlReturn, fileZipSplit[1]);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                        return Json(messageReturn);
                    }
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }

        public ActionResult ExportContractAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin);
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            if (model.WorkPlaceID != null)
            {
                model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
            }
            if (model.ClassRateID != null)
            {
                model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
            }
            request.PageSize = int.MaxValue - 1;
            var lstContract = GetListData<Hre_ContractEntity, Hre_ContractEntity, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractListForExportAll, ref status);

            if (lstContract == null)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            var templatepath = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            var lstProvince = _ProfileServices.GetProvinceDataAll();
            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            var lstExportID = lstContract.Where(s => s.ExportID != null).Select(s => s.ExportID.Value).Distinct().ToList();
            var exportServices = new Cat_ExportServices();
            var lstExportall = exportServices.GetListExport(lstExportID);
            var ExportToCheckOrder = lstExportall.FirstOrDefault();
            if (ExportToCheckOrder != null && ExportToCheckOrder.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(ExportToCheckOrder.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(ExportToCheckOrder.OrderNumber)).ToList();
                }
            }
            #endregion

            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var lstExportallcontemp = exportServices.GetListExportAll();
            string fileNameDownload = null;

            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string outputPath = string.Empty;
                if (contract.ExportID.HasValue)
                    template = lstExportall.Where(s => s.ID == contract.ExportID).FirstOrDefault();
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769 
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    //Nguyen.Le - 30/11/2017 - 0090371
                    //Quyen.Quach 23/12/2017 0091763
                    if (!string.IsNullOrEmpty(contract.E_ProbationSalary))
                    {
                        contract.ProbationSalary = contract.E_ProbationSalary.DecryptValue();
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance1))
                    {
                        var ProbationAllowance1 = double.Parse(contract.E_Allowance1.Decrypt());
                        contract.ProbationAllowance1 = (ProbationAllowance1 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance2))
                    {
                        var ProbationAllowance2 = double.Parse(contract.E_Allowance2.Decrypt());
                        contract.ProbationAllowance2 = (ProbationAllowance2 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance3))
                    {
                        var ProbationAllowance3 = double.Parse(contract.E_Allowance3.Decrypt());
                        contract.ProbationAllowance3 = (ProbationAllowance3 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance4))
                    {
                        var ProbationAllowance4 = double.Parse(contract.E_Allowance4.Decrypt());
                        contract.ProbationAllowance4 = (ProbationAllowance4 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance5))
                    {
                        var ProbationAllowance5 = double.Parse(contract.E_Allowance5.Decrypt());
                        contract.ProbationAllowance5 = (ProbationAllowance5 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance6))
                    {
                        var ProbationAllowance6 = double.Parse(contract.E_Allowance6.Decrypt());
                        contract.ProbationAllowance6 = (ProbationAllowance6 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance7))
                    {
                        var ProbationAllowance7 = double.Parse(contract.E_Allowance7.Decrypt());
                        contract.ProbationAllowance7 = (ProbationAllowance7 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance8))
                    {
                        var ProbationAllowance8 = double.Parse(contract.E_Allowance8.Decrypt());
                        contract.ProbationAllowance8 = (ProbationAllowance8 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance9))
                    {
                        var ProbationAllowance9 = double.Parse(contract.E_Allowance9.Decrypt());
                        contract.ProbationAllowance9 = (ProbationAllowance9 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance10))
                    {
                        var ProbationAllowance10 = double.Parse(contract.E_Allowance10.Decrypt());
                        contract.ProbationAllowance10 = (ProbationAllowance10 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance11))
                    {
                        var ProbationAllowance11 = double.Parse(contract.E_Allowance11.Decrypt());
                        contract.ProbationAllowance11 = (ProbationAllowance11 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance12))
                    {
                        var ProbationAllowance12 = double.Parse(contract.E_Allowance12.Decrypt());
                        contract.ProbationAllowance12 = (ProbationAllowance12 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance13))
                    {
                        var ProbationAllowance13 = double.Parse(contract.E_Allowance13.Decrypt());
                        contract.ProbationAllowance13 = (ProbationAllowance13 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance14))
                    {
                        var ProbationAllowance14 = double.Parse(contract.E_Allowance14.Decrypt());
                        contract.ProbationAllowance14 = (ProbationAllowance14 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance15))
                    {
                        var ProbationAllowance15 = double.Parse(contract.E_Allowance15.Decrypt());
                        contract.ProbationAllowance15 = (ProbationAllowance15 * contract.ProbationPercent) / 100;
                    }
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Quyen.Quach Bổ sung Enum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786 - lấy giới tính companygravename
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary != null && totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv != null && totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region Tổng lương
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #region Tổng lương thử việc
                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                #region Son.Vo - 20170222 - 0079071 tổng lương thử việc + Phụ cấp
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion
                //Son.Vo - 20160615 - 0068977
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                //Son.Vo - 20161018 - 0074557
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }
                contractServices.Edit(contract);

                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                i++;
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }
                //hau.le-87891-20170919
                contract.IDPlaceOfIssueEN = contract.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(contract.IDPlaceOfIssueEN);
                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion

                //Quyen.Quach 07/11/2017 0089648
                if (contract.DateStart23Plus != null)
                {
                    contract.DateStart23PlusFormat = contract.DateStart23Plus.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateStart24Plus != null)
                {
                    contract.DateStart24PlusFormat = contract.DateStart24Plus.Value.ToString("dd/MM/yyyy");
                }

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(contract.PAddress) && contract.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = contract.PAddress.Split('#').ToList();
                    contract.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    contract.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //Quyen.Quach 23/11/2017 0090325
                if (contract.DateEndProbation != null)
                {
                    contract.DateEndProbation1Plus = contract.DateEndProbation.Value.AddDays(1);
                    contract.DateEndProbation1PlusFormat = contract.DateEndProbation1Plus != null ? contract.DateEndProbation1Plus.Value.ToString("dd/MM/yyyy") : null;
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region Nguyen.Le 30/11/2017 0090489  xuất word hợp đồng nơi sinh tiếng Anh
                #endregion

                #region  Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                double? totalInsuranceAndAllowance = 0;
                double? totalAllowanceAmount = 0;
                if (contract.E_Allowance1 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance1.DecryptValue();
                }
                if (contract.E_Allowance2 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance2.DecryptValue();
                }
                if (contract.E_Allowance3 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance3.DecryptValue();
                }
                if (contract.E_Allowance4 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance4.DecryptValue();
                }
                if (contract.E_Allowance5 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance5.DecryptValue();
                }
                if (contract.E_Allowance6 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance6.DecryptValue();
                }
                if (contract.E_Allowance7 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance7.DecryptValue();
                }
                if (contract.E_Allowance8 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance8.DecryptValue();
                }
                if (contract.E_Allowance9 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance9.DecryptValue();
                }
                if (contract.E_Allowance10 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance10.DecryptValue();
                }
                if (contract.E_Allowance11 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance11.DecryptValue();
                }
                if (contract.E_Allowance12 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance12.DecryptValue();
                }
                if (contract.E_Allowance13 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance13.DecryptValue();
                }
                if (contract.E_Allowance14 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance14.DecryptValue();
                }
                if (contract.E_Allowance15 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance15.DecryptValue();
                }
                if (contract.E_InsuranceAmount != null)
                {
                    contract.InsuranceAmount = contract.E_InsuranceAmount.DecryptValue();
                    totalInsuranceAndAllowance = totalAllowanceAmount + contract.E_InsuranceAmount.DecryptValue();
                }
                contract.TotalAllowanceAmount = totalAllowanceAmount;
                contract.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion
                //Quyen.Quach 04/01/2018 0092018 
                contract.PlaceOfBirthEN = !string.IsNullOrEmpty(contract.PlaceOfBirth) ? RemoveSign4VietnameseString(contract.PlaceOfBirth) : string.Empty;
                contract.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(contract.ProfileIDPlaceOfIssue) ? RemoveSign4VietnameseString(contract.ProfileIDPlaceOfIssue) : string.Empty;
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (model.IsRar)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(dirpathDownload, urlOutPath, ext, lstFileOrder, fileNameDownload);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                        return Json(messageReturn);
                    }
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }

        public ActionResult ExportContractByCombobox(List<Guid> selectedIds, string valueFields)
        {
            var service = new ActionService(UserLogin, LanguageCode);

            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            Cat_ContractTemplateEntity contractTemplate = null;
            string templatepath = string.Empty;

            var template = service.GetData<Cat_ExportEntity>(Common.DotNetToOracle(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();

            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstContract = service.GetData<Hre_ContractEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status);

            if (lstContract == null)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            var lstProvince = _ProfileServices.GetProvinceDataAll();
            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            if (template != null && template.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(template.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(template.OrderNumber)).ToList();
                }
            }
            #endregion


            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();
            string fileNameDownload = null;

            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(selectedIds);
            var lstWordTemplate = new List<WordTemplateNew>();
            foreach (var contract in lstContract)
            {
                //Nguyen.Le - 20170928 - 0087411 
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    //Nguyen.Le - 30/11/2017 - 0090371
                    //Nguyen.Le - 26/12/2017 - 0091810
                    if (!string.IsNullOrEmpty(contract.E_ProbationSalary))
                    {
                        contract.ProbationSalary = contract.E_ProbationSalary.DecryptValue();
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance1))
                    {
                        var ProbationAllowance1 = double.Parse(contract.E_Allowance1.Decrypt());
                        contract.ProbationAllowance1 = (ProbationAllowance1 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance2))
                    {
                        var ProbationAllowance2 = double.Parse(contract.E_Allowance2.Decrypt());
                        contract.ProbationAllowance2 = (ProbationAllowance2 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance3))
                    {
                        var ProbationAllowance3 = double.Parse(contract.E_Allowance3.Decrypt());
                        contract.ProbationAllowance3 = (ProbationAllowance3 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance4))
                    {
                        var ProbationAllowance4 = double.Parse(contract.E_Allowance4.Decrypt());
                        contract.ProbationAllowance4 = (ProbationAllowance4 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance5))
                    {
                        var ProbationAllowance5 = double.Parse(contract.E_Allowance5.Decrypt());
                        contract.ProbationAllowance5 = (ProbationAllowance5 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance6))
                    {
                        var ProbationAllowance6 = double.Parse(contract.E_Allowance6.Decrypt());
                        contract.ProbationAllowance6 = (ProbationAllowance6 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance7))
                    {
                        var ProbationAllowance7 = double.Parse(contract.E_Allowance7.Decrypt());
                        contract.ProbationAllowance7 = (ProbationAllowance7 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance8))
                    {
                        var ProbationAllowance8 = double.Parse(contract.E_Allowance8.Decrypt());
                        contract.ProbationAllowance8 = (ProbationAllowance8 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance9))
                    {
                        var ProbationAllowance9 = double.Parse(contract.E_Allowance9.Decrypt());
                        contract.ProbationAllowance9 = (ProbationAllowance9 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance10))
                    {
                        var ProbationAllowance10 = double.Parse(contract.E_Allowance10.Decrypt());
                        contract.ProbationAllowance10 = (ProbationAllowance10 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance11))
                    {
                        var ProbationAllowance11 = double.Parse(contract.E_Allowance11.Decrypt());
                        contract.ProbationAllowance11 = (ProbationAllowance11 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance12))
                    {
                        var ProbationAllowance12 = double.Parse(contract.E_Allowance12.Decrypt());
                        contract.ProbationAllowance12 = (ProbationAllowance12 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance13))
                    {
                        var ProbationAllowance13 = double.Parse(contract.E_Allowance13.Decrypt());
                        contract.ProbationAllowance13 = (ProbationAllowance13 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance14))
                    {
                        var ProbationAllowance14 = double.Parse(contract.E_Allowance14.Decrypt());
                        contract.ProbationAllowance14 = (ProbationAllowance14 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance15))
                    {
                        var ProbationAllowance15 = double.Parse(contract.E_Allowance15.Decrypt());
                        contract.ProbationAllowance15 = (ProbationAllowance15 * contract.ProbationPercent) / 100;
                    }
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Quyen.Quach Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                #region Son.Vo - 20170222 - 0079071 Xứ lý tổng lương thử việc + Phụ cấp
                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }


                #endregion

                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);

                //Son.Vo - 20160615 - 0068977
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                //Son.Vo - 20161018 - 0074557
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                contractServices.Edit(contract);
                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion
                i++;
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }
                //haule task 85903
                if (contract.ProfileIDCard != null)
                {
                    contract.IDCardNo = contract.ProfileIDCard;
                    contract.DateIDCardNo = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardNo = contract.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    contract.IDCardNo = contract.ProfileIDNo;
                    contract.DateIDCardNo = contract.ProfileIDDateOfIssue;
                    contract.PlaceIDCardNo = contract.IDPlaceOfIssue;
                }
                //hau.le-87891-20170919

                contract.IDPlaceOfIssueEN = contract.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(contract.IDPlaceOfIssueEN);
                #region Son.Vo - 20170228 - 0079357
                if (contract.PassportNo != null)
                {
                    contract.NoIDCardPass = contract.PassportNo;
                    contract.DateIDCardPass = contract.PassportDateOfIssue;
                    contract.PlaceIDCardPass = contract.PassportPlaceOfIssue;
                }
                if (contract.ProfileIDCard != null)
                {
                    contract.NoIDCardPass = contract.ProfileIDCard;
                    contract.DateIDCardPass = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardPass = contract.ProfileIDCardPlaceOfIssue;
                }
                if (contract.IDNo != null)
                {
                    contract.NoIDCardPass = contract.IDNo;
                    contract.DateIDCardPass = contract.IDDateOfIssue;
                    contract.PlaceIDCardPass = contract.IDPlaceOfIssue;
                }

                #endregion


                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion

                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }
                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(contract.PAddress) && contract.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = contract.PAddress.Split('#').ToList();
                    contract.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    contract.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion
                //Quyen.Quach 23/11/2017 0090325
                if (contract.DateEndProbation != null)
                {
                    contract.DateEndProbation1Plus = contract.DateEndProbation.Value.AddDays(1);
                    contract.DateEndProbation1PlusFormat = contract.DateEndProbation1Plus != null ? contract.DateEndProbation1Plus.Value.ToString("dd/MM/yyyy") : null;
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region Nguyen.Le 30/11/2017 0090489  xuất word hợp đồng nơi sinh tiếng Anh
                #endregion

                #region  Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                double? totalInsuranceAndAllowance = 0;
                double? totalAllowanceAmount = 0;
                if (contract.E_Allowance1 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance1.DecryptValue();
                }
                if (contract.E_Allowance2 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance2.DecryptValue();
                }
                if (contract.E_Allowance3 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance3.DecryptValue();
                }
                if (contract.E_Allowance4 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance4.DecryptValue();
                }
                if (contract.E_Allowance5 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance5.DecryptValue();
                }
                if (contract.E_Allowance6 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance6.DecryptValue();
                }
                if (contract.E_Allowance7 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance7.DecryptValue();
                }
                if (contract.E_Allowance8 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance8.DecryptValue();
                }
                if (contract.E_Allowance9 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance9.DecryptValue();
                }
                if (contract.E_Allowance10 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance10.DecryptValue();
                }
                if (contract.E_Allowance11 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance11.DecryptValue();
                }
                if (contract.E_Allowance12 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance12.DecryptValue();
                }
                if (contract.E_Allowance13 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance13.DecryptValue();
                }
                if (contract.E_Allowance14 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance14.DecryptValue();
                }
                if (contract.E_Allowance15 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance15.DecryptValue();
                }
                if (contract.E_InsuranceAmount != null)
                {
                    contract.InsuranceAmount = contract.E_InsuranceAmount.DecryptValue();
                    totalInsuranceAndAllowance = totalAllowanceAmount + contract.E_InsuranceAmount.DecryptValue();
                }
                contract.TotalAllowanceAmount = totalAllowanceAmount;
                contract.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion

                //Quyen.Quach 04/01/2018 0092018 
                contract.PlaceOfBirthEN = !string.IsNullOrEmpty(contract.PlaceOfBirth) ? RemoveSign4VietnameseString(contract.PlaceOfBirth) : string.Empty;
                contract.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(contract.ProfileIDPlaceOfIssue) ? RemoveSign4VietnameseString(contract.ProfileIDPlaceOfIssue) : string.Empty;
                string outputPath = string.Empty;
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                //[07/06/2016][HienNguyen][68425]                
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                //ExportService.ExportWord(outputPath, templatepath, lstcontract);
                WordTemplateNew wordTemplate = new WordTemplateNew();
                wordTemplate.ProfileID = contract.ProfileID;
                wordTemplate.FileName = genneralNameExport;
                wordTemplate.DataSource = lstcontract;
                //wordTemplate.TemplateID = contract.ExportID;
                lstWordTemplate.Add(wordTemplate);
            }
            if (lstContract.Count > 1)
            {
                //if (template != null && template.IsExportAllOn1File != null && template.IsExportAllOn1File.Value)
                //{
                //    var fileZip = Common.MultiExport("", true, folderName);
                //    string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                //    var messageReturn = string.Empty;
                //    var urlOutPath = Common.GetPath(Common.TemplateURL);
                //    var fileZipSplit = fileZip.Split(',');
                //    if (fileZipSplit.Count() > 0)
                //    {
                //        var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(dirpathDownload, urlOutPath, ext, lstFileOrder, fileNameDownload);
                //        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                //        return Json(messageReturn);
                //    }
                //    return Json(fileZip);
                //}
                //else
                //{
                //    var fileZip = Common.MultiExport("", true, folderName);
                //    return Json(fileZip);
                //}
                var fileZip = ExportService.ExportWordByTemplate(folderName, Guid.Parse(valueFields), lstWordTemplate);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportContractAllByCombobox([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin);
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            if (model.WorkPlaceID != null)
            {
                model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
            }
            if (model.ClassRateID != null)
            {
                model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
            }
            request.PageSize = int.MaxValue - 1;
            var lstContract = GetListData<Hre_ContractEntity, Hre_ContractEntity, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractListForExportAll, ref status);

            if (lstContract == null)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            var lstProvince = _ProfileServices.GetProvinceDataAll();

            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();
            string fileNameDownload = null;

            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string templatepath = string.Empty;
                string outputPath = string.Empty;
                template = lstExportallcontemp.Where(s => s.ID == model.ExportId).FirstOrDefault();
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    //Nguyen.Le - 30/11/2017 - 0090371
                    //Nguyen.Le - 26/12/2017 - 0091810
                    if (!string.IsNullOrEmpty(contract.E_ProbationSalary))
                    {
                        contract.ProbationSalary = contract.E_ProbationSalary.DecryptValue();
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance1))
                    {
                        var ProbationAllowance1 = double.Parse(contract.E_Allowance1.Decrypt());
                        contract.ProbationAllowance1 = (ProbationAllowance1 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance2))
                    {
                        var ProbationAllowance2 = double.Parse(contract.E_Allowance2.Decrypt());
                        contract.ProbationAllowance2 = (ProbationAllowance2 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance3))
                    {
                        var ProbationAllowance3 = double.Parse(contract.E_Allowance3.Decrypt());
                        contract.ProbationAllowance3 = (ProbationAllowance3 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance4))
                    {
                        var ProbationAllowance4 = double.Parse(contract.E_Allowance4.Decrypt());
                        contract.ProbationAllowance4 = (ProbationAllowance4 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance5))
                    {
                        var ProbationAllowance5 = double.Parse(contract.E_Allowance5.Decrypt());
                        contract.ProbationAllowance5 = (ProbationAllowance5 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance6))
                    {
                        var ProbationAllowance6 = double.Parse(contract.E_Allowance6.Decrypt());
                        contract.ProbationAllowance6 = (ProbationAllowance6 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance7))
                    {
                        var ProbationAllowance7 = double.Parse(contract.E_Allowance7.Decrypt());
                        contract.ProbationAllowance7 = (ProbationAllowance7 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance8))
                    {
                        var ProbationAllowance8 = double.Parse(contract.E_Allowance8.Decrypt());
                        contract.ProbationAllowance8 = (ProbationAllowance8 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance9))
                    {
                        var ProbationAllowance9 = double.Parse(contract.E_Allowance9.Decrypt());
                        contract.ProbationAllowance9 = (ProbationAllowance9 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance10))
                    {
                        var ProbationAllowance10 = double.Parse(contract.E_Allowance10.Decrypt());
                        contract.ProbationAllowance10 = (ProbationAllowance10 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance11))
                    {
                        var ProbationAllowance11 = double.Parse(contract.E_Allowance11.Decrypt());
                        contract.ProbationAllowance11 = (ProbationAllowance11 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance12))
                    {
                        var ProbationAllowance12 = double.Parse(contract.E_Allowance12.Decrypt());
                        contract.ProbationAllowance12 = (ProbationAllowance12 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance13))
                    {
                        var ProbationAllowance13 = double.Parse(contract.E_Allowance13.Decrypt());
                        contract.ProbationAllowance13 = (ProbationAllowance13 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance14))
                    {
                        var ProbationAllowance14 = double.Parse(contract.E_Allowance14.Decrypt());
                        contract.ProbationAllowance14 = (ProbationAllowance14 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance15))
                    {
                        var ProbationAllowance15 = double.Parse(contract.E_Allowance15.Decrypt());
                        contract.ProbationAllowance15 = (ProbationAllowance15 * contract.ProbationPercent) / 100;
                    }
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Quyen.Quach Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion
                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary != null && totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv != null && totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                #region Son.Vo - 20170222 - 0079071 tổng lương thử việc + Phụ cấp
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region Tổng lương
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #region Tổng lương thử việc
                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);

                //Son.Vo - 20160615 - 0068977
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                //Son.Vo - 20161018 - 0074557
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }

                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }
                contractServices.Edit(contract);

                i++;
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (contract.PassportNo != null)
                {
                    contract.NoIDCardPass = contract.PassportNo;
                    contract.DateIDCardPass = contract.PassportDateOfIssue;
                    contract.PlaceIDCardPass = contract.PassportPlaceOfIssue;
                }
                if (contract.ProfileIDCard != null)
                {
                    contract.NoIDCardPass = contract.ProfileIDCard;
                    contract.DateIDCardPass = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardPass = contract.ProfileIDCardPlaceOfIssue;
                }
                if (contract.IDNo != null)
                {
                    contract.NoIDCardPass = contract.IDNo;
                    contract.DateIDCardPass = contract.IDDateOfIssue;
                    contract.PlaceIDCardPass = contract.IDPlaceOfIssue;
                }
                //hau.le-87891-20170919
                contract.IDPlaceOfIssueEN = contract.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(contract.IDPlaceOfIssueEN);
                #endregion

                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion
                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(contract.PAddress) && contract.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = contract.PAddress.Split('#').ToList();
                    contract.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    contract.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //Quyen.Quach 23/11/2017 0090325
                if (contract.DateEndProbation != null)
                {
                    contract.DateEndProbation1Plus = contract.DateEndProbation.Value.AddDays(1);
                    contract.DateEndProbation1PlusFormat = contract.DateEndProbation1Plus != null ? contract.DateEndProbation1Plus.Value.ToString("dd/MM/yyyy") : null;
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region Nguyen.Le 30/11/2017 0090489  xuất word hợp đồng nơi sinh tiếng Anh
                #endregion

                #region  Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                double? totalInsuranceAndAllowance = 0;
                double? totalAllowanceAmount = 0;
                if (contract.E_Allowance1 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance1.DecryptValue();
                }
                if (contract.E_Allowance2 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance2.DecryptValue();
                }
                if (contract.E_Allowance3 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance3.DecryptValue();
                }
                if (contract.E_Allowance4 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance4.DecryptValue();
                }
                if (contract.E_Allowance5 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance5.DecryptValue();
                }
                if (contract.E_Allowance6 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance6.DecryptValue();
                }
                if (contract.E_Allowance7 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance7.DecryptValue();
                }
                if (contract.E_Allowance8 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance8.DecryptValue();
                }
                if (contract.E_Allowance9 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance9.DecryptValue();
                }
                if (contract.E_Allowance10 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance10.DecryptValue();
                }
                if (contract.E_Allowance11 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance11.DecryptValue();
                }
                if (contract.E_Allowance12 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance12.DecryptValue();
                }
                if (contract.E_Allowance13 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance13.DecryptValue();
                }
                if (contract.E_Allowance14 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance14.DecryptValue();
                }
                if (contract.E_Allowance15 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance15.DecryptValue();
                }
                if (contract.E_InsuranceAmount != null)
                {
                    contract.InsuranceAmount = contract.E_InsuranceAmount.DecryptValue();
                    totalInsuranceAndAllowance = totalAllowanceAmount + contract.E_InsuranceAmount.DecryptValue();
                }
                contract.TotalAllowanceAmount = totalAllowanceAmount;
                contract.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion
                //Quyen.Quach 04/01/2018 0092018 
                contract.PlaceOfBirthEN = !string.IsNullOrEmpty(contract.PlaceOfBirth) ? RemoveSign4VietnameseString(contract.PlaceOfBirth) : string.Empty;
                contract.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(contract.ProfileIDPlaceOfIssue) ? RemoveSign4VietnameseString(contract.ProfileIDPlaceOfIssue) : string.Empty;
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                //[07/06/2016][HienNguyen][68425]
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportContractDetailAllByTemplate([DataSourceRequest] DataSourceRequest request, Guid profileID, bool isRar)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin);
            var ActionService = new ActionService(UserLogin);
            var lstContract = ActionService.GetData<Hre_ContractEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ContractsByProfileId, ref status);
            if (lstContract == null)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            var templatepath = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            var lstProvince = _ProfileServices.GetProvinceDataAll();
            string fileNameDownload = null;
            List<WordTemplateNew> lstWordTemplate = new List<WordTemplateNew>();
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string outputPath = string.Empty;
                if (contract.ExportID.HasValue)
                    template = lstExportallcontemp.Where(s => s.ID == contract.ExportID).FirstOrDefault();
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    //Nguyen.Le - 30/11/2017 - 0090371
                    //Nguyen.Le - 26/12/2017 - 0091810
                    if (!string.IsNullOrEmpty(contract.E_ProbationSalary))
                    {
                        contract.ProbationSalary = contract.E_ProbationSalary.DecryptValue();
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance1))
                    {
                        var ProbationAllowance1 = double.Parse(contract.E_Allowance1.Decrypt());
                        contract.ProbationAllowance1 = (ProbationAllowance1 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance2))
                    {
                        var ProbationAllowance2 = double.Parse(contract.E_Allowance2.Decrypt());
                        contract.ProbationAllowance2 = (ProbationAllowance2 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance3))
                    {
                        var ProbationAllowance3 = double.Parse(contract.E_Allowance3.Decrypt());
                        contract.ProbationAllowance3 = (ProbationAllowance3 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance4))
                    {
                        var ProbationAllowance4 = double.Parse(contract.E_Allowance4.Decrypt());
                        contract.ProbationAllowance4 = (ProbationAllowance4 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance5))
                    {
                        var ProbationAllowance5 = double.Parse(contract.E_Allowance5.Decrypt());
                        contract.ProbationAllowance5 = (ProbationAllowance5 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance6))
                    {
                        var ProbationAllowance6 = double.Parse(contract.E_Allowance6.Decrypt());
                        contract.ProbationAllowance6 = (ProbationAllowance6 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance7))
                    {
                        var ProbationAllowance7 = double.Parse(contract.E_Allowance7.Decrypt());
                        contract.ProbationAllowance7 = (ProbationAllowance7 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance8))
                    {
                        var ProbationAllowance8 = double.Parse(contract.E_Allowance8.Decrypt());
                        contract.ProbationAllowance8 = (ProbationAllowance8 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance9))
                    {
                        var ProbationAllowance9 = double.Parse(contract.E_Allowance9.Decrypt());
                        contract.ProbationAllowance9 = (ProbationAllowance9 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance10))
                    {
                        var ProbationAllowance10 = double.Parse(contract.E_Allowance10.Decrypt());
                        contract.ProbationAllowance10 = (ProbationAllowance10 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance11))
                    {
                        var ProbationAllowance11 = double.Parse(contract.E_Allowance11.Decrypt());
                        contract.ProbationAllowance11 = (ProbationAllowance11 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance12))
                    {
                        var ProbationAllowance12 = double.Parse(contract.E_Allowance12.Decrypt());
                        contract.ProbationAllowance12 = (ProbationAllowance12 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance13))
                    {
                        var ProbationAllowance13 = double.Parse(contract.E_Allowance13.Decrypt());
                        contract.ProbationAllowance13 = (ProbationAllowance13 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance14))
                    {
                        var ProbationAllowance14 = double.Parse(contract.E_Allowance14.Decrypt());
                        contract.ProbationAllowance14 = (ProbationAllowance14 * contract.ProbationPercent) / 100;
                    }
                    if (!string.IsNullOrEmpty(contract.E_Allowance15))
                    {
                        var ProbationAllowance15 = double.Parse(contract.E_Allowance15.Decrypt());
                        contract.ProbationAllowance15 = (ProbationAllowance15 * contract.ProbationPercent) / 100;
                    }
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary != null && totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv != null && totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region Tổng lương
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion
                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                #region Son.Vo - 20170222 - 0079071 tổng lương thử việc + Phụ cấp
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion
                //Son.Vo - 20160615 - 0068977
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                //Son.Vo - 20161018 - 0074557
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                contractServices.Edit(contract);
                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion
                i++;
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(contract.PAddress) && contract.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = contract.PAddress.Split('#').ToList();
                    contract.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    contract.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion
                //Quyen.Quach 23/11/2017 0090325
                if (contract.DateEndProbation != null)
                {
                    contract.DateEndProbation1Plus = contract.DateEndProbation.Value.AddDays(1);
                    contract.DateEndProbation1PlusFormat = contract.DateEndProbation1Plus != null ? contract.DateEndProbation1Plus.Value.ToString("dd/MM/yyyy") : null;
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region Nguyen.Le 30/11/2017 0090489  xuất word hợp đồng nơi sinh tiếng Anh
                #endregion

                #region  Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                double? totalInsuranceAndAllowance = 0;
                double? totalAllowanceAmount = 0;
                if (contract.E_Allowance1 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance1.DecryptValue();
                }
                if (contract.E_Allowance2 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance2.DecryptValue();
                }
                if (contract.E_Allowance3 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance3.DecryptValue();
                }
                if (contract.E_Allowance4 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance4.DecryptValue();
                }
                if (contract.E_Allowance5 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance5.DecryptValue();
                }
                if (contract.E_Allowance6 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance6.DecryptValue();
                }
                if (contract.E_Allowance7 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance7.DecryptValue();
                }
                if (contract.E_Allowance8 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance8.DecryptValue();
                }
                if (contract.E_Allowance9 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance9.DecryptValue();
                }
                if (contract.E_Allowance10 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance10.DecryptValue();
                }
                if (contract.E_Allowance11 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance11.DecryptValue();
                }
                if (contract.E_Allowance12 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance12.DecryptValue();
                }
                if (contract.E_Allowance13 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance13.DecryptValue();
                }
                if (contract.E_Allowance14 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance14.DecryptValue();
                }
                if (contract.E_Allowance15 != null)
                {
                    totalAllowanceAmount += contract.E_Allowance15.DecryptValue();
                }
                if (contract.E_InsuranceAmount != null)
                {
                    contract.InsuranceAmount = contract.E_InsuranceAmount.DecryptValue();
                    totalInsuranceAndAllowance = totalAllowanceAmount + contract.E_InsuranceAmount.DecryptValue();
                }
                contract.TotalAllowanceAmount = totalAllowanceAmount;
                contract.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                #endregion
                //Quyen.Quach 04/01/2018 0092018 
                contract.PlaceOfBirthEN = !string.IsNullOrEmpty(contract.PlaceOfBirth) ? RemoveSign4VietnameseString(contract.PlaceOfBirth) : string.Empty;
                contract.IDPlaceOfIssueRemoveSign = !string.IsNullOrEmpty(contract.ProfileIDPlaceOfIssue) ? RemoveSign4VietnameseString(contract.ProfileIDPlaceOfIssue) : string.Empty;
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                //ExportService.ExportWord(outputPath, templatepath, lstcontract);
                WordTemplateNew wordTemplate = new WordTemplateNew();
                wordTemplate.ProfileID = contract.ProfileID;
                wordTemplate.FileName = genneralNameExport;
                wordTemplate.DataSource = lstcontract;
                wordTemplate.TemplateID = contract.ExportID;
                lstWordTemplate.Add(wordTemplate);
            }
            if (lstContract.Count > 1)
            {
                if (isRar)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }
                else
                {
                    //var fileZip = Common.MultiExport("", true, folderName);
                    //string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                    ////[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    //var messageReturn = string.Empty;
                    //var urlOutPath = Common.GetPath(Common.TemplateURL);
                    //var fileZipSplit = fileZip.Split(',');
                    //if (fileZipSplit.Count() > 0)
                    //{
                    //    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    //    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    //    return Json(messageReturn);
                    //}
                    var fileZip = ExportService.ExportWordByTemplate(folderName, Guid.Empty, lstWordTemplate);
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }

        public ActionResult ExportContractWaitingByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);
            var exportService = new Cat_ExportServices();
            var actionServices = new ActionService(UserLogin);

            Cat_ExportEntity template = null;
            Cat_ContractTemplateEntity contractTemplate = null;
            if (!string.IsNullOrEmpty(valueFields))
                template = actionServices.GetData<Cat_ExportEntity>(Common.DotNetToOracle(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
            //if (template == null)
            //{
            //    messages = "Error";
            //    return Json(messages, JsonRequestBehavior.AllowGet);
            //}
            var contractServices = new Hre_ContractServices();
            var _ProfileServices = new Hre_ProfileServices();
            var currencyServices = new Cat_CurrencyServices();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstContract = actionServices.GetData<Hre_ContractEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status);
            if (lstContract == null)
                return null;
            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;

            var templatepath = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);

            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();

            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(selectedIds);
            foreach (var contract in lstContract)
            {
                string outputPath = string.Empty;
                //Nguyen.Le - 20170928 - 00887411
                #region Lấy ContractTemplate khi không có template
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                    }

                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                    }

                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                    }

                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                    }

                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                    }

                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                    }

                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                    }

                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                    }

                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                    }

                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                    }

                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                    }

                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                    }

                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                    }

                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                    }

                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                    }

                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.AllowanceID14Name = CurenncyID14.CurrencyName;
                    }

                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                    }
                }
                #endregion
                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();

                contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                if (contract.DateStart != null)
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                if (contract.DateEnd.HasValue)
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                if (contract.DateHire.HasValue)
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                if (contract.DateEndProbation.HasValue)
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                contract.SalaryFormat = contract.Salary.HasValue ? contract.Salary.Value.ToString("N") : "0";
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd MMM yyyy");
                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");

                }
                if (contract.Gender == "E_FEMALE")
                {
                    contract.GenderEN = "Female";
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";
                }
                else
                {
                    contract.GenderEN = "Male";
                    contract.GraveName = "Mr.";
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                if (contract.DateQuit.HasValue)
                {
                    contract.DateQuitFormat = contract.DateQuit.Value.ToString("dd/MM/yyyy");
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                    contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                    if (contract.YearWorking > 0)
                    {
                        contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                    }
                }

                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }

                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion

                #region Son.Vo - 20170222 - 0079071 Xứ lý tổng lương thử việc + Phụ cấp
                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }


                #endregion
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }

                #region  Nguyen.Le - 29/01/2018 - 0092424  Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                //var lstcontract = new List<Hre_ContractEntity>();
                //lstcontract.Add(contract);

                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (template != null && template.IsExportAllOn1File != null && template.IsExportAllOn1File.Value)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.TemplateURL;
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFile(fileZipSplit[1], urlOutPath, ext);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    }
                    return Json(messageReturn);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }
        #endregion

        public string getContractNo(Hre_ContractEntity contract, DateTime? DateSigned)
        {
            var profileService = new Hre_ProfileServices();
            var actionService = new ActionService(UserLogin);
            string status = string.Empty;
            List<object> lstObjProfile = new List<object>();
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(null);
            lstObjProfile.Add(1);
            lstObjProfile.Add(100000000);
            var profile = actionService.GetData<Hre_ProfileEntity>(contract.ProfileID, ConstantSql.hrm_hr_sp_get_ProfileById, ref status).FirstOrDefault();
            if (profile == null)
                return "";
            var ContractServices = new Hre_ContractServices();
            var objContract = new List<object>();
            objContract.AddRange(new object[21]);
            objContract[19] = 1;
            objContract[20] = int.MaxValue - 1;
            var lstContracts = actionService.GetData<Hre_ContractEntity>(objContract, ConstantSql.hrm_hr_sp_get_Contract, ref status);
            string contractNo = "HD/" + profile.CodeEmp + "/" + (DateSigned == null ? string.Empty : DateSigned.Value.Year.ToString());
            int contractNumber = lstContracts.Count(s => s.IsDelete == null);
            if (contractNumber > 1)
            {
                contractNo += "-" + contractNumber;
            }
            return contractNo;
        }

        // Son.Vo - 20160316 - lưu HĐ. Vì lưu nhiều dòng nên phải làm hàm này
        [HttpPost]
        public ActionResult SaveMultiContract([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            string validate = null;
            var lstProfileID = new List<Guid>();
            var insuranceServices = new Sal_InsuranceSalaryServices();
            var ContractServices = new Hre_ContractServices();
            var hrService = new Hre_ProfileServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var actionService = new ActionService(UserLogin);
            var workHistoryServices = new Hre_WorkHistoryServices();
            string message_Error = string.Empty;
            if (model.ID == Guid.Empty)
            {
                model.DateExtend = model.DateEnd;
                //trường hợp tạo mới mà ko nhập nhân viên
                if (model.ProfileIDs == null && model.ProfileID == Guid.Empty && model.OrgStructureIDs == null)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message_Error;
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            if (model.ProfileIDs != null && model.ProfileIDs.IndexOf(',') > 1)
            {
                var lstID = model.ProfileIDs.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstProfileID.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.ProfileIDs);
                lstProfileID.Add(convertProfileID);
            }
            // Son.Vo - theo task 0057642 - quy trình ký hđ
            validate = ContractServices.checkValidateContract(lstProfileID, model.DateStart, model.IsMLC);
            if (validate != null)
            {
                model.ActionStatus = validate;
                return Json(validate, JsonRequestBehavior.AllowGet);
            }
            var lstProfile = new List<Hre_ProfileEntity>();
            if (model.ProfileIDs != null)
            {
                var lstProfileIds = model.ProfileIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfile = hrService.GetLstProfileEntityByLstProfileIDs(lstProfileIds);
                #region Validate
                if (lstProfile.Count > 0 && lstProfile.FirstOrDefault() != null)
                {
                    model.ProfileID = lstProfile.FirstOrDefault().ID;
                }

                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
                if (!checkValidate)
                {
                    model.ActionStatus = message_Error;
                    return Json(message_Error, JsonRequestBehavior.AllowGet);
                }
                if (model.ContractEvaType == "E_ANNUAL_EVALUATION")
                {
                    checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "EvaContractinfo", "Hre_Contract", false, ref message_Error);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message_Error;
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }

                #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                if (model.ContractTypeID != null && model.ContractTypeID != Guid.Empty)
                {
                    var contractTypeServices = new Cat_ContractTypeServices();
                    var contractType = contractTypeServices.GetDataContractTypeByID(model.ContractTypeID);
                    if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && model.DateEnd == null)
                    {
                        message_Error = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        model.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                #endregion
            }
            if (!string.IsNullOrEmpty(model.OrgStructureIDs))
            {
                var listGuid = new List<Guid>();
                if (model.ProfileIDs != null)
                {
                    var listStr = model.ProfileIDs.Split(',');
                    if (listStr[0] != "")
                    {
                        foreach (var item in listStr)
                        {
                            listGuid.Add(Guid.Parse(item));
                        }
                    }
                }
                string strIDs = string.Empty;
                var listObj = new List<object>();
                listObj.Add(model.OrgStructureIDs);
                listObj.Add(UserLogin);
                listObj.Add(string.Empty);
                var lstProfileids = actionService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgSelect, ref status).Select(s => s.ID).ToList();
                if (listGuid != null)
                {
                    lstProfileids = lstProfileids.Where(s => !listGuid.Contains(s)).ToList();
                    var lstProfileadd = hrService.GetLstProfileEntityByLstProfileIDs(lstProfileids);
                    if (lstProfileadd.Count > 0)
                    {
                        lstProfile.AddRange(lstProfileadd);
                    }
                }
                if (lstProfileids.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    model.ActionStatus = ConstantMessages.HRM_OrgStrure_Not_Have_Profile.TranslateString();
                    return Json(model.ActionStatus, JsonRequestBehavior.AllowGet);
                }

                // Son.Vo - theo task 0057642 - quy trình ký hđ
                validate = ContractServices.checkValidateContract(lstProfileID, model.DateStart, model.IsMLC);
                if (validate != null)
                {
                    model.ActionStatus = validate;
                    return Json(validate, JsonRequestBehavior.AllowGet);
                }

                #region Validate
                if (lstProfile.Count > 0 && lstProfile.FirstOrDefault() != null)
                {
                    model.ProfileID = lstProfile.FirstOrDefault().ID;
                }

                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
                if (!checkValidate)
                {
                    model.ActionStatus = message_Error;
                    return Json(message_Error, JsonRequestBehavior.AllowGet);
                }
                if (model.ContractEvaType == "E_ANNUAL_EVALUATION")
                {
                    checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "EvaContractinfo", "Hre_Contract", false, ref message_Error);
                    if (!checkValidate)
                    {
                        model.ActionStatus = message_Error;
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }

                #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                if (model.ContractTypeID != null && model.ContractTypeID != Guid.Empty)
                {
                    var contractTypeServices = new Cat_ContractTypeServices();
                    var contractType = contractTypeServices.GetDataContractTypeByID(model.ContractTypeID);
                    if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && model.DateEnd == null)
                    {
                        message_Error = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        model.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        return Json(message_Error, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion
                #endregion
            }
            var contractTypeService = new Cat_ContractTypeServices();
            var contractTypeEntity = contractTypeService.GetDataContractTypeByID(model.ContractTypeID);
            string typeContractType = contractTypeEntity != null ? contractTypeEntity.Type : null;

            var insuranceConfigServices = new Cat_InsuranceConfigServices();
            var insuranceConfigEntity = insuranceConfigServices.GetDataInsuranceConfigByContractTypeID(model.ContractTypeID);

            #region Son.Vo - 20160712 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duỵet
            var _Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = _Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
            if (model != null && model.UserProfileSingID != null && ischeck == true)
            {
                model.ProfileSingID = model.UserProfileSingID;
            }
            #endregion

            #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
            var services = new Sys_AttOvertimePermitConfigServices();
            var _MAXCASUAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
            var _MAXPROBATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
            var _MAXOFFICIAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
            var _MAXAPPENDIX = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
            var _MAXAPPRENTICESHIP = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
            var _MAXDURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
            var _MAXNODURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
            var isbyCompany = services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
            #endregion

            string contractids = string.Empty;
            int countProfile = 0;
            var lstContractTypeByProfile = ContractServices.GetLstContractTypeByProfileIDs(lstProfileID);

            //Son.Vo - 20171227 - 0091249
            string messageValidateDateHire = ContractServices.ValidateDateStartDateHireContractMulti(model.DateStart, lstProfile);
            if (!string.IsNullOrEmpty(messageValidateDateHire))
            {
                model.ActionStatus = messageValidateDateHire + " " + ConstantDisplay.HRM_HR_InvalidDateStartDateHire.TranslateString();
                return Json(model.ActionStatus, JsonRequestBehavior.AllowGet);
            }
            foreach (var profile in lstProfile)
            {

                //Son.Vo - 20170805 - 0085210 - khác những loại này thì tự + timescontract
                if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    var lastContract = lstContractTypeByProfile.Where(s => s.ProfileID == profile.ID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart < model.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();

                    if (typeContractType != EnumDropDown.TypeContract.E_APPENDIX.ToString() && typeContractType != EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString()
                        && typeContractType != EnumDropDown.TypeContract.E_CASUAL.ToString() && typeContractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                    {
                        if (lastContract != null && lastContract.TimesContract != null)
                        {
                            model.TimesContract = lastContract.TimesContract != null ? lastContract.TimesContract + 1 : 1;
                        }
                        else
                        {
                            model.TimesContract = 1;
                        }
                    }
                }

                #region Son.Vo - 20160808 - 0071798: Bổ sung tính năng cảnh báo trùng khi tạo mới hợp đồng
                //Quyen.Quach 25/11/2017 0090195
                var isCheckOldContract = ContractServices.IsStopOldContract(model.ContractTypeID);
                bool isDuplicate = ContractServices.ValidateDuplicateContract(model.ID, profile.ID, model.DateStart, model.DateEnd, model.IsMLC);
                var isDuplicateContractV2 = ContractServices.DuplicateContractV2(model.ID, profile.ID, model.DateStart, model.DateEnd, model.IsMLC);
                if (isDuplicateContractV2 == "1" && isCheckOldContract.IsStopOldContract == true && model.Status == EnumDropDown.Status.E_APPROVED.ToString() && model.isCheckTerminateDate != "1")
                {
                    model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContract_IsStopOldContract.ToString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                else if (isDuplicateContractV2 == "2" && isCheckOldContract.IsStopOldContract == true && model.Status == EnumDropDown.Status.E_APPROVED.ToString() && model.isCheckTerminateDate != "1")
                {
                    model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContract_TerminateDate.ToString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                else if (isDuplicate == true && (isCheckOldContract.IsStopOldContract == false || isCheckOldContract.IsStopOldContract == null))
                {
                    model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContract.ToString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                if (model.isCheckTerminateDate == "1" && model.isUpdateDateTerminate != "1")
                {
                    var messUpdate = ContractServices.UpdateTerminateDateOldContract(model.ID, profile.ID, model.DateStart, model.DateEnd, model.IsMLC);
                }
                #endregion


                #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                string messageref = ContractServices.ValidateMaxTimeSignContract(model.ID, profile.ID, model.ContractTypeID, _MAXCASUAL,
                             _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, model.CompanyID);
                if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                {
                    model.ActionStatus = messageref;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                #endregion

                model.ProfileID = profile.ID;
                //Son.Vo- 20170418 - 0081506 trường hợp tạo mới mà ko click qua tab nơi đăng ký
                if (model.IsNotLoadTabRegisterPlace == true)
                {
                    model.IDNo = profile.IDNo;
                    model.IDDateOfIssue = profile.IDDateOfIssue;
                    model.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                    model.PAddress = profile.PAddress;
                    model.PCountryID = profile.PCountryID;
                    model.PProvinceID = profile.PProvinceID;
                    model.PDistrictID = profile.PDistrictID;
                    model.PVillageID = profile.VillageID;
                }
                #region Check lấy lương cb theo từng người
                if (model.BasicSalaryForPerson == true)
                {
                    var basicSalaryByProfile = _BasicSalaryServices.GetBasicSalaryByProfileID(profile.ID);
                    var contractgetNo = new Hre_ContractEntity();
                    model.CopyData(contractgetNo);
                    var contract = new Hre_ContractEntity();
                    contract.TimesContract = model.TimesContract;

                    contract.CurenncyID = model.CurenncyID;
                    contract.CurenncyID1 = model.CurenncyID1;
                    contract.CurenncyID2 = model.CurenncyID2;
                    contract.CurenncyID3 = model.CurenncyID3;
                    contract.CurenncyID4 = model.CurenncyID4;
                    contract.CurenncyID5 = model.CurenncyID5;
                    contract.CurenncyID6 = model.CurenncyID6;
                    contract.CurenncyID7 = model.CurenncyID7;
                    contract.CurenncyID8 = model.CurenncyID8;
                    contract.CurenncyID9 = model.CurenncyID9;
                    contract.CurenncyID10 = model.CurenncyID10;
                    contract.CurenncyID11 = model.CurenncyID11;
                    contract.CurenncyID12 = model.CurenncyID12;
                    contract.CurenncyID13 = model.CurenncyID13;
                    contract.CurenncyID14 = model.CurenncyID14;
                    contract.CurenncyID15 = model.CurenncyID15;
                    if (basicSalaryByProfile != null)
                    {
                        contract.AllowanceID1 = basicSalaryByProfile.AllowanceType1ID != null ? basicSalaryByProfile.AllowanceType1ID : null;
                        contract.AllowanceID2 = basicSalaryByProfile.AllowanceType2ID != null ? basicSalaryByProfile.AllowanceType2ID : null;
                        contract.AllowanceID3 = basicSalaryByProfile.AllowanceType3ID != null ? basicSalaryByProfile.AllowanceType3ID : null;
                        contract.AllowanceID4 = basicSalaryByProfile.AllowanceType4ID != null ? basicSalaryByProfile.AllowanceType4ID : null;
                        contract.AllowanceID5 = basicSalaryByProfile.AllowanceTypeID5 != null ? basicSalaryByProfile.AllowanceTypeID5 : null;
                        contract.AllowanceID6 = basicSalaryByProfile.AllowanceTypeID6 != null ? basicSalaryByProfile.AllowanceTypeID6 : null;
                        contract.AllowanceID7 = basicSalaryByProfile.AllowanceTypeID7 != null ? basicSalaryByProfile.AllowanceTypeID7 : null;
                        contract.AllowanceID8 = basicSalaryByProfile.AllowanceTypeID8 != null ? basicSalaryByProfile.AllowanceTypeID8 : null;
                        contract.AllowanceID9 = basicSalaryByProfile.AllowanceTypeID9 != null ? basicSalaryByProfile.AllowanceTypeID9 : null;
                        contract.AllowanceID10 = basicSalaryByProfile.AllowanceTypeID10 != null ? basicSalaryByProfile.AllowanceTypeID10 : null;
                        contract.AllowanceID11 = basicSalaryByProfile.AllowanceTypeID11 != null ? basicSalaryByProfile.AllowanceTypeID11 : null;
                        contract.AllowanceID12 = basicSalaryByProfile.AllowanceTypeID12 != null ? basicSalaryByProfile.AllowanceTypeID12 : null;
                        contract.AllowanceID13 = basicSalaryByProfile.AllowanceTypeID13 != null ? basicSalaryByProfile.AllowanceTypeID13 : null;
                        contract.AllowanceID14 = basicSalaryByProfile.AllowanceTypeID14 != null ? basicSalaryByProfile.AllowanceTypeID14 : null;
                        contract.AllowanceID15 = basicSalaryByProfile.AllowanceTypeID15 != null ? basicSalaryByProfile.AllowanceTypeID15 : null;
                        contract.ClassRateID = basicSalaryByProfile.ClassRateID != null ? basicSalaryByProfile.ClassRateID : null;
                        contract.CurenncyID = basicSalaryByProfile.CurrencyID;
                        contract.CurenncyID1 = basicSalaryByProfile.CurrencyID1 != null ? basicSalaryByProfile.CurrencyID1 : null;
                        contract.CurenncyID2 = basicSalaryByProfile.CurrencyID2 != null ? basicSalaryByProfile.CurrencyID2 : null;
                        contract.CurenncyID3 = basicSalaryByProfile.CurrencyID3 != null ? basicSalaryByProfile.CurrencyID3 : null;
                        contract.CurenncyID4 = basicSalaryByProfile.CurrencyID4 != null ? basicSalaryByProfile.CurrencyID4 : null;
                        contract.CurenncyID5 = basicSalaryByProfile.CurrencyID5 != null ? basicSalaryByProfile.CurrencyID5 : null;
                        contract.CurenncyID6 = basicSalaryByProfile.CurrencyID6 != null ? basicSalaryByProfile.CurrencyID6 : null;
                        contract.CurenncyID7 = basicSalaryByProfile.CurrencyID7 != null ? basicSalaryByProfile.CurrencyID7 : null;
                        contract.CurenncyID8 = basicSalaryByProfile.CurrencyID8 != null ? basicSalaryByProfile.CurrencyID8 : null;
                        contract.CurenncyID9 = basicSalaryByProfile.CurrencyID9 != null ? basicSalaryByProfile.CurrencyID9 : null;
                        contract.CurenncyID10 = basicSalaryByProfile.CurrencyID10 != null ? basicSalaryByProfile.CurrencyID10 : null;
                        contract.CurenncyID11 = basicSalaryByProfile.CurrencyID11 != null ? basicSalaryByProfile.CurrencyID11 : null;
                        contract.CurenncyID12 = basicSalaryByProfile.CurrencyID12 != null ? basicSalaryByProfile.CurrencyID12 : null;
                        contract.CurenncyID13 = basicSalaryByProfile.CurrencyID13 != null ? basicSalaryByProfile.CurrencyID13 : null;
                        contract.CurenncyID14 = basicSalaryByProfile.CurrencyID14 != null ? basicSalaryByProfile.CurrencyID14 : null;
                        contract.CurenncyID15 = basicSalaryByProfile.CurrencyID15 != null ? basicSalaryByProfile.CurrencyID15 : null;
                    }
                    contract.RankRateID = model.RankRateID;
                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        if (model.Salary != null)
                        {
                            contract.E_Salary = model.Salary.ToString().Encrypt();
                        }
                        if (model.InsuranceAmount != null)
                        {
                            contract.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                        }
                        //Quyen.Quach 28/11/2017 Mã hóa lương thử việc
                        if (model.ProbationSalary != null)
                        {
                            contract.E_ProbationSalary = model.ProbationSalary.ToString().Encrypt();
                        }
                        contract.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                    }
                    else
                    {
                        if (model.Salary != null)
                        {
                            contract.Salary = model.Salary;
                            contract.E_Salary = model.Salary.ToString().Encrypt();
                        }
                        if (model.InsuranceAmount != null)
                        {
                            contract.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                            contract.InsuranceAmount = model.InsuranceAmount;
                        }
                        //Quyen.Quach 28/11/2017 Mã hóa lương thử việc
                        if (model.ProbationSalary != null)
                        {
                            contract.E_ProbationSalary = model.ProbationSalary.ToString().Encrypt();
                            contract.ProbationSalary = model.ProbationSalary;
                        }
                        contract.Allowance = model.Allowance;
                        contract.Allowance1 = model.Allowance1;
                        contract.Allowance2 = model.Allowance2;
                        contract.Allowance3 = model.Allowance3;
                        contract.Allowance4 = model.Allowance4;
                        contract.Allowance5 = model.Allowance5;
                        contract.Allowance6 = model.Allowance6;
                        contract.Allowance7 = model.Allowance7;
                        contract.Allowance8 = model.Allowance8;
                        contract.Allowance9 = model.Allowance9;
                        contract.Allowance10 = model.Allowance10;
                        contract.Allowance11 = model.Allowance11;
                        contract.Allowance12 = model.Allowance12;
                        contract.Allowance13 = model.Allowance13;
                        contract.Allowance14 = model.Allowance14;
                        contract.Allowance15 = model.Allowance15;

                        contract.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                        contract.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                    }

                    contract.Code = model.Code;
                    contract.CodeEmp = model.CodeEmp;
                    contract.ContractTypeID = model.ContractTypeID;
                    contract.CurenncyIDSalary = model.CurenncyIDSalary;
                    contract.CurenncyInsName = model.CurenncyInsName;
                    contract.CurenncyOAllowanceName = model.CurenncyOAllowanceName;
                    contract.CurrencySalName = model.CurrencySalName;
                    contract.DateAuthorize = model.DateAuthorize;
                    contract.DateCreate = model.DateCreate;
                    contract.DateUpdate = DateTime.Now;
                    contract.DateEnd = model.DateEnd;
                    contract.DateSigned = model.DateSigned;
                    contract.DateStart = model.DateStart;
                    contract.FollowNo = model.FollowNo;
                    contract.Note = model.Note;
                    contract.FormPaySalary = model.FormPaySalary;
                    //Nguyen.Le - 13/12/2017 - 0091146
                    contract.FormCompSalary = model.FormCompSalary;
                    contract.HourWorkInMonth = model.HourWorkInMonth;
                    contract.IPCreate = model.IPCreate;
                    contract.IPUpdate = model.IPUpdate;
                    contract.PersonalRate = model.PersonalRate;
                    contract.ProfileID = model.ProfileID;
                    contract.ProfileSingID = model.ProfileSingID;
                    contract.QualificationID = model.QualificationID;

                    contract.SalaryClassTypeID = model.SalaryClassTypeID;
                    contract.ServerCreate = model.ServerCreate;
                    contract.ServerUpdate = model.ServerUpdate;
                    contract.WorkPlaceID = model.WorkPlaceID;
                    contract.NextContractTypeID = model.NextContractTypeID;
                    contract.Remark = model.Remark;
                    contract.RankDetailForNextContract = model.RankDetailForNextContract;
                    contract.ContractEvaType = model.ContractEvaType;
                    contract.DateOfContractEva = model.DateOfContractEva;
                    contract.EvaluationResult = model.EvaluationResult;
                    contract.ContractResult = model.ContractResult;
                    contract.TypeOfPass = model.TypeOfPass;
                    contract.DateEndNextContract = model.DateEndNextContract;
                    //Son.Vo - 20151107 - 0059636
                    contract.Duration = model.Duration;
                    contract.DayOfAnnualLeave = model.DayOfAnnualLeave;
                    contract.CompanyID = model.CompanyID;

                    if (model.ContractNo != null)
                    {
                        contract.ContractNo = model.ContractNo;
                    }

                    //Son.Vo - 20160119 - 0063260
                    contract.DateExtend = contract.DateEnd;
                    //Son.Vo - 20160613 - lưu thêm 2 field
                    contract.ProbationPercent = model.ProbationPercent;
                    //Son.Vo - 20160614 - 0068882
                    contract.IsMLC = model.IsMLC;
                    #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                    if (contract.ID == Guid.Empty && contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        string messageref1 = workHistoryServices.UpdateHeadProfile(contract.ProfileID, contract.PositionID);
                    }
                    #endregion
                    contract.ContractStatus = model.ContractStatus;
                    //Son.Vo - 20160912 - 0073153 Trạng thái duyệt mới tạo mới lương cb + bhxh
                    contract.IsCreateBasicSalary = model.IsCreateBasicSalary;
                    contract.IsCreateInsuranceSalary = model.IsCreateInsuranceSalary;
                    contract.Status = model.Status;
                    contract.UserSubmit = model.UserSubmit;
                    contract.UserApproveID = model.UserApproveID;
                    contract.UserApproveID2 = model.UserApproveID2;
                    contract.UserApproveID3 = model.UserApproveID3;
                    contract.UserApproveID4 = model.UserApproveID4;
                    contract.UserProcessID = model.UserProcessID;
                    contract.UserProcessID2 = model.UserProcessID2;
                    contract.UserProcessID3 = model.UserProcessID3;
                    contract.UserProcessID4 = model.UserProcessID4;
                    //Son.Vo - 20161202 - 0074278
                    contract = ContractServices.SetContractDataByWorkHistory(contract);
                    //Son.Vo - 20161221 - 0076839
                    contract.EmployeeTypeID = model.EmployeeTypeID;
                    contract.ReasonChangeSalaryID = model.ReasonChangeSalaryID;
                    contract.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                    #region Son.Vo - 20170217 - 0078889 Lấy thông tin địa chỉ từng người gắn vào HĐ. Trường hợp tạo nhiều dòng
                    if (lstProfile.Count > 1)
                    {
                        contract.IDNo = profile.IDNo;
                        contract.IDDateOfIssue = profile.IDDateOfIssue;
                        contract.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                        contract.PCountryID = profile.PCountryID;
                        contract.PProvinceID = profile.PProvinceID;
                        contract.PDistrictID = profile.PDistrictID;
                        contract.PVillageID = profile.VillageID;
                        contract.PAddress = profile.PAddress;
                        //Son.Vo - 20170220 - xử lý thêm chức vụ + chức danh theo workhistory nếu chọn nhiều nhân viên
                        var workhistoryEntity = workHistoryServices.GetWorkHistoryDataForCreateContract(contract.DateStart, contract.ProfileID);
                        if (workhistoryEntity != null)
                        {
                            contract.JobTitleID = workhistoryEntity.JobTitleID;
                            contract.PositionID = workhistoryEntity.PositionID;
                            contract.OrgStructureID = workhistoryEntity.OrganizationStructureID;
                        }
                    }
                    else
                    {
                        contract.IDNo = model.IDNo;
                        contract.IDDateOfIssue = model.IDDateOfIssue;
                        contract.IDPlaceOfIssue = model.IDPlaceOfIssue;
                        contract.PCountryID = model.PCountryID;
                        contract.PProvinceID = model.PProvinceID;
                        contract.PDistrictID = model.PDistrictID;
                        contract.PVillageID = model.PVillageID;
                        contract.PAddress = model.PAddress;
                        contract.JobTitleID = model.JobTitleID;
                        contract.PositionID = model.PositionID;
                        //Son.Vo - 20160824 - 0072448
                        contract.OrgStructureID = model.OrgStructureID;
                    }
                    #endregion
                    //Son.Vo - 20170316 - 0079910
                    contract.EmployeeGroupID = model.EmployeeGroupID;
                    contract.DelegateCompanyID = model.DelegateCompanyID;
                    //Son.Vo - 20170605 - 0082889
                    contract.GradeAttendanceID = model.GradeAttendanceID;
                    contract.IsIncludeProbationTime = model.IsIncludeProbationTime;
                    //Nguyen.Le - 22/01/2018 - 0092668
                    contract.CompanyVN = model.CompanyVN;
                    contract.CompanyEN = model.CompanyEN;
                    contract.AddressVN = model.AddressVN;
                    contract.AddressEN = model.AddressEN;
                    contract.SignPlace = model.SignPlace;
                    contract.Telephone = model.Telephone;

                    if (contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        if (model.IsCreateBasicSalary == true)
                        {
                            #region Son.Vo - 20170710 - 0084759
                            if (string.IsNullOrEmpty(model.IsCreateSal))
                            {
                                var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                                if (isInvalid == true)
                                {
                                    model.ActionStatus = "InvalidSalary";
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            #endregion
                        }
                        if (model.IsCreateInsuranceSalary == true)
                        {
                            #region Son.Vo - 20170710 - 0084759
                            if (string.IsNullOrEmpty(model.IsCreateSal))
                            {
                                var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                                if (isInvalid == true)
                                {
                                    model.ActionStatus = "InvalidSalary";
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            #endregion
                        }
                    }

                    if (contract.ProfileID != null && model.GradeAttendanceID != null)
                    {
                        string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(contract.ProfileID, model.GradeAttendanceID.Value, model.DateStart);
                    }
                    //Quyen.Quach 02/11/2017 0089253
                    contract.AttachFile = model.AttachFile != null ? model.AttachFile : string.Empty;

                    if (model.ID == Guid.Empty)
                    {
                        //Son.Vo - 20170224 - 0075838: Điều chỉnh cơ chế sinh số HĐ khi tạo mới HĐ
                        if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                        {
                            var lstcontractTypeByPro = lstContractTypeByProfile.Where(s => s.ProfileID == contract.ProfileID).Select(s => s.ContractTypeID).Distinct().ToList();
                            var contractEntityForContractno = contract.CopyData<Hre_ContractEntity>();
                            ContractServices.SetNewCodeContract(contractEntityForContractno, lstcontractTypeByPro);
                            contract.ContractNo = contractEntityForContractno.ContractNo;
                        }

                        contract.ID = Guid.NewGuid();
                        contract.ActionStatus = ContractServices.Add(contract);
                        if (lstProfile.Count > 1)
                        {
                            contractids += contract.ID.ToString() + ',';
                        }

                    }
                    else
                    {
                        //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ xong rồi sửa thông tin rồi click lưu lần nữa
                        if (!string.IsNullOrEmpty(model.contractIds) && model.contractIds.Split(',').ToList().Count > 1)
                        {
                            Guid id = Guid.Empty;
                            Guid profileID = Guid.Empty;
                            foreach (var item in model.contractIds.Split(',').ToList())
                            {
                                if (!string.IsNullOrEmpty(item))
                                {
                                    var contractforEdit = ContractServices.GetContractByID(Guid.Parse(item));

                                    if (contractforEdit != null)
                                    {
                                        profileID = contractforEdit.ProfileID;
                                        contractforEdit = contract.CopyData<Hre_ContractEntity>("ProfileID", "ID", "Hre_Profile1", "Hre_Profile");
                                        contractforEdit.ID = Guid.Parse(item);
                                        contractforEdit.ProfileID = profileID;
                                        contractforEdit.ActionStatus = ContractServices.Edit(contractforEdit);
                                        contract.ActionStatus = contractforEdit.ActionStatus;
                                    }
                                }
                            }
                        }
                        else
                        {
                            contract.ID = model.ID;
                            contract.ActionStatus = ContractServices.Edit(contract);
                        }
                    }
                    contract.contractIds = contractids;

                    if (contract.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        if (model.IsCreateBasicSalary == true)
                        {
                            var _ContractEntity = new Hre_ContractEntity();
                            contract.CopyData(_ContractEntity);
                            _BasicSalaryServices.CreateBasicSalaryByContract(_ContractEntity, profile.ID, _ContractEntity.IsIncludeProbationTime);
                        }
                        if (model.IsCreateInsuranceSalary == true)
                        {
                            var _ContractEntity = new Hre_ContractEntity();
                            contract.CopyData(_ContractEntity);
                            string messagref = _BasicSalaryServices.CreateInsuranceSalaryByContract(_ContractEntity, profile.ID, _ContractEntity.IsIncludeProbationTime);
                        }
                    }

                    //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ
                    if (lstProfile.Count > 1)
                    {
                        countProfile++;
                        if (countProfile == lstProfile.Count)
                        {
                            return Json(contract, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        return Json(contract, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                #region Không check
                var contractgetNoGetBasicSalary = new Hre_ContractEntity();
                model.CopyData(contractgetNoGetBasicSalary);
                var contractNoGetBasicSalary = new Hre_ContractEntity();
                contractNoGetBasicSalary.TimesContract = model.TimesContract;
                contractNoGetBasicSalary.AllowanceID1 = model.AllowanceID1;
                contractNoGetBasicSalary.AllowanceID2 = model.AllowanceID2;
                contractNoGetBasicSalary.AllowanceID3 = model.AllowanceID3;
                contractNoGetBasicSalary.AllowanceID4 = model.AllowanceID4;
                contractNoGetBasicSalary.AllowanceID5 = model.AllowanceID5;
                contractNoGetBasicSalary.AllowanceID6 = model.AllowanceID6;
                contractNoGetBasicSalary.AllowanceID7 = model.AllowanceID7;
                contractNoGetBasicSalary.AllowanceID8 = model.AllowanceID8;
                contractNoGetBasicSalary.AllowanceID9 = model.AllowanceID9;
                contractNoGetBasicSalary.AllowanceID10 = model.AllowanceID10;
                contractNoGetBasicSalary.AllowanceID11 = model.AllowanceID11;
                contractNoGetBasicSalary.AllowanceID12 = model.AllowanceID12;
                contractNoGetBasicSalary.AllowanceID13 = model.AllowanceID13;
                contractNoGetBasicSalary.AllowanceID14 = model.AllowanceID14;
                contractNoGetBasicSalary.AllowanceID15 = model.AllowanceID15;
                contractNoGetBasicSalary.ClassRateID = model.ClassRateID;
                contractNoGetBasicSalary.Code = model.Code;
                contractNoGetBasicSalary.ContractTypeID = model.ContractTypeID;
                contractNoGetBasicSalary.CurenncyID = model.CurenncyID;
                contractNoGetBasicSalary.CurenncyID1 = model.CurenncyID1;
                contractNoGetBasicSalary.CurenncyID2 = model.CurenncyID2;
                contractNoGetBasicSalary.CurenncyID3 = model.CurenncyID3;
                contractNoGetBasicSalary.CurenncyID4 = model.CurenncyID4;
                contractNoGetBasicSalary.CurenncyID5 = model.CurenncyID5;
                contractNoGetBasicSalary.CurenncyID6 = model.CurenncyID6;
                contractNoGetBasicSalary.CurenncyID7 = model.CurenncyID7;
                contractNoGetBasicSalary.CurenncyID8 = model.CurenncyID8;
                contractNoGetBasicSalary.CurenncyID9 = model.CurenncyID9;
                contractNoGetBasicSalary.CurenncyID10 = model.CurenncyID10;
                contractNoGetBasicSalary.CurenncyID11 = model.CurenncyID11;
                contractNoGetBasicSalary.CurenncyID12 = model.CurenncyID12;
                contractNoGetBasicSalary.CurenncyID13 = model.CurenncyID13;
                contractNoGetBasicSalary.CurenncyID14 = model.CurenncyID14;
                contractNoGetBasicSalary.CurenncyID15 = model.CurenncyID15;
                contractNoGetBasicSalary.CurenncyIDSalary = model.CurenncyIDSalary;
                contractNoGetBasicSalary.DateAuthorize = model.DateAuthorize;
                contractNoGetBasicSalary.DateCreate = model.DateCreate;
                contractNoGetBasicSalary.DateEnd = model.DateEnd;
                contractNoGetBasicSalary.DateSigned = model.DateSigned;
                contractNoGetBasicSalary.DateStart = model.DateStart;
                contractNoGetBasicSalary.DateUpdate = DateTime.Now;
                contractNoGetBasicSalary.FollowNo = model.FollowNo;
                contractNoGetBasicSalary.Note = model.Note;
                contractNoGetBasicSalary.FormPaySalary = model.FormPaySalary;
                //Nguyen.Le - 13/12/2017 - 0091146
                contractNoGetBasicSalary.FormCompSalary = model.FormCompSalary;
                contractNoGetBasicSalary.HourWorkInMonth = model.HourWorkInMonth;
                contractNoGetBasicSalary.IPCreate = model.IPCreate;
                contractNoGetBasicSalary.IPUpdate = model.IPUpdate;
                contractNoGetBasicSalary.PersonalRate = model.PersonalRate;
                contractNoGetBasicSalary.ProfileID = model.ProfileID;
                contractNoGetBasicSalary.ProfileSingID = model.ProfileSingID;
                contractNoGetBasicSalary.QualificationID = model.QualificationID;
                contractNoGetBasicSalary.RankRateID = model.RankRateID;
                contractNoGetBasicSalary.SalaryClassTypeID = model.SalaryClassTypeID;
                contractNoGetBasicSalary.ServerCreate = model.ServerCreate;
                contractNoGetBasicSalary.ServerUpdate = model.ServerUpdate;
                contractNoGetBasicSalary.WorkPlaceID = model.WorkPlaceID;
                contractNoGetBasicSalary.NextContractTypeID = model.NextContractTypeID;
                contractNoGetBasicSalary.Remark = model.Remark;
                contractNoGetBasicSalary.RankDetailForNextContract = model.RankDetailForNextContract;
                contractNoGetBasicSalary.ContractEvaType = model.ContractEvaType;
                contractNoGetBasicSalary.DateOfContractEva = model.DateOfContractEva;
                contractNoGetBasicSalary.EvaluationResult = model.EvaluationResult;
                contractNoGetBasicSalary.ContractResult = model.ContractResult;
                contractNoGetBasicSalary.TypeOfPass = model.TypeOfPass;
                contractNoGetBasicSalary.DateEndNextContract = model.DateEndNextContract;
                //Son.Vo - 20151107 - 0059636
                contractNoGetBasicSalary.Duration = model.Duration;
                contractNoGetBasicSalary.DayOfAnnualLeave = model.DayOfAnnualLeave;
                contractNoGetBasicSalary.CompanyID = model.CompanyID;
                //Son.Vo - 20160613 - lưu thêm 2 field
                contractNoGetBasicSalary.ProbationPercent = model.ProbationPercent;
                contractNoGetBasicSalary.ProbationSalary = model.ProbationSalary;
                //Son.Vo - 20160614 - 0068882
                contractNoGetBasicSalary.IsMLC = model.IsMLC;
                ////Son.Vo - 20160406 - 0065835
                //if (contractNoGetBasicSalary.OrgStructureID == null)
                //{
                //    contractNoGetBasicSalary.OrgStructureID = profile.OrgStructureID;
                //}

                if (model.ContractNo != null)
                {
                    contractNoGetBasicSalary.ContractNo = model.ContractNo;
                }
                //Son.Vo - 20160119 - 0063260
                contractNoGetBasicSalary.DateExtend = contractNoGetBasicSalary.DateEnd;
                #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                if (contractNoGetBasicSalary.ID == Guid.Empty && contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    string messageref1 = workHistoryServices.UpdateHeadProfile(contractNoGetBasicSalary.ProfileID, contractNoGetBasicSalary.PositionID);
                }
                #endregion
                contractNoGetBasicSalary.ContractStatus = model.ContractStatus;
                //Son.Vo - 20160912 - 0073153 Trạng thái duyệt mới tạo mới lương cb + bhxh
                contractNoGetBasicSalary.IsCreateBasicSalary = model.IsCreateBasicSalary;
                contractNoGetBasicSalary.IsCreateInsuranceSalary = model.IsCreateInsuranceSalary;
                contractNoGetBasicSalary.Status = model.Status;
                contractNoGetBasicSalary.UserSubmit = model.UserSubmit;
                contractNoGetBasicSalary.UserApproveID = model.UserApproveID;
                contractNoGetBasicSalary.UserApproveID2 = model.UserApproveID2;
                contractNoGetBasicSalary.UserApproveID3 = model.UserApproveID3;
                contractNoGetBasicSalary.UserApproveID4 = model.UserApproveID4;
                contractNoGetBasicSalary.UserProcessID = model.UserProcessID;
                contractNoGetBasicSalary.UserProcessID2 = model.UserProcessID2;
                contractNoGetBasicSalary.UserProcessID3 = model.UserProcessID3;
                contractNoGetBasicSalary.UserProcessID4 = model.UserProcessID4;
                //Son.Vo - 20161202 - 0074278
                contractNoGetBasicSalary = ContractServices.SetContractDataByWorkHistory(contractNoGetBasicSalary);
                //Son.Vo - 20161221 - 0076839
                contractNoGetBasicSalary.EmployeeTypeID = model.EmployeeTypeID;
                contractNoGetBasicSalary.ReasonChangeSalaryID = model.ReasonChangeSalaryID;
                contractNoGetBasicSalary.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                #region Son.Vo - 20170217 - 0078889 Lấy thông tin địa chỉ từng người gắn vào HĐ. Trường hợp tạo nhiều dòng
                if (lstProfile.Count > 1)
                {
                    contractNoGetBasicSalary.IDNo = profile.IDNo;
                    contractNoGetBasicSalary.IDDateOfIssue = profile.IDDateOfIssue;
                    contractNoGetBasicSalary.IDPlaceOfIssue = profile.IDPlaceOfIssue;
                    contractNoGetBasicSalary.PCountryID = profile.PCountryID;
                    contractNoGetBasicSalary.PProvinceID = profile.PProvinceID;
                    contractNoGetBasicSalary.PDistrictID = profile.PDistrictID;
                    contractNoGetBasicSalary.PVillageID = profile.VillageID;
                    contractNoGetBasicSalary.PAddress = profile.PAddress;
                    //Son.Vo - 20170220 - xử lý thêm chức vụ + chức danh theo workhistory nếu chọn nhiều nhân viên
                    var workhistoryEntity = workHistoryServices.GetWorkHistoryDataForCreateContract(contractNoGetBasicSalary.DateStart, contractNoGetBasicSalary.ProfileID);
                    if (workhistoryEntity != null)
                    {
                        contractNoGetBasicSalary.JobTitleID = workhistoryEntity.JobTitleID;
                        contractNoGetBasicSalary.PositionID = workhistoryEntity.PositionID;
                        contractNoGetBasicSalary.OrgStructureID = workhistoryEntity.OrganizationStructureID;
                    }
                }
                else
                {
                    contractNoGetBasicSalary.IDNo = model.IDNo;
                    contractNoGetBasicSalary.IDDateOfIssue = model.IDDateOfIssue;
                    contractNoGetBasicSalary.IDPlaceOfIssue = model.IDPlaceOfIssue;
                    contractNoGetBasicSalary.PCountryID = model.PCountryID;
                    contractNoGetBasicSalary.PProvinceID = model.PProvinceID;
                    contractNoGetBasicSalary.PDistrictID = model.PDistrictID;
                    contractNoGetBasicSalary.PVillageID = model.PVillageID;
                    contractNoGetBasicSalary.PAddress = model.PAddress;
                    contractNoGetBasicSalary.JobTitleID = model.JobTitleID;
                    contractNoGetBasicSalary.PositionID = model.PositionID;
                    //Son.Vo - 20160824 - 0072448
                    contractNoGetBasicSalary.OrgStructureID = model.OrgStructureID;
                }
                #endregion
                //Son.Vo - 20170316 - 0079910
                contractNoGetBasicSalary.EmployeeGroupID = model.EmployeeGroupID;
                contractNoGetBasicSalary.DelegateCompanyID = model.DelegateCompanyID;

                //Son.Vo - 20170605 - 0082889
                contractNoGetBasicSalary.GradeAttendanceID = model.GradeAttendanceID;
                contractNoGetBasicSalary.IsIncludeProbationTime = model.IsIncludeProbationTime;
                //Nguyen.Le - 22/01/2018 - 0092668
                contractNoGetBasicSalary.CompanyVN = model.CompanyVN;
                contractNoGetBasicSalary.CompanyEN = model.CompanyEN;
                contractNoGetBasicSalary.AddressVN = model.AddressVN;
                contractNoGetBasicSalary.AddressEN = model.AddressEN;
                contractNoGetBasicSalary.SignPlace = model.SignPlace;
                contractNoGetBasicSalary.Telephone = model.Telephone;

                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                {
                    if (model.Salary != null)
                    {
                        contractNoGetBasicSalary.E_Salary = model.Salary.ToString().Encrypt();
                    }
                    if (model.InsuranceAmount != null)
                    {
                        contractNoGetBasicSalary.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                    }
                    contractNoGetBasicSalary.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }
                else
                {
                    if (model.Salary != null)
                    {
                        contractNoGetBasicSalary.Salary = model.Salary;
                        contractNoGetBasicSalary.E_Salary = model.Salary.ToString().Encrypt();
                    }
                    if (model.InsuranceAmount != null)
                    {
                        contractNoGetBasicSalary.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                        contractNoGetBasicSalary.InsuranceAmount = model.InsuranceAmount;
                    }
                    contractNoGetBasicSalary.Allowance = model.Allowance;
                    contractNoGetBasicSalary.Allowance1 = model.Allowance1;
                    contractNoGetBasicSalary.Allowance3 = model.Allowance3;
                    contractNoGetBasicSalary.Allowance2 = model.Allowance2;
                    contractNoGetBasicSalary.Allowance4 = model.Allowance4;
                    contractNoGetBasicSalary.Allowance5 = model.Allowance5;
                    contractNoGetBasicSalary.Allowance6 = model.Allowance6;
                    contractNoGetBasicSalary.Allowance7 = model.Allowance7;
                    contractNoGetBasicSalary.Allowance8 = model.Allowance8;
                    contractNoGetBasicSalary.Allowance9 = model.Allowance9;
                    contractNoGetBasicSalary.Allowance10 = model.Allowance10;
                    contractNoGetBasicSalary.Allowance11 = model.Allowance11;
                    contractNoGetBasicSalary.Allowance12 = model.Allowance12;
                    contractNoGetBasicSalary.Allowance13 = model.Allowance13;
                    contractNoGetBasicSalary.Allowance14 = model.Allowance14;
                    contractNoGetBasicSalary.Allowance15 = model.Allowance15;

                    contractNoGetBasicSalary.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    contractNoGetBasicSalary.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }

                if (contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    if (model.IsCreateBasicSalary == true)
                    {
                        #region Son.Vo - 20170710 - 0084759
                        if (string.IsNullOrEmpty(model.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        #endregion
                    }
                    if (model.IsCreateInsuranceSalary == true)
                    {
                        #region Son.Vo - 20170710 - 0084759
                        if (string.IsNullOrEmpty(model.IsCreateSal))
                        {
                            var isInvalid = ContractServices.ValidateCreateContract(profile.ID, model.ID, model.DateStart, model.InsuranceAmount, model.ContractTypeID, model.IsCreateBasicSalary, model.IsCreateInsuranceSalary);
                            if (isInvalid == true)
                            {
                                model.ActionStatus = "InvalidSalary";
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        #endregion
                    }
                }

                if (contractNoGetBasicSalary.ProfileID != null && model.GradeAttendanceID != null)
                {
                    string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(contractNoGetBasicSalary.ProfileID, model.GradeAttendanceID.Value, contractNoGetBasicSalary.DateStart);
                }
                //Quyen.Quach 02/11/2017 0089253
                contractNoGetBasicSalary.AttachFile = model.AttachFile != null ? model.AttachFile : string.Empty;

                if (model.ID == Guid.Empty)
                {
                    //Son.Vo - 20170224 - 0075838: Điều chỉnh cơ chế sinh số HĐ khi tạo mới HĐ
                    if (model.Status == EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        var lstcontractTypeByPro = lstContractTypeByProfile.Where(s => s.ProfileID == contractNoGetBasicSalary.ProfileID).Select(s => s.ContractTypeID).Distinct().ToList();
                        var contractEntityForContractno = contractNoGetBasicSalary.CopyData<Hre_ContractEntity>();
                        ContractServices.SetNewCodeContract(contractEntityForContractno, lstcontractTypeByPro);
                        contractNoGetBasicSalary.ContractNo = contractEntityForContractno.ContractNo;
                    }
                    contractNoGetBasicSalary.ID = Guid.NewGuid();
                    contractNoGetBasicSalary.ActionStatus = ContractServices.Add(contractNoGetBasicSalary);
                    if (lstProfile.Count > 1)
                    {
                        contractids += contractNoGetBasicSalary.ID.ToString() + ',';
                    }
                }
                else
                {
                    //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ xong rồi sửa thông tin rồi click lưu lần nữa
                    if (!string.IsNullOrEmpty(model.contractIds) && model.contractIds.Split(',').ToList().Count > 1)
                    {
                        Guid id = Guid.Empty;
                        Guid profileID = Guid.Empty;
                        foreach (var item in model.contractIds.Split(',').ToList())
                        {
                            if (!string.IsNullOrEmpty(item))
                            {
                                var contractforEdit = ContractServices.GetContractByID(Guid.Parse(item));

                                if (contractforEdit != null)
                                {
                                    profileID = contractforEdit.ProfileID;
                                    contractforEdit = contractNoGetBasicSalary.CopyData<Hre_ContractEntity>("ProfileID", "ID", "Hre_Profile1", "Hre_Profile");
                                    contractforEdit.ID = Guid.Parse(item);
                                    contractforEdit.ProfileID = profileID;
                                    contractforEdit.ActionStatus = ContractServices.Edit(contractforEdit);
                                    contractNoGetBasicSalary.ActionStatus = contractforEdit.ActionStatus;
                                }
                            }
                        }
                    }
                    else
                    {
                        contractNoGetBasicSalary.ID = model.ID;
                        contractNoGetBasicSalary.ActionStatus = ContractServices.Edit(contractNoGetBasicSalary);
                    }
                }
                contractNoGetBasicSalary.contractIds = contractids;
                message = contractNoGetBasicSalary.ActionStatus;

                if (contractNoGetBasicSalary.Status == EnumDropDown.Status.E_APPROVED.ToString())
                {
                    if (model.IsCreateBasicSalary == true)
                    {
                        var _ContractEntity = new Hre_ContractEntity();
                        contractNoGetBasicSalary.CopyData(_ContractEntity);
                        _BasicSalaryServices.CreateBasicSalaryByContract(contractNoGetBasicSalary, profile.ID, _ContractEntity.IsIncludeProbationTime);
                    }
                    if (model.IsCreateInsuranceSalary == true)
                    {
                        var _ContractEntity = new Hre_ContractEntity();
                        contractNoGetBasicSalary.CopyData(_ContractEntity);
                        string messagref = _BasicSalaryServices.CreateInsuranceSalaryByContract(contractNoGetBasicSalary, profile.ID, _ContractEntity.IsIncludeProbationTime);
                    }
                }

                //Son.Vo - 20161007 - xử lý khi lưu nhiều HĐ
                if (lstProfile.Count > 1)
                {
                    countProfile++;
                    if (countProfile == lstProfile.Count)
                    {
                        return Json(contractNoGetBasicSalary, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        continue;
                    }
                }
                else
                {
                    return Json(contractNoGetBasicSalary, JsonRequestBehavior.AllowGet);
                }
                #endregion
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult EditContractByEvaContract([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstContractEidt = new List<Hre_ContractEntity>();
            List<Guid> lstIDs = new List<Guid>();
            var insuranceServices = new Sal_InsuranceSalaryServices();
            var contractServices = new Hre_ContractServices();
            if (model.selectedIds == null && model.contractIds != null)
            {
                model.selectedIds = model.contractIds;
            }
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }
            var actionService = new ActionService(UserLogin);
            var lstContract = new List<Hre_ContractEntity>();
            if (lstIDs != null)
            {
                lstContract = contractServices.GetContractDataByIDs(lstIDs);
            }

            #region Son.Vo - 20160712 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duyệt
            var _Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = _Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
            if (model != null && model.NextUserProfileSingID != null && ischeck == true)
            {
                model.NextProfileSingID = model.NextUserProfileSingID;
            }
            #endregion
            //Son.Vo - 20161226 - 0077134
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            string strDataLoadFrom = Sys_Services.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_LOADEVALUATIONDATAFROM);
            bool isloadFromBasic = false;
            bool isloadFromExtend = false;
            if (lstIDs.Count > 1 && strDataLoadFrom != null && strDataLoadFrom == LoadEvaluationDataFrom.E_BASICSALARY.ToString())
            {
                isloadFromBasic = true;
            }
            else if (lstIDs.Count > 1 && strDataLoadFrom != null && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
            {
                isloadFromExtend = true;
            }
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = _BasicSalaryServices.GetLstBasicSalaryByContract(lstIDs).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLastContractExtend4UpdateEvaContract(lstIDs).ToList();
            foreach (var item in lstContract)
            {
                if (item.DateExtend == null)
                {
                    item.DateExtend = item.DateEnd;
                }
                if (model.DateEndNextContract != null)
                {
                    item.DateEndNextContract = model.DateEndNextContract;
                }
                item.TypeOfStopID = model.TypeOfStopID;
                item.ContractResult = model.ContractResult;
                item.ContractEvaType = model.ContractEvaType;
                item.ContractEvaType = model.ContractEvaType;
                item.DateOfContractEva = model.DateOfContractEva;
                item.EvaluationResult = model.EvaluationResult;
                item.Remark = model.Remark;
                item.TypeOfPass = model.TypeOfPass;
                item.NextContractTypeID = model.NextContractTypeID;
                item.AppendixTypeNextID = model.AppendixTypeNextID;
                item.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_WAITING.ToString();
                var contractEntity = new Hre_ContractEntity();
                contractEntity = item.CopyData<Hre_ContractEntity>();
                if (item.DateEnd != null)
                {
                    contractEntity.DateStart = item.DateEnd.Value.AddDays(1);
                }
                if (model.NextContractTypeID != null)
                {
                    SetNewDateEndNextContractByContractAndNextContractID(contractEntity, model.NextContractTypeID.Value);
                }
                item.DateEndNextContract = contractEntity.DateEndNextContract;
                //Son.Vo - 20160530 - 0068094 - nếu có nhập lương cb ở màn hình đánh giá thì Lưu tất cả các trường thông tin lương và phụ cấp kế tiếp khai báo ở trên giao diện
                //nếu không nhập thì lấy của hd hiện tại update vào
                if (model.NextSalary != null)
                {
                    #region Son.Vo - 20160409 - 0065837
                    //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        if (model.NextSalary != null)
                        {
                            item.E_NextSalary = model.NextSalary.ToString().Encrypt();
                        }
                        if (model.NextInsuranceAmount != null)
                        {
                            item.E_NextInsuranceAmount = model.NextInsuranceAmount.ToString().Encrypt();
                        }
                        item.E_Allowance1 = model.NextAllowance1 != null ? model.NextAllowance1.ToString().Encrypt() : string.Empty;
                        item.E_Allowance2 = model.NextAllowance2 != null ? model.NextAllowance2.ToString().Encrypt() : string.Empty;
                        item.E_Allowance3 = model.NextAllowance3 != null ? model.NextAllowance3.ToString().Encrypt() : string.Empty;
                        item.E_Allowance4 = model.NextAllowance4 != null ? model.NextAllowance4.ToString().Encrypt() : string.Empty;
                        item.E_Allowance5 = model.NextAllowance5 != null ? model.NextAllowance5.ToString().Encrypt() : string.Empty;
                        item.E_Allowance6 = model.NextAllowance6 != null ? model.NextAllowance6.ToString().Encrypt() : string.Empty;
                        item.E_Allowance7 = model.NextAllowance7 != null ? model.NextAllowance7.ToString().Encrypt() : string.Empty;
                        item.E_Allowance8 = model.NextAllowance8 != null ? model.NextAllowance8.ToString().Encrypt() : string.Empty;
                        item.E_Allowance9 = model.NextAllowance9 != null ? model.NextAllowance9.ToString().Encrypt() : string.Empty;
                        item.E_Allowance10 = model.NextAllowance10 != null ? model.NextAllowance10.ToString().Encrypt() : string.Empty;
                        item.E_Allowance11 = model.NextAllowance11 != null ? model.NextAllowance11.ToString().Encrypt() : string.Empty;
                        item.E_Allowance12 = model.NextAllowance12 != null ? model.NextAllowance12.ToString().Encrypt() : string.Empty;
                        item.E_Allowance13 = model.NextAllowance13 != null ? model.NextAllowance13.ToString().Encrypt() : string.Empty;
                        item.E_Allowance14 = model.NextAllowance14 != null ? model.NextAllowance14.ToString().Encrypt() : string.Empty;
                        item.E_Allowance15 = model.NextAllowance15 != null ? model.NextAllowance15.ToString().Encrypt() : string.Empty;
                    }
                    else
                    {
                        if (model.NextSalary != null)
                        {
                            item.NextSalary = model.NextSalary;
                            item.E_NextSalary = model.NextSalary.ToString().Encrypt();
                        }
                        if (model.NextInsuranceAmount != null)
                        {
                            item.NextInsuranceAmount = model.NextInsuranceAmount;
                            item.E_NextInsuranceAmount = model.NextInsuranceAmount.ToString().Encrypt();
                        }
                        if (model.NextAllowance1 != null)
                        {
                            item.NextAllowance1 = model.NextAllowance1;
                        }
                        if (model.NextAllowance2 != null)
                        {
                            item.NextAllowance2 = model.NextAllowance2;
                        }
                        if (model.NextAllowance3 != null)
                        {
                            item.NextAllowance3 = model.NextAllowance3;
                        }
                        if (model.NextAllowance4 != null)
                        {
                            item.NextAllowance4 = model.NextAllowance4;
                        }
                        if (model.NextAllowance5 != null)
                        {
                            item.NextAllowance5 = model.NextAllowance5;
                        }
                        if (model.NextAllowance8 != null)
                        {
                            item.NextAllowance8 = model.NextAllowance8;
                        }
                        if (model.NextAllowance9 != null)
                        {
                            item.NextAllowance9 = model.NextAllowance9;
                        }
                        if (model.NextAllowance10 != null)
                        {
                            item.NextAllowance10 = model.NextAllowance10;
                        }
                        if (model.NextAllowance11 != null)
                        {
                            item.NextAllowance11 = model.NextAllowance11;
                        }
                        if (model.NextAllowance12 != null)
                        {
                            item.NextAllowance12 = model.NextAllowance12;
                        }
                        if (model.NextAllowance13 != null)
                        {
                            item.NextAllowance13 = model.NextAllowance13;
                        }
                        if (model.NextAllowance14 != null)
                        {
                            item.NextAllowance14 = model.NextAllowance14;
                        }
                        if (model.NextAllowance15 != null)
                        {
                            item.NextAllowance15 = model.NextAllowance15;
                        }
                        item.E_Allowance1 = model.NextAllowance1 != null ? model.NextAllowance1.ToString().Encrypt() : string.Empty;
                        item.E_Allowance2 = model.NextAllowance2 != null ? model.NextAllowance2.ToString().Encrypt() : string.Empty;
                        item.E_Allowance3 = model.NextAllowance3 != null ? model.NextAllowance3.ToString().Encrypt() : string.Empty;
                        item.E_Allowance4 = model.NextAllowance4 != null ? model.NextAllowance4.ToString().Encrypt() : string.Empty;
                        item.E_Allowance5 = model.NextAllowance5 != null ? model.NextAllowance5.ToString().Encrypt() : string.Empty;
                        item.E_Allowance6 = model.NextAllowance6 != null ? model.NextAllowance6.ToString().Encrypt() : string.Empty;
                        item.E_Allowance7 = model.NextAllowance7 != null ? model.NextAllowance7.ToString().Encrypt() : string.Empty;
                        item.E_Allowance8 = model.NextAllowance8 != null ? model.NextAllowance8.ToString().Encrypt() : string.Empty;
                        item.E_Allowance9 = model.NextAllowance9 != null ? model.NextAllowance9.ToString().Encrypt() : string.Empty;
                        item.E_Allowance10 = model.NextAllowance10 != null ? model.NextAllowance10.ToString().Encrypt() : string.Empty;
                        item.E_Allowance11 = model.NextAllowance11 != null ? model.NextAllowance11.ToString().Encrypt() : string.Empty;
                        item.E_Allowance12 = model.NextAllowance12 != null ? model.NextAllowance12.ToString().Encrypt() : string.Empty;
                        item.E_Allowance13 = model.NextAllowance13 != null ? model.NextAllowance13.ToString().Encrypt() : string.Empty;
                        item.E_Allowance14 = model.NextAllowance14 != null ? model.NextAllowance14.ToString().Encrypt() : string.Empty;
                        item.E_Allowance15 = model.NextAllowance15 != null ? model.NextAllowance15.ToString().Encrypt() : string.Empty;
                    }

                    if (model.NextCurrencyID != null)
                    {
                        item.NextCurrencyID = model.NextCurrencyID;
                    }

                    if (model.NextAllowanceID1 != null)
                    {
                        item.NextAllowanceID1 = model.NextAllowanceID1;
                    }

                    if (model.NextCurenncyID1 != null)
                    {
                        item.NextCurenncyID1 = model.NextCurenncyID1;
                    }

                    if (model.NextAllowanceID2 != null)
                    {
                        item.NextAllowanceID2 = model.NextAllowanceID2;
                    }

                    if (model.NextCurenncyID2 != null)
                    {
                        item.NextCurenncyID2 = model.NextCurenncyID2;
                    }

                    if (model.NextAllowanceID3 != null)
                    {
                        item.NextAllowanceID3 = model.NextAllowanceID3;
                    }

                    if (model.NextCurenncyID3 != null)
                    {
                        item.NextCurenncyID3 = model.NextCurenncyID3;
                    }

                    if (model.NextAllowanceID4 != null)
                    {
                        item.NextAllowanceID4 = model.NextAllowanceID4;
                    }

                    if (model.NextCurenncyID4 != null)
                    {
                        item.NextCurenncyID4 = model.NextCurenncyID4;
                    }

                    if (model.NextAllowanceID5 != null)
                    {
                        item.NextAllowanceID5 = model.NextAllowanceID5;
                    }

                    if (model.NextCurenncyID5 != null)
                    {
                        item.NextCurenncyID5 = model.NextCurenncyID5;
                    }

                    if (model.NextAllowanceID6 != null)
                    {
                        item.NextAllowanceID6 = model.NextAllowanceID6;
                    }
                    if (model.NextAllowance6 != null)
                    {
                        item.NextAllowance6 = model.NextAllowance6;
                    }
                    if (model.NextCurenncyID6 != null)
                    {
                        item.NextCurenncyID6 = model.NextCurenncyID6;
                    }

                    if (model.NextAllowanceID7 != null)
                    {
                        item.NextAllowanceID7 = model.NextAllowanceID7;
                    }
                    if (model.NextAllowance7 != null)
                    {
                        item.NextAllowance7 = model.NextAllowance7;
                    }
                    if (model.NextCurenncyID7 != null)
                    {
                        item.NextCurenncyID7 = model.NextCurenncyID7;
                    }

                    if (model.NextAllowanceID8 != null)
                    {
                        item.NextAllowanceID8 = model.NextAllowanceID8;
                    }

                    if (model.NextCurenncyID8 != null)
                    {
                        item.NextCurenncyID8 = model.NextCurenncyID8;
                    }

                    if (model.NextAllowanceID9 != null)
                    {
                        item.NextAllowanceID9 = model.NextAllowanceID9;
                    }

                    if (model.NextCurenncyID9 != null)
                    {
                        item.NextCurenncyID9 = model.NextCurenncyID9;
                    }

                    if (model.NextAllowanceID10 != null)
                    {
                        item.NextAllowanceID10 = model.NextAllowanceID10;
                    }

                    if (model.NextCurenncyID10 != null)
                    {
                        item.NextCurenncyID10 = model.NextCurenncyID10;
                    }

                    if (model.NextAllowanceID11 != null)
                    {
                        item.NextAllowanceID11 = model.NextAllowanceID11;
                    }

                    if (model.NextCurenncyID11 != null)
                    {
                        item.NextCurenncyID11 = model.NextCurenncyID11;
                    }
                    if (model.NextAllowanceID12 != null)
                    {
                        item.NextAllowanceID12 = model.NextAllowanceID12;
                    }

                    if (model.NextCurenncyID12 != null)
                    {
                        item.NextCurenncyID12 = model.NextCurenncyID12;
                    }

                    if (model.NextAllowanceID13 != null)
                    {
                        item.NextAllowanceID13 = model.NextAllowanceID13;
                    }

                    if (model.NextCurenncyID13 != null)
                    {
                        item.NextCurenncyID13 = model.NextCurenncyID13;
                    }

                    if (model.NextAllowanceID14 != null)
                    {
                        item.NextAllowanceID14 = model.NextAllowanceID14;
                    }

                    if (model.NextCurenncyID14 != null)
                    {
                        item.NextCurenncyID14 = model.NextCurenncyID14;
                    }

                    if (model.NextAllowanceID15 != null)
                    {
                        item.NextAllowanceID15 = model.NextAllowanceID15;
                    }

                    if (model.NextCurenncyID15 != null)
                    {
                        item.NextCurenncyID15 = model.NextCurenncyID15;
                    }
                    //Son.Vo - 20160506 - 0066590
                    //item.NextInsuranceAmount = model.NextInsuranceAmount;
                    item.NextCurrencyIDInsurance = model.NextCurrencyIDInsurance;
                    //Son.Vo - 20160427 - 0066373
                    item.RankForNextContract = model.RankForNextContract;
                    item.RankDetailForNextContract = model.RankDetailForNextContract;
                    #endregion
                }
                else
                {
                    if (isloadFromBasic == true)
                    {
                        #region Nếu cấu hình load từ lương cb
                        var lastSalary = lstBasicSalary.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                        if (lastSalary != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lastSalary.GrossAmount != null)
                                {
                                    item.E_NextSalary = lastSalary.GrossAmount.ToString().Encrypt();
                                }
                                if (lastSalary.InsuranceAmount != null)
                                {
                                    item.E_NextInsuranceAmount = lastSalary.InsuranceAmount.ToString().Encrypt();
                                }
                                item.E_Allowance1 = lastSalary.AllowanceAmount1 != null ? lastSalary.AllowanceAmount1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastSalary.AllowanceAmount2 != null ? lastSalary.AllowanceAmount2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastSalary.AllowanceAmount3 != null ? lastSalary.AllowanceAmount3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastSalary.AllowanceAmount4 != null ? lastSalary.AllowanceAmount4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastSalary.AllowanceAmount5 != null ? lastSalary.AllowanceAmount5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastSalary.AllowanceAmount6 != null ? lastSalary.AllowanceAmount6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastSalary.AllowanceAmount7 != null ? lastSalary.AllowanceAmount7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastSalary.AllowanceAmount8 != null ? lastSalary.AllowanceAmount8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastSalary.AllowanceAmount9 != null ? lastSalary.AllowanceAmount9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastSalary.AllowanceAmount10 != null ? lastSalary.AllowanceAmount10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastSalary.AllowanceAmount11 != null ? lastSalary.AllowanceAmount11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastSalary.AllowanceAmount12 != null ? lastSalary.AllowanceAmount12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastSalary.AllowanceAmount13 != null ? lastSalary.AllowanceAmount13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastSalary.AllowanceAmount14 != null ? lastSalary.AllowanceAmount14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastSalary.AllowanceAmount15 != null ? lastSalary.AllowanceAmount15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                if (lastSalary.GrossAmount != null)
                                {
                                    item.NextSalary = lastSalary.GrossAmount != null ? lastSalary.GrossAmount.ToDouble() : null;
                                    item.E_NextSalary = lastSalary.GrossAmount.ToString().Encrypt();
                                }
                                if (lastSalary.InsuranceAmount != null)
                                {
                                    item.NextInsuranceAmount = lastSalary.InsuranceAmount;
                                    item.E_NextInsuranceAmount = lastSalary.InsuranceAmount.ToString().Encrypt();
                                }
                                item.NextAllowance1 = lastSalary.AllowanceAmount1;
                                item.NextAllowance2 = lastSalary.AllowanceAmount2;
                                item.NextAllowance3 = lastSalary.AllowanceAmount3;
                                item.NextAllowance4 = lastSalary.AllowanceAmount4;
                                item.NextAllowance5 = lastSalary.AllowanceAmount5;
                                item.NextAllowance6 = lastSalary.AllowanceAmount6;
                                item.NextAllowance7 = lastSalary.AllowanceAmount7;
                                item.NextAllowance8 = lastSalary.AllowanceAmount8;
                                item.NextAllowance9 = lastSalary.AllowanceAmount9;
                                item.NextAllowance10 = lastSalary.AllowanceAmount10;
                                item.NextAllowance11 = lastSalary.AllowanceAmount11;
                                item.NextAllowance12 = lastSalary.AllowanceAmount12;
                                item.NextAllowance13 = lastSalary.AllowanceAmount13;
                                item.NextAllowance14 = lastSalary.AllowanceAmount14;
                                item.NextAllowance15 = lastSalary.AllowanceAmount15;
                                //Mã hóa 15 loại phụ cấp
                                item.E_Allowance1 = lastSalary.AllowanceAmount1 != null ? lastSalary.AllowanceAmount1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastSalary.AllowanceAmount2 != null ? lastSalary.AllowanceAmount2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastSalary.AllowanceAmount3 != null ? lastSalary.AllowanceAmount3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastSalary.AllowanceAmount4 != null ? lastSalary.AllowanceAmount4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastSalary.AllowanceAmount5 != null ? lastSalary.AllowanceAmount5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastSalary.AllowanceAmount6 != null ? lastSalary.AllowanceAmount6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastSalary.AllowanceAmount7 != null ? lastSalary.AllowanceAmount7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastSalary.AllowanceAmount8 != null ? lastSalary.AllowanceAmount8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastSalary.AllowanceAmount9 != null ? lastSalary.AllowanceAmount9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastSalary.AllowanceAmount10 != null ? lastSalary.AllowanceAmount10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastSalary.AllowanceAmount11 != null ? lastSalary.AllowanceAmount11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastSalary.AllowanceAmount12 != null ? lastSalary.AllowanceAmount12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastSalary.AllowanceAmount13 != null ? lastSalary.AllowanceAmount13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastSalary.AllowanceAmount14 != null ? lastSalary.AllowanceAmount14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastSalary.AllowanceAmount15 != null ? lastSalary.AllowanceAmount15.ToString().Encrypt() : string.Empty;
                            }
                            item.NextCurrencyID = lastSalary.CurrencyID;
                            item.NextCurrencyIDInsurance = lastSalary.CurrencyID;

                            item.NextAllowanceID1 = lastSalary.AllowanceType1ID;
                            item.NextCurenncyID1 = lastSalary.CurrencyID1;

                            item.NextAllowanceID2 = lastSalary.AllowanceType2ID;
                            item.NextCurenncyID2 = lastSalary.CurrencyID2;

                            item.NextAllowanceID3 = lastSalary.AllowanceType3ID;
                            item.NextCurenncyID3 = lastSalary.CurrencyID3;

                            item.NextAllowanceID4 = lastSalary.AllowanceType4ID;
                            item.NextCurenncyID4 = lastSalary.CurrencyID4;

                            item.NextAllowanceID5 = lastSalary.AllowanceTypeID5;
                            item.NextCurenncyID5 = lastSalary.CurrencyID5;

                            item.NextAllowanceID6 = lastSalary.AllowanceTypeID6;
                            item.NextCurenncyID6 = lastSalary.CurrencyID6;

                            item.NextAllowanceID7 = lastSalary.AllowanceTypeID7;
                            item.NextCurenncyID7 = lastSalary.CurrencyID7;

                            item.NextAllowanceID8 = lastSalary.AllowanceTypeID8;
                            item.NextCurenncyID8 = lastSalary.CurrencyID8;

                            item.NextAllowanceID9 = lastSalary.AllowanceTypeID9;
                            item.NextCurenncyID9 = lastSalary.CurrencyID9;

                            item.NextAllowanceID10 = lastSalary.AllowanceTypeID10;
                            item.NextCurenncyID10 = lastSalary.CurrencyID10;

                            item.NextAllowanceID11 = lastSalary.AllowanceTypeID11;
                            item.NextCurenncyID11 = lastSalary.CurrencyID11;

                            item.NextAllowanceID12 = lastSalary.AllowanceTypeID12;
                            item.NextCurenncyID12 = lastSalary.CurrencyID12;

                            item.NextAllowanceID13 = lastSalary.AllowanceTypeID13;
                            item.NextCurenncyID13 = lastSalary.CurrencyID13;

                            item.NextAllowanceID14 = lastSalary.AllowanceTypeID14;
                            item.NextCurenncyID14 = lastSalary.CurrencyID14;

                            item.NextAllowanceID15 = lastSalary.AllowanceTypeID15;
                            item.NextCurenncyID15 = lastSalary.CurrencyID15;

                            item.RankForNextContract = lastSalary.ClassRateID;
                            item.RankDetailForNextContract = lastSalary.RankRateID;
                        }
                        #endregion
                    }
                    //Son.Vo - 20170508 - Đánh giá hợp đồng: cập nhật thông tin lương cơ bản, lương BHXH, phụ cấp khi đánh giá hợp đồng
                    else if (isloadFromExtend == true)
                    {
                        #region Nếu cấu hình load từ PLHĐ
                        var lastContractExtend = lstContractExtend.Where(s => s.ContractID == item.ID && s.DateStart > item.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                        if (lastContractExtend != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    item.E_NextSalary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    item.E_NextInsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                item.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    item.NextSalary = lastContractExtend.Salary;
                                    item.E_NextSalary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    item.NextInsuranceAmount = lastContractExtend.InsuranceAmount;
                                    item.E_NextInsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                item.NextAllowance1 = lastContractExtend.Allowance1;
                                item.NextAllowance2 = lastContractExtend.Allowance2;
                                item.NextAllowance3 = lastContractExtend.Allowance3;
                                item.NextAllowance4 = lastContractExtend.Allowance4;
                                item.NextAllowance5 = lastContractExtend.Allowance5;
                                item.NextAllowance6 = lastContractExtend.Allowance6;
                                item.NextAllowance7 = lastContractExtend.Allowance7;
                                item.NextAllowance8 = lastContractExtend.Allowance8;
                                item.NextAllowance9 = lastContractExtend.Allowance9;
                                item.NextAllowance10 = lastContractExtend.Allowance10;
                                item.NextAllowance11 = lastContractExtend.Allowance11;
                                item.NextAllowance12 = lastContractExtend.Allowance12;
                                item.NextAllowance13 = lastContractExtend.Allowance13;
                                item.NextAllowance14 = lastContractExtend.Allowance14;
                                item.NextAllowance15 = lastContractExtend.Allowance15;

                                item.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            item.NextCurrencyID = lastContractExtend.CurrencyIDSalary;

                            item.NextCurrencyIDInsurance = lastContractExtend.CurrencyID;

                            item.NextAllowanceID1 = lastContractExtend.AllowanceID1;
                            item.NextCurenncyID1 = lastContractExtend.CurrencyID1;

                            item.NextAllowanceID2 = lastContractExtend.AllowanceID2;
                            item.NextCurenncyID2 = lastContractExtend.CurrencyID2;

                            item.NextAllowanceID3 = lastContractExtend.AllowanceID3;
                            item.NextCurenncyID3 = lastContractExtend.CurrencyID3;

                            item.NextAllowanceID4 = lastContractExtend.AllowanceID4;
                            item.NextCurenncyID4 = lastContractExtend.CurrencyID4;

                            item.NextAllowanceID5 = lastContractExtend.AllowanceID5;
                            item.NextCurenncyID5 = lastContractExtend.CurrencyID5;

                            item.NextAllowanceID6 = lastContractExtend.AllowanceID6;
                            item.NextCurenncyID6 = lastContractExtend.CurrencyID6;

                            item.NextAllowanceID7 = lastContractExtend.AllowanceID7;
                            item.NextCurenncyID7 = lastContractExtend.CurrencyID7;

                            item.NextAllowanceID8 = lastContractExtend.AllowanceID8;
                            item.NextCurenncyID8 = lastContractExtend.CurrencyID8;

                            item.NextAllowanceID9 = lastContractExtend.AllowanceID9;
                            item.NextCurenncyID9 = lastContractExtend.CurrencyID9;

                            item.NextAllowanceID10 = lastContractExtend.AllowanceID10;
                            item.NextCurenncyID10 = lastContractExtend.CurrencyID10;

                            item.NextAllowanceID11 = lastContractExtend.AllowanceID11;
                            item.NextCurenncyID11 = lastContractExtend.CurrencyID11;

                            item.NextAllowanceID12 = lastContractExtend.AllowanceID12;
                            item.NextCurenncyID12 = lastContractExtend.CurrencyID12;

                            item.NextAllowanceID13 = lastContractExtend.AllowanceID13;
                            item.NextCurenncyID13 = lastContractExtend.CurrencyID13;

                            item.NextAllowanceID14 = lastContractExtend.AllowanceID14;
                            item.NextCurenncyID14 = lastContractExtend.CurrencyID14;

                            item.NextAllowanceID15 = lastContractExtend.AllowanceID15;
                            item.NextCurenncyID15 = lastContractExtend.CurrencyID15;

                            item.RankForNextContract = lastContractExtend.ClassRateID;
                            item.RankDetailForNextContract = lastContractExtend.RankRateID;
                        }
                        #endregion
                    }
                    else
                    {
                        //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                        {
                            if (item.Salary != null)
                            {
                                item.E_NextSalary = item.Salary.ToString().Encrypt();
                            }
                            if (item.InsuranceAmount != null)
                            {
                                item.E_NextInsuranceAmount = item.InsuranceAmount.ToString().Encrypt();
                            }
                            item.E_Allowance1 = item.Allowance1 != null ? item.Allowance1.ToString().Encrypt() : string.Empty;
                            item.E_Allowance2 = item.Allowance2 != null ? item.Allowance2.ToString().Encrypt() : string.Empty;
                            item.E_Allowance3 = item.Allowance3 != null ? item.Allowance3.ToString().Encrypt() : string.Empty;
                            item.E_Allowance4 = item.Allowance4 != null ? item.Allowance4.ToString().Encrypt() : string.Empty;
                            item.E_Allowance5 = item.Allowance5 != null ? item.Allowance5.ToString().Encrypt() : string.Empty;
                            item.E_Allowance6 = item.Allowance6 != null ? item.Allowance6.ToString().Encrypt() : string.Empty;
                            item.E_Allowance7 = item.Allowance7 != null ? item.Allowance7.ToString().Encrypt() : string.Empty;
                            item.E_Allowance8 = item.Allowance8 != null ? item.Allowance8.ToString().Encrypt() : string.Empty;
                            item.E_Allowance9 = item.Allowance9 != null ? item.Allowance9.ToString().Encrypt() : string.Empty;
                            item.E_Allowance10 = item.Allowance10 != null ? item.Allowance10.ToString().Encrypt() : string.Empty;
                            item.E_Allowance11 = item.Allowance11 != null ? item.Allowance11.ToString().Encrypt() : string.Empty;
                            item.E_Allowance12 = item.Allowance12 != null ? item.Allowance12.ToString().Encrypt() : string.Empty;
                            item.E_Allowance13 = item.Allowance13 != null ? item.Allowance13.ToString().Encrypt() : string.Empty;
                            item.E_Allowance14 = item.Allowance14 != null ? item.Allowance14.ToString().Encrypt() : string.Empty;
                            item.E_Allowance15 = item.Allowance15 != null ? item.Allowance15.ToString().Encrypt() : string.Empty;
                        }
                        else
                        {
                            if (item.Salary != null)
                            {
                                item.E_NextSalary = item.Salary.ToString().Encrypt();
                                item.NextSalary = item.Salary;
                            }
                            if (item.InsuranceAmount != null)
                            {
                                item.NextInsuranceAmount = item.InsuranceAmount;
                                item.E_NextInsuranceAmount = item.InsuranceAmount.ToString().Encrypt();
                            }
                            item.NextAllowance1 = item.Allowance1;
                            item.NextAllowance2 = item.Allowance2;
                            item.NextAllowance3 = item.Allowance3;
                            item.NextAllowance4 = item.Allowance4;
                            item.NextAllowance5 = item.Allowance5;
                            item.NextAllowance6 = item.Allowance6;
                            item.NextAllowance7 = item.Allowance7;
                            item.NextAllowance8 = item.Allowance8;
                            item.NextAllowance9 = item.Allowance9;
                            item.NextAllowance10 = item.Allowance10;
                            item.NextAllowance11 = item.Allowance11;
                            item.NextAllowance12 = item.Allowance12;
                            item.NextAllowance13 = item.Allowance13;
                            item.NextAllowance14 = item.Allowance14;
                            item.NextAllowance15 = item.Allowance15;
                            item.E_Allowance1 = item.Allowance1 != null ? item.Allowance1.ToString().Encrypt() : string.Empty;
                            item.E_Allowance2 = item.Allowance2 != null ? item.Allowance2.ToString().Encrypt() : string.Empty;
                            item.E_Allowance3 = item.Allowance3 != null ? item.Allowance3.ToString().Encrypt() : string.Empty;
                            item.E_Allowance4 = item.Allowance4 != null ? item.Allowance4.ToString().Encrypt() : string.Empty;
                            item.E_Allowance5 = item.Allowance5 != null ? item.Allowance5.ToString().Encrypt() : string.Empty;
                            item.E_Allowance6 = item.Allowance6 != null ? item.Allowance6.ToString().Encrypt() : string.Empty;
                            item.E_Allowance7 = item.Allowance7 != null ? item.Allowance7.ToString().Encrypt() : string.Empty;
                            item.E_Allowance8 = item.Allowance8 != null ? item.Allowance8.ToString().Encrypt() : string.Empty;
                            item.E_Allowance9 = item.Allowance9 != null ? item.Allowance9.ToString().Encrypt() : string.Empty;
                            item.E_Allowance10 = item.Allowance10 != null ? item.Allowance10.ToString().Encrypt() : string.Empty;
                            item.E_Allowance11 = item.Allowance11 != null ? item.Allowance11.ToString().Encrypt() : string.Empty;
                            item.E_Allowance12 = item.Allowance12 != null ? item.Allowance12.ToString().Encrypt() : string.Empty;
                            item.E_Allowance13 = item.Allowance13 != null ? item.Allowance13.ToString().Encrypt() : string.Empty;
                            item.E_Allowance14 = item.Allowance14 != null ? item.Allowance14.ToString().Encrypt() : string.Empty;
                            item.E_Allowance15 = item.Allowance15 != null ? item.Allowance15.ToString().Encrypt() : string.Empty;

                        }
                        item.NextCurrencyID = item.CurenncyIDSalary;

                        item.NextAllowanceID1 = item.AllowanceID1;
                        item.NextCurenncyID1 = item.CurenncyID1;

                        item.NextAllowanceID2 = item.AllowanceID2;
                        item.NextCurenncyID2 = item.CurenncyID2;

                        item.NextAllowanceID3 = item.AllowanceID3;
                        item.NextCurenncyID3 = item.CurenncyID3;

                        item.NextAllowanceID4 = item.AllowanceID4;
                        item.NextCurenncyID4 = item.CurenncyID4;

                        item.NextAllowanceID5 = item.AllowanceID5;
                        item.NextCurenncyID5 = item.CurenncyID5;

                        item.NextAllowanceID6 = item.AllowanceID6;
                        item.NextCurenncyID6 = item.CurenncyID6;

                        item.NextAllowanceID7 = item.AllowanceID7;
                        item.NextCurenncyID7 = item.CurenncyID7;

                        item.NextAllowanceID8 = item.AllowanceID8;
                        item.NextCurenncyID8 = item.CurenncyID8;

                        item.NextAllowanceID9 = item.AllowanceID9;
                        item.NextCurenncyID9 = item.CurenncyID9;

                        item.NextAllowanceID10 = item.AllowanceID10;
                        item.NextCurenncyID10 = item.CurenncyID10;

                        item.NextAllowanceID11 = item.AllowanceID11;
                        item.NextCurenncyID11 = item.CurenncyID11;

                        item.NextAllowanceID12 = item.AllowanceID12;
                        item.NextCurenncyID12 = item.CurenncyID12;

                        item.NextAllowanceID13 = item.AllowanceID13;
                        item.NextCurenncyID13 = item.CurenncyID13;

                        item.NextAllowanceID14 = item.AllowanceID14;
                        item.NextCurenncyID14 = item.CurenncyID14;

                        item.NextAllowanceID15 = item.AllowanceID15;
                        item.NextCurenncyID15 = item.CurenncyID15;

                        //Son.Vo - 20160506 - 0066590
                        item.NextCurrencyIDInsurance = item.CurenncyID;
                        //Son.Vo - 20160427 - 0066373
                        item.RankForNextContract = model.RankForNextContract;
                        item.RankDetailForNextContract = model.RankDetailForNextContract;
                    }
                }
                //Son.Vo - 20160801 - 0071624
                item.ReEvaluatateRemark = model.ReEvaluatateRemark;
                item.FileAttachmentNext = model.FileAttachmentNext;
                if (model.UserApproveIDEva != null)
                {
                    item.UserApproveIDEva = model.UserApproveIDEva;
                }
                if (model.UserApproveIDEva2 != null)
                {
                    item.UserApproveIDEva2 = model.UserApproveIDEva2;
                }
                if (model.UserApproveIDEva3 != null)
                {
                    item.UserApproveIDEva3 = model.UserApproveIDEva3;
                }
                if (model.UserApproveIDEva4 != null)
                {
                    item.UserApproveIDEva4 = model.UserApproveIDEva4;
                }
                item.UserSubmitEva = model.UserSubmitEva;
                item.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                if (model.NextProfileSingID != null)
                {
                    item.NextProfileSingID = model.NextProfileSingID;
                }
                //Son.Vo - 20170424 - 0081376
                item.Behaviour = model.Behaviour;
                item.Competence = model.Competence;
                item.NextDelegateCompanyID = model.NextDelegateCompanyID;
                item.TypeEvaContract = model.TypeEvaContract;
                //Son.Vo - 20170626 - 0080357
                item.DateStartNextContract = model.DateStartNextContract;
                string messageref = contractServices.CreateEvaluationContractHistory(item);
                message = contractServices.Edit(item);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public Hre_ContractEntity SetNewDateEndNextContractByContractAndNextContractID(Hre_ContractEntity contractEntity, Guid nextContractID)
        {
            if (contractEntity != null)
            {
                var actionService = new ActionService(UserLogin);
                var status = string.Empty;
                var objContractType = actionService.GetFirstData<Cat_ContractTypeEntity>(Common.DotNetToOracle(nextContractID.ToString()), ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status);

                if (objContractType != null && (contractEntity.DateEnd != null || contractEntity.DateExtend != null))
                {
                    var contractTypeEntity = (Cat_ContractTypeEntity)objContractType;
                    if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                    {
                        var formula = contractTypeEntity.Formula.Replace("\n", "").Replace("\t", "").Replace("\r", "");
                        ElementFormula elementContactType = new ElementFormula("ContractType", contractTypeEntity.Type, 0);
                        ElementFormula elementUnitType = new ElementFormula("UnitType", contractTypeEntity.UnitTime, 0);
                        ElementFormula elementValueTime = new ElementFormula("ValueTime", contractTypeEntity.ValueTime, 0);
                        ElementFormula elementDateStart = new ElementFormula("DateStart", contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1), 0);
                        var result = FormulaHelper.ParseFormula(formula, new List<ElementFormula>() { elementContactType, elementUnitType, elementDateStart, elementValueTime });
                        if (result != null && string.IsNullOrEmpty(result.ErrorMessage))
                        {
                            if (result.Value.GetType().Name == "DateTime")
                            {
                                contractEntity.DateEndNextContract = (DateTime)result.Value;
                            }
                            else
                            {
                                contractEntity.ErrorMessage = contractEntity.ProfileName;
                            }
                        }
                    }
                    //Son.Vo - 20170822 - trường hợp không có công thức thì sinh theo thời hạn trên loại hđ
                    else if (contractTypeEntity.ValueTime != null && contractTypeEntity.UnitTime != null)
                    {
                        if (contractTypeEntity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                        {
                            var valueTime = (int)contractTypeEntity.ValueTime.Value;
                            contractEntity.DateEndNextContract = contractEntity.DateStart.AddYears(valueTime);
                        }
                        else if (contractTypeEntity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_MONTH.ToString())
                        {
                            var valueTime = (int)contractTypeEntity.ValueTime.Value;
                            contractEntity.DateEndNextContract = contractEntity.DateStart.AddMonths(valueTime);
                        }
                        //Son.Vo - 20161028 - 0074744
                        else if (contractTypeEntity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_DAY.ToString())
                        {
                            var valueTime = (int)contractTypeEntity.ValueTime.Value;
                            contractEntity.DateEndNextContract = contractEntity.DateStart.AddDays(valueTime);
                        }
                    }
                }
            }
            return contractEntity;
        }

        #region Tạo Mới HĐ Và Lương Kế Tiếp cho Honda

        [HttpPost]
        public ActionResult GetDataByContractID(string contractID, string contractTypeID)
        {

            string status = string.Empty;

            if (contractID == null)
            {
                return null;
            }
            var actionService = new ActionService(UserLogin);

            var salaryRankServices = new Cat_SalaryRankServices();
            var lstObjSalaryRank = new List<object>();
            lstObjSalaryRank = Common.AddRange(7);

            var contractTypeServices = new Cat_ContractTypeServices();
            var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(Common.ConvertToGuid(contractTypeID), ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status).FirstOrDefault();

            var lstSalaryRank = actionService.GetData<Cat_SalaryRankEntity>(lstObjSalaryRank, ConstantSql.hrm_cat_sp_get_SalaryRank, ref status).ToList();

            var result = actionService.GetData<Hre_ContractEntity>(Common.ConvertToGuid(contractID), ConstantSql.hrm_hr_sp_get_ContractById, ref status).FirstOrDefault();
            if (result != null)
            {
                if (result.ContractEvaType == EnumDropDown.ContractEvaType.E_EXPIRED_APPRENTICE.ToString())
                {
                    int month = 0;
                    if (lstContractType.ValueTime != null)
                    {
                        month = (int)lstContractType.ValueTime.Value;
                        if (lstContractType.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                        {
                            month = month * 12;
                        }
                        lstContractType.DateStart = result.DateEnd.Value.AddDays(1);
                    }
                    //chưa tìm dc cách xử lý nên hard code 
                    var lstSalaryRankNew = lstSalaryRank.Where(s => s.SalaryRankName == "R0V08").FirstOrDefault();
                    var contractModel = new Hre_ContractModel
                    {
                        //   ContractNo = getContractNo(result, result.DateSigned),
                        ProfileID = result.ProfileID,
                        DateStart = result.DateEnd.Value.AddDays(1),
                        DateSigned = result.DateEnd.Value.AddDays(1),
                        DateEnd = lstContractType.DateStart.Value.AddMonths(month),
                        Salary = lstSalaryRankNew == null ? 0 : lstSalaryRankNew.SalaryStandard,
                        RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                        ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                        ClassRateName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryClassName,
                        SalaryRankName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryRankName

                    };
                    return Json(contractModel, JsonRequestBehavior.AllowGet);
                }

                if (result.ContractEvaType == EnumDropDown.ContractEvaType.E_ANNUAL_EVALUATION.ToString())
                {
                    var contractModel = new Hre_ContractModel
                    {
                        //  ContractNo = getContractNo(result, result.DateSigned),
                        ProfileID = result.ProfileID,
                        DateStart = new DateTime(DateTime.Now.Year, 06, 01),
                    };
                    return Json(contractModel, JsonRequestBehavior.AllowGet);
                }
            }

            return null;
        }

        [HttpPost]
        public ActionResult GetDataBySalaryRankID(string rankID)
        {

            string status = string.Empty;
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var salaryRankService = new Cat_SalaryRankServices();
            var result = service.GetByIdUseStore<Cat_SalaryRankEntity>(Common.ConvertToGuid(rankID), ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status);
            var model = result.CopyData<Cat_SalaryRankModel>();

            return Json(model, JsonRequestBehavior.AllowGet);
        }


        public ActionResult GetDataBySalaryRankIDAndDateOfEffect(string rankID, DateTime? DateOfEffect)
        {
            var model = new Cat_SalaryRankModel();
            //[20/04/2017][bang.nguyen][81188][Modify Func]
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            bool GrossAmountFromSalaryRankDetail = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_CONFIG_ISGROSSAMOUNTFROMSALARYRANKDETAIL);
            if (GrossAmountFromSalaryRankDetail)
            {
                Cat_SalaryRankDetailServices salaryRankDetailServices = new Cat_SalaryRankDetailServices();
                if (DateOfEffect != null && !string.IsNullOrEmpty(rankID))
                {
                    double? _Salary = salaryRankDetailServices.GetSalaryByDateOfEffectAndRankRateID(DateOfEffect.Value, Guid.Parse(rankID));
                    if (_Salary != null)
                    {
                        model.SalaryStandard = _Salary.Value;
                    }
                }
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string status = string.Empty;
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var salaryRankService = new Cat_SalaryRankServices();
                var result = service.GetByIdUseStore<Cat_SalaryRankEntity>(Common.ConvertToGuid(rankID), ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status);
                model = result.CopyData<Cat_SalaryRankModel>();

                return Json(model, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Hien.NGuyen
        /// Hàm làm demo Tân Cảng
        /// [12/01/2016][hien.nguyen][Modify][62995]
        /// </summary>
        /// <param name="_profileID"></param>
        /// <param name="_rankID"></param>
        /// <returns></returns>
        public ActionResult GetDataBySalaryRank_BasicSalary(string _profileID, string _rankID, DateTime? DateOfEffect)
        {
            //[20/04/2017][bang.nguyen][81188][Modify Func]
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            bool GrossAmountFromSalaryRankDetail = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_CONFIG_ISGROSSAMOUNTFROMSALARYRANKDETAIL);
            if (GrossAmountFromSalaryRankDetail)
            {
                Cat_SalaryRankDetailServices salaryRankDetailServices = new Cat_SalaryRankDetailServices();
                double InsuranceAmount = 0;
                double BasicSalary = 0;
                if (DateOfEffect != null && !string.IsNullOrEmpty(_rankID))
                {
                    double? _Salary = salaryRankDetailServices.GetSalaryByDateOfEffectAndRankRateID(DateOfEffect.Value, Guid.Parse(_rankID));
                    if (_Salary != null)
                    {
                        InsuranceAmount = _Salary.Value;
                        BasicSalary = _Salary.Value;
                    }
                }
                return Json(new ResultsObject() { Success = true, Messenger = "", Data = new double[] { BasicSalary, InsuranceAmount } }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                if (!string.IsNullOrEmpty(_profileID) && !string.IsNullOrEmpty(_rankID))
                {
                    string status = string.Empty;
                    ActionService service = new ActionService(UserLogin, LanguageCode);
                    var salaryRankService = new Cat_SalaryRankServices();
                    var rankByID = service.GetByIdUseStore<Cat_SalaryRankEntity>(Common.ConvertToGuid(_rankID), ConstantSql.hrm_cat_sp_get_SalaryRankById, ref status);

                    if (rankByID.HasValue())
                    {
                        double InsuranceAmount = 0;
                        double BasicSalary = 0;
                        if (rankByID.IsMinSalaryRate == true)
                        {
                            var profileByID = service.GetByIdUseStore<Hre_ProfileEntity>(Guid.Parse(_profileID), ConstantSql.hrm_hr_sp_get_ProfileById, ref status);

                            if (profileByID.HasValue() && profileByID.RegionID.HasValue)
                            {
                                var listModel = new List<object>();
                                listModel = Common.AddRange(5);
                                var listRegionDetail = service.GetData<Cat_RegionDetailEntity>(listModel, ConstantSql.hrm_cat_sp_get_RegionDetail, ref status);

                                var regionDetail = listRegionDetail.Where(m => m.RegionID == profileByID.RegionID).OrderByDescending(m => m.DateOfEffect <= DateTime.Now).FirstOrDefault();
                                if (regionDetail.HasValue() && regionDetail.MinSalary.HasValue)
                                {
                                    InsuranceAmount = rankByID.InsuranceRate ?? 0 * regionDetail.MinSalary ?? 0;
                                    BasicSalary = (rankByID.FinalRate ?? 0) * (regionDetail.MinSalary ?? 0);
                                }
                            }
                        }
                        else
                        {
                            InsuranceAmount = rankByID.SalaryStandard ?? 0;
                            BasicSalary = rankByID.SalaryStandard ?? 0;
                        }
                        return Json(new ResultsObject() { Success = true, Messenger = "", Data = new double[] { BasicSalary, InsuranceAmount } }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new ResultsObject() { Success = false, Messenger = ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString(), Data = new double[] { 0, 0 } }, JsonRequestBehavior.AllowGet);
                    }
                }
            }


            return Json(new ResultsObject() { Success = false, Messenger = ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString(), Data = new double[] { 0, 0 } }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetLastContractByProfileID(string profileID)
        {
            string status = string.Empty;
            string message = string.Empty;
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var actionService = new ActionService(UserLogin);
            var contractEntity = actionService.GetData<Hre_ContractEntity>(Common.DotNetToOracle(profileID), ConstantSql.hrm_hr_sp_get_ContractsByProfileId, ref status).OrderByDescending(s => s.DateStart).FirstOrDefault();
            if (contractEntity != null)
            {
                var model = contractEntity.CopyData<Hre_ContractModel>();
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            else
            {
                message = ConstantMessages.WarningProfileHaveNotContract.ToString().TranslateString();
                return Json(message, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SaveContractAndBasicSalary([Bind]Hre_ContractModel model)
        {
            #region Validate

            string message_Error = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "Hre_Contract", ref message_Error);
            if (!checkValidate)
            {
                model.ActionStatus = message_Error;
                return Json(message_Error, JsonRequestBehavior.AllowGet);
            }

            #endregion
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            var insuranceServices = new Sal_InsuranceSalaryServices();
            string message = string.Empty;
            List<Guid> lstProfileID = new List<Guid>();
            var ContractServices = new Hre_ContractServices();

            if (model.ProfileIDs != null && model.ProfileIDs.IndexOf(',') > 1)
            {
                var lstID = model.ProfileIDs.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstProfileID.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.ProfileIDs);
                lstProfileID.Add(convertProfileID);
            }
            var ObjProfile = new List<object>();
            ObjProfile.AddRange(new object[20]);
            ObjProfile[18] = 1;
            ObjProfile[19] = int.MaxValue - 1;
            var actionService = new ActionService(UserLogin);
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(ObjProfile, ConstantSql.hrm_hr_sp_get_ProfileAll, ref status).ToList();
            lstProfile = lstProfile.Where(s => lstProfileID.Contains(s.ID) && s.IsDelete == null).ToList();

            var contractTypeService = new Cat_ContractTypeServices();
            var lstObjContractType = new List<object>();
            lstObjContractType.Add(null);
            lstObjContractType.Add(null);
            lstObjContractType.Add(null);
            lstObjContractType.Add(1);
            lstObjContractType.Add(int.MaxValue - 1);
            var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(lstObjContractType, ConstantSql.hrm_cat_sp_get_ContractType, ref status).ToList();

            foreach (var profile in lstProfile)
            {
                model.ProfileID = profile.ID;
                var contractTypeEntity = lstContractType.Where(s => s.ID == model.ContractTypeID).FirstOrDefault();
                #region Xử Lý Lương BHXH

                if (contractTypeEntity != null && contractTypeEntity.NoneTypeInsuarance == true)
                {
                    var insuranceEntity = new Sal_InsuranceSalaryEntity
                    {
                        ProfileID = model.ProfileID,
                        InsuranceAmount = model.InsuranceAmount,
                        DateEffect = model.DateStart,
                        IsSocialIns = contractTypeEntity.IsSocialInsurance == null ? null : contractTypeEntity.IsSocialInsurance,
                        IsUnimploymentIns = contractTypeEntity.IsUnEmployInsurance == null ? null : contractTypeEntity.IsUnEmployInsurance,
                        IsMedicalIns = contractTypeEntity.IsHealthInsurance == null ? null : contractTypeEntity.IsHealthInsurance,
                        CurrencyID = model.CurenncyID1
                    };
                    message = insuranceServices.Add(insuranceEntity);
                }
                #endregion
                if (model.IsCreateBasicSalary == true)
                {
                    var salaryservices = new Sal_BasicSalaryServices();
                    var basicSalaryBycontract = new Sal_BasicSalaryEntity();

                    basicSalaryBycontract.ProfileID = profile.ID;
                    basicSalaryBycontract.GrossAmount = model.Salary != null ? model.Salary.ToString() : string.Empty;
                    basicSalaryBycontract.CurrencyID = model.CurenncyID != null ? model.CurenncyID.Value : Guid.Empty;
                    basicSalaryBycontract.PersonalRate = model.PersonalRate;
                    basicSalaryBycontract.DateOfEffect = model.DateStart;

                    basicSalaryBycontract.InsuranceAmount = model.InsuranceAmount;
                    basicSalaryBycontract.CurrencyID1 = model.CurenncyID1;

                    basicSalaryBycontract.ClassRateID = model.ClassRateID;
                    basicSalaryBycontract.RankRateID = model.RankRateID;

                    basicSalaryBycontract.AllowanceType1ID = model.AllowanceID1;
                    basicSalaryBycontract.AllowanceAmount1 = model.Allowance1;
                    basicSalaryBycontract.CurrencyID2 = model.CurenncyID2;

                    basicSalaryBycontract.AllowanceType2ID = model.AllowanceID2;
                    basicSalaryBycontract.AllowanceAmount2 = model.Allowance2;
                    basicSalaryBycontract.CurrencyID3 = model.CurenncyID3;

                    basicSalaryBycontract.AllowanceType3ID = model.AllowanceID3;
                    basicSalaryBycontract.AllowanceAmount3 = model.Allowance3;
                    basicSalaryBycontract.CurrencyID4 = model.CurenncyIDSalary;

                    salaryservices.Add(basicSalaryBycontract);

                }

                if (model.BasicSalaryForPerson == true)
                {
                    List<object> listObj = new List<object>();
                    listObj.Add(1);
                    listObj.Add(1000);
                    var BasicSalaryServices = new Sal_BasicSalaryServices();
                    var lstBasicSalary = actionService.GetData<Sal_BasicSalaryEntity>(listObj, ConstantSql.hrm_sal_sp_get_BasicPayrollGetAll, ref status).Where(s => s.ProfileID == profile.ID && s.DateOfEffect != null).FirstOrDefault();
                    var contractgetNo = new Hre_ContractEntity();
                    model.CopyData(contractgetNo);
                    var contract = new Hre_ContractEntity
                    {
                        ID = model.ID,
                        Allowance = model.Allowance,
                        Allowance1 = model.Allowance1,
                        Allowance3 = model.Allowance3,
                        Allowance2 = model.Allowance2,
                        Allowance4 = model.Allowance4,
                        AllowanceID1 = lstBasicSalary.AllowanceType1ID,
                        AllowanceID2 = lstBasicSalary.AllowanceType2ID,
                        AllowanceID3 = lstBasicSalary.AllowanceType3ID,
                        AllowanceID4 = lstBasicSalary.AllowanceType4ID,
                        ClassRateID = lstBasicSalary.ClassRateID,
                        Code = model.Code,
                        CodeEmp = model.CodeEmp,
                        //ContractNo = getContractNo(contractgetNo, contractgetNo.DateSigned),
                        ContractTypeID = model.ContractTypeID,
                        CurenncyID = lstBasicSalary.CurrencyID,
                        CurenncyID1 = lstBasicSalary.CurrencyID1,
                        CurenncyID2 = lstBasicSalary.CurrencyID2,
                        CurenncyID3 = lstBasicSalary.CurrencyID3,
                        CurenncyID4 = lstBasicSalary.CurrencyID4,
                        CurenncyID5 = lstBasicSalary.CurrencyID5,
                        CurenncyIDSalary = model.CurenncyIDSalary,
                        CurenncyInsName = model.CurenncyInsName,
                        CurenncyOAllowanceName = model.CurenncyOAllowanceName,
                        CurrencySalName = model.CurrencySalName,
                        DateAuthorize = model.DateAuthorize,
                        DateCreate = model.DateCreate,
                        DateUpdate = DateTime.Now,
                        DateEnd = model.DateEnd,
                        DateSigned = model.DateSigned,
                        DateStart = model.DateStart,
                        FollowNo = model.FollowNo,
                        Note = model.Note,
                        FormPaySalary = model.FormPaySalary,
                        HourWorkInMonth = model.HourWorkInMonth,
                        InsuranceAmount = model.InsuranceAmount,
                        IPCreate = model.IPCreate,
                        IPUpdate = model.IPUpdate,
                        JobTitleID = model.JobTitleID,
                        PersonalRate = model.PersonalRate,
                        PositionID = model.PositionID,
                        ProfileID = model.ProfileID,
                        ProfileSingID = model.ProfileSingID,
                        ProfileName = model.ProfileName,
                        ProfileSingName = model.ProfileSingName,
                        QualificationID = model.QualificationID,
                        RankRateID = lstBasicSalary.RankRateID,
                        Salary = lstBasicSalary.GrossAmount.ToDouble(),
                        SalaryClassTypeID = lstBasicSalary.ClassRateID,
                        ServerCreate = model.ServerCreate,
                        ServerUpdate = model.ServerUpdate,
                        WorkPlaceID = model.WorkPlaceID,
                    };
                    if (contract.ID == Guid.Empty)
                    {
                        contract.ActionStatus = ContractServices.Add(contract);
                    }
                    else
                    {
                        contract.ActionStatus = ContractServices.Edit(contract);
                    }

                    return Json(contract, JsonRequestBehavior.AllowGet);
                }

                var contractgetNoGetBasicSalary = new Hre_ContractEntity();
                model.CopyData(contractgetNoGetBasicSalary);
                var contractNoGetBasicSalary = new Hre_ContractEntity
                {
                    ID = model.ID,
                    Allowance = model.Allowance,
                    Allowance1 = model.Allowance1,
                    Allowance3 = model.Allowance3,
                    Allowance2 = model.Allowance2,
                    Allowance4 = model.Allowance4,
                    AllowanceID1 = model.AllowanceID1,
                    AllowanceID2 = model.AllowanceID2,
                    AllowanceID3 = model.AllowanceID3,
                    AllowanceID4 = model.AllowanceID4,
                    ClassRateID = model.ClassRateID,
                    ClassRateName = model.ClassRateName,
                    Code = model.Code,
                    CodeEmp = model.CodeEmp,
                    // ContractNo = getContractNo(contractgetNoGetBasicSalary, contractgetNoGetBasicSalary.DateSigned),
                    ContractTypeID = model.ContractTypeID,
                    CurenncyID = model.CurenncyID,
                    CurenncyID1 = model.CurenncyID1,
                    CurenncyID2 = model.CurenncyID2,
                    CurenncyID3 = model.CurenncyID3,
                    CurenncyID4 = model.CurenncyID4,
                    CurenncyID5 = model.CurenncyID5,
                    CurenncyIDSalary = model.CurenncyIDSalary,
                    CurenncyInsName = model.CurenncyInsName,
                    CurenncyOAllowanceName = model.CurenncyOAllowanceName,
                    CurrencySalName = model.CurrencySalName,
                    DateAuthorize = model.DateAuthorize,
                    DateCreate = model.DateCreate,
                    DateEnd = model.DateEnd,
                    DateSigned = model.DateSigned,
                    DateStart = model.DateStart,
                    DateUpdate = DateTime.Now,
                    FollowNo = model.FollowNo,
                    Note = model.Note,
                    FormPaySalary = model.FormPaySalary,
                    HourWorkInMonth = model.HourWorkInMonth,
                    InsuranceAmount = model.InsuranceAmount,
                    IPCreate = model.IPCreate,
                    IPUpdate = model.IPUpdate,
                    JobTitleID = model.JobTitleID,
                    PersonalRate = model.PersonalRate,
                    PositionID = model.PositionID,
                    ProfileID = model.ProfileID,
                    ProfileSingID = model.ProfileSingID,
                    ProfileName = model.ProfileName,
                    ProfileSingName = model.ProfileSingName,
                    QualificationID = model.QualificationID,
                    RankRateID = model.RankRateID,
                    Salary = model.Salary,
                    SalaryClassTypeID = model.SalaryClassTypeID,
                    ServerCreate = model.ServerCreate,
                    ServerUpdate = model.ServerUpdate,
                    WorkPlaceID = model.WorkPlaceID,
                };

                if (contractNoGetBasicSalary.ID == Guid.Empty)
                {
                    contractNoGetBasicSalary.ActionStatus = ContractServices.Add(contractNoGetBasicSalary);
                }
                else
                {
                    contractNoGetBasicSalary.ActionStatus = ContractServices.Edit(contractNoGetBasicSalary);
                }

                return Json(contractNoGetBasicSalary, JsonRequestBehavior.AllowGet);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveContractAndSaslary(DateTime? dateStart, DateTime? dateEnd, string orgStructureID, string contractTypeID, string RankDetailForNextContract, List<Guid> selectedIds, string statusContract, bool IsEvaluation)
        {
            var hrService = new Hre_ProfileServices();
            string message = string.Empty;
            var actionService = new ActionService(UserLogin);
            string status = string.Empty;
            var lstObjProfile = new List<object>();
            lstObjProfile.AddRange(new object[16]);
            lstObjProfile[14] = 1;
            lstObjProfile[15] = int.MaxValue - 1;
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(lstObjProfile, ConstantSql.hrm_hr_sp_get_Profile, ref status).ToList();

            var salaryRankServices = new Cat_SalaryRankServices();
            var lstObjSalaryRank = new List<object>();
            lstObjSalaryRank = Common.AddRange(7);
            var lstSalaryRank = actionService.GetData<Cat_SalaryRankEntity>(lstObjSalaryRank, ConstantSql.hrm_cat_sp_get_SalaryRank, ref status).ToList();
            var contractServices = new Hre_ContractServices();
            var lisobjContract = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            lisobjContract.Add(strIDs);
            var lstContractByProfileID = actionService.GetData<Hre_ContractEntity>(lisobjContract, ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status).ToList();
            var workhistoryService = new Hre_WorkHistoryServices();
            var lstObjWorkhistory = new List<object>();
            lstObjWorkhistory.AddRange(new object[17]);
            lstObjWorkhistory[15] = 1;
            lstObjWorkhistory[16] = int.MaxValue - 1;
            var lstWorkhistory = actionService.GetData<Hre_WorkHistoryEntity>(lstObjWorkhistory, ConstantSql.hrm_hr_sp_get_WorkHistory, ref status).ToList();

            var basicSalaryService = new Sal_BasicSalaryServices();

            var attGradeService = new Att_GradeServices();
            var lstObjAttGrade = new List<object>();
            lstObjAttGrade.AddRange(new object[7]);
            lstObjAttGrade[5] = 1;
            lstObjAttGrade[6] = int.MaxValue - 1;
            var lstAttGrade = actionService.GetData<Att_GradeEntity>(lstObjAttGrade, ConstantSql.hrm_att_sp_get_Att_Grade, ref status).ToList();

            var gradeService = new Sal_GradeServices();
            var lstObjSalGrade = new List<object>();
            lstObjSalGrade.AddRange(new object[10]);
            lstObjSalGrade[8] = 1;
            lstObjSalGrade[9] = int.MaxValue - 1;
            var lstSalGrade = actionService.GetData<Sal_GradeEntity>(lstObjSalGrade, ConstantSql.hrm_sal_sp_get_Sal_Grade, ref status).ToList();

            var gradePayrollService = new Cat_GradePayrollServices();
            var lstObjGradePayroll = new List<object>();
            lstObjGradePayroll.Add(null);
            lstObjGradePayroll.Add(null);
            lstObjGradePayroll.Add(1);
            lstObjGradePayroll.Add(int.MaxValue - 1);
            var lstGradePayroll = actionService.GetData<Cat_GradePayrollEntity>(lstObjGradePayroll, ConstantSql.hrm_cat_sp_get_GradePayroll, ref status).ToList();

            var gradeAttService = new Cat_GradeAttendanceServices();
            var lstObjGradeAtt = new List<object>();
            lstObjGradeAtt.AddRange(new object[11]);
            lstObjGradeAtt[9] = 1;
            lstObjGradeAtt[10] = int.MaxValue - 1;
            var lstGradeAtt = actionService.GetData<Cat_GradeAttendanceEntity>(lstObjGradeAtt, ConstantSql.hrm_cat_sp_get_Cat_GradeAttendance, ref status).ToList();

            var currencyServices = new Cat_CurrencyServices();
            var lstObjCurrency = new List<object>();
            lstObjCurrency.Add(null);
            lstObjCurrency.Add(null);
            lstObjCurrency.Add(1);
            lstObjCurrency.Add(int.MaxValue - 1);
            var lstCurrency = actionService.GetData<Cat_CurrencyEntity>(lstObjCurrency, ConstantSql.hrm_cat_sp_get_Currency, ref status).ToList();
            var lstCurrencyNew = lstCurrency.Where(s => s.CurrencyName == "VND").FirstOrDefault();

            var contractTypeService = new Cat_ContractTypeServices();
            var lstObjContractType = new List<object>();
            lstObjContractType.Add(null);
            lstObjContractType.Add(null);
            lstObjContractType.Add(null);
            lstObjContractType.Add(1);
            lstObjContractType.Add(int.MaxValue - 1);
            var lstContractType = actionService.GetData<Cat_ContractTypeEntity>(lstObjContractType, ConstantSql.hrm_cat_sp_get_ContractType, ref status).ToList();

            var insuranceConfigServices = new Cat_InsuranceConfigServices();
            var objInsuranceConfig = new List<object>();
            objInsuranceConfig.Add(1);
            objInsuranceConfig.Add(int.MaxValue - 1);
            var lstInsuranceConfig = actionService.GetData<Cat_InsuranceConfigEntity>(objInsuranceConfig, ConstantSql.hrm_cat_sp_get_InsuranceConfig, ref status).ToList();

            var insuranceServices = new Sal_InsuranceSalaryServices();
            var objInsurance = new List<object>();
            objInsurance.AddRange(new object[10]);
            objInsurance[8] = 1;
            objInsurance[9] = int.MaxValue - 1;
            var lstInsurance = actionService.GetData<Sal_InsuranceSalaryEntity>(objInsurance, ConstantSql.hrm_sal_sp_get_InsuranceSalary, ref status).ToList();

            foreach (var item in lstContractByProfileID)
            {
                var contractTypeEntity = new Cat_ContractTypeEntity();
                var objContract = new List<object>();
                objContract.Add(item.ProfileID);
                var lstContractIdByProfileID = actionService.GetData<Hre_ContractEntity>(objContract, ConstantSql.hrm_hr_sp_get_ContractsByProfileId, ref status);
                var listIdContract = string.Empty;
                if (lstContractIdByProfileID != null)
                {
                    listIdContract = string.Join(",", lstContractIdByProfileID.Select(d => d.ContractTypeID));
                }

                var profile = lstProfile.Where(s => s.ID == item.ProfileID).FirstOrDefault();

                if (item.NextContractTypeID != null)
                {
                    contractTypeEntity = lstContractType.Where(s => item.NextContractTypeID.Value == s.ID).FirstOrDefault();
                }
                else
                {
                    message = ConstantMessages.WarningContractHaveNotNextContract.ToString().TranslateString();
                    return Json(message, JsonRequestBehavior.AllowGet);
                    // contractTypeEntity = lstContractType.Where(s => Guid.Parse(Common.DotNetToOracle(item.ContractNextID.ToString())) == s.ID).FirstOrDefault();
                }


                var workingHistoryEntity = lstWorkhistory.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                var objSalGrade = new List<object>();
                objSalGrade.Add(item.ProfileID);
                objSalGrade.Add(null);
                objSalGrade.Add(1);
                objSalGrade.Add(int.MaxValue - 1);
                var salGradeByProfileIDEntity = actionService.GetData<Sal_GradeEntity>(objSalGrade, ConstantSql.hrm_sal_sp_get_GradeAndAllownaceByProId, ref status).FirstOrDefault();
                var objAttGrade = new List<object>();
                objAttGrade.Add(item.ProfileID);
                objAttGrade.Add(null);
                objAttGrade.Add(1);
                objAttGrade.Add(int.MaxValue - 1);
                var attGradeByProfileIDEntity = actionService.GetData<Att_GradeEntity>(objAttGrade, ConstantSql.hrm_att_sp_get_GradeAttendanceByProIdCutID, ref status).FirstOrDefault();

                if (contractTypeEntity == null)
                {
                    continue;
                }

                if (item.ContractResult == EnumDropDown.ResultContract.PASS.ToString())
                {
                    if (item.ContractEvaType == EnumDropDown.ContractEvaType.E_EXPIRED_APPRENTICE.ToString())
                    {

                        //chưa tìm dc cách xử lý nên hard code 
                        var lstSalaryRankNew = new Cat_SalaryRankEntity();
                        // var lstSalaryRankNew = lstSalaryRank.Where(s => item.RankDetailForNextContract != null && s.ID == item.RankDetailForNextContract.Value).FirstOrDefault();
                        if (item.RankDetailForNextContract != null)
                        {
                            lstSalaryRankNew = lstSalaryRank.Where(s => item.RankDetailForNextContract != null && s.ID == item.RankDetailForNextContract.Value).FirstOrDefault();
                        }
                        else
                        {
                            lstSalaryRankNew = lstSalaryRank.Where(s => item.RankRateID != null && s.ID == item.RankRateID.Value).FirstOrDefault();
                        }

                        #region Xử lý Hre_Contract
                        if (item.TypeOfPass == EnumDropDown.TypeOfPass.E_SIGNED_NEXTCONTRACT.ToString())
                        {
                            int month = 0;
                            if (contractTypeEntity != null && contractTypeEntity.ValueTime != null)
                            {
                                month = (int)contractTypeEntity.ValueTime.Value;
                                if (contractTypeEntity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                                {
                                    month = month * 12;
                                }
                                contractTypeEntity.DateStart = item.DateEnd.Value.AddDays(1);

                                //chưa tìm dc cách xử lý nên hard code 
                                //  var nextContractTypeID = Common.ConvertToGuid(contractTypeEntity.ContractNextID).ToString();
                                var contractEntity = new Hre_ContractEntity
                                {
                                    //   ContractNo = getContractNo(item, item.DateSigned),
                                    ProfileID = item.ProfileID,
                                    ProfileName = item.ProfileName,
                                    DateStart = item.DateEnd.Value.AddDays(1),
                                    DateSigned = item.DateEnd.Value.AddDays(1),
                                    JobTitleID = item.JobTitleID,
                                    PositionID = item.PositionID,
                                    DateEnd = contractTypeEntity.DateStart.Value.AddMonths(month),
                                    Salary = lstSalaryRankNew == null ? 0 : lstSalaryRankNew.SalaryStandard,
                                    RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                                    ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                    ClassRateName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryClassName,
                                    SalaryRankName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryRankName,
                                    ContractTypeID = contractTypeEntity.ID
                                };

                                if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                                {
                                    if (contractEntity.DateEnd != null || contractEntity.DateExtend != null)
                                    {
                                        contractEntity.DateStart = contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1);
                                    }
                                    contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                }

                                if (item.DateEndNextContract != null)
                                {
                                    contractEntity.DateEnd = item.DateEndNextContract.Value;
                                }
                                if (!string.IsNullOrEmpty(contractEntity.ErrorMessage))
                                {
                                    return Json(contractEntity, JsonRequestBehavior.AllowGet);
                                }
                                message = contractServices.Add(contractEntity);
                            }
                            else
                            {
                                contractTypeEntity.DateStart = item.DateEnd.Value.AddDays(1);

                                //chưa tìm dc cách xử lý nên hard code 
                                //  var nextContractTypeID = Common.ConvertToGuid(contractTypeEntity.ContractNextID).ToString();
                                var contractEntity = new Hre_ContractEntity
                                {
                                    //  ContractNo = getContractNo(item, item.DateSigned),
                                    ProfileID = item.ProfileID,
                                    ProfileName = item.ProfileName,
                                    DateStart = item.DateEnd.Value.AddDays(1),
                                    DateSigned = item.DateEnd.Value.AddDays(1),
                                    JobTitleID = item.JobTitleID,
                                    PositionID = item.PositionID,
                                    //   DateEnd = contractTypeEntity.DateStart.Value.AddMonths(month),
                                    Salary = lstSalaryRankNew == null ? 0 : lstSalaryRankNew.SalaryStandard,
                                    RankRateID = lstSalaryRankNew == null ? item.RankRateID : lstSalaryRankNew.ID,
                                    ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                    ClassRateName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryClassName,
                                    SalaryRankName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryRankName,
                                    ContractTypeID = contractTypeEntity.ID
                                };

                                if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                                {
                                    if (contractEntity.DateEnd != null || contractEntity.DateExtend != null)
                                    {
                                        contractEntity.DateStart = contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1);
                                    }
                                    contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                                }
                                if (item.DateEndNextContract != null)
                                {
                                    contractEntity.DateEnd = item.DateEndNextContract.Value;
                                }
                                if (!string.IsNullOrEmpty(contractEntity.ErrorMessage))
                                {
                                    return Json(contractEntity, JsonRequestBehavior.AllowGet);
                                }
                                message = contractServices.Add(contractEntity);
                            }
                        }

                        #endregion

                        #region Xử Lý Sal_BasicSalary
                        var salaryEntity = new Sal_BasicSalaryEntity
                        {
                            ProfileID = item.ProfileID,
                            ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                            RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                            GrossAmount = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryStandard.ToString(),
                            DateOfEffect = item.DateEnd.Value.AddDays(1),
                            CurrencyID = lstCurrencyNew.ID,
                            Note = item.Remark


                        };
                        message = basicSalaryService.Add(salaryEntity);

                        #endregion

                        #region Xử Lý Hre_Profile
                        var profileEntity = profile.CopyData<Hre_ProfileEntity>();
                        profileEntity.SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID;

                        hrService.Edit(profileEntity);

                        if (workingHistoryEntity != null)
                        {
                            if (workingHistoryEntity.SalaryClassID != lstSalaryRankNew.SalaryClassID)
                            {
                                var workhistoryEntity = new Hre_WorkHistoryEntity
                                {
                                    ProfileID = item.ProfileID,
                                    SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                    DateEffective = item.DateEnd.Value.AddDays(1)
                                };
                                message = workhistoryService.Add(workhistoryEntity);
                            }

                        }
                        else
                        {
                            var workhistoryEntity = new Hre_WorkHistoryEntity
                            {
                                ProfileID = item.ProfileID,
                                SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                DateEffective = item.DateEnd.Value.AddDays(1)
                            };
                            message = workhistoryService.Add(workhistoryEntity);
                        }

                        #endregion

                        #region Sal_Grade
                        var lstGradeByProfileID = lstSalGrade.Where(s => item.ProfileID == s.ProfileID).ToList().OrderByDescending(s => s.MonthEnd <= DateTime.Now).FirstOrDefault();
                        var lstGradePayrollByProfileID = lstGradePayroll.Where(s => s.Code == lstSalaryRankNew.Code).FirstOrDefault();
                        if (salGradeByProfileIDEntity != null)
                        {
                            if (salGradeByProfileIDEntity.GradePayrollID != lstGradePayrollByProfileID.ID)
                            {
                                var gradeEntity = new Sal_GradeEntity
                                {
                                    //   ID = lstGradeByProfileID == null ? Guid.Empty : lstGradeByProfileID.ID,
                                    ProfileID = item.ProfileID,
                                    GradePayrollID = lstGradePayrollByProfileID == null ? Guid.Empty : lstGradePayrollByProfileID.ID,
                                    MonthStart = item.DateEnd.Value.AddDays(1)
                                };
                                message = gradeService.Add(gradeEntity);
                            }

                        }
                        else
                        {
                            var gradeEntity = new Sal_GradeEntity
                            {
                                //   ID = lstGradeByProfileID == null ? Guid.Empty : lstGradeByProfileID.ID,
                                ProfileID = item.ProfileID,
                                GradePayrollID = lstGradePayrollByProfileID == null ? Guid.Empty : lstGradePayrollByProfileID.ID,
                                MonthStart = item.DateEnd.Value.AddDays(1)
                            };
                            message = gradeService.Add(gradeEntity);
                        }

                        #endregion

                        #region Att_Grade
                        var lstAttGradeByProfileID = lstAttGrade.Where(s => item.ProfileID == s.ProfileID).ToList().OrderByDescending(s => s.MonthEnd <= DateTime.Now).FirstOrDefault();
                        var lstGradeAttByProfileID = lstGradeAtt.Where(s => s.Code == lstSalaryRankNew.Code).FirstOrDefault();
                        if (attGradeByProfileIDEntity != null)
                        {
                            if (attGradeByProfileIDEntity.GradeAttendanceID != lstGradeAttByProfileID.ID)
                            {
                                var gradeAttEntity = new Att_GradeEntity
                                {
                                    // ID = lstGradeAttByProfileID == null ? Guid.Empty: lstAttGradeByProfileID.ID,
                                    ProfileID = item.ProfileID,
                                    GradeAttendanceID = lstAttGradeByProfileID == null ? Guid.Empty : lstGradeAttByProfileID.ID,
                                    MonthStart = item.DateEnd.Value.AddDays(1)
                                };
                                message = attGradeService.Add(gradeAttEntity);
                            }
                        }
                        else
                        {
                            var gradeAttEntity = new Att_GradeEntity
                            {
                                // ID = lstGradeAttByProfileID == null ? Guid.Empty: lstAttGradeByProfileID.ID,
                                ProfileID = item.ProfileID,
                                GradeAttendanceID = lstGradeAttByProfileID == null ? Guid.Empty : lstGradeAttByProfileID.ID,
                                MonthStart = item.DateEnd.Value.AddDays(1)
                            };
                            message = attGradeService.Add(gradeAttEntity);
                        }


                        #endregion

                        #region Xử Lý Lương BHXH
                        if (contractTypeEntity.NoneTypeInsuarance == true)
                        {
                            var insuranceEntityByProfileID = lstInsurance.Where(s => s.ProfileID == item.ProfileID && s.DateEffect == item.DateEnd.Value.AddDays(1)).OrderByDescending(s => s.DateUpdate).FirstOrDefault();

                            var insuranceEntity = new Sal_InsuranceSalaryEntity
                            {
                                ProfileID = item.ProfileID,
                                InsuranceAmount = lstSalaryRankNew.SalaryStandard,
                                DateEffect = item.DateEnd.Value.AddDays(1),
                                IsSocialIns = contractTypeEntity.IsSocialInsurance == null ? null : contractTypeEntity.IsSocialInsurance,
                                IsMedicalIns = contractTypeEntity.IsHealthInsurance == null ? null : contractTypeEntity.IsHealthInsurance,
                                IsUnimploymentIns = contractTypeEntity.IsUnEmployInsurance == null ? null : contractTypeEntity.IsUnEmployInsurance,
                                CurrencyID = lstCurrencyNew.ID
                            };
                            if (insuranceEntityByProfileID != null)
                            {
                                insuranceEntityByProfileID.InsuranceAmount = lstSalaryRankNew.SalaryStandard;
                                insuranceEntityByProfileID.IsSocialIns = contractTypeEntity.IsSocialInsurance == null ? null : contractTypeEntity.IsSocialInsurance;
                                insuranceEntityByProfileID.IsUnimploymentIns = contractTypeEntity.IsUnEmployInsurance == null ? null : contractTypeEntity.IsUnEmployInsurance;
                                insuranceEntityByProfileID.IsMedicalIns = contractTypeEntity.IsHealthInsurance == null ? null : contractTypeEntity.IsHealthInsurance;
                                message = insuranceServices.Edit(insuranceEntityByProfileID);
                            }
                            else
                            {
                                message = insuranceServices.Add(insuranceEntity);
                            }


                        }

                        if (contractTypeEntity.NoneTypeInsuarance == false)
                        {

                            var insuranceConfigEntity = lstInsuranceConfig.Where(s => s.ContractTypeID != null && s.ContractTypeID.Value == contractTypeEntity.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                            if (insuranceConfigEntity != null)
                            {
                                var insuranceEntityByProfileID = lstInsurance.Where(s => s.ProfileID == item.ProfileID && s.DateEffect == item.DateEnd.Value.AddDays(1)).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                                var insuranceEntity = new Sal_InsuranceSalaryEntity
                                {
                                    ProfileID = item.ProfileID,
                                    InsuranceAmount = lstSalaryRankNew.SalaryStandard,
                                    DateEffect = item.DateEnd.Value.AddDays(1),
                                    IsSocialIns = insuranceConfigEntity.IsSocial == null ? null : insuranceConfigEntity.IsSocial,
                                    IsUnimploymentIns = insuranceConfigEntity.IsUnEmploy == null ? null : insuranceConfigEntity.IsUnEmploy,
                                    IsMedicalIns = insuranceConfigEntity.IsHealth == null ? null : insuranceConfigEntity.IsHealth,
                                    CurrencyID = lstCurrencyNew.ID
                                };

                                if (insuranceEntityByProfileID != null)
                                {
                                    insuranceEntityByProfileID.InsuranceAmount = lstSalaryRankNew.SalaryStandard;
                                    insuranceEntityByProfileID.IsSocialIns = insuranceConfigEntity.IsSocial == null ? null : insuranceConfigEntity.IsSocial;
                                    insuranceEntityByProfileID.IsUnimploymentIns = insuranceConfigEntity.IsUnEmploy == null ? null : insuranceConfigEntity.IsUnEmploy;
                                    insuranceEntityByProfileID.IsMedicalIns = insuranceConfigEntity.IsHealth == null ? null : insuranceConfigEntity.IsHealth;
                                    message = insuranceServices.Edit(insuranceEntityByProfileID);
                                }
                                else
                                {
                                    message = insuranceServices.Add(insuranceEntity);
                                }

                            }
                        }
                        #endregion

                        //  return Json(message, JsonRequestBehavior.AllowGet);
                    }

                    if (item.ContractEvaType == EnumDropDown.ContractEvaType.E_ANNUAL_EVALUATION.ToString() && item.ContractResult == EnumDropDown.ResultContract.PASS.ToString())
                    {

                        var lstSalaryRankNew = new Cat_SalaryRankEntity();
                        // var lstSalaryRankNew = lstSalaryRank.Where(s => item.RankDetailForNextContract != null && s.ID == item.RankDetailForNextContract.Value).FirstOrDefault();
                        if (item.RankDetailForNextContract != null)
                        {
                            lstSalaryRankNew = lstSalaryRank.Where(s => item.RankDetailForNextContract != null && s.ID == item.RankDetailForNextContract.Value).FirstOrDefault();
                        }
                        else
                        {
                            lstSalaryRankNew = lstSalaryRank.Where(s => item.RankRateID != null && s.ID == item.RankRateID.Value).FirstOrDefault();
                        }

                        #region Xử lý Hre_Contract
                        int month = 0;
                        if (contractTypeEntity != null && contractTypeEntity.ValueTime != null)
                        {
                            month = (int)contractTypeEntity.ValueTime.Value;
                            if (contractTypeEntity.UnitTime == HRM.Infrastructure.Utilities.EnumDropDown.UnitType.E_YEAR.ToString())
                            {
                                month = month * 12;
                            }
                            contractTypeEntity.DateStart = item.DateEnd.Value.AddDays(1);

                            //chưa tìm dc cách xử lý nên hard code 

                            var contractEntity = new Hre_ContractEntity
                            {
                                // ContractNo = getContractNo(item, item.DateSigned),
                                ProfileID = item.ProfileID,
                                ProfileName = item.ProfileName,
                                DateStart = new DateTime(DateTime.Now.Year, 6, 1),
                                DateSigned = new DateTime(DateTime.Now.Year, 6, 1),
                                JobTitleID = item.JobTitleID,
                                PositionID = item.PositionID,
                                DateEnd = contractTypeEntity.DateStart.Value.AddMonths(month),
                                Salary = lstSalaryRankNew == null ? 0 : lstSalaryRankNew.SalaryStandard,
                                RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                                ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                ClassRateName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryClassName,
                                SalaryRankName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryRankName,
                                ContractTypeID = contractTypeEntity.ID
                            };

                            if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                            {
                                if (contractEntity.DateEnd != null || contractEntity.DateExtend != null)
                                {
                                    contractEntity.DateStart = contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1);
                                }
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                            }
                            if (item.DateEndNextContract != null)
                            {
                                contractEntity.DateEnd = item.DateEndNextContract.Value;
                            }
                            if (!string.IsNullOrEmpty(contractEntity.ErrorMessage))
                            {
                                return Json(contractEntity, JsonRequestBehavior.AllowGet);
                            }
                            message = contractServices.Add(contractEntity);
                        }
                        else
                        {
                            contractTypeEntity.DateStart = item.DateEnd.Value.AddDays(1);

                            //chưa tìm dc cách xử lý nên hard code 

                            var contractEntity = new Hre_ContractEntity
                            {
                                // ContractNo = getContractNo(item, item.DateSigned),
                                ProfileID = item.ProfileID,
                                ProfileName = item.ProfileName,
                                DateStart = new DateTime(DateTime.Now.Year, 6, 1),
                                DateSigned = new DateTime(DateTime.Now.Year, 6, 1),
                                JobTitleID = item.JobTitleID,
                                PositionID = item.PositionID,
                                // DateEnd = null,
                                Salary = lstSalaryRankNew == null ? 0 : lstSalaryRankNew.SalaryStandard,
                                RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                                ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                ClassRateName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryClassName,
                                SalaryRankName = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryRankName,
                                ContractTypeID = contractTypeEntity.ID
                            };

                            if (!string.IsNullOrEmpty(contractTypeEntity.Formula))
                            {
                                if (contractEntity.DateEnd != null || contractEntity.DateExtend != null)
                                {
                                    contractEntity.DateStart = contractEntity.DateExtend != null ? contractEntity.DateExtend.Value.AddDays(1) : contractEntity.DateEnd.Value.AddDays(1);
                                }
                                contractEntity = contractServices.SetNewDateEndContract(contractEntity);
                            }

                            if (item.DateEndNextContract != null)
                            {
                                contractEntity.DateEnd = item.DateEndNextContract.Value;
                            }
                            if (!string.IsNullOrEmpty(contractEntity.ErrorMessage))
                            {

                                return Json(contractEntity, JsonRequestBehavior.AllowGet);
                            }
                            message = contractServices.Add(contractEntity);
                        }
                        #endregion

                        #region Xử Lý Sal_BasicSalary
                        var salaryEntity = new Sal_BasicSalaryEntity
                        {
                            ProfileID = item.ProfileID,
                            ClassRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                            RankRateID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.ID,
                            GrossAmount = lstSalaryRankNew == null ? string.Empty : lstSalaryRankNew.SalaryStandard.ToString(),
                            DateOfEffect = new DateTime(DateTime.Now.Year, 6, 1),
                            CurrencyID = lstCurrencyNew.ID,
                            Note = item.Remark

                        };
                        message = basicSalaryService.Add(salaryEntity);

                        #endregion

                        #region Xử Lý Hre_Profile
                        var profileEntity = profile.CopyData<Hre_ProfileEntity>();
                        profileEntity.SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID;
                        message = hrService.Edit(profileEntity);

                        if (workingHistoryEntity != null)
                        {
                            if (workingHistoryEntity.SalaryClassID != lstSalaryRankNew.SalaryClassID)
                            {
                                var workhistoryEntity = new Hre_WorkHistoryEntity
                                {
                                    ProfileID = item.ProfileID,
                                    SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                    DateEffective = new DateTime(DateTime.Now.Year, 6, 1)
                                };
                                message = workhistoryService.Add(workhistoryEntity);
                            }

                        }
                        else
                        {
                            var workhistoryEntity = new Hre_WorkHistoryEntity
                            {
                                ProfileID = item.ProfileID,
                                SalaryClassID = lstSalaryRankNew == null ? Guid.Empty : lstSalaryRankNew.SalaryClassID,
                                DateEffective = new DateTime(DateTime.Now.Year, 6, 1)
                            };
                            message = workhistoryService.Add(workhistoryEntity);
                        }
                        #endregion

                        #region Sal_Grade
                        var lstGradeByProfileID = lstSalGrade.Where(s => item.ProfileID == s.ProfileID).ToList().OrderByDescending(s => s.MonthEnd <= DateTime.Now).FirstOrDefault();
                        var lstGradePayrollByProfileID = lstGradePayroll.Where(s => s.Code == lstSalaryRankNew.Code).FirstOrDefault();
                        if (salGradeByProfileIDEntity != null)
                        {
                            if (salGradeByProfileIDEntity.GradePayrollID != lstGradePayrollByProfileID.ID)
                            {
                                var gradeEntity = new Sal_GradeEntity
                                {
                                    //   ID = lstGradeByProfileID == null ? Guid.Empty : lstGradeByProfileID.ID,
                                    ProfileID = item.ProfileID,
                                    GradePayrollID = lstGradePayrollByProfileID == null ? Guid.Empty : lstGradePayrollByProfileID.ID,
                                    MonthStart = new DateTime(DateTime.Now.Year, 6, 1)
                                };
                                message = gradeService.Add(gradeEntity);
                            }
                        }
                        else
                        {
                            var gradeEntity = new Sal_GradeEntity
                            {
                                //  ID = lstGradeByProfileID == null ? Guid.Empty : lstGradeByProfileID.ID,
                                ProfileID = item.ProfileID,
                                GradePayrollID = lstGradePayrollByProfileID == null ? Guid.Empty : lstGradePayrollByProfileID.ID,
                                MonthStart = new DateTime(DateTime.Now.Year, 6, 1)
                            };
                            message = gradeService.Add(gradeEntity);
                        }


                        #endregion

                        #region Att_Grade
                        var lstAttGradeByProfileID = lstAttGrade.Where(s => item.ProfileID == s.ProfileID).ToList().OrderByDescending(s => s.MonthEnd <= DateTime.Now).FirstOrDefault();
                        var lstGradeAttByProfileID = lstGradeAtt.Where(s => s.Code == lstSalaryRankNew.Code).FirstOrDefault();
                        if (attGradeByProfileIDEntity != null)
                        {
                            if (attGradeByProfileIDEntity.GradeAttendanceID != lstGradeAttByProfileID.ID)
                            {
                                var gradeAttEntity = new Att_GradeEntity
                                {
                                    //ID = lstAttGradeByProfileID == null ? Guid.Empty: lstAttGradeByProfileID.ID,
                                    ProfileID = item.ProfileID,
                                    GradeAttendanceID = lstGradeAttByProfileID == null ? Guid.Empty : lstGradeAttByProfileID.ID,
                                    MonthStart = new DateTime(DateTime.Now.Year, 6, 1)
                                };
                                message = attGradeService.Add(gradeAttEntity);
                            }
                        }
                        else
                        {
                            var gradeAttEntity = new Att_GradeEntity
                            {
                                //ID = lstAttGradeByProfileID == null ? Guid.Empty: lstAttGradeByProfileID.ID,
                                ProfileID = item.ProfileID,
                                GradeAttendanceID = lstGradeAttByProfileID == null ? Guid.Empty : lstGradeAttByProfileID.ID,
                                MonthStart = new DateTime(DateTime.Now.Year, 6, 1)
                            };
                            message = attGradeService.Add(gradeAttEntity);
                        }


                        #endregion

                        #region Xử Lý Lương BHXH
                        if (contractTypeEntity.NoneTypeInsuarance == true)
                        {
                            var insuranceEntityByProfileID = lstInsurance.Where(s => s.ProfileID == item.ProfileID && s.DateEffect == item.DateEnd.Value.AddDays(1)).OrderByDescending(s => s.DateUpdate).FirstOrDefault();

                            var insuranceEntity = new Sal_InsuranceSalaryEntity
                            {
                                ProfileID = item.ProfileID,
                                InsuranceAmount = lstSalaryRankNew.SalaryStandard,
                                DateEffect = item.DateEnd.Value.AddDays(1),
                                IsSocialIns = contractTypeEntity.IsSocialInsurance == null ? null : contractTypeEntity.IsSocialInsurance,
                                IsUnimploymentIns = contractTypeEntity.IsUnEmployInsurance == null ? null : contractTypeEntity.IsUnEmployInsurance,
                                IsMedicalIns = contractTypeEntity.IsHealthInsurance == null ? null : contractTypeEntity.IsHealthInsurance,
                                CurrencyID = lstCurrencyNew.ID
                            };

                            if (insuranceEntityByProfileID != null)
                            {
                                insuranceEntityByProfileID.InsuranceAmount = lstSalaryRankNew.SalaryStandard;
                                insuranceEntityByProfileID.IsSocialIns = contractTypeEntity.IsSocialInsurance == null ? null : contractTypeEntity.IsSocialInsurance;
                                insuranceEntityByProfileID.IsUnimploymentIns = contractTypeEntity.IsUnEmployInsurance == null ? null : contractTypeEntity.IsUnEmployInsurance;
                                insuranceEntityByProfileID.IsMedicalIns = contractTypeEntity.IsHealthInsurance == null ? null : contractTypeEntity.IsHealthInsurance;
                                message = insuranceServices.Edit(insuranceEntityByProfileID);
                            }
                            else
                            {
                                message = insuranceServices.Add(insuranceEntity);
                            }
                        }
                        if (contractTypeEntity.NoneTypeInsuarance == false)
                        {
                            var insuranceConfigEntity = lstInsuranceConfig.Where(s => s.ContractTypeID != null && s.ContractTypeID.Value == contractTypeEntity.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                            if (insuranceConfigEntity != null)
                            {
                                var insuranceEntityByProfileID = lstInsurance.Where(s => s.ProfileID == item.ProfileID && s.DateEffect == item.DateEnd.Value.AddDays(1)).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                                var insuranceEntity = new Sal_InsuranceSalaryEntity
                                {
                                    ProfileID = item.ProfileID,
                                    InsuranceAmount = lstSalaryRankNew.SalaryStandard,
                                    DateEffect = item.DateEnd.Value.AddDays(1),
                                    IsSocialIns = insuranceConfigEntity.IsSocial == null ? null : insuranceConfigEntity.IsSocial,
                                    IsUnimploymentIns = insuranceConfigEntity.IsUnEmploy == null ? null : insuranceConfigEntity.IsUnEmploy,
                                    IsMedicalIns = insuranceConfigEntity.IsHealth == null ? null : insuranceConfigEntity.IsHealth,
                                    CurrencyID = lstCurrencyNew.ID
                                };
                                if (insuranceEntityByProfileID != null)
                                {
                                    insuranceEntityByProfileID.InsuranceAmount = lstSalaryRankNew.SalaryStandard;
                                    insuranceEntityByProfileID.IsSocialIns = insuranceConfigEntity.IsSocial == null ? null : insuranceConfigEntity.IsSocial;
                                    insuranceEntityByProfileID.IsUnimploymentIns = insuranceConfigEntity.IsUnEmploy == null ? null : insuranceConfigEntity.IsUnEmploy;
                                    insuranceEntityByProfileID.IsMedicalIns = insuranceConfigEntity.IsHealth == null ? null : insuranceConfigEntity.IsHealth;
                                    message = insuranceServices.Edit(insuranceEntityByProfileID);
                                }
                                else
                                {
                                    message = insuranceServices.Add(insuranceEntity);
                                }
                            }
                        }
                        #endregion

                    }
                }
            }
            return Json(message, JsonRequestBehavior.AllowGet);
            //   return null;
        }

        #endregion

        [HttpPost]
        public ActionResult AddDataForContract(string BasicSalary, string ProfileIDs, Guid ContractTypeID, DateTime DateHire, Guid SalaryRankID)
        {
            var service = new Hre_ProfileServices();
            service.AddDataForContract(BasicSalary, ProfileIDs, ContractTypeID, DateHire, SalaryRankID, UserLogin);
            return Json(null);
        }

        //Son.Vo - 20160405 - 0065549
        [HttpPost]
        public ActionResult GetReportFollowContract([DataSourceRequest] DataSourceRequest request, Hre_ReportFollowContractSearchModel model)
        {
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo4 };

            string status = string.Empty;
            var isDataTable = false;
            request.PageSize = Int16.MaxValue - 1;
            if (model.IsLastestContract == true)
            {
                request.PageSize = int.MaxValue - 1;
            }
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            #region tao table
            DataTable table = new DataTable("Hre_ReportFollowContractModel");
            table.Columns.Add("Stt", typeof(int));
            table.Columns.Add("CodeEmp");
            table.Columns.Add("CodeEmpClient");
            table.Columns.Add("ProfileName");
            table.Columns.Add("E_UNIT");
            table.Columns.Add("E_UNIT_CODE");
            table.Columns.Add("E_DIVISION");
            table.Columns.Add("E_DIVISION_CODE");
            table.Columns.Add("E_DEPARTMENT");
            table.Columns.Add("E_DEPARTMENT_CODE");
            table.Columns.Add("E_TEAM");
            table.Columns.Add("E_TEAM_CODE");
            table.Columns.Add("E_SECTION");
            table.Columns.Add("E_SECTION_CODE");
            table.Columns.Add("E_OU_L8");
            table.Columns.Add("E_OU_L8_CODE");
            table.Columns.Add("E_OU_L9");
            table.Columns.Add("E_OU_L9_CODE");
            table.Columns.Add("E_OU_L10");
            table.Columns.Add("E_OU_L10_CODE");
            table.Columns.Add("E_OU_L11");
            table.Columns.Add("E_OU_L11_CODE");
            table.Columns.Add("CostSourceName");
            table.Columns.Add("ContractTypeName");
            table.Columns.Add("Salary", typeof(Double));
            table.Columns.Add("InsuranceSalary", typeof(Double));
            table.Columns.Add("IDNo");
            table.Columns.Add("PositionName");
            table.Columns.Add("Cellphone");
            table.Columns.Add("Email");
            table.Columns.Add("AddressSecondaryEmergency");
            table.Columns.Add("WorkPlaceName");
            table.Columns.Add("DateHire", typeof(DateTime));
            table.Columns.Add("ContractCount", typeof(int));
            table.Columns.Add("AppendixContractCout", typeof(int));
            table.Columns.Add("LastContractNo");
            table.Columns.Add("LastContractDateStart", typeof(DateTime));
            table.Columns.Add("LastContractDateEnd", typeof(DateTime));
            table.Columns.Add("LastAppContractDateEnd", typeof(DateTime));
            table.Columns.Add("RestEffectiveTime", typeof(double));
            table.Columns.Add("LastTypeOfContractName");
            table.Columns.Add("DateQuit", typeof(DateTime));
            table.Columns.Add("TypeOfStopName");
            table.Columns.Add("DateExtend", typeof(DateTime));
            table.Columns.Add("ContractStatus");
            #region Son.Vo - 20160419 - 0066550
            table.Columns.Add("LastContractNoByDateHireNew");
            table.Columns.Add("LastContractDateStartByDateHireNew", typeof(DateTime));
            table.Columns.Add("LastContractDateEndByDateHireNew", typeof(DateTime));
            table.Columns.Add("LastContractDateExtendByDateHireNew", typeof(DateTime));
            table.Columns.Add("DatehireNew", typeof(DateTime));
            #endregion

            for (int i = 1; i <= 3; i++)
            {
                table.Columns.Add("ContractNo_" + i);
                table.Columns.Add("DateStart_" + i, typeof(DateTime));
                table.Columns.Add("DateEnd_" + i, typeof(DateTime));
                for (int j = 1; j <= 9; j++)
                {
                    table.Columns.Add("AppendixNo_" + i + "_" + j);
                    table.Columns.Add("AppendixStatus_" + i + "_" + j);
                    table.Columns.Add("AppendixContractTypeName_" + i + "_" + j);
                    table.Columns.Add("AppendixDateStart_" + i + "_" + j, typeof(DateTime));
                    table.Columns.Add("AppendixDateEnd_" + i + "_" + j, typeof(DateTime));
                }
            }
            #endregion
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = table,
                    FileName = "Hre_ReportFollowContractModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_ContractModel>();

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ReportFollowContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ReportFollowContract, ref status);
            }

            result = result.Where(s => s.ProfileID != null && s.ProfileID != Guid.Empty).ToList();
            var LstProIDs = result.Select(s => s.ProfileID).Distinct().ToList();
            var LstContractIDs = result.Select(s => s.ID).Distinct().ToList();
            var _ContractTypeServices = new Cat_ContractTypeServices();
            var lstContracttype = _ContractTypeServices.GetLstContractType();
            var _ContractServices = new Hre_ContractServices();
            // var lstAppendixContract = _ContractServices.GetAppendixContractDataByLstContractIDs(LstContractIDs);
            //Son.Vo - 20160531 - 0068313 - chuyển từ appendixcontract qua contractextend
            var lstContractExtend = _ContractServices.GetContractExtendByLstContractIDs(LstContractIDs);
            var curencyServices = new Cat_CurrencyServices();
            var lstAllowance = curencyServices.getListUsualAllowance();
            int count = 0;
            foreach (var _lastcontract in result)
            {
                count++;
                var row = table.NewRow();

                var lstcontractExtendByContract = lstContractExtend.Where(s => s.ContractID != null && _lastcontract.ID == s.ContractID).OrderByDescending(s => s.DateStart).ToList();
                var ListContractByProfile = result.Where(s => s.ProfileID == _lastcontract.ProfileID).ToList();
                row["Stt"] = count;
                row["CodeEmp"] = _lastcontract.CodeEmp;
                row["ProfileName"] = _lastcontract.ProfileName;
                row["CodeEmpClient"] = _lastcontract.CodeEmpClient;
                row["WorkPlaceName"] = _lastcontract.WorkPlaceName;
                if (_lastcontract.DateHire != null)
                    row["DateHire"] = _lastcontract.DateHire;
                if (lstcontractExtendByContract != null)
                    row["AppendixContractCout"] = lstcontractExtendByContract.Count();
                row["LastContractNo"] = _lastcontract.ContractNo;
                if (_lastcontract.DateStart != null)
                    row["LastContractDateStart"] = _lastcontract.DateStart;
                if (_lastcontract.DateEnd != null)
                    row["LastContractDateEnd"] = _lastcontract.DateEnd;
                var extend = lstcontractExtendByContract.FirstOrDefault();
                if (extend != null && extend.DateEnd != null)
                    row["LastAppContractDateEnd"] = extend.DateEnd;
                #region Son.Vo - 20160419 - 0066550
                var _lastcontractByDateHireNew = ListContractByProfile.Where(s => s.DateStart >= s.DatehireNew && s.DateStart < _lastcontract.DateStart && s.ID != _lastcontract.ID).FirstOrDefault();
                if (_lastcontractByDateHireNew != null)
                {
                    row["LastContractNoByDateHireNew"] = _lastcontractByDateHireNew.ContractNo;
                    if (_lastcontractByDateHireNew.DateStart != null)
                    {
                        row["LastContractDateStartByDateHireNew"] = _lastcontractByDateHireNew.DateStart;
                    }
                    if (_lastcontractByDateHireNew.DateEnd != null)
                    {
                        row["LastContractDateEndByDateHireNew"] = _lastcontractByDateHireNew.DateEnd;
                    }
                    if (_lastcontractByDateHireNew.DateExtend != null)
                    {
                        row["LastContractDateExtendByDateHireNew"] = _lastcontractByDateHireNew.DateExtend;
                    }
                }
                #endregion
                double Month = 0;
                if (_lastcontract.DateEnd != null)
                {
                    try
                    {
                        Month = (Convert.ToDouble((_lastcontract.DateEnd - DateTime.Now).ToString().Substring(0, (_lastcontract.DateEnd - DateTime.Now).ToString().IndexOf('.')))) / 30;
                    }
                    catch
                    {
                        Month = 0;
                    }
                    if (Month < 0)
                    {
                        Month = 0;
                    }
                }
                row["RestEffectiveTime"] = Month;
                row["LastTypeOfContractName"] = _lastcontract.ContractTypeName;

                if (_lastcontract.DateQuit != null)
                    row["DateQuit"] = _lastcontract.DateQuit;
                row["TypeOfStopName"] = _lastcontract.TypeOfStopName;
                #region Lấy cấp phòng ban
                row["E_UNIT"] = _lastcontract.E_UNIT;
                row["E_UNIT_CODE"] = _lastcontract.E_UNIT_CODE;
                row["E_TEAM"] = _lastcontract.E_TEAM;
                row["E_TEAM_CODE"] = _lastcontract.E_TEAM_CODE;
                row["E_DIVISION"] = _lastcontract.E_DIVISION;
                row["E_DIVISION_CODE"] = _lastcontract.E_DIVISION_CODE;
                row["E_DEPARTMENT"] = _lastcontract.E_DEPARTMENT;
                row["E_DEPARTMENT_CODE"] = _lastcontract.E_DEPARTMENT_CODE;
                row["E_SECTION"] = _lastcontract.E_SECTION;
                row["E_SECTION_CODE"] = _lastcontract.E_SECTION_CODE;
                row["E_OU_L8"] = _lastcontract.E_OU_L8;
                row["E_OU_L8_CODE"] = _lastcontract.E_OU_L8_CODE;
                row["E_OU_L9"] = _lastcontract.E_OU_L9;
                row["E_OU_L9_CODE"] = _lastcontract.E_OU_L9_CODE;
                row["E_OU_L10"] = _lastcontract.E_OU_L10;
                row["E_OU_L10_CODE"] = _lastcontract.E_OU_L10_CODE;
                row["E_OU_L11"] = _lastcontract.E_OU_L11;
                row["E_OU_L11_CODE"] = _lastcontract.E_OU_L11_CODE;
                #endregion
                row["CostSourceName"] = _lastcontract.CostSourceName;
                row["ContractTypeName"] = _lastcontract.ContractTypeName;
                double totalAllowanceInsurance = 0;
                #region Lấy 15 loại pc nếu có IsInsurance == true
                if (_lastcontract.AllowanceID1 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID1.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance1.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID2 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID2.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance2.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID3 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID3.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance3.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID4 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID4.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance4.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID5 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID5.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance5.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID6 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID6.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance6.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID7 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID7.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance7.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID8 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID8.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance8.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID9 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID9.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance9.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID10 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID10.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance10.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID11 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID11.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance11.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID12 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID12.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance12.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID13 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID13.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance13.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID14 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID14.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance14.GetDouble();
                    }
                }
                if (_lastcontract.AllowanceID15 != null)
                {
                    var allowanceInsurance = lstAllowance.Where(s => s.ID == _lastcontract.AllowanceID15.Value && s.IsInsurrance == true).FirstOrDefault();
                    if (allowanceInsurance != null)
                    {
                        totalAllowanceInsurance += _lastcontract.Allowance15.GetDouble();
                    }
                }
                #endregion

                double totalInsuranceSalary = totalAllowanceInsurance + _lastcontract.InsuranceAmount.GetDouble();
                row["InsuranceSalary"] = totalInsuranceSalary;
                if (_lastcontract.Salary != null)
                {
                    row["Salary"] = _lastcontract.Salary;
                }
                row["IDNo"] = _lastcontract.IDNo;
                row["PositionName"] = _lastcontract.PositionName;
                row["Cellphone"] = _lastcontract.Cellphone;
                row["Email"] = _lastcontract.Email;
                row["AddressSecondaryEmergency"] = _lastcontract.AddressSecondaryEmergency;
                if (_lastcontract.DateExtend != null)
                {
                    row["DateExtend"] = _lastcontract.DateExtend;
                }
                if (_lastcontract.ContractStatus != null)
                {
                    row["ContractStatus"] = _lastcontract.ContractStatus.TranslateString();
                }
                if (_lastcontract.DatehireNew != null)
                {
                    row["DatehireNew"] = _lastcontract.DatehireNew.Value;
                }
                int _i = 0;
                foreach (var _item in ListContractByProfile.OrderBy(s => s.DateStart))
                {
                    _i++;
                    if (_i > 3)
                    {
                        continue;
                    }
                    row["ContractNo_" + _i] = _item.ContractNo;
                    if (_item.DateStart != null)
                        row["DateStart_" + _i] = _item.DateStart;
                    if (_item.DateEnd != null)
                        row["DateEnd_" + _i] = _item.DateEnd;
                    int _j = 0;
                    var lstExtendbyContract = lstcontractExtendByContract.Where(s => s.ContractID == _item.ID).OrderByDescending(s => s.DateStart).Take(9).ToList();
                    foreach (var extend1 in lstExtendbyContract.OrderBy(s => s.DateStart))
                    {
                        _j++;
                        row["AppendixNo_" + _i + "_" + _j] = extend1.AnnexCode;
                        if (extend1.AppendixStatus != null)
                        {
                            row["AppendixStatus_" + _i + "_" + _j] = extend1.AppendixStatus.TranslateString();
                        }
                        if (extend1.TypeAppendix != null)
                        {
                            row["AppendixContractTypeName_" + _i + "_" + _j] = extend1.TypeAppendix.TranslateString();
                        }
                        if (extend1.DateStart != null)
                        {
                            row["AppendixDateStart_" + _i + "_" + _j] = extend1.DateStart;
                        }
                        if (extend1.DateEnd != null)
                        {
                            row["AppendixDateEnd_" + _i + "_" + _j] = extend1.DateEnd;
                        }
                    }
                }
                table.Rows.Add(row);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, table, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return new JsonResult() { Data = table.ConfigTable(true).ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        #endregion

        #region Hre_EvaluationContractHistory
        [HttpPost]
        public ActionResult GetEvaluationContractHistoryList([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_EvaluationContractHistoryModel, Hre_EvaluationContractHistoryEntity, Hre_EvaluationContractHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_EvaluationContractHistory);
        }

        [HttpPost]
        public ActionResult ExportEvaluationContractHistoryList([DataSourceRequest] DataSourceRequest request, Hre_EvaluationContractHistorySearchModel model)
        {
            int _page = request.Page;
            var service = new Hre_ReportServices();
            var ActionService = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            string status = string.Empty;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateOfContractEvaFrom", Value = model.DateOfContractEvaFrom == null ? DateTime.Now : model.DateOfContractEvaFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateOfContractEvaTo", Value = model.DateOfContractEvaTo == null ? DateTime.Now : model.DateOfContractEvaTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_EvaluationContractHistoryModel(),
                    FileName = "Hre_EvaluationContractHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var result = new List<Hre_EvaluationContractHistoryModel>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_EvaluationContractHistoryModel, Hre_EvaluationContractHistoryEntity, Hre_EvaluationContractHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_EvaluationContractHistory, ref status);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            else
            {
                return ExportAllAndReturn<Hre_EvaluationContractHistoryEntity, Hre_EvaluationContractHistoryModel, Hre_EvaluationContractHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_EvaluationContractHistory);
            }
        }
        #endregion

        #region Hre_ContractExtend
        public double? GetDayOfAnnualLeaveContractExtend(Guid? contractID, DateTime? dateStart)
        {
            if (contractID != null && dateStart != null)
            {
                var actionServices = new Hre_ContractExtendServices();
                var result = actionServices.GetDayOfAnnualLeaveContractExtend(contractID.Value, dateStart.Value);
                return result;
            }
            return 0;
        }

        [HttpPost]
        public ActionResult GetDataOldCreateContractExtend(Guid? contractID, DateTime? dateStart)
        {
            if (contractID != null && contractID != Guid.Empty && dateStart != null)
            {
                var _ContractExtendServices = new Hre_ContractExtendServices();
                var dataReturn = _ContractExtendServices.GetdataContractExtendByContractAndDateStart(contractID.Value, dateStart.Value);
                return Json(dataReturn, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20161202 - 0074280
        [HttpPost]
        public ActionResult GetWorkHistoryDataForCreateContractExtend(DateTime? dateStart, string contractID)
        {
            if (dateStart != null && !string.IsNullOrEmpty(contractID))
            {
                var workhistoryServices = new Hre_WorkHistoryServices();
                Guid id = Common.ConvertToGuid(contractID);
                var workhistoryEntity = workhistoryServices.GetWorkHistoryDataForCreateContractExtend(dateStart.Value, id);
                return Json(workhistoryEntity, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20161202 - 0074280
        [HttpPost]
        public ActionResult GetWorkHistoryDataForCreateContractExtendByProfile(DateTime? dateStart, string profileID)
        {
            if (dateStart != null && !string.IsNullOrEmpty(profileID))
            {
                var workhistoryServices = new Hre_WorkHistoryServices();
                Guid profileid = Common.ConvertToGuid(profileID);
                var workhistoryEntity = workhistoryServices.GetWorkHistoryDataForCreateContractExtendByProfile(dateStart.Value, profileid);
                return Json(workhistoryEntity, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetContractExtendByContractID([DataSourceRequest] DataSourceRequest request, Guid? ContractID)
        {
            if (ContractID != null && ContractID != Guid.Empty)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(ContractID);
                var result = actionService.GetData<Hre_ContractExtendViewEntity>(objs, ConstantSql.hrm_hr_sp_get_ContractExtendByContractID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        public ActionResult GetContractExtend4CreateContract([DataSourceRequest] DataSourceRequest request, Guid? ContractID)
        {
            if (ContractID != null && ContractID != Guid.Empty)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(ContractID);
                var result = actionService.GetData<Hre_ContractExtendForCreateContractEntity>(objs, ConstantSql.hrm_hr_sp_get_ContractExtend4CreateContract, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_ContractExtendSearchModel model)
        {
            return GetListDataAndReturn<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractExtendList);
        }

        public ActionResult ExportAllContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_ContractExtendSearchModel model)
        {
            string status = string.Empty;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            var ActionServices = new Hre_ContractServices();
            var result = new List<Hre_ContractExtendModel>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractExtendList, ref status);
            }
            if (model.ExportId != Guid.Empty && model.ExportId != null)
            {
                request.PageSize = int.MaxValue - 1;
                result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractExtendList, ref status);
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractExtendModel(),
                    FileName = "Hre_ContractExtend",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));

        }

        [HttpPost]
        public ActionResult GetAppendixContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            return GetListDataAndReturn<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_AppendixContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList);
        }

        public ActionResult ExportAppendixContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            string status = string.Empty;
            var ActionServices = new Hre_ContractServices();

            #region Tao template
            #region header

            var HeaderInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> lstHeaderInfo = new List<HeaderInfo>() { HeaderInfo1, headerInfo2 };
            #endregion
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractExtendModel(),
                    FileName = "Hre_ContractExtend",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            var result = new List<Hre_ContractExtendModel>();
            if (!model.IsCreateTemplate)
            {
                if (model.ExportId != Guid.Empty && model.ExportId != null)
                {
                    request.PageSize = int.MaxValue - 1;
                    result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_AppendixContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList, ref status);
                }
                else
                {
                    result = GetListData<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_AppendixContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList, ref status);
                }
            }
            #region xuat Bao cao
            #region Logo
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            foreach (var item in lstHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = Companylogo;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            #endregion

            return Json(result.ToDataSourceResult(request));

        }

        public JsonResult GetContractExtend(string id)
        {
            if (!string.IsNullOrEmpty(id))
            {
                id = Common.DotNetToOracle(id);
                string status = string.Empty;
                ActionService actionService = new ActionService(UserLogin);
                var model = actionService.GetData<Hre_ContractExtendEntity>(id, ConstantSql.hrm_hr_sp_get_ContractExtendByListId, ref status);
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        //Son.Vo - 20170615 - 0082271 - xuất word tất cả phụ lục theo nv
        public ActionResult ExportWordAllContractExtendByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(null);
            }
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _Cat_ContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(profileID.ToString()));
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ContractExtendForExportWorkByProfileID, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_AppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);
            string ext = string.Empty;

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            string fileNameDownload = null;
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (ContractExtend.ExportID != null && ContractExtend.ExportID != Guid.Empty)
                {
                    template = actionService.GetData<Cat_ExportEntity>(ContractExtend.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = ConstantDisplay.HRM_Common_Error_ConfigTemplate.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = ConstantDisplay.HRM_Common_Error_Not_Template.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    //Quyen.Quach 02/01/2018 0091933
                    if (ContractExtend.Gender != null)
                    {
                        ContractExtend.GraveNames = ContractExtend.Gender.TranslateString();
                    }
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion

                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                //Nguyen.Le - 25/01/2018 - 0092742 Modify tính tổng PC
                double totalAllowance = 0;
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance1))
                {
                    totalAllowance += ContractExtend.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance2))
                {
                    totalAllowance += ContractExtend.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance3))
                {
                    totalAllowance += ContractExtend.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance4))
                {
                    totalAllowance += ContractExtend.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance5))
                {
                    totalAllowance += ContractExtend.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance6))
                {
                    totalAllowance += ContractExtend.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance7))
                {
                    totalAllowance += ContractExtend.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance8))
                {
                    totalAllowance += ContractExtend.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance9))
                {
                    totalAllowance += ContractExtend.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance10))
                {
                    totalAllowance += ContractExtend.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance11))
                {
                    totalAllowance += ContractExtend.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance12))
                {
                    totalAllowance += ContractExtend.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance13))
                {
                    totalAllowance += ContractExtend.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance14))
                {
                    totalAllowance += ContractExtend.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance15))
                {
                    totalAllowance += ContractExtend.E_Allowance15.DecryptValue().Value;
                }

                if (totalAllowance == 0 || totalAllowance == null)
                {
                    if (ContractExtend.Allowance1 != null)
                    {
                        totalAllowance += ContractExtend.Allowance1.Value;
                    }
                    if (ContractExtend.Allowance2 != null)
                    {
                        totalAllowance += ContractExtend.Allowance2.Value;
                    }
                    if (ContractExtend.Allowance3 != null)
                    {
                        totalAllowance += ContractExtend.Allowance3.Value;
                    }
                    if (ContractExtend.Allowance4 != null)
                    {
                        totalAllowance += ContractExtend.Allowance4.Value;
                    }
                    if (ContractExtend.Allowance5 != null)
                    {
                        totalAllowance += ContractExtend.Allowance5.Value;
                    }
                    if (ContractExtend.Allowance6 != null)
                    {
                        totalAllowance += ContractExtend.Allowance6.Value;
                    }
                    if (ContractExtend.Allowance7 != null)
                    {
                        totalAllowance += ContractExtend.Allowance7.Value;
                    }
                    if (ContractExtend.Allowance8 != null)
                    {
                        totalAllowance += ContractExtend.Allowance8.Value;
                    }
                    if (ContractExtend.Allowance9 != null)
                    {
                        totalAllowance += ContractExtend.Allowance9.Value;
                    }
                    if (ContractExtend.Allowance10 != null)
                    {
                        totalAllowance += ContractExtend.Allowance10.Value;
                    }
                    if (ContractExtend.Allowance11 != null)
                    {
                        totalAllowance += ContractExtend.Allowance11.Value;
                    }
                    if (ContractExtend.Allowance12 != null)
                    {
                        totalAllowance += ContractExtend.Allowance12.Value;
                    }
                    if (ContractExtend.Allowance13 != null)
                    {
                        totalAllowance += ContractExtend.Allowance13.Value;
                    }
                    if (ContractExtend.Allowance14 != null)
                    {
                        totalAllowance += ContractExtend.Allowance14.Value;
                    }
                    if (ContractExtend.Allowance15 != null)
                    {
                        totalAllowance += ContractExtend.Allowance15.Value;
                    }
                }

                double totalSalary = 0;
                ContractExtend.TotalAllowance = totalAllowance;
                if (ContractExtend.Salary != null)
                {
                    totalSalary = totalAllowance + ContractExtend.Salary.Value;
                }
                ContractExtend.TotalSalary = totalSalary;
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalAllowance + ContractExtend.Salary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = totalSalary * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = totalSalary;
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                #endregion

                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }

                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }
                //hau.le -86731-20170824
                var contractype = new Cat_ContractType();
                if (contract != null)
                {
                    contractype = _Cat_ContractTypeServices.GetContractTypeByID(contract.ContractTypeID);
                    if (contractype != null)
                    {
                        if (contractype.UnitTime == "E_DAY")
                            contractype.UnitTime = "Ngày";
                        if (contractype.UnitTime == "E_MONTH")
                            contractype.UnitTime = "Tháng";
                        if (contractype.UnitTime == "E_YEAR")
                            contractype.UnitTime = "Năm";
                        if (contractype.UnitTime == "E_INDEFINITE")
                            contractype.UnitTime = "Vô thời hạn";
                        ContractExtend.TimeValue = contractype.ValueTime + " " + contractype.UnitTime;
                    }
                }

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(ContractExtend.PAddress) && ContractExtend.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = ContractExtend.PAddress.Split('#').ToList();
                    ContractExtend.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    ContractExtend.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ContractExtend.ProfileID != null ? (Guid)ContractExtend.ProfileID : Guid.Empty, i, ContractExtend);
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstContractExtendEntity = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstContractExtendEntity.Add(contractExport);
                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }
                _ContractExtendServices.Edit(ContractExtend);
                ExportService.ExportWord(outputPath, templatepath, lstContractExtendEntity);
            }
            if (lstContractExtend.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20170615 - 0082271 - xuất word tất cả phụ lục theo nv
        public ActionResult ExportWordAllContractExtend([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _Cat_ContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);

            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = int.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(lstModel, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_AppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);
            string ext = string.Empty;
            string fileNameDownload = null;
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (ContractExtend.ExportID != null && ContractExtend.ExportID != Guid.Empty)
                {
                    template = actionService.GetData<Cat_ExportEntity>(ContractExtend.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = ConstantDisplay.HRM_Common_Error_ConfigTemplate.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = ConstantDisplay.HRM_Common_Error_Not_Template.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    //Quyen.Quach 02/01/2018 0091933
                    if (ContractExtend.Gender != null)
                    {
                        ContractExtend.GraveNames = ContractExtend.Gender.TranslateString();
                    }
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion

                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                //Nguyen.Le - 25/01/2018 - 0092742 Modify tính tổng PC
                double totalAllowance = 0;
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance1))
                {
                    totalAllowance += ContractExtend.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance2))
                {
                    totalAllowance += ContractExtend.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance3))
                {
                    totalAllowance += ContractExtend.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance4))
                {
                    totalAllowance += ContractExtend.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance5))
                {
                    totalAllowance += ContractExtend.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance6))
                {
                    totalAllowance += ContractExtend.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance7))
                {
                    totalAllowance += ContractExtend.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance8))
                {
                    totalAllowance += ContractExtend.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance9))
                {
                    totalAllowance += ContractExtend.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance10))
                {
                    totalAllowance += ContractExtend.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance11))
                {
                    totalAllowance += ContractExtend.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance12))
                {
                    totalAllowance += ContractExtend.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance13))
                {
                    totalAllowance += ContractExtend.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance14))
                {
                    totalAllowance += ContractExtend.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance15))
                {
                    totalAllowance += ContractExtend.E_Allowance15.DecryptValue().Value;
                }

                if (totalAllowance == 0 || totalAllowance == null)
                {
                    if (ContractExtend.Allowance1 != null)
                    {
                        totalAllowance += ContractExtend.Allowance1.Value;
                    }
                    if (ContractExtend.Allowance2 != null)
                    {
                        totalAllowance += ContractExtend.Allowance2.Value;
                    }
                    if (ContractExtend.Allowance3 != null)
                    {
                        totalAllowance += ContractExtend.Allowance3.Value;
                    }
                    if (ContractExtend.Allowance4 != null)
                    {
                        totalAllowance += ContractExtend.Allowance4.Value;
                    }
                    if (ContractExtend.Allowance5 != null)
                    {
                        totalAllowance += ContractExtend.Allowance5.Value;
                    }
                    if (ContractExtend.Allowance6 != null)
                    {
                        totalAllowance += ContractExtend.Allowance6.Value;
                    }
                    if (ContractExtend.Allowance7 != null)
                    {
                        totalAllowance += ContractExtend.Allowance7.Value;
                    }
                    if (ContractExtend.Allowance8 != null)
                    {
                        totalAllowance += ContractExtend.Allowance8.Value;
                    }
                    if (ContractExtend.Allowance9 != null)
                    {
                        totalAllowance += ContractExtend.Allowance9.Value;
                    }
                    if (ContractExtend.Allowance10 != null)
                    {
                        totalAllowance += ContractExtend.Allowance10.Value;
                    }
                    if (ContractExtend.Allowance11 != null)
                    {
                        totalAllowance += ContractExtend.Allowance11.Value;
                    }
                    if (ContractExtend.Allowance12 != null)
                    {
                        totalAllowance += ContractExtend.Allowance12.Value;
                    }
                    if (ContractExtend.Allowance13 != null)
                    {
                        totalAllowance += ContractExtend.Allowance13.Value;
                    }
                    if (ContractExtend.Allowance14 != null)
                    {
                        totalAllowance += ContractExtend.Allowance14.Value;
                    }
                    if (ContractExtend.Allowance15 != null)
                    {
                        totalAllowance += ContractExtend.Allowance15.Value;
                    }
                }

                ContractExtend.TotalAllowance = totalAllowance;
                ContractExtend.TotalSalary = totalAllowance + ContractExtend.Salary;
                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }
                //hau.le-87891-20170919
                ContractExtend.IDPlaceOfIssueEN = ContractExtend.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.IDPlaceOfIssueEN);
                //hau.le-87961-20170925
                ContractExtend.AddressEN = ContractExtend.PAddress == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.PAddress);
                TimeSpan? DurationTimeSpan = null;
                if (ContractExtend.DateEnd.HasValue && ContractExtend.DateStart.HasValue)
                    DurationTimeSpan = (ContractExtend.DateEnd.Value - ContractExtend.DateStart.Value);
                if (DurationTimeSpan.HasValue)
                    ContractExtend.Duration = Convert.ToInt32(((DurationTimeSpan.Value.TotalDays + 1) / 30));
                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }

                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }
                //hau.le -86731-20170824
                var contractype = new Cat_ContractType();
                if (contract != null)
                {
                    contractype = _Cat_ContractTypeServices.GetContractTypeByID(contract.ContractTypeID);
                    if (contractype != null)
                    {
                        if (contractype.UnitTime == "E_DAY")
                            contractype.UnitTime = "Ngày";
                        if (contractype.UnitTime == "E_MONTH")
                            contractype.UnitTime = "Tháng";
                        if (contractype.UnitTime == "E_YEAR")
                            contractype.UnitTime = "Năm";
                        if (contractype.UnitTime == "E_INDEFINITE")
                            contractype.UnitTime = "Vô thời hạn";
                        ContractExtend.TimeValue = contractype.ValueTime + " " + contractype.UnitTime;
                    }
                }
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ContractExtend.ProfileID != null ? (Guid)ContractExtend.ProfileID : Guid.Empty, i, ContractExtend);
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstContractExtendEntity = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstContractExtendEntity.Add(contractExport);
                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }
                _ContractExtendServices.Edit(ContractExtend);
                ExportService.ExportWord(outputPath, templatepath, lstContractExtendEntity);
            }
            if (lstContractExtend.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Son.Vo - 20170615 - 0082271 - xuất word tất cả phụ lục theo nv
        public ActionResult ExportWordAllContractExtendByContractID([DataSourceRequest] DataSourceRequest request, Guid? contractID)
        {
            if (contractID == null || contractID == Guid.Empty)
            {
                return Json(null);
            }
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var actionService = new ActionService(UserLogin);
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(Common.DotNetToOracle(contractID.ToString()), ConstantSql.hrm_hr_sp_get_ContractExtendForExportWorkByContractID, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_AppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            string ext = string.Empty;
            string fileNameDownload = null;
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (ContractExtend.ExportID != null && ContractExtend.ExportID != Guid.Empty)
                {
                    template = actionService.GetData<Cat_ExportEntity>(ContractExtend.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = ConstantDisplay.HRM_Common_Error_ConfigTemplate.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = ConstantDisplay.HRM_Common_Error_Not_Template.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    ContractExtend.GraveNames = ContractExtend.Gender != null ? ContractExtend.Gender.TranslateString() : null;
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion

                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                double totalAllowance = 0;
                if (ContractExtend.Allowance1 != null)
                {
                    totalAllowance += ContractExtend.Allowance1.Value;
                }
                if (ContractExtend.Allowance2 != null)
                {
                    totalAllowance += ContractExtend.Allowance2.Value;
                }
                if (ContractExtend.Allowance3 != null)
                {
                    totalAllowance += ContractExtend.Allowance3.Value;
                }
                if (ContractExtend.Allowance4 != null)
                {
                    totalAllowance += ContractExtend.Allowance4.Value;
                }
                if (ContractExtend.Allowance5 != null)
                {
                    totalAllowance += ContractExtend.Allowance5.Value;
                }
                if (ContractExtend.Allowance6 != null)
                {
                    totalAllowance += ContractExtend.Allowance6.Value;
                }
                if (ContractExtend.Allowance7 != null)
                {
                    totalAllowance += ContractExtend.Allowance7.Value;
                }
                if (ContractExtend.Allowance8 != null)
                {
                    totalAllowance += ContractExtend.Allowance8.Value;
                }
                if (ContractExtend.Allowance9 != null)
                {
                    totalAllowance += ContractExtend.Allowance9.Value;
                }
                if (ContractExtend.Allowance10 != null)
                {
                    totalAllowance += ContractExtend.Allowance10.Value;
                }
                if (ContractExtend.Allowance11 != null)
                {
                    totalAllowance += ContractExtend.Allowance11.Value;
                }
                if (ContractExtend.Allowance12 != null)
                {
                    totalAllowance += ContractExtend.Allowance12.Value;
                }
                if (ContractExtend.Allowance13 != null)
                {
                    totalAllowance += ContractExtend.Allowance13.Value;
                }
                if (ContractExtend.Allowance14 != null)
                {
                    totalAllowance += ContractExtend.Allowance14.Value;
                }
                if (ContractExtend.Allowance15 != null)
                {
                    totalAllowance += ContractExtend.Allowance15.Value;
                }
                double totalSalary = 0;
                ContractExtend.TotalAllowance = totalAllowance;
                if (ContractExtend.Salary != null)
                {
                    totalSalary = totalAllowance + ContractExtend.Salary.Value;
                }
                ContractExtend.TotalSalary = totalSalary;
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalAllowance + ContractExtend.Salary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = totalSalary * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = totalSalary;
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                #endregion

                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }

                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(ContractExtend.PAddress) && ContractExtend.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = ContractExtend.PAddress.Split('#').ToList();
                    ContractExtend.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    ContractExtend.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ContractExtend.ProfileID != null ? (Guid)ContractExtend.ProfileID : Guid.Empty, i, ContractExtend);
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstContractExtendEntity = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstContractExtendEntity.Add(contractExport);
                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }
                _ContractExtendServices.Edit(ContractExtend);
                ExportService.ExportWord(outputPath, templatepath, lstContractExtendEntity);
            }
            if (lstContractExtend.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        //Quyen.Quach GetByTemplate
        public ActionResult ExportWordContractExtend(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }

            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _Cat_ContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(objs, ConstantSql.hrm_hr_sp_get_ContractExtendByListId, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreAppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            string ext = string.Empty;
            string fileNameDownload = null;
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();

                string outputPath = string.Empty;


                var template = actionService.GetData<Cat_ExportEntity>(ContractExtend.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();

                if (template == null)
                {
                    messages = ConstantDisplay.HRM_Common_Error_ConfigTemplate.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    ContractExtend.GraveNames = ContractExtend.Gender != null ? ContractExtend.Gender.TranslateString() : null;
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDPlaceOfIssue;
                }
                //hau.le-87891-20170919
                ContractExtend.IDPlaceOfIssueEN = ContractExtend.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.IDPlaceOfIssueEN);
                //hau.le-87961-20170925
                ContractExtend.AddressEN = ContractExtend.PAddress == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.PAddress);
                TimeSpan? DurationTimeSpan = null;
                if (ContractExtend.DateEnd.HasValue && ContractExtend.DateStart.HasValue)
                    DurationTimeSpan = (ContractExtend.DateEnd.Value - ContractExtend.DateStart.Value);
                if (DurationTimeSpan.HasValue)
                    ContractExtend.Duration = Convert.ToInt32(((DurationTimeSpan.Value.TotalDays + 1) / 30));
                //Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Mr ";
                    ContractExtend.CompanyGraveNameVN = "Ông";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Ms ";
                    ContractExtend.CompanyGraveNameVN = "Bà";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Other ";
                    ContractExtend.CompanyGraveNameVN = "Khác ";
                }
                #endregion
                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion

                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                //Nguyen.Le - 25/01/2018 - 0092742 Modify tính tổng PC
                double totalAllowance = 0;
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance1))
                {
                    totalAllowance += ContractExtend.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance2))
                {
                    totalAllowance += ContractExtend.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance3))
                {
                    totalAllowance += ContractExtend.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance4))
                {
                    totalAllowance += ContractExtend.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance5))
                {
                    totalAllowance += ContractExtend.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance6))
                {
                    totalAllowance += ContractExtend.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance7))
                {
                    totalAllowance += ContractExtend.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance8))
                {
                    totalAllowance += ContractExtend.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance9))
                {
                    totalAllowance += ContractExtend.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance10))
                {
                    totalAllowance += ContractExtend.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance11))
                {
                    totalAllowance += ContractExtend.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance12))
                {
                    totalAllowance += ContractExtend.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance13))
                {
                    totalAllowance += ContractExtend.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance14))
                {
                    totalAllowance += ContractExtend.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance15))
                {
                    totalAllowance += ContractExtend.E_Allowance15.DecryptValue().Value;
                }

                if (totalAllowance == 0 || totalAllowance == null)
                {
                    if (ContractExtend.Allowance1 != null)
                    {
                        totalAllowance += ContractExtend.Allowance1.Value;
                    }
                    if (ContractExtend.Allowance2 != null)
                    {
                        totalAllowance += ContractExtend.Allowance2.Value;
                    }
                    if (ContractExtend.Allowance3 != null)
                    {
                        totalAllowance += ContractExtend.Allowance3.Value;
                    }
                    if (ContractExtend.Allowance4 != null)
                    {
                        totalAllowance += ContractExtend.Allowance4.Value;
                    }
                    if (ContractExtend.Allowance5 != null)
                    {
                        totalAllowance += ContractExtend.Allowance5.Value;
                    }
                    if (ContractExtend.Allowance6 != null)
                    {
                        totalAllowance += ContractExtend.Allowance6.Value;
                    }
                    if (ContractExtend.Allowance7 != null)
                    {
                        totalAllowance += ContractExtend.Allowance7.Value;
                    }
                    if (ContractExtend.Allowance8 != null)
                    {
                        totalAllowance += ContractExtend.Allowance8.Value;
                    }
                    if (ContractExtend.Allowance9 != null)
                    {
                        totalAllowance += ContractExtend.Allowance9.Value;
                    }
                    if (ContractExtend.Allowance10 != null)
                    {
                        totalAllowance += ContractExtend.Allowance10.Value;
                    }
                    if (ContractExtend.Allowance11 != null)
                    {
                        totalAllowance += ContractExtend.Allowance11.Value;
                    }
                    if (ContractExtend.Allowance12 != null)
                    {
                        totalAllowance += ContractExtend.Allowance12.Value;
                    }
                    if (ContractExtend.Allowance13 != null)
                    {
                        totalAllowance += ContractExtend.Allowance13.Value;
                    }
                    if (ContractExtend.Allowance14 != null)
                    {
                        totalAllowance += ContractExtend.Allowance14.Value;
                    }
                    if (ContractExtend.Allowance15 != null)
                    {
                        totalAllowance += ContractExtend.Allowance15.Value;
                    }
                }

                double totalSalary = 0;
                ContractExtend.TotalAllowance = totalAllowance;
                if (ContractExtend.Salary != null)
                {
                    totalSalary = totalAllowance + ContractExtend.Salary.Value;
                }
                ContractExtend.TotalSalary = totalSalary;
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalAllowance + ContractExtend.Salary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = totalSalary * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = totalSalary;
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                #endregion

                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }


                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }

                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }
                _ContractExtendServices.Edit(ContractExtend);
                //hau.le -86731-20170824
                var contractype = new Cat_ContractType();
                if (contract != null)
                {
                    contractype = _Cat_ContractTypeServices.GetContractTypeByID(contract.ContractTypeID);
                    if (contractype != null)
                    {
                        if (contractype.UnitTime == "E_DAY")
                            contractype.UnitTime = "Ngày";
                        if (contractype.UnitTime == "E_MONTH")
                            contractype.UnitTime = "Tháng";
                        if (contractype.UnitTime == "E_YEAR")
                            contractype.UnitTime = "Năm";
                        if (contractype.UnitTime == "E_INDEFINITE")
                            contractype.UnitTime = "Vô thời hạn";
                        ContractExtend.TimeValue = contractype.ValueTime + " " + contractype.UnitTime;
                    }
                }

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(ContractExtend.PAddress) && ContractExtend.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = ContractExtend.PAddress.Split('#').ToList();
                    ContractExtend.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    ContractExtend.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ContractExtend.ProfileID != null ? ContractExtend.ProfileID.Value : Guid.Empty, i, ContractExtend);
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstcontract.Add(contractExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContractExtend.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            return Json(fileDoc);
        }


        //Son.Vo - Xuất Word ở màn hình PLHĐ
        public ActionResult ExportWordContractExtendByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }

            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _Cat_JobTitleServices = new Cat_JobTitleServices();
            var _Cat_OrgStructureServices = new Cat_OrgStructureServices();
            var _Cat_ContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            Cat_ExportEntity template = null;
            Cat_ContractTemplateEntity contractTemplate = null;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(objs, ConstantSql.hrm_hr_sp_get_ContractExtendByListId, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreAppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);
            string ext = string.Empty;
            var templatepath = string.Empty;

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var lstcontractTemplate = contractservices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();
            string fileNameDownload = null;
            var lstFileName = new List<string>();
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = lstExportallcontemp.Where(s => s.ID == Guid.Parse(valueFields)).FirstOrDefault();
                if (template != null && template.OrderNumber != null)
                {
                    var propertyInfo = typeof(Hre_ContractExtendEntity).GetProperty(template.OrderNumber);
                    if (propertyInfo != null)
                    {
                        lstContractExtend = lstContractExtend.OrderBy(x => propertyInfo.GetValue(x, null)).ToList();
                    }
                    //lstContractExtend = lstContractExtend.OrderBy()
                }
            }
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();

                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = lstExportallcontemp.Where(s => s.ID == Guid.Parse(valueFields)).FirstOrDefault();
                }
                else
                {
                    template = lstExportallcontemp.Where(s => s.ID == ContractExtend.ExportID).FirstOrDefault();
                }
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractservices.GetContractTemplate(lstcontractTemplate, ContractExtend.ContractTypeID.Value, ContractExtend.PositionID, ContractExtend.EmployeeTypeID, ContractExtend.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = ConstantDisplay.HRM_Common_Error_Not_Template.TranslateString();
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    ContractExtend.GraveNames = ContractExtend.Gender != null ? ContractExtend.Gender.TranslateString() : null;
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDPlaceOfIssue;
                }



                //Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Mr ";
                    ContractExtend.CompanyGraveNameVN = "Ông";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Ms ";
                    ContractExtend.CompanyGraveNameVN = "Bà";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Other ";
                    ContractExtend.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion
                //hau.le task 86677 xuất word cho button kết xuất tên phòng ban cũ, tên chức danh cũ


                var pbcd = lstAllContractEntendByContract.Where(s => s.ContractID == ContractExtend.ContractID && s.DateStart < ContractExtend.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (pbcd != null)
                {
                    if (pbcd.JobTitleID != null)
                        ContractExtend.OldJobTitle = pbcd.JobTitleID.HasValue == true ? _Cat_JobTitleServices.GetJobTitleNameByID(pbcd.JobTitleID.Value) : "";
                    if (pbcd.OrgStructureID != null)
                        ContractExtend.OldOrgStructure = pbcd.OrgStructureID.HasValue == true ? _Cat_OrgStructureServices.GetOrgStructureNameByID(pbcd.OrgStructureID.Value) : "";

                }
                else
                {
                    var pbcd2 = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                    ContractExtend.OldJobTitleContract = pbcd2.JobTitleID.HasValue == true ? _Cat_JobTitleServices.GetJobTitleNameByID(pbcd2.JobTitleID.Value) : "";
                    ContractExtend.OldOrgStructureContract = pbcd2.OrgStructureID.HasValue == true ? _Cat_OrgStructureServices.GetOrgStructureNameByID(pbcd2.OrgStructureID.Value) : "";
                }




                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                //Nguyen.Le - 25/01/2018 - 0092742 Modify tính tổng PC
                double totalAllowance = 0;
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance1))
                {
                    totalAllowance += ContractExtend.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance2))
                {
                    totalAllowance += ContractExtend.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance3))
                {
                    totalAllowance += ContractExtend.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance4))
                {
                    totalAllowance += ContractExtend.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance5))
                {
                    totalAllowance += ContractExtend.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance6))
                {
                    totalAllowance += ContractExtend.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance7))
                {
                    totalAllowance += ContractExtend.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance8))
                {
                    totalAllowance += ContractExtend.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance9))
                {
                    totalAllowance += ContractExtend.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance10))
                {
                    totalAllowance += ContractExtend.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance11))
                {
                    totalAllowance += ContractExtend.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance12))
                {
                    totalAllowance += ContractExtend.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance13))
                {
                    totalAllowance += ContractExtend.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance14))
                {
                    totalAllowance += ContractExtend.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance15))
                {
                    totalAllowance += ContractExtend.E_Allowance15.DecryptValue().Value;
                }

                if (totalAllowance == 0 || totalAllowance == null)
                {
                    if (ContractExtend.Allowance1 != null)
                    {
                        totalAllowance += ContractExtend.Allowance1.Value;
                    }
                    if (ContractExtend.Allowance2 != null)
                    {
                        totalAllowance += ContractExtend.Allowance2.Value;
                    }
                    if (ContractExtend.Allowance3 != null)
                    {
                        totalAllowance += ContractExtend.Allowance3.Value;
                    }
                    if (ContractExtend.Allowance4 != null)
                    {
                        totalAllowance += ContractExtend.Allowance4.Value;
                    }
                    if (ContractExtend.Allowance5 != null)
                    {
                        totalAllowance += ContractExtend.Allowance5.Value;
                    }
                    if (ContractExtend.Allowance6 != null)
                    {
                        totalAllowance += ContractExtend.Allowance6.Value;
                    }
                    if (ContractExtend.Allowance7 != null)
                    {
                        totalAllowance += ContractExtend.Allowance7.Value;
                    }
                    if (ContractExtend.Allowance8 != null)
                    {
                        totalAllowance += ContractExtend.Allowance8.Value;
                    }
                    if (ContractExtend.Allowance9 != null)
                    {
                        totalAllowance += ContractExtend.Allowance9.Value;
                    }
                    if (ContractExtend.Allowance10 != null)
                    {
                        totalAllowance += ContractExtend.Allowance10.Value;
                    }
                    if (ContractExtend.Allowance11 != null)
                    {
                        totalAllowance += ContractExtend.Allowance11.Value;
                    }
                    if (ContractExtend.Allowance12 != null)
                    {
                        totalAllowance += ContractExtend.Allowance12.Value;
                    }
                    if (ContractExtend.Allowance13 != null)
                    {
                        totalAllowance += ContractExtend.Allowance13.Value;
                    }
                    if (ContractExtend.Allowance14 != null)
                    {
                        totalAllowance += ContractExtend.Allowance14.Value;
                    }
                    if (ContractExtend.Allowance15 != null)
                    {
                        totalAllowance += ContractExtend.Allowance15.Value;
                    }
                }

                double totalSalary = 0;
                ContractExtend.TotalAllowance = totalAllowance;
                if (ContractExtend.Salary != null)
                {
                    totalSalary = totalAllowance + ContractExtend.Salary.Value;
                }
                ContractExtend.TotalSalary = totalSalary;
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalAllowance + ContractExtend.Salary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = totalSalary * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = totalSalary;
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                #endregion

                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }

                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }

                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }
                _ContractExtendServices.Edit(ContractExtend);
                //hau.le-86731-20170824
                var contractype = new Cat_ContractType();
                if (contract != null)
                {
                    contractype = _Cat_ContractTypeServices.GetContractTypeByID(contract.ContractTypeID);
                    if (contractype != null)
                    {
                        if (contractype.UnitTime == "E_DAY")
                            contractype.UnitTime = "Ngày";
                        if (contractype.UnitTime == "E_MONTH")
                            contractype.UnitTime = "Tháng";
                        if (contractype.UnitTime == "E_YEAR")
                            contractype.UnitTime = "Năm";
                        if (contractype.UnitTime == "E_INDEFINITE")
                            contractype.UnitTime = "Vô thời hạn";
                        ContractExtend.TimeValue = contractype.ValueTime + " " + contractype.UnitTime;
                    }
                }
                //hau.le-87961-20170925
                ContractExtend.AddressEN = ContractExtend.PAddress == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.PAddress);
                TimeSpan? DurationTimeSpan = null;
                if (ContractExtend.DateEnd.HasValue && ContractExtend.DateStart.HasValue)
                    DurationTimeSpan = (ContractExtend.DateEnd.Value - ContractExtend.DateStart.Value);
                if (DurationTimeSpan.HasValue)
                    ContractExtend.Duration = Convert.ToInt32(((DurationTimeSpan.Value.TotalDays + 1) / 30));
                //hau.le-87891-20170919
                ContractExtend.IDPlaceOfIssueEN = ContractExtend.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.IDPlaceOfIssueEN);

                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(ContractExtend.PAddress) && ContractExtend.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = ContractExtend.PAddress.Split('#').ToList();
                    ContractExtend.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    ContractExtend.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                lstFileName.Add(genneralNameExport);

                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstcontract.Add(contractExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContractExtend.Count > 1)
            {
                if (template != null && template.IsExportAllOn1File != null && template.IsExportAllOn1File.Value)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload, lstFileName);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                        return Json(messageReturn);
                    }
                    return Json(fileZip);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }


        //[To.Le][04/04/2017][New Func][0079653] - Xuất Word all ở màn hình PLHĐ
        public ActionResult ExportContractExtendAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            string status = string.Empty;
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _Cat_JobTitleServices = new Cat_JobTitleServices();
            var _Cat_OrgStructureServices = new Cat_OrgStructureServices();
            var actionService = new ActionService(UserLogin);
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = int.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(lstModel, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList, ref status);
            if (lstContractExtend == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_AppendixContract" + suffix;
            if (lstContractExtend.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int count = 0;
            var lstProfileIDs = lstContractExtend.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var _ProfileServices = new Hre_ProfileServices();
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            var lstOtherInfoOrg = _ProfileServices.GetListOtherInfoOrgByLstProfileIDS(lstProfileIDs);
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistorybyProfile = workHistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            var lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContractExtend.Where(s => s.ContractID != null).Select(s => s.ContractID.Value).Distinct().ToList();
            var lstAllConExtends = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractservices = new Hre_ContractServices();
            var lstRateContract = contractservices.GetRateByContractIDs(lstContractIDs);
            var lstContract = contractservices.GetContractDataByIDs(lstContractIDs);

            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContractExtend.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            string ext = string.Empty;
            string fileNameDownload = null;
            foreach (var ContractExtend in lstContractExtend)
            {
                i++;
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (model.ExportId != null && model.ExportId != Guid.Empty)
                {
                    template = actionService.GetData<Cat_ExportEntity>(model.ExportId, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }
                else
                {
                    if (ContractExtend.ExportID != null)
                    {
                        template = actionService.GetData<Cat_ExportEntity>(ContractExtend.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                    }
                }

                if (template == null)
                {
                    if (model.ExportId != null && model.ExportId != Guid.Empty)
                    {
                        messages = ConstantDisplay.HRM_Common_Error_ConfigTemplate.TranslateString();
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        continue;
                    }
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    if (model.ExportId != null && model.ExportId != Guid.Empty)
                    {
                        messages = ConstantDisplay.HRM_Common_Error_Not_Template.TranslateString();
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        continue;
                    }
                }

                count++;

                #region lấy ngày tháng
                ContractExtend.DateSign = DateTime.Now.Day;
                ContractExtend.MonthSign = DateTime.Now.Month;
                ContractExtend.YearSign = DateTime.Now.Year;
                ContractExtend.DateNow_Day = DateTime.Now.Day;
                ContractExtend.DateNow_Month = DateTime.Now.Month;
                ContractExtend.DateNow_Year = DateTime.Now.Year;
                if (ContractExtend.IDDateOfIssue != null)
                {
                    ContractExtend.IDDateOfIssueFormat = ContractExtend.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStartContract != null)
                {
                    ContractExtend.DateStartContractFormat = ContractExtend.DateStartContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEndContract != null)
                {
                    ContractExtend.DateEndContractFormat = ContractExtend.DateEndContract.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateStart != null)
                {
                    ContractExtend.DateStartFormat = ContractExtend.DateStart.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateStart1 = ContractExtend.DateStart.Value.AddDays(-1).ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateEnd != null)
                {
                    ContractExtend.DateEndFormat = ContractExtend.DateEnd.Value.ToString("dd/MM/yyyy");
                    ContractExtend.DateEndFormatEN = ContractExtend.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (ContractExtend.DateOfBirth != null)
                {
                    ContractExtend.DateOfBirthFormat = ContractExtend.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Salary != null)
                {
                    ContractExtend.ContractExtendSalaryFormat = String.Format("{0:0,0}", ContractExtend.Salary);
                }
                if (ContractExtend.DateStop != null && ContractExtend.DateStop >= ContractExtend.DateStartContract && ContractExtend.DateStop <= ContractExtend.DateEndContract)
                {
                    ContractExtend.DateStopFormat = ContractExtend.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateOfBirthSing != null)
                {
                    ContractExtend.DateOfBirthSingFormat = ContractExtend.DateOfBirthSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.IDDateOfIssueSing != null)
                {
                    ContractExtend.IDDateOfIssueSingFormat = ContractExtend.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.SocialInsIssueDate != null)
                {
                    ContractExtend.SocialInsIssueDateFormat = ContractExtend.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.DateSigned != null)
                {
                    ContractExtend.DateSignedContractFormat = ContractExtend.DateSigned.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.GenderEN = "Female ";
                    ContractExtend.GraveNames = "Bà";
                    ContractExtend.GraveNameEN = "Mrs.";
                    ContractExtend.GraveName1 = "Chị";
                }
                else if (ContractExtend.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.GenderEN = "Male ";
                    ContractExtend.GraveNames = "Ông";
                    ContractExtend.GraveNameEN = "Mr.";
                    ContractExtend.GraveName1 = "Anh";
                }
                else
                {
                    ContractExtend.GraveNameEN = "Other";
                    ContractExtend.GraveNames = ContractExtend.Gender != null ? ContractExtend.Gender.TranslateString() : null;
                }
                if (ContractExtend.ProfileSingDateOfBirth.HasValue)
                {
                    ContractExtend.ProfileSingDateOfBirthFormat = ContractExtend.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (ContractExtend.ProfileSingIDDateOfIssue.HasValue)
                {
                    ContractExtend.ProfileSingIDDateOfIssueFormat = ContractExtend.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Son.Vo - 20160709 - 0070290: DS phụ lục HĐ: Lấy thêm enum xuất word
                var orgInfoByProfile = lstOtherInfoOrg.Where(s => s.OrgstructureID == ContractExtend.OrgStructureID).FirstOrDefault();
                if (orgInfoByProfile != null)
                {
                    ContractExtend.Info1 = orgInfoByProfile.Info1;
                    ContractExtend.Info2 = orgInfoByProfile.Info2;
                    ContractExtend.Info3 = orgInfoByProfile.Info3;
                    ContractExtend.Info4 = orgInfoByProfile.Info4;
                    ContractExtend.Info5 = orgInfoByProfile.Info5;
                    ContractExtend.Info6 = orgInfoByProfile.Info6;
                    ContractExtend.Info7 = orgInfoByProfile.Info7;
                    ContractExtend.Info8 = orgInfoByProfile.Info8;
                    ContractExtend.Info9 = orgInfoByProfile.Info9;
                    ContractExtend.Info10 = orgInfoByProfile.Info10;
                    ContractExtend.Info11 = orgInfoByProfile.Info11;
                    ContractExtend.Info12 = orgInfoByProfile.Info12;
                    ContractExtend.Info13 = orgInfoByProfile.Info13;
                    ContractExtend.Info14 = orgInfoByProfile.Info14;
                }
                var salaryInfoByProfile = lstSalaryInformation.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                if (salaryInfoByProfile != null)
                {
                    ContractExtend.AccountNo = salaryInfoByProfile.AccountNo;
                    ContractExtend.AccountName = salaryInfoByProfile.AccountName;
                    ContractExtend.BranchName = salaryInfoByProfile.BranchName;
                    ContractExtend.BankName = salaryInfoByProfile.BankName;
                    ContractExtend.BankBrandName = salaryInfoByProfile.BankBrandName;
                }
                #endregion

                #region Son.Vo - 20160729 - 0071141: Phụ lục hợp đồng:Bổ sung enum xuất dữ liệu
                var workhistoryByExtend = lstWorkHistorybyProfile.Where(s => s.ProfileID == ContractExtend.ProfileID && s.DateEffective <= ContractExtend.DateSignedAppendixContract).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByExtend != null)
                {
                    ContractExtend.ProfileSingJobTitleName = workhistoryByExtend.JobTitleName;
                }

                var qualification = lstQualification.Where(s => s.ProfileID == ContractExtend.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualification != null)
                {
                    ContractExtend.QualificationName = qualification.QualificationName;
                }
                #endregion

                #region Son.Vo - 20160906 - Lấy lương cũ
                var lstAllContractEntendByContract = lstAllConExtends.Where(s => s.ContractID == ContractExtend.ContractID).ToList();
                var lastContractExtend = lstAllContractEntendByContract.OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractExtend != null && lastContractExtend.ID != ContractExtend.ID)
                {
                    var phuluclienke = lstAllContractEntendByContract.Where(s => s.DateStart <= ContractExtend.DateStart && s.ID != ContractExtend.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (phuluclienke != null)
                    {
                        ContractExtend.ContractSalary = phuluclienke.Salary;
                        ContractExtend.ContractInsuranceAmount = phuluclienke.InsuranceAmount;  //Son.Vo - 20161111 - 0075506
                    }
                }
                #endregion

                #region  Son.Vo - 20161029 - 0074716 tính tổng PC, lương
                //Nguyen.Le - 25/01/2018 - 0092742 Modify tính tổng PC
                double totalAllowance = 0;
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance1))
                {
                    totalAllowance += ContractExtend.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance2))
                {
                    totalAllowance += ContractExtend.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance3))
                {
                    totalAllowance += ContractExtend.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance4))
                {
                    totalAllowance += ContractExtend.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance5))
                {
                    totalAllowance += ContractExtend.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance6))
                {
                    totalAllowance += ContractExtend.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance7))
                {
                    totalAllowance += ContractExtend.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance8))
                {
                    totalAllowance += ContractExtend.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance9))
                {
                    totalAllowance += ContractExtend.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance10))
                {
                    totalAllowance += ContractExtend.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance11))
                {
                    totalAllowance += ContractExtend.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance12))
                {
                    totalAllowance += ContractExtend.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance13))
                {
                    totalAllowance += ContractExtend.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance14))
                {
                    totalAllowance += ContractExtend.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(ContractExtend.E_Allowance15))
                {
                    totalAllowance += ContractExtend.E_Allowance15.DecryptValue().Value;
                }

                if (totalAllowance == 0 || totalAllowance == null)
                {
                    if (ContractExtend.Allowance1 != null)
                    {
                        totalAllowance += ContractExtend.Allowance1.Value;
                    }
                    if (ContractExtend.Allowance2 != null)
                    {
                        totalAllowance += ContractExtend.Allowance2.Value;
                    }
                    if (ContractExtend.Allowance3 != null)
                    {
                        totalAllowance += ContractExtend.Allowance3.Value;
                    }
                    if (ContractExtend.Allowance4 != null)
                    {
                        totalAllowance += ContractExtend.Allowance4.Value;
                    }
                    if (ContractExtend.Allowance5 != null)
                    {
                        totalAllowance += ContractExtend.Allowance5.Value;
                    }
                    if (ContractExtend.Allowance6 != null)
                    {
                        totalAllowance += ContractExtend.Allowance6.Value;
                    }
                    if (ContractExtend.Allowance7 != null)
                    {
                        totalAllowance += ContractExtend.Allowance7.Value;
                    }
                    if (ContractExtend.Allowance8 != null)
                    {
                        totalAllowance += ContractExtend.Allowance8.Value;
                    }
                    if (ContractExtend.Allowance9 != null)
                    {
                        totalAllowance += ContractExtend.Allowance9.Value;
                    }
                    if (ContractExtend.Allowance10 != null)
                    {
                        totalAllowance += ContractExtend.Allowance10.Value;
                    }
                    if (ContractExtend.Allowance11 != null)
                    {
                        totalAllowance += ContractExtend.Allowance11.Value;
                    }
                    if (ContractExtend.Allowance12 != null)
                    {
                        totalAllowance += ContractExtend.Allowance12.Value;
                    }
                    if (ContractExtend.Allowance13 != null)
                    {
                        totalAllowance += ContractExtend.Allowance13.Value;
                    }
                    if (ContractExtend.Allowance14 != null)
                    {
                        totalAllowance += ContractExtend.Allowance14.Value;
                    }
                    if (ContractExtend.Allowance15 != null)
                    {
                        totalAllowance += ContractExtend.Allowance15.Value;
                    }
                }

                double totalSalary = 0;
                ContractExtend.TotalAllowance = totalAllowance;
                if (ContractExtend.Salary != null)
                {
                    totalSalary = totalAllowance + ContractExtend.Salary.Value;
                }
                ContractExtend.TotalSalary = totalSalary;
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalAllowance + ContractExtend.Salary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == ContractExtend.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = totalSalary * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = totalSalary;
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        ContractExtend.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        ContractExtend.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                #endregion

                #endregion

                //Son.Vo - 20161111 - 0075506
                var rateByContract = lstRateContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                {
                    if (rateByContract != null)
                    {
                        ContractExtend.RateContract = rateByContract.RankRateIDRate;
                    }
                }

                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == ContractExtend.ProfileID &&
                    (
                       (ContractExtend.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= ContractExtend.DateEnd)
                    || (ContractExtend.DateStart <= s.WorkPermitExpiredDate && ContractExtend.DateEnd == null)
                    )).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    ContractExtend.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    ContractExtend.WorkPermitType = workPermitByContract.WorkPermitType;
                    ContractExtend.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    ContractExtend.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    ContractExtend.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var positionByProSing = lstWorkhistoryByProsing.Where(s => s.ProfileID == ContractExtend.ProfileSingID && s.DateEffective <= ContractExtend.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (positionByProSing != null)
                {
                    ContractExtend.ProfileSingPositionName = positionByProSing.PositionName;
                    ContractExtend.ProfileSingPositionEngName = positionByProSing.PositionEngName;
                }

                #region Son.Vo - 20170228 - 0079357
                if (ContractExtend.PassportNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.PassportNo;
                    ContractExtend.DateIDCardPass = ContractExtend.PassportDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.PassportPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                if (ContractExtend.ProfileIDNo != null)
                {
                    ContractExtend.NoIDCardPass = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardPass = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardPass = ContractExtend.ProfileIDPlaceOfIssue;
                }

                #endregion

                var contract = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                if (contract != null)
                {
                    ContractExtend.InsuranceAmountContract = contract.InsuranceAmount;
                }
                //haule xuat world plhd
                if (ContractExtend.ProfileIDCard != null)
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDCard;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDCardDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    ContractExtend.IDCardNo = ContractExtend.ProfileIDNo;
                    ContractExtend.DateIDCardNo = ContractExtend.ProfileIDDateOfIssue;
                    ContractExtend.PlaceIDCardNo = ContractExtend.ProfileIDPlaceOfIssue;
                }
                //hau.le-87891-20170919
                ContractExtend.IDPlaceOfIssueEN = ContractExtend.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.IDPlaceOfIssueEN);
                //hau.le-87961-20170925
                ContractExtend.AddressEN = ContractExtend.PAddress == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(ContractExtend.PAddress);
                TimeSpan? DurationTimeSpan = null;
                if (ContractExtend.DateEnd.HasValue && ContractExtend.DateStart.HasValue)
                    DurationTimeSpan = (ContractExtend.DateEnd.Value - ContractExtend.DateStart.Value);
                if (DurationTimeSpan.HasValue)
                    ContractExtend.Duration = Convert.ToInt32(((DurationTimeSpan.Value.TotalDays + 1) / 30));
                //hau.le task 86677 xuất word cho button kết xuất tên phòng ban cũ, tên chức danh cũ


                var pbcd = lstAllContractEntendByContract.Where(s => s.ContractID == ContractExtend.ContractID && s.DateStart < ContractExtend.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (pbcd != null)
                {
                    if (pbcd.JobTitleID != null)
                        ContractExtend.OldJobTitle = pbcd.JobTitleID.HasValue == true ? _Cat_JobTitleServices.GetJobTitleNameByID(pbcd.JobTitleID.Value) : "";
                    if (pbcd.OrgStructureID != null)
                        ContractExtend.OldOrgStructure = pbcd.OrgStructureID.HasValue == true ? _Cat_OrgStructureServices.GetOrgStructureNameByID(pbcd.OrgStructureID.Value) : "";

                }
                else
                {
                    var pbcd2 = lstContract.Where(s => s.ID == ContractExtend.ContractID).FirstOrDefault();
                    ContractExtend.OldJobTitleContract = pbcd2.JobTitleID.HasValue == true ? _Cat_JobTitleServices.GetJobTitleNameByID(pbcd2.JobTitleID.Value) : "";
                    ContractExtend.OldOrgStructureContract = pbcd2.OrgStructureID.HasValue == true ? _Cat_OrgStructureServices.GetOrgStructureNameByID(pbcd2.OrgStructureID.Value) : "";
                }

                //Bổ sung ENum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786
                if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Mr ";
                    ContractExtend.CompanyGraveNameVN = "Ông";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Ms ";
                    ContractExtend.CompanyGraveNameVN = "Bà";
                }
                else if (ContractExtend.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    ContractExtend.CompanyGraveNameEN = "Other ";
                    ContractExtend.CompanyGraveNameVN = "Khác ";
                }
                #endregion
                #region Quyen.Quach 09/11/2017 0089794 Lấy 2 Enum EN_VN từ chuỗi Paddress
                if (!string.IsNullOrEmpty(ContractExtend.PAddress) && ContractExtend.PAddress.Split('#').ToList().Count > 1)
                {
                    var addresstemp = ContractExtend.PAddress.Split('#').ToList();
                    ContractExtend.PAddress_VN = addresstemp[0] != null ? addresstemp[0].ToString() : string.Empty;
                    ContractExtend.PAddress_EN = addresstemp[1] != null ? addresstemp[1].ToString() : string.Empty;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 19/12/2017 - 0091348
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ContractExtend.ProfileID != null ? (Guid)ContractExtend.ProfileID : Guid.Empty, i, ContractExtend);
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstContractExtendEntity = new List<Hre_ContractExtendForExportEntity>();
                var contractExport = ContractExtend.CopyData<Hre_ContractExtendForExportEntity>();
                lstContractExtendEntity.Add(contractExport);
                if (ContractExtend.NoPrint == null)
                {
                    ContractExtend.NoPrint = 1;
                }
                else
                {
                    ContractExtend.NoPrint++;
                }

                _ContractExtendServices.Edit(ContractExtend);
                ExportService.ExportWord(outputPath, templatepath, lstContractExtendEntity);
            }
            if (lstContractExtend.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext, fileNameDownload);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        #endregion

        #region Hre_Dependant

        //Quyen.Quach Validate người phụ thuộc phải có ngày áp dụng lớn hơn ngay vào làm
        #region Quyen.Quach- 15/08/2017- 0086740 - Không cho tạo mới cho người phụ thuộc có ngày áp dụng nhỏ hơn ngày vào công ty
        public string CheckDependantbyMonthOfEffect(Guid? profileID, DateTime? MonthOfEffect)
        {
            var _dependantServices = new Hre_DependantServices();
            var lstProfile = new List<Guid>();
            lstProfile.Add(profileID.Value);
            if (profileID != null && MonthOfEffect != null)
            {
                string messageValidate = _dependantServices.CheckDependantbyMonthOfEffect(lstProfile, MonthOfEffect.Value);
                if (messageValidate != null)
                {
                    return messageValidate.TranslateString();
                }
            }
            return null;
        }
        #endregion
        public ActionResult ExportWordDepentdantByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            Guid exportID;
            string messages = string.Empty;
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            var exportService = new Cat_ExportServices();
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstDependant = baseService.GetData<Hre_DependantEntity>(strIDs, ConstantSql.hrm_hr_sp_get_DependantByIds, UserLogin, ref status);
            if (lstDependant == null)
                return null;
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Dependant" + suffix;
            if (lstDependant != null && lstDependant.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var Dependant in lstDependant)
            {
                i++;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, Dependant.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var ilContract = new List<Hre_DependantEntity>();
                ilContract.Add(Dependant);
                ExportService.ExportWord(outputPath, templatepath, ilContract);
            }
            if (lstDependant != null && lstDependant.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult GetDateExpireDependantFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWEXPIRYDEPENDANTFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEXPIRYDEPENDANTFROM);
            if (_DAYSHOWEXPIRYDEPENDANTFROM >= 0)
            {
                DateFrom = DateFrom.AddDays(-_DAYSHOWEXPIRYDEPENDANTFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateExpireDependantToSearch()
        {
            string status = string.Empty;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWEXPIRYDEPENDANTTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEXPIRYDEPENDANTTO);
            if (_DAYSHOWEXPIRYDEPENDANTTO >= 0)
            {
                DateTo = DateTo.AddDays(_DAYSHOWEXPIRYDEPENDANTTO);
            }
            return Json(DateTo, JsonRequestBehavior.AllowGet);
        }

        public string CheckDuplicateCodeTaxDependant(Guid? ID, string taxCode)
        {
            string strProfileDuplicate = null;
            string strprofile = null;
            string strdependant = null;
            var profileServices = new Hre_DependantServices();
            var lstDependantdup = profileServices.CheckDuplicateTaxcodeDependant(ID, taxCode);
            var lstProfiledup = profileServices.CheckDuplicateTaxcodeProfile(taxCode);
            if (lstDependantdup != null && lstDependantdup.Count > 0)
            {
                foreach (var dependant in lstDependantdup)
                {
                    strdependant += dependant.DependantName + ", ";
                }
                if (strdependant != null)
                {
                    strProfileDuplicate += ConstantDisplay.HRM_DuplicateCodeTaxWithDependant.TranslateString() + strdependant.Substring(0, strdependant.Length - 2) + " ";
                }
            }

            if (lstProfiledup != null && lstProfiledup.Count > 0)
            {
                foreach (var profile in lstProfiledup)
                {
                    strprofile += profile.ProfileName + ", ";
                }
                if (strprofile != null)
                {
                    if (strProfileDuplicate != null)
                    {
                        strProfileDuplicate += "; " + ConstantDisplay.HRM_DuplicateCodeTaxWithProfile.TranslateString() + strprofile.Substring(0, strprofile.Length - 2);
                    }
                    else
                    {
                        strProfileDuplicate += ConstantDisplay.HRM_DuplicateCodeTaxWithProfile.TranslateString() + strprofile.Substring(0, strprofile.Length - 2);
                    }
                }
            }
            return strProfileDuplicate;
        }

        [HttpPost]
        public ActionResult ApproveDependant(string selectedIds)
        {
            var service = new Hre_DependantServices();
            var message = service.ActionApproved(selectedIds);
            return Json(message);
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Dependant (Hre_Dependant) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetDependantList([DataSourceRequest] DataSourceRequest request, Hre_DependantSearchModel model)
        {
            #region Comment
            //[13/11/2015][Anh.Le][Modify][IdTask: ]
            //Bổ sung chức nằng xuất bảo cáo  theo template
            #endregion

            #region Phân trang
            //Nếu là xuất ra lưới thì không cần lấy hêt dữ liệu lên.
            int PageIndex = request.Page;
            int PageSize = request.PageSize;
            if (model.ExportID != Guid.Empty || model.IsCheckFromDashBoard)
            {
                PageIndex = 1;
                PageSize = int.MaxValue - 1;
            }
            #endregion

            #region Load data
            if (model.DateTo != null)
            {
                model.DateTo = model.DateTo.Value.AddDays(1).AddMinutes(-1);
            }
            if (model.DateCreateTo != null)
            {
                model.DateCreateTo = model.DateCreateTo.Value.AddDays(1).AddMinutes(-1);
            }
            string status = string.Empty;
            var lstDependant = new List<Hre_DependantEntity>();
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            if (!model.IsCreateTemplate)
            {
                lstDependant = GetListData<Hre_DependantEntity, Hre_DependantEntity, Hre_DependantSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DependantList, ref status);
            }
            #endregion

            var relativeService = new Hre_RelativesServices();
            DataTable result = relativeService.ReportGetDependantList(lstDependant, model.IsCreateTemplate);

            #region Load template bao cao
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = result,
                    FileName = "Hre_DependantModel",
                    OutPutPath = path,
                    DownloadPath = "Templates",
                    IsDataTable = true

                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region tim kiem tu dash boad
            if (model.IsCheckFromDashBoard == true)
            {
                int? _DAYSHOWDEPENDANT18YEARFROM = sysServices.GetConfigValue<int?>(AppConfig.HRM_EVA_PROFILE_ALERT_DAYSHOWDEPENDANT18YEARFROM);
                int? _DAYSHOWDEPENDANT18YEARTO = sysServices.GetConfigValue<int?>(AppConfig.HRM_EVA_PROFILE_ALERT_DAYSHOWDEPENDANT18YEARTO);
                var _dateFrom = DateTime.Now.AddDays(-_DAYSHOWDEPENDANT18YEARFROM.Value);
                var _dateTo = DateTime.Now.AddDays(_DAYSHOWDEPENDANT18YEARTO.Value);
                lstDependant = lstDependant.Where(s => s.DateOfBirth != null &&
                    new DateTime(_dateFrom.Year, s.DateOfBirth.Value.Month, s.DateOfBirth.Value.Day) >= new DateTime(_dateFrom.Year, _dateFrom.Month, _dateFrom.Day)
                    &&
                    new DateTime(_dateTo.Year, s.DateOfBirth.Value.Month, s.DateOfBirth.Value.Day) <= new DateTime(_dateTo.Year, _dateTo.Month, _dateTo.Day)
                    &&
                    DateTime.Now.Year - s.DateOfBirth.Value.Year == 18
                ).ToList();
                return Json(lstDependant.ToDataSourceResult(request));
            }
            #endregion

            #region Export
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            #region xuất dữ liệu ra lưới
            //Xữ lý gán dữ liệu lại, vì nếu xuất ra lưới phải xữ lý qua hàm ToDataSourceResult(request), thì sẽ khồng trả ra dữ liệu.
            var _datasource = lstDependant.ToDataSourceResult(request);
            int total = lstDependant.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)lstDependant.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            _datasource.Total = total;
            _datasource.Data = lstDependant;
            return Json(_datasource, JsonRequestBehavior.AllowGet);
            #endregion
        }

        // Son.Vo - 20121102 - ds người phụ thuộc đến hạn
        [HttpPost]
        public ActionResult GetExpiredDependantList([DataSourceRequest] DataSourceRequest request, Hre_ExpiryDependantSearchModel model)
        {
            return GetListDataAndReturn<Hre_DependantModel, Hre_DependantEntity, Hre_ExpiryDependantSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredDependantList);
        }

        [HttpPost]
        public ActionResult ExportDependantExpiredList([DataSourceRequest] DataSourceRequest request, Hre_ExpiryDependantSearchModel model)
        {
            return ExportAllAndReturn<Hre_DependantEntity, Hre_DependantModel, Hre_ExpiryDependantSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredDependantList);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Dependant (Hre_Dependant) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportDependantList([DataSourceRequest] DataSourceRequest request, Hre_DependantSearchModel model)
        {
            return ExportAllAndReturn<Hre_DependantEntity, Hre_DependantModel, Hre_DependantSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DependantList);
        }


        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Dependant (Hre_Dependant) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportDependantSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_DependantEntity, Hre_DependantModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_DependantByIds);
        }

        [HttpPost]
        // Son.Vo - 20151202 - 0061038 - có cấu hình duyệt người phụ thuộc hay không.
        public ActionResult IsApprovedDependant()
        {
            var _DependantServices = new Hre_DependantServices();
            Boolean ischeck = _DependantServices.IsApprovedDependant();
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20151214 - 0061049
        public string CheckDuplicateDependant(Guid? _ID, string dependantName, DateTime? dateOfBirth)
        {
            var dependantServices = new Hre_DependantServices();
            string strdup = null;
            if (_ID == null)
            {
                _ID = Guid.Empty;
            }
            if (dependantName != null && dateOfBirth != null)
            {
                strdup = dependantServices.CheckduplidateDependant(_ID, dependantName, dateOfBirth.Value);
            }
            return strdup;
        }

        #endregion

        #region Hre_StopDiscipline
        [HttpPost]
        public ActionResult GetDateStopDisciplineExpiredFrom()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWDISCIPLINEEXPIREDFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWSTOPDISCIPLINEEXPIREDFROM);
            if (_DAYSHOWDISCIPLINEEXPIREDFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSHOWDISCIPLINEEXPIREDFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateStopDisciplineExpiredTo()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWDISCIPLINEEXPIREDTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWSTOPDISCIPLINEEXPIREDTO);
            if (_DAYSHOWDISCIPLINEEXPIREDTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSHOWDISCIPLINEEXPIREDTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Hre_Discipline
        public string GetCodeEmpByProfileSelect(Hre_DisciplineModel model)
        {
            var baseService = new BaseService();
            var lstProfileIDs = new List<Guid>();
            string status = string.Empty;
            string strReturn = string.Empty;
            var profileServices = new Hre_ProfileServices();
            #region Chọn Nhân viên
            if (model.ProfileIDs != null && model.ProfileIDs != string.Empty && model.ProfileID == Guid.Empty) // Trường hợp chọn nhiều nhân viên
            {
                var lstMulti = new List<Guid>();
                var lst = model.ProfileIDs.Split(',');
                foreach (var item in lst)
                {
                    Guid _Id = new Guid(item);
                    lstMulti.Add(_Id);
                }
                var lstProfileIDsSelect = lstMulti;
                if (lstProfileIDsSelect.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    return null;
                }
                else
                {
                    lstProfileIDs.AddRange(lstProfileIDsSelect);
                }
            }
            #endregion

            #region Chọn phòng ban
            if (!string.IsNullOrEmpty(model.strOrgStructureIDs))
            {
                var lstObj = new List<object>();
                lstObj.Add(model.strOrgStructureIDs);
                lstObj.Add(null);
                lstObj.Add(null);
                var lstOrg = baseService.GetData<Hre_ProfileMultiEntity>(lstObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrg, UserLogin, ref status).ToList();
                lstProfileIDs = lstOrg.Select(d => d.ID).ToList();
                //neu co loai tru
                var lstProfileIDByOrg = new List<Guid>();
                if (!string.IsNullOrEmpty(model.ProfileIDsExclude) && lstProfileIDs.Count > 0)
                {
                    List<Guid> lstProfileIDsExclude = new List<Guid>();
                    var lst = model.ProfileIDsExclude.Split(',');
                    foreach (var item in lst)
                    {
                        Guid _Id = new Guid(item);
                        lstProfileIDsExclude.Add(_Id);
                    }
                    var lstProfileIDsadd = lstProfileIDs.Where(d => !lstProfileIDsExclude.Contains(d)).ToList();
                    lstProfileIDByOrg.AddRange(lstProfileIDsadd);
                }
                if (lstProfileIDByOrg.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    return null;
                }
                else
                {
                    lstProfileIDs.AddRange(lstProfileIDByOrg);
                }
            }
            if (model.ID != Guid.Empty && model.ProfileID != Guid.Empty)
            {
                lstProfileIDs.Add(model.ProfileID);
            }

            if (lstProfileIDs.Count > 0)
            {
                strReturn = profileServices.GetStrCodeEmpByProfileSelect(lstProfileIDs);
            }

            return strReturn;
            #endregion
        }

        [HttpPost]
        public ActionResult GetDateDisciplineExpiredFrom()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWDISCIPLINEEXPIREDFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWDISCIPLINEEXPIREDFROM);
            if (_DAYSHOWDISCIPLINEEXPIREDFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSHOWDISCIPLINEEXPIREDFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateDisciplineExpiredTo()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWDISCIPLINEEXPIREDTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWDISCIPLINEEXPIREDTO);
            if (_DAYSHOWDISCIPLINEEXPIREDTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSHOWDISCIPLINEEXPIREDTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 20160518 - 0065154
        public ActionResult ValidateCreateDiscipline([DataSourceRequest] DataSourceRequest request, Hre_DisciplineModel model)
        {
            #region Validate
            string status = string.Empty;
            var actionservices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var disciplineServices = new Hre_DisciplineServices();
            var baseService = new BaseService();
            string message = string.Empty;
            #endregion

            var lstProfileIDs = new List<Guid>();
            var objmessageValidate = new Hre_DisciplineMessageEntity();
            objmessageValidate.Message = null;

            if (model.ProfileID != Guid.Empty)
            {
                model.ProfileIDs = model.ProfileID.ToString();
                model.ProfileID = Guid.Empty;
            }


            #region Chọn Nhân viên
            if (model.ProfileIDs != null && model.ProfileIDs != string.Empty && model.ProfileID == Guid.Empty) // Trường hợp chọn nhiều nhân viên
            {
                var lstMulti = new List<Guid>();
                var lst = model.ProfileIDs.Split(',');
                foreach (var item in lst)
                {
                    Guid _Id = new Guid(item);
                    lstMulti.Add(_Id);
                }
                lstProfileIDs = lstMulti;
                if (lstProfileIDs.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    objmessageValidate.Message = ConstantDisplay.HRM_Common_NotEmployee.TranslateString();
                    return Json(objmessageValidate, JsonRequestBehavior.AllowGet); // validate11111
                }

                else
                {
                    model.ProfileID = lstProfileIDs.FirstOrDefault();
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_DisciplineModel>(LanguageCode, model, "Hre_Discipline", ref message);
                    if (!checkValidate)
                    {
                        objmessageValidate.Message = message;
                        return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                    }

                    var lstProfile = profileServices.GetLstProfileEntityByLstProfileIDs(lstProfileIDs);
                    string profileNameValidate = null;



                    if (model.DateOfEffective != null)
                    {
                        if (model.ActionStatus != "Confirm1" && model.ActionStatus != "Confirm2" && model.ActionStatus != "Confirm3" && model.ActionStatus != "Confirm4")
                        {
                            objmessageValidate = disciplineServices.ValidateCreateDiscipline(model.ID, lstProfileIDs, model.DateOfEffective.Value, model.DateEndOfViolation, model.DisciplineTypeID);
                            if (objmessageValidate.Message != null)
                            {
                                return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }

                    foreach (var ProfileID in lstProfileIDs)
                    {
                        var profileByDis = lstProfile.Where(s => s.ID == ProfileID).FirstOrDefault();
                        if (model.DateOfEffective != null && profileByDis != null)
                        {
                            if (profileByDis.DateHire <= model.DateOfEffective &&
                                ((profileByDis.DateQuit != null && profileByDis.DateQuit <= model.DateOfEffective) || objmessageValidate != null))
                            {
                                profileNameValidate += profileByDis.ProfileName + ',';
                                continue;
                            }
                            if (profileByDis.DateHire > model.DateOfEffective || objmessageValidate.Message != null)
                            {
                                profileNameValidate += profileByDis.ProfileName + ',';
                                continue;
                            }
                        }
                    }
                    if (profileNameValidate != null)
                    {
                        profileNameValidate = profileNameValidate.Substring(0, profileNameValidate.Length - 1);
                        model.ActionStatus = profileNameValidate + ConstantDisplay.HRM_Hre_Discipline_ProfileNotWorkInDisciplineTime.TranslateString();
                        //Quyen.Quach Validate trả về chuỗi Json
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            #endregion

            #region Chọn phòng ban
            if (!string.IsNullOrEmpty(model.strOrgStructureIDs))
            {
                var lstObj = new List<object>();
                lstObj.Add(model.strOrgStructureIDs);
                lstObj.Add(null);
                lstObj.Add(null);
                var lstOrg = baseService.GetData<Hre_ProfileEntity>(lstObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrg, UserLogin, ref status);
                //Nguyen.Le - 30/10/2017 - Lỗi chọn hết phòng ban ko giống vs màn hình NV đang làm việc
                var lstID1s = lstOrg.Where(s => s.StatusSyn == ProfileStatusSyn.E_HIRE.ToString() || s.StatusSyn == null).ToList();
                var lstID2s = lstOrg.Where(s => s.StatusSyn != ProfileStatusSyn.E_HIRE.ToString() && s.StatusSyn != null && s.StatusSyn != ProfileStatusSyn.E_WAITING_APPROVE.ToString() && (s.DateEndProbation < DateTime.Today || s.DateEndProbation == null)).ToList();
                lstID1s.AddRange(lstID2s);
                lstProfileIDs = lstID1s.Select(d => d.ID).ToList();
                //neu co loai tru
                if (!string.IsNullOrEmpty(model.ProfileIDsExclude) && lstProfileIDs.Count > 0)
                {
                    List<Guid> lstProfileIDsExclude = new List<Guid>();
                    var lst = model.ProfileIDsExclude.Split(',');
                    foreach (var item in lst)
                    {
                        Guid _Id = new Guid(item);
                        lstProfileIDsExclude.Add(_Id);
                    }
                    lstProfileIDs = lstProfileIDs.Where(d => !lstProfileIDsExclude.Contains(d)).ToList();
                }
                if (lstProfileIDs.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    return Json(ConstantDisplay.HRM_Common_NotEmployee.TranslateString(), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    model.ProfileID = lstProfileIDs.FirstOrDefault();
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_DisciplineModel>(LanguageCode, model, "Hre_Discipline", ref message);
                    if (!checkValidate)
                    {
                        objmessageValidate.Message = message;
                        return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                    }

                    var lstEntity = new List<Hre_DisciplineEntity>();
                    var lstProfile = profileServices.GetLstProfileEntityByLstProfileIDs(lstProfileIDs);
                    string profileNameValidate = null;
                    if (model.DateOfEffective != null)
                    {
                        if (model.ActionStatus != "Confirm1" && model.ActionStatus != "Confirm2" && model.ActionStatus != "Confirm3" && model.ActionStatus != "Confirm4")
                        {
                            objmessageValidate = disciplineServices.ValidateCreateDiscipline(model.ID, lstProfileIDs, model.DateOfEffective.Value, model.DateEndOfViolation, model.DisciplineTypeID);
                            if (objmessageValidate.Message != null)
                            {
                                return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                    foreach (var ProfileID in lstProfileIDs)
                    {
                        var profileByDis = lstProfile.Where(s => s.ID == ProfileID).FirstOrDefault();
                        if (model.DateOfEffective != null && profileByDis != null)
                        {
                            if (profileByDis.DateHire <= model.DateOfEffective &&
                                ((profileByDis.DateQuit != null && profileByDis.DateQuit <= model.DateOfEffective) || objmessageValidate.Message != null))
                            {
                                profileNameValidate += profileByDis.ProfileName + ',';
                                continue;
                            }
                            if (profileByDis.DateHire > model.DateOfEffective || objmessageValidate.Message != null)
                            {
                                profileNameValidate += profileByDis.ProfileName + ',';
                                continue;
                            }
                        }
                    }
                    if (profileNameValidate != null)
                    {
                        profileNameValidate = profileNameValidate.Substring(0, profileNameValidate.Length - 1);
                        model.ActionStatus = profileNameValidate + ConstantDisplay.HRM_Hre_Discipline_ProfileNotWorkInDisciplineTime.TranslateString();
                        objmessageValidate.Message = model.ActionStatus;
                        return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            #endregion

            if (string.IsNullOrEmpty(model.strOrgStructureIDs) && (string.IsNullOrEmpty(model.ProfileIDs) && model.ProfileID == Guid.Empty))
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_DisciplineModel>(LanguageCode, model, "Hre_Discipline", ref message);
                if (!checkValidate)
                {
                    objmessageValidate.Message = message;
                    return Json(objmessageValidate, JsonRequestBehavior.AllowGet);
                }
                else
                { return null; }
            }
            else
            {
                return null;
            }
        }

        public ActionResult ExportSelectDisciplineByTemplate([DataSourceRequest] DataSourceRequest request, Hre_DisciplineModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_DisciplineModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            //Quyen.Quach 24/11/2017 0090208
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var result = baseService.GetData<Hre_DisciplineModel>(model.strDisciplineID, ConstantSql.hrm_hr_sp_get_DisciplineByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_DisciplineModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty && model.ExportId != null)
            {
                var fullPath = ExportService.Export(model.ExportId.Value, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }


        public ActionResult ExportProfileDisciplineListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_DisciplineSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            string CompanyLogo = string.Empty;
            var result = new List<Hre_DisciplineModel>();

            #region Create tempate
            #region Header
            //Quyen.Quach 24/11/2017 0090208
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            var headerInfo2 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            var headerInfo3 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            #endregion

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_DisciplineModel(),
                    FileName = "Hre_Discipline",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_DisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Discipline, ref status);
            }

            if (!Common.CheckListNullOrEmty(result))
            {
                #region Xu ly data
                #region task 0058018 lấy số lần ký HĐ
                var contractServices = new Hre_ContractServices();
                var lstProfileIDS = result.Select(s => s.ProfileID).Distinct().ToList();
                var lstContract = contractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
                #endregion
                foreach (var item in result)
                {
                    item.DisciplineCount = result.Where(s => s.ProfileID == item.ProfileID).Count();
                    item.ContractCount = lstContract.Where(s => s.ProfileID == item.ProfileID).Count();
                    var lstContractTypeName = lstContract.Where(s => s.ProfileID == item.ProfileID).OrderByDescending(s => s.DateSigned).FirstOrDefault();
                    if (lstContractTypeName != null)
                    {
                        if (lstContractTypeName.ContractTypeName != null)
                            item.ContractTypeName = lstContractTypeName.ContractTypeName;
                    }
                }
                #endregion

                #region Logo
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }
                }
                #endregion
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportStopDisciplineListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopDisciplineSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            string CompanyLogo = string.Empty;
            var result = new List<Hre_DisciplineModel>();

            #region Create tempate
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            #endregion

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_DisciplineModel(),
                    FileName = "Hre_Discipline",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_StopDisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopDiscipline, ref status);
            }

            if (!Common.CheckListNullOrEmty(result))
            {
                #region Xu ly data
                #region task 0058018 lấy số lần ký HĐ
                var contractServices = new Hre_ContractServices();
                var lstProfileIDS = result.Select(s => s.ProfileID).Distinct().ToList();
                var lstContract = contractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
                #endregion
                foreach (var item in result)
                {
                    item.DisciplineCount = result.Where(s => s.ProfileID == item.ProfileID).Count();
                    item.ContractCount = lstContract.Where(s => s.ProfileID == item.ProfileID).Count();
                    var lstContractTypeName = lstContract.Where(s => s.ProfileID == item.ProfileID).OrderByDescending(s => s.DateSigned).FirstOrDefault();
                    if (lstContractTypeName != null)
                    {
                        if (lstContractTypeName.ContractTypeName != null)
                            item.ContractTypeName = lstContractTypeName.ContractTypeName;
                    }
                }
                #endregion

                #region Logo
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }
                }
                #endregion
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Tho.Bui]:Export Discipline templete
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        /// 
        public ActionResult ExporProfileDisciplineTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            var _ActionService = new ActionService(UserLogin, LanguageCode);
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfileDiscipline = _ActionService.GetData<Hre_DisciplineEntity>(objs, ConstantSql.hrm_hr_sp_get_TempleteDisciplineByIds, ref status);
            if (lstProfileDiscipline == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "Discipline" + suffix;
            if (lstProfileDiscipline.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var lstProfileIDs = lstProfileDiscipline.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();
            var orgServices = new Cat_OrgStructureServices();
            var lstOrgMoreInfor = orgServices.GetListOrgMoreInforByProfileID(lstProfileIDs);
            var contractServices = new Hre_ContractServices();
            var lstContracts = contractServices.GetContractDataByLstProfileIDs(lstProfileIDs);
            var _ProfileServices = new Hre_ProfileServices();
            var lstBasicSalary = _ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _DisciplineServices = new Hre_DisciplineServices();
            var lstDisciplinebyProfileIDs = _DisciplineServices.GetLstDisciplineForCountByProfileIDs(lstProfileIDs);
            //hau.le-88146-20170928
            var ManagementAgentIDs = lstDisciplinebyProfileIDs.Where(s => s.ManagementAgentID != null).Select(s => s.ManagementAgentID).Distinct().ToList();
            var lstManagementAgentName = new List<Hre_ProfileEntity>();
            if (ManagementAgentIDs.Count > 0)
                lstManagementAgentName = _DisciplineServices.GetManagementAgentNameByIDs(ManagementAgentIDs);
            var ext = string.Empty;
            foreach (var objProfileDiscipline in lstProfileDiscipline)
            {
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = _ActionService.GetData<Cat_ExportEntity>(Common.DotNetToOracle(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }
                if (template == null)
                {
                    continue;
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    return Json("NotTemplate", JsonRequestBehavior.AllowGet);
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileDiscipline.GraveName = "Ms.";
                    objProfileDiscipline.NameByGerder = "Chị ";
                    objProfileDiscipline.GraveNames = "Bà";
                    objProfileDiscipline.GraveNameEN = "Mrs.";

                }
                else if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileDiscipline.GraveName = "Mr.";
                    objProfileDiscipline.NameByGerder = "Anh ";
                    objProfileDiscipline.GraveNames = "Ông";
                    objProfileDiscipline.GraveNameEN = "Mr.";
                }
                else if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objProfileDiscipline.GraveName = "Mr/Mrs ";
                    objProfileDiscipline.NameByGerder = "Anh/Chị";
                    objProfileDiscipline.GraveNames = "Ông/Bà";
                    objProfileDiscipline.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (objProfileDiscipline.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileDiscipline.ChairmanGraveName1 = "Chị ";
                    objProfileDiscipline.ChairmanGraveNameEN1 = "Ms.";
                    objProfileDiscipline.ChairmanGraveName = "Bà";
                    objProfileDiscipline.ChairmanGraveNameEN = "Mrs.";
                }
                else if (objProfileDiscipline.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileDiscipline.ChairmanGraveName1 = "Anh ";
                    objProfileDiscipline.ChairmanGraveNameEN1 = "Mr.";
                    objProfileDiscipline.ChairmanGraveName = "Ông";
                    objProfileDiscipline.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Lấy ngày tháng
                objProfileDiscipline.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                objProfileDiscipline.DateNow_Day = DateTime.Now.Day.ToString();
                objProfileDiscipline.DateNow_Month = DateTime.Now.Month.ToString();
                objProfileDiscipline.DateNow_Year = DateTime.Now.Year.ToString();
                if (objProfileDiscipline.DateOfIssuance.HasValue)
                {
                    objProfileDiscipline.DateOfIssuanceFormat = objProfileDiscipline.DateOfIssuance.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateOfViolation.HasValue)
                {
                    objProfileDiscipline.DateOfViolationFormat = objProfileDiscipline.DateOfViolation.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateOfEffective.HasValue)
                {
                    objProfileDiscipline.DateOfEffectiveFormat = objProfileDiscipline.DateOfEffective.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateHire.HasValue)
                {
                    objProfileDiscipline.DateHireFormat = objProfileDiscipline.DateHire.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateOfBirth != null)
                {
                    objProfileDiscipline.DateOfBirthFormat = objProfileDiscipline.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.SocialInsIssueDate != null)
                {
                    objProfileDiscipline.SocialInsIssueDateFormat = objProfileDiscipline.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                #region Đén số năm làm việc
                if (objProfileDiscipline.DateQuit.HasValue)
                {
                    if (objProfileDiscipline.DateHire.HasValue)
                    {
                        objProfileDiscipline.MonthWorking = Math.Floor(objProfileDiscipline.DateQuit.Value.Subtract(objProfileDiscipline.DateHire.Value).TotalDays / 30);
                        if (objProfileDiscipline.MonthWorking.HasValue)
                            objProfileDiscipline.YearWorking = Math.Floor(objProfileDiscipline.MonthWorking.Value / 12);
                        if (objProfileDiscipline.YearWorking > 0)
                        {
                            objProfileDiscipline.MonthWorking = objProfileDiscipline.MonthWorking - (objProfileDiscipline.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (objProfileDiscipline.DateHire.HasValue)
                        objProfileDiscipline.MonthWorking = Math.Floor(DateTime.Now.Subtract(objProfileDiscipline.DateHire.Value).TotalDays / 30);
                    if (objProfileDiscipline.MonthWorking.HasValue)
                        objProfileDiscipline.YearWorking = Math.Floor(objProfileDiscipline.MonthWorking.Value / 12);
                    if (objProfileDiscipline.YearWorking > 0)
                    {
                        objProfileDiscipline.MonthWorking = objProfileDiscipline.MonthWorking - (objProfileDiscipline.YearWorking * 12);
                    }
                }
                #endregion

                var orgMoreInfo = lstOrgMoreInfor.Where(s => s.OrgStructureID == objProfileDiscipline.ProfileOrgStructureID).FirstOrDefault();
                if (orgMoreInfo != null)
                {
                    objProfileDiscipline.RecipientInvoice = orgMoreInfo.RecipientInvoice;
                }

                #region Son.Vo - 20160630 - lấy các enum xuất word theo task 0069562
                var contractbyProfile = lstContracts.Where(s => s.ProfileID == objProfileDiscipline.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateSigned).FirstOrDefault();
                if (contractbyProfile != null)
                {
                    objProfileDiscipline.ContractNo = contractbyProfile.ContractNo;
                    objProfileDiscipline.ContractTypeName = contractbyProfile.ContractTypeName;
                    if (contractbyProfile.DateSigned != null)
                    {
                        objProfileDiscipline.DateSigned = contractbyProfile.DateSigned;
                        objProfileDiscipline.DateSignedFormat = contractbyProfile.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                }

                //Son.Vo - 20161031 - 0074020
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == objProfileDiscipline.ProfileID && (s.DateOfEffect <= objProfileDiscipline.DateOfViolation || objProfileDiscipline.DateOfViolation == null)).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    objProfileDiscipline.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    objProfileDiscipline.Rate = basicSalaryByProfile.Rate;
                }
                #endregion

                //Son.Vo - 20170429 - 0081936
                var lstDisbyProfile = lstDisciplinebyProfileIDs.Where(s => s.ProfileID == objProfileDiscipline.ProfileID).ToList();
                objProfileDiscipline.DisciplineCount = lstDisciplinebyProfileIDs.Count();
                if (lstDisciplinebyProfileIDs != null && lstDisciplinebyProfileIDs.Count > 0)
                {
                    var listPreDiscipline = lstDisciplinebyProfileIDs.Where(s => s.DateOfEffective < objProfileDiscipline.DateOfEffective).OrderByDescending(s => s.DateOfEffective).ToList();
                    if (listPreDiscipline.Count > 0)
                    {
                        objProfileDiscipline.ViolationExplain1 = listPreDiscipline[0].ViolationExplain;
                        if (listPreDiscipline.Count > 1)
                        {
                            objProfileDiscipline.ViolationExplain2 = listPreDiscipline[1].ViolationExplain;
                        }
                    }
                }
                //hau.le-88146-20170928
                var lstDisciplinebyProfile = lstDisciplinebyProfileIDs.Where(s => s.ProfileID == objProfileDiscipline.ProfileID && s.DateOfEffective < objProfileDiscipline.DateOfEffective).OrderBy(s => s.DateOfEffective).Take(3).ToList();
                if (lstDisciplinebyProfile.Count > 0)
                {
                    objProfileDiscipline.DateOfViolation1 = lstDisciplinebyProfile[0].DateOfViolation;
                    if (lstManagementAgentName.Count > 0)
                        objProfileDiscipline.ManagementAgentName1 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[0].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[0].ManagementAgentID).FirstOrDefault().ProfileName;
                    if (lstDisciplinebyProfile.Count > 1)
                    {
                        objProfileDiscipline.DateOfViolation2 = lstDisciplinebyProfile[1].DateOfViolation;
                        if (lstManagementAgentName.Count > 1)
                            objProfileDiscipline.ManagementAgentName2 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[1].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[1].ManagementAgentID).FirstOrDefault().ProfileName;
                        if (lstDisciplinebyProfile.Count > 2)
                        {
                            objProfileDiscipline.DateOfViolation3 = lstDisciplinebyProfile[2].DateOfViolation;
                            if (lstManagementAgentName.Count > 2)
                                objProfileDiscipline.ManagementAgentName3 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[2].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[2].ManagementAgentID).FirstOrDefault().ProfileName;
                        }
                    }
                }
                //Quyen.Quach 18/01/2018 0092447 Xuất tên tiếng anh
                objProfileDiscipline.ProfileNameEng = !string.IsNullOrEmpty(objProfileDiscipline.ProfileName) ? RemoveSign4VietnameseString(objProfileDiscipline.ProfileName) : string.Empty;

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objProfileDiscipline.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var ilDiscipline = new List<Hre_DisciplineEntity>();
                ilDiscipline.Add(objProfileDiscipline);

                ExportService.ExportWord(outputPath, templatepath, ilDiscipline);
            }
            if (lstProfileDiscipline.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExporProfileDisciplineByTypeOfDiscipline(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var _DisciplineServices = new Hre_DisciplineServices();
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstProfileDiscipline = _ActionService.GetData<Hre_DisciplineEntity>(objs, ConstantSql.hrm_hr_sp_get_TempleteDisciplineByIds, ref status);
            if (lstProfileDiscipline == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "Discipline" + suffix;
            if (lstProfileDiscipline.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var lstProfileIDs = lstProfileDiscipline.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();
            var lstDisciplinebyProfileIDs = _DisciplineServices.GetLstDisciplineForCountByProfileIDs(lstProfileIDs);
            var ManagementAgentIDs = lstDisciplinebyProfileIDs.Where(s => s.ManagementAgentID != null).Select(s => s.ManagementAgentID).Distinct().ToList();
            var lstManagementAgentName = new List<Hre_ProfileEntity>();
            if (ManagementAgentIDs.Count > 0)
                lstManagementAgentName = _DisciplineServices.GetManagementAgentNameByIDs(ManagementAgentIDs);
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var objProfileDiscipline in lstProfileDiscipline)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (objProfileDiscipline.ExportID.HasValue)
                    template = service.GetData<Cat_ExportEntity>(Common.DotNetToOracle(objProfileDiscipline.ExportID.Value.ToString()), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileDiscipline.GraveName = "Ms.";
                    objProfileDiscipline.NameByGerder = "Chị ";
                    objProfileDiscipline.GraveNames = "Bà";
                    objProfileDiscipline.GraveNameEN = "Mrs.";

                }
                else if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileDiscipline.GraveName = "Mr.";
                    objProfileDiscipline.NameByGerder = "Anh ";
                    objProfileDiscipline.GraveNames = "Ông";
                    objProfileDiscipline.GraveNameEN = "Mr.";
                }
                else if (objProfileDiscipline.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objProfileDiscipline.GraveName = "Mr/Mrs ";
                    objProfileDiscipline.NameByGerder = "Anh/Chị";
                    objProfileDiscipline.GraveNames = "Ông/Bà";
                    objProfileDiscipline.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (objProfileDiscipline.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileDiscipline.ChairmanGraveName1 = "Chị ";
                    objProfileDiscipline.ChairmanGraveNameEN1 = "Ms.";
                    objProfileDiscipline.ChairmanGraveName = "Bà";
                    objProfileDiscipline.ChairmanGraveNameEN = "Mrs.";
                }
                else if (objProfileDiscipline.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileDiscipline.ChairmanGraveName1 = "Anh ";
                    objProfileDiscipline.ChairmanGraveNameEN1 = "Mr.";
                    objProfileDiscipline.ChairmanGraveName = "Ông";
                    objProfileDiscipline.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                objProfileDiscipline.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                objProfileDiscipline.DateNow_Day = DateTime.Now.Day.ToString();
                objProfileDiscipline.DateNow_Month = DateTime.Now.Month.ToString();
                objProfileDiscipline.DateNow_Year = DateTime.Now.Year.ToString();
                if (objProfileDiscipline.DateOfIssuance.HasValue)
                {
                    objProfileDiscipline.DateOfIssuanceFormat = objProfileDiscipline.DateOfIssuance.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateOfViolation.HasValue)
                {
                    objProfileDiscipline.DateOfViolationFormat = objProfileDiscipline.DateOfViolation.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateOfEffective.HasValue)
                {
                    objProfileDiscipline.DateOfEffectiveFormat = objProfileDiscipline.DateOfEffective.Value.ToString("dd/MM/yyyy");
                }
                if (objProfileDiscipline.DateHire.HasValue)
                {
                    objProfileDiscipline.DateHireFormat = objProfileDiscipline.DateHire.Value.ToString("dd/MM/yyyy");
                }
                objProfileDiscipline.DisciplineCount = lstProfileDiscipline.Where(s => s.ProfileID == objProfileDiscipline.ProfileID).Count();
                if (objProfileDiscipline.DateQuit.HasValue)
                {
                    if (objProfileDiscipline.DateHire.HasValue)
                    {
                        objProfileDiscipline.MonthWorking = Math.Floor(objProfileDiscipline.DateQuit.Value.Subtract(objProfileDiscipline.DateHire.Value).TotalDays / 30);
                        if (objProfileDiscipline.MonthWorking.HasValue)
                            objProfileDiscipline.YearWorking = Math.Floor(objProfileDiscipline.MonthWorking.Value / 12);
                        if (objProfileDiscipline.YearWorking > 0)
                        {
                            objProfileDiscipline.MonthWorking = objProfileDiscipline.MonthWorking - (objProfileDiscipline.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (objProfileDiscipline.DateHire.HasValue)
                        objProfileDiscipline.MonthWorking = Math.Floor(DateTime.Now.Subtract(objProfileDiscipline.DateHire.Value).TotalDays / 30);
                    if (objProfileDiscipline.MonthWorking.HasValue)
                        objProfileDiscipline.YearWorking = Math.Floor(objProfileDiscipline.MonthWorking.Value / 12);
                    if (objProfileDiscipline.YearWorking > 0)
                    {
                        objProfileDiscipline.MonthWorking = objProfileDiscipline.MonthWorking - (objProfileDiscipline.YearWorking * 12);
                    }
                }
                if (objProfileDiscipline.DateOfBirth != null)
                {
                    objProfileDiscipline.DateOfBirthFormat = objProfileDiscipline.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }

                //hau.le-88146-20170928
                var lstDisciplinebyProfile = lstDisciplinebyProfileIDs.Where(s => s.ProfileID == objProfileDiscipline.ProfileID && s.DateOfEffective < objProfileDiscipline.DateOfEffective).OrderBy(s => s.DateOfEffective).Take(3).ToList();
                if (lstDisciplinebyProfile.Count > 0)
                {
                    objProfileDiscipline.DateOfViolation1 = lstDisciplinebyProfile[0].DateOfViolation;
                    if (lstManagementAgentName.Count > 0)
                        objProfileDiscipline.ManagementAgentName1 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[0].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[0].ManagementAgentID).FirstOrDefault().ProfileName;
                    if (lstDisciplinebyProfile.Count > 1)
                    {
                        objProfileDiscipline.DateOfViolation2 = lstDisciplinebyProfile[1].DateOfViolation;
                        if (lstManagementAgentName.Count > 1)
                            objProfileDiscipline.ManagementAgentName2 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[1].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[1].ManagementAgentID).FirstOrDefault().ProfileName;
                        if (lstDisciplinebyProfile.Count > 2)
                        {
                            objProfileDiscipline.DateOfViolation3 = lstDisciplinebyProfile[2].DateOfViolation;
                            if (lstManagementAgentName.Count > 2)
                                objProfileDiscipline.ManagementAgentName3 = lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[2].ManagementAgentID).FirstOrDefault() == null ? "" : lstManagementAgentName.Where(m => m.ID == lstDisciplinebyProfile[2].ManagementAgentID).FirstOrDefault().ProfileName;
                        }
                    }
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objProfileDiscipline.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var ilDiscipline = new List<Hre_DisciplineEntity>();
                ilDiscipline.Add(objProfileDiscipline);

                ExportService.ExportWord(outputPath, templatepath, ilDiscipline);
            }
            if (lstProfileDiscipline.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Discipline (Hre_Discipline) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetDisciplineList([DataSourceRequest] DataSourceRequest request, Hre_DisciplineSearchModel model)
        {
            return GetListDataAndReturn<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_DisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Discipline);
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Discipline (Hre_Discipline) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetStopDisciplineList([DataSourceRequest] DataSourceRequest request, Hre_StopDisciplineSearchModel model)
        {
            return GetListDataAndReturn<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_StopDisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopDiscipline);
        }
        //Quyen.Quach 24/10/2017 0088930
        [HttpPost]
        public ActionResult ExportStopDisciplineList([DataSourceRequest] DataSourceRequest request, Hre_StopDisciplineSearchModel model)
        {
            return ExportAllAndReturn<Hre_DisciplineEntity, Hre_DisciplineModel, Hre_StopDisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopDiscipline);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Discipline (Hre_Discipline) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportDisciplineList([DataSourceRequest] DataSourceRequest request, Hre_DisciplineSearchModel model)
        {
            return ExportAllAndReturn<Hre_DisciplineEntity, Hre_DisciplineModel, Hre_DisciplineSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Discipline);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Discipline (Hre_Discipline) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportDisciplineSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_DisciplineEntity, Hre_DisciplineModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_DisciplineByIds);
        }

        /// <summary>
        ///[Tho.Bui] Get Discipline theo profileid
        /// </summary>
        /// <param name="request"></param>
        /// <param name="profileID"></param>
        /// <returns></returns>
        public ActionResult GetListDisciplineProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != Guid.Empty && profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin, LanguageCode);
                var result = actionServices.GetData<Hre_DisciplineViewEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_DisciplineprofileId, ref status);
                if (result != null)
                {
                    return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        public int CountTimeDisByPro(Guid ProfileID)
        {
            int count = 0;
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var result = actionServices.GetData<Hre_DisciplineEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_DisciplineprofileId, ref status).ToList();
            if (result != null)
            {
                count = result.Count();
            }
            return count;
        }

        // Son.Vo - 0057302 - đếm số lần kỷ luật theo profile + thời gian cảnh báo của loại kỷ luật
        [HttpPost]
        public ActionResult CountTimeDisByProAndDisType(Guid? proID, Guid? disciplineID, DateTime? dateOfViolation, DateTime? dateofEffect)
        {
            if (proID != null && disciplineID != null)
            {
                var services = new Hre_DisciplineServices();
                var countDisByPro = services.countDisByProAndDisType(proID.Value, disciplineID.Value, dateOfViolation, dateofEffect);
                return Json(countDisByPro, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return null;
            }
        }

        // Son.Vo - 20161020 - 71596  - tính ngày kết thúc kỷ luật
        [HttpPost]
        public ActionResult GetDateEndOfViolationByDisciplineType(Guid? disciplineID, DateTime? dateofEffect)
        {
            if (disciplineID != null)
            {
                var services = new Hre_DisciplineServices();
                var countDisByPro = services.GetDateEndOfViolationByDisciplineType(disciplineID.Value, dateofEffect);
                return Json(countDisByPro, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region Hre_ProfilePartyUnion
        /// <summary>
        /// [Tho.Bui]: Loat ProfilePartyAndUnion by ProfileID
        /// </summary>
        /// <param name="request"></param>
        /// <param name="profileID"></param>
        /// <returns></returns>
        public Hre_ProfilePartyUnionModel ProfilePartyUnionProfileID(Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(profileID);
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var result = actionServices.GetData<Hre_ProfilePartyUnionEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfilePartyUnionprofileId, ref status);
            var data = result.CopyData<Hre_ProfilePartyUnionModel>();
            if (result != null)
                return data;
            return null;
        }

        public ActionResult GetProfilePartyUnionByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(profileID);
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var result = actionServices.GetData<Hre_ProfilePartyUnionEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfilePartyUnionprofileId, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Tho.Bui] - Lấy danh sách dữ liệu cho ProfilePartyUnion theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetProfilePartyUnionList([DataSourceRequest] DataSourceRequest request, Hre_ProfilePartyUnionSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfilePartyUnionModel, Hre_ProfilePartyUnionEntity, Hre_ProfilePartyUnionSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PartyUnionList);
        }

        /// <summary>
        /// [Tho.Bui] - Xuất dữ liệu đã chọn Hre_ProfilePartyUnion
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportPartyUnionSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfilePartyUnionEntity, Hre_ProfilePartyUnionModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfilePartyUnionByIds);
        }
        /// <summary>
        /// [Tho.Bui] - Xuât danh sách đảng đoàn
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportProfilePartyUnionList([DataSourceRequest] DataSourceRequest request, Hre_ProfilePartyUnionSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfilePartyUnionEntity, Hre_ProfilePartyUnionModel, Hre_ProfilePartyUnionSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PartyUnionList);
        }

        public ActionResult ExportProfilePartyUnionListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfilePartyUnionSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            string CompanyLogo = string.Empty;
            var result = new List<Hre_ProfilePartyUnionModel>();
            #region Create tempate
            #region Header
            var headerInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            var headerInfo2 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            var headerInfo3 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            #endregion

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfilePartyUnionModel(),
                    FileName = "Hre_ProfilePartyUnion",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_ProfilePartyUnionModel, Hre_ProfilePartyUnionEntity, Hre_ProfilePartyUnionSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PartyUnionList, ref status);
            }

            if (!Common.CheckListNullOrEmty(result))
            {
                #region Logo
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }
                }
                #endregion
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportSelectProfilePartyUnionByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfilePartyUnionModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfilePartyUnionModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ProfilePartyUnionModel>(model.strProfilePartyUnionID, ConstantSql.hrm_hr_sp_get_ProfilePartyUnionByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfilePartyUnionModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));

        }

        #endregion

        #region Hre_HDTJob

        public string ValidateCreateHDTJob([DataSourceRequest] DataSourceRequest request, Hre_HDTJobModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_HDTJobModel>(LanguageCode, model, "Hre_HDTJob", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                if (model.HealthStatus == ConstantDisplay.E_FAILED.TranslateString())
                {
                    return ConstantDisplay.HRM_HR_NotEnoughHealthStatus.TranslateString();
                }
                else
                {
                    return null;
                }
            }
        }

        // Son.Vo - theo task 0053377

        [HttpPost]
        public ActionResult GetHDTJobTypeByProfile()
        {
            var baseService = new BaseService();
            string status = string.Empty;
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(UserID));
            objs.Add("E_DEPARTMENT");
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var result = baseService.GetData<Cat_HDTJobTypeEntity>(objs, ConstantSql.cat_sp_get_HDTJobTypeByDeptPro, UserLogin, ref status);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDataByHDTJobTypeID(string HDTJobTypeID)
        {

            string status = string.Empty;
            var _HDTJobTypeID = Guid.Empty;
            if (HDTJobTypeID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(HDTJobTypeID))
            {
                _HDTJobTypeID = Common.ConvertToGuid(HDTJobTypeID);
            }

            var services = new Cat_HDTJobTypeServices();
            ActionService actionService = new ActionService(UserLogin);
            var HDTJobTypeEntity = actionService.GetData<Cat_HDTJobTypeEntity>(_HDTJobTypeID, ConstantSql.hrm_cat_sp_get_HDTJobTypeById, ref status).FirstOrDefault();

            if (HDTJobTypeEntity != null)
            {
                return Json(HDTJobTypeEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult ApproveHDTJobOut(string selectedIds)
        {
            var service = new Hre_HDTJobServices();
            var message = service.ActionApprovedHDTJobOut(selectedIds, Guid.Parse(UserID));
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetHDTJobOutList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobOutSearchModel model)
        {
            return GetListDataAndReturn<Hre_HDTJobModel, Hre_HDTJobEntity, Hre_HDTJobOutSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_HDTJobOut);
        }

        [HttpPost]
        public ActionResult ExportHDTJobOutList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobOutSearchModel model)
        {
            return ExportAllAndReturn<Hre_HDTJobEntity, Hre_HDTJobModel, Hre_HDTJobOutSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_HDTJobOut);
        }

        [HttpPost]
        public ActionResult GetHDTJobWaitingList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobWaitingSearchModel model)
        {
            return GetListDataAndReturn<Hre_HDTJobModel, Hre_HDTJobEntity, Hre_HDTJobWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_HDTJobWaiting);
        }

        [HttpPost]
        public ActionResult ApprovedAllHDTJobWaiting([DataSourceRequest] DataSourceRequest request, Hre_HDTJobSearchModel model)
        {
            return GetListDataAndReturn<Cat_HDTJobTypeModel, Cat_HDTJobTypeEntity, Hre_HDTJobSearchModel>(request, model, ConstantSql.hrm_hr_sp_set_ApprovedAllHDTJob);
        }

        [HttpPost]
        public ActionResult ExportHDTJobWaitingList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobWaitingSearchModel model)
        {
            return ExportAllAndReturn<Hre_HDTJobEntity, Hre_HDTJobModel, Hre_HDTJobWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_HDTJobWaiting);
        }
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho HDTJob (Hre_HDTJob) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetHDTJobList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobListSearchModel model)
        {
            var actionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            List<object> lstObjSearch = new List<object>();
            lstObjSearch.Add(model.ProfileName);
            lstObjSearch.Add(model.CodeEmp);
            lstObjSearch.Add(model.HDTJobTypeID);
            lstObjSearch.Add(model.JobTitleID);
            lstObjSearch.Add(model.PositionID);
            lstObjSearch.Add(model.OrgStructureID);
            lstObjSearch.Add(model.DateFrom);
            lstObjSearch.Add(model.DateTo);
            lstObjSearch.Add(model.Price);
            lstObjSearch.Add(model.StatusSyn);
            lstObjSearch.Add(model.HealthStatus);
            lstObjSearch.Add(model.IsCreateTemplate);
            lstObjSearch.Add(model.ExportId);
            lstObjSearch.Add(model.ExportType);
            lstObjSearch.Add(1);
            lstObjSearch.Add(int.MaxValue - 1);
            var result = actionServices.GetData<Hre_HDTJobEntity>(lstObjSearch, ConstantSql.hrm_hr_sp_get_HDTJobList, ref status);
            if (result.Count > 0)
            {
                var profileServices = new Hre_HDTJobServices();
                var listResult = profileServices.getHDTJobByPriceSearch(result, model.DateFrom, model.DateTo);
                return Json(listResult.ToDataSourceResult(request));
            }
            else
            {
                return null;
            }
        }

        public ActionResult ExportHDTJobListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_HDTJobListSearchModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var actionServices = new ActionService(UserLogin);
            List<object> lstObjSearch = new List<object>();
            lstObjSearch.Add(model.ProfileName);
            lstObjSearch.Add(model.CodeEmp);
            lstObjSearch.Add(model.HDTJobTypeID);
            lstObjSearch.Add(model.JobTitleID);
            lstObjSearch.Add(model.PositionID);
            lstObjSearch.Add(model.OrgStructureID);
            lstObjSearch.Add(model.DateFrom);
            lstObjSearch.Add(model.DateTo);
            lstObjSearch.Add(model.Price);
            lstObjSearch.Add(model.StatusSyn);
            lstObjSearch.Add(model.HealthStatus);
            lstObjSearch.Add(model.IsCreateTemplate);
            lstObjSearch.Add(model.ExportId);
            lstObjSearch.Add(model.ExportType);
            lstObjSearch.Add(1);
            lstObjSearch.Add(int.MaxValue - 1);
            var result = actionServices.GetData<Hre_HDTJobEntity>(lstObjSearch, ConstantSql.hrm_hr_sp_get_HDTJobList, ref status);
            var profileServices = new Hre_ProfileServices();
            var listResult = profileServices.getHDTJobByPrice(result, model.DateFrom, model.DateTo).Translate<Hre_HDTJobModel>();
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_HDTJobModel(),
                    FileName = "Hre_HDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                if (model.DateFrom != null && model.DateTo != null)
                {
                    var fullPath = ExportService.Export(model.ExportId, listResult, listHeaderInfo, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }
                else
                {
                    var fullPath = ExportService.Export(model.ExportId, listResult, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }

            }
            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho HDTJob (Hre_HDTJob) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportHDTJobList([DataSourceRequest] DataSourceRequest request, Hre_HDTJobListSearchModel model)
        {
            return ExportAllAndReturn<Hre_HDTJobEntity, Hre_HDTJobModel, Hre_HDTJobListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_HDTJobList);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của HDTJob (Hre_HDTJob) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportHDTJobSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_HDTJobEntity, Hre_HDTJobModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_HDTJobByIds);
        }

        [HttpPost]
        public ActionResult GetHDTJobByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var result = actionServices.GetData<Hre_HDTJobViewEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_HDTJobsByProfileId, ref status).ToList();
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetHDTJobDataByProfileID(Guid ProfileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Hre_HDTJobEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_HDTJobsByProfileId, ref status).OrderByDescending(s => s.DateFrom).FirstOrDefault();
            if (result != null)
            {
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult ApprovedHDTJob(string selectedIds)
        {
            var service = new Hre_HDTJobServices();
            var message = service.ActionApproved(selectedIds);
            return Json(message);
        }

        [HttpPost]
        public ActionResult CheckDataHDTJobIn(string selectedIds)
        {
            var service = new Hre_HDTJobServices();
            int countInvalid = service.CheckDataHDTJobIn(selectedIds, Guid.Parse(UserID));
            return Json(countInvalid);
        }

        [HttpPost]
        public ActionResult CheckDataHDTJobOut(string selectedIds)
        {
            var service = new Hre_HDTJobServices();
            int countInvalid = service.CheckDataHDTJobOut(selectedIds, Guid.Parse(UserID));
            return Json(countInvalid);
        }

        [HttpPost]
        public ActionResult ApprovedHDTJobWaiting(string selectedIds)
        {
            var arrParam = selectedIds.Split('|').ToList();
            var userLG = arrParam[0] ?? string.Empty;
            var Ids = arrParam[1];
            var service = new Hre_HDTJobServices();
            var message = service.ActionApprovedForHDTJobWaiting(Ids, userLG);
            return Json(message);
        }

        [HttpPost]
        public ActionResult ApprovedHDTJobOut(string selectedIds)
        {
            var arrParam = selectedIds.Split('|').ToList();
            var userLG = arrParam[0] ?? string.Empty;
            var Ids = arrParam[1];
            var service = new Hre_HDTJobServices();
            var message = service.ActionApprovedForHDTJobWaiting(Ids, userLG);
            return Json(message);
        }

        // Hủy cv nặng nhọc
        [HttpPost]
        public ActionResult ActionCancelHDT(string selectedIds)
        {
            var service = new Hre_HDTJobServices();
            var message = service.ActionCancel(selectedIds);
            return Json(message);
        }

        #endregion

        #region Hre_Relatives
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Relatives (Hre_Relatives) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetRelativesList([DataSourceRequest] DataSourceRequest request, Hre_RelativesSearchModel model)
        {
            return GetListDataAndReturn<Hre_RelativesModel, Hre_RelativesEntity, Hre_RelativesSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Relatives);
        }

        [HttpPost]
        public ActionResult ExportRelativesListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RelativesSearchModel model)
        {

            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_RelativesModel();
            var actionServices = new ActionService(UserLogin);
            var result = GetListData<Hre_RelativesModel, Hre_RelativesEntity, Hre_RelativesSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Relatives, ref status);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_RelativesModel",
                    OutPutPath = path,
                    // HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {

                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));


            //return GetListDataAndReturn<Hre_RelativesModel, Hre_RelativesEntity, Hre_RelativesSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Relatives);
        }


        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Relatives (Hre_Relatives) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportRelativesList([DataSourceRequest] DataSourceRequest request, Hre_RelativesSearchModel model)
        {
            return ExportAllAndReturn<Hre_RelativesEntity, Hre_RelativesModel, Hre_RelativesSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Relatives);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Relatives (Hre_Relatives) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportRelativesSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_RelativesEntity, Hre_RelativesModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_RelativesByIds);
        }
        #endregion

        #region Hre_Reward
        public ActionResult ExportSelectedRewardByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RewardSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_RewardModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            //Quyen.Quach 24/11/2017 0090208
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var result = baseService.GetData<Hre_RewardModel>(model.strRewardID, ConstantSql.hrm_hr_sp_get_RewardByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_RewardModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        //Son.Vo - 20160908 - 0073121: Thêm cấu hình "Cảnh Báo Nhân Viên Đang Trong Thời Gian Xử Lý Kỷ Luật"
        public string ValidateCreateReward([Bind]Hre_RewardModel model)
        {
            var hrService = new Hre_ProfileServices();
            var _RewardServices = new Hre_RewardServices();
            string status = string.Empty;
            if (model.ID != Guid.Empty)
            {
                model.ProfileIDs = model.ProfileID.ToString();
            }

            if (!string.IsNullOrEmpty(model.OrgStructureIDs))
            {
                var listGuid = new List<Guid>();
                if (model.ProfileIDsExclude != null)
                {
                    var listStr = model.ProfileIDsExclude.Split(',');

                    if (listStr[0] != "")
                    {
                        foreach (var item in listStr)
                        {
                            listGuid.Add(Guid.Parse(item));
                        }
                    }
                }
                List<object> listObj = new List<object>();
                listObj.Add(model.OrgStructureIDs);
                listObj.Add(string.Empty);
                listObj.Add(string.Empty);
                var lstProfileID = hrService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgStructure, UserLogin, ref status).Select(s => s.ID).ToList();
                if (listGuid != null)
                {
                    lstProfileID = lstProfileID.Where(s => !listGuid.Contains(s)).ToList();
                }
                if (lstProfileID.Count == 0 && model.ProfileID == Guid.Empty)
                {
                    return ConstantDisplay.HRM_Common_NotEmployee.TranslateString();
                }
                model.ProfileID = lstProfileID.FirstOrDefault();
                string messageValidate = string.Empty;
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_RewardModel>(LanguageCode, model, "Hre_Reward", ref messageValidate);
                if (!checkValidate)
                {
                    return messageValidate;
                }
                #region Son.Vo - 20160907 - 0073121: Thêm cấu hình "Cảnh Báo Nhân Viên Đang Trong Thời Gian Xử Lý Kỷ Luật"
                if (model.DateOfEffective != null)
                {
                    bool IsAlerts = _RewardServices.ValidateDisciplineReward(lstProfileID, model.DateOfEffective.Value);
                    if (IsAlerts == true)
                    {
                        return ConstantDisplay.HRM_HR_ProfileInDisciplineTime.ToString();
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
                #endregion
            }
            if (model.ProfileIDs != null && model.ProfileIDs != string.Empty && model.ProfileID == Guid.Empty)
            {
                var listStr = model.ProfileIDs.Split(',');
                var listGuid = new List<Guid>();
                if (listStr[0] != "")
                {
                    foreach (var item in listStr)
                    {
                        listGuid.Add(Guid.Parse(item));
                    }
                }
                else
                {
                    return ConstantDisplay.HRM_Common_NotEmployee.TranslateString();
                }
                model.ProfileID = listGuid.FirstOrDefault();
                string messageValidate = string.Empty;
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_RewardModel>(LanguageCode, model, "Hre_Reward", ref messageValidate);
                #region Son.Vo - 20160907 - 0073121: Thêm cấu hình "Cảnh Báo Nhân Viên Đang Trong Thời Gian Xử Lý Kỷ Luật"
                if (model.DateOfEffective != null && model.ActionStatus != "1")
                {
                    bool IsAlerts = _RewardServices.ValidateDisciplineReward(listGuid, model.DateOfEffective.Value);
                    if (IsAlerts == true)
                    {
                        return ConstantDisplay.HRM_HR_ProfileInDisciplineTime.ToString();
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// [Tho.Bui]:Export Reward word templete
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        /// 
        public ActionResult ExporProfileRewardTemplate(List<Guid> selectedIds, string valueFields)
        {
            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var baseservice = new BaseService();
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            //var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            //objs.Add(strIDs);   
            //Nguyen.Le -11/03/2017 - 0089210
            var lstProfileReward = baseservice.GetData<Hre_RewardEntity>(strIDs, ConstantSql.hrm_hr_sp_get_RewardByIds, UserLogin, ref status);
            if (lstProfileReward == null)
                return null;
            int i = 0;

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "Reward" + suffix;
            if (lstProfileReward.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var objProfileReward in lstProfileReward)
            {
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);

                template = _ActionService.GetData<Cat_ExportEntity>(lstObjExport, ConstantSql.hrm_cat_sp_get_ExportWord, ref status).Where(s => s.ScreenName == valueFields).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (objProfileReward.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileReward.GraveName = "Ms.";
                    objProfileReward.NameByGerder = "Chị ";
                    objProfileReward.GraveNames = "Bà";
                    objProfileReward.GraveNameEN = "Mrs.";

                }
                else if (objProfileReward.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileReward.GraveName = "Mr.";
                    objProfileReward.NameByGerder = "Anh ";
                    objProfileReward.GraveNames = "Ông";
                    objProfileReward.GraveNameEN = "Mr.";
                }
                else if (objProfileReward.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    objProfileReward.GraveName = "Mr/Mrs ";
                    objProfileReward.NameByGerder = "Anh/Chị";
                    objProfileReward.GraveNames = "Ông/Bà";
                    objProfileReward.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (objProfileReward.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    objProfileReward.ChairmanGraveName1 = "Chị ";
                    objProfileReward.ChairmanGraveNameEN1 = "Ms.";
                    objProfileReward.ChairmanGraveName = "Bà";
                    objProfileReward.ChairmanGraveNameEN = "Mrs.";
                }
                else if (objProfileReward.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    objProfileReward.ChairmanGraveName1 = "Anh ";
                    objProfileReward.ChairmanGraveNameEN1 = "Mr.";
                    objProfileReward.ChairmanGraveName = "Ông";
                    objProfileReward.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, objProfileReward.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var ilReward = new List<Hre_RewardEntity>();
                ilReward.Add(objProfileReward);
                ExportService.ExportWord(outputPath, templatepath, ilReward);
            }
            if (lstProfileReward.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult Hre_RewardApprove(string Ids)
        {
            if (!string.IsNullOrEmpty(Ids))
            {
                var _ser = new Hre_RewardServices();
                var str = _ser.Hre_RewardApprove(Ids);
                return Json(str);
            }
            return Json(null);
        }
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Reward (Hre_Reward) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetRewardList([DataSourceRequest] DataSourceRequest request, Hre_RewardSearchModel model)
        {
            return GetListDataAndReturn<Hre_RewardModel, Hre_RewardEntity, Hre_RewardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Reward);
        }

        [HttpPost]
        public ActionResult GetRewardListApprove([DataSourceRequest] DataSourceRequest request, Hre_RewardSearchModel model)
        {
            return GetListDataAndReturn<Hre_RewardModel, Hre_RewardEntity, Hre_RewardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Reward_approve);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Reward (Hre_Reward) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportRewardList([DataSourceRequest] DataSourceRequest request, Hre_RewardSearchModel model)
        {
            return ExportAllAndReturn<Hre_RewardEntity, Hre_RewardModel, Hre_RewardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Reward);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Reward (Hre_Reward) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportRewardSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_RewardEntity, Hre_RewardModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_RewardByIds);
        }

        /// <summary>
        /// [tho.Bui] lấy danh sách ReWard theo ProfileID
        /// </summary>
        /// <param name="request"></param>
        /// <param name="profileID"></param>
        /// <returns></returns>
        public ActionResult GetListRewardByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null && profileID != Guid.Empty)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(profileID);
                var result = actionServices.GetData<Hre_RewardViewEntity>(objs, ConstantSql.hrm_hr_sp_get_ReWardByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }
        #endregion

        #region Hre_OrgReward
        [HttpPost]
        public ActionResult GetOrgRewardList([DataSourceRequest] DataSourceRequest request, Hre_OrgRewardSearchModel model)
        {
            return GetListDataAndReturn<Hre_RewardModel, Hre_RewardEntity, Hre_OrgRewardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_OrgReward);
        }


        public ActionResult ExportOrgRewardListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_OrgRewardSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_OrgRewardSearchModel();
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            #region Create tempate
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_OrgRewardModel(),
                    FileName = "Hre_Reward",
                    HeaderInfo = null,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            var result = actionService.GetData<Hre_OrgRewardModel>(lstModel, ConstantSql.hrm_hr_sp_get_OrgReward, ref status);
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Hre_SoftSkill
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho SoftSkill (Hre_SoftSkill) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetSoftSkillList([DataSourceRequest] DataSourceRequest request, Hre_SoftSkillSearchModel model)
        {
            return GetListDataAndReturn<Hre_SoftSkillModel, Hre_SoftSkillEntity, Hre_SoftSkillSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_SoftSkill);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho SoftSkill (Hre_SoftSkill) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportSoftSkillList([DataSourceRequest] DataSourceRequest request, Hre_SoftSkillSearchModel model)
        {
            return ExportAllAndReturn<Hre_SoftSkillEntity, Hre_SoftSkillModel, Hre_SoftSkillSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_SoftSkill);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của SoftSkill (Hre_SoftSkill) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportSoftSkillSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_SoftSkillEntity, Hre_SoftSkillModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_SoftSkillByIds);
        }

        public ActionResult GetSoftSkillByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            if (profileID != Guid.Empty && profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin, LanguageCode);
                var result = actionServices.GetData<Hre_SoftSkillViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_SoftSkillByprofileId, ref status);
                if (result != null)
                {
                    return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        #endregion

        #region Hre_Uniform
        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho Uniform (Hre_Uniform) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetUniformList([DataSourceRequest] DataSourceRequest request, Hre_UniformSearchModel model)
        {
            return GetListDataAndReturn<Hre_UniformModel, Hre_UniformEntity, Hre_UniformSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Uniform);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho Uniform (Hre_Uniform) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportUniformList([DataSourceRequest] DataSourceRequest request, Hre_UniformSearchModel model)
        {
            return ExportAllAndReturn<Hre_UniformEntity, Hre_UniformModel, Hre_UniformSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Uniform);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của Uniform (Hre_Uniform) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportUniformSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_UniformEntity, Hre_UniformModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_UniformByIds);
        }
        #endregion

        #region Hre_WorkHistoryExpired

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho WorkHistory (Hre_WorkHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportWorkHistoryExpiredList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryExpiredSearchModel model)
        {
            return ExportAllAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistoryExpiredSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryExpiredList);
        }

        public ActionResult ExportWorkHistoryExpiredByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryExpiredSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistoryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkHistoryModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_WorkHistoryModel>(lstModel, ConstantSql.hrm_hr_sp_get_WorkHistoryExpiredList, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetDateWorkHistoryExpiredFrom()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWWORKHISTORYEXPIREDFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWWORKHISTORYEXPIREDFROM);
            if (_DAYSHOWWORKHISTORYEXPIREDFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSHOWWORKHISTORYEXPIREDFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateWorkHistoryExpiredTo()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWWORKHISTORYEXPIREDTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWWORKHISTORYEXPIREDTO);
            if (_DAYSHOWWORKHISTORYEXPIREDTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSHOWWORKHISTORYEXPIREDTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetWorkHistoryExpiredList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryExpiredSearchModel model)
        {
            return GetListDataAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistoryExpiredSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryExpiredList);
        }

        #endregion

        #region Hre_WorkHistory
        [HttpPost]
        public ActionResult DeleteWorkhistry(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                List<Guid> lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var service = new Hre_WorkHistoryServices();
                var message = service.DeleteWorkhistory(lstIds);
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult GetUserApproveWorkhistory(string userSubmit, string profileID)
        {
            if (!string.IsNullOrEmpty(userSubmit) || !string.IsNullOrEmpty(profileID))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _ContractServices = new Hre_WorkHistoryServices();
                var entity = _ContractServices.GetHighSuppervisorApproveWorkhistory(profileID, userSubmit, UserID, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }

        // Son.Vo - Lấy thông tin nhân viên show lên giao diện qúa trình công tác - do lấy 1 số thông tin theo chức vụ nên tách ra
        [HttpPost]
        public ActionResult GetDataHeadcountByOrg(string orgID, DateTime? datecheck)
        {
            var profileServices = new Hre_ProfileServices();
            string status = string.Empty;
            var orgstructureidID = Guid.Empty;
            if (string.IsNullOrEmpty(orgID) || orgID.IndexOf(',') > 0 || datecheck == null)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(orgID))
            {
                orgstructureidID = Common.ConvertToGuid(orgID);
            }
            var HeadCountEntity = profileServices.CountHeadCountAndPlanByOrg(orgstructureidID, datecheck.Value);
            if (HeadCountEntity != null)
            {
                return Json(HeadCountEntity, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //Son.Vo - xuất word màn hình ds qtct
        public ActionResult ExportWorkHistoryByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            var exportService = new Cat_ExportServices();
            valueFields = valueFieldsExportID[0];
            //string _exportID = valueFieldsExportID[1];
            Guid exportID;
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;

            if (valueFields.Contains("Index"))
            {
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);
                template = actionService.GetData<Cat_ExportEntity>(lstObjExport, ConstantSql.hrm_cat_sp_get_ExportWord, ref status).Where(s => s.ScreenName == valueFields).FirstOrDefault();
            }
            else
            {
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
                }
            }

            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ExportWorkHistoryByIds, ref status);

            if (lstWorkHistory == null)
                return null;

            #region Lấy Dữ liệu hợp đồng
            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);
            #endregion

            var ProfileServices = new Hre_ProfileServices();
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();

            var lstWorkhistoryIDs = lstWorkHistory.Select(s => s.ID).ToList();

            var ilSSmall = lstWorkHistory.Select(s => new Hre_WorkHistorySuperSmallEntity() { ID = s.ID, ProfileID = s.ProfileID, DateEffective = s.DateEffective }).ToList();
            var ilWorkHistoryNearest = ProfileServices.GetWorkHistoryNearest(ilSSmall);
            if (ilWorkHistoryNearest.HasValue() && ilWorkHistoryNearest.Count > 0)
            {
                var iltemp = ilWorkHistoryNearest.Select(s => s.ID).ToList();
                if (iltemp.HasValue() && iltemp.Count > 0)
                {
                    lstWorkhistoryIDs.AddRange(iltemp);
                }
            }
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);
            var _lstWorkhistorySalary = ProfileServices.GetBasicSalaryBylstWorkHistoryIDs(lstWorkhistoryIDs);
            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistoryByProfile = _WorkHistoryServices.GetWorkHistoryPositionByLstProfileID(lstProfileIDs);
            var _CutOffDurationServices = new Att_CutOffDurationServices();
            var lstCutOffDuration = _CutOffDurationServices.GetListDuration();
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                    workHistory.AppointmentMonth = Common.CalculateMonthDifference(workHistory.DateEffective, workHistory.DateComeBack.Value);
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }
                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.GrossAmount = basicSalaryByProfile.GrossAmount;
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20161229 - 0077326
                var lastWorkHistory = lstWorkHistoryByProfile.Where(s => s.ProfileID == workHistory.ProfileID).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (lastWorkHistory != null)
                {
                    workHistory.PrePositionEngName = lastWorkHistory.PositionEngName;
                    //workHistory.ChairmanNationalityEN = lastWorkHistory.ChairmanNationalityEN;
                }

                //Son.Vo - 20160923 - 0073491
                var lastContractByWorkHis = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateOfEffect).OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractByWorkHis != null)
                {
                    workHistory.DayOfAnnualLeave = lastContractByWorkHis.DayOfAnnualLeave;
                }

                var cutOffByHistory = lstCutOffDuration.Where(s => s.DateStart <= workHistory.DateEffective && workHistory.DateEffective <= s.DateEnd).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (cutOffByHistory != null)
                {
                    workHistory.CutOffDurationName = cutOffByHistory.CutOffDurationName;
                }
                #endregion

                #region Son.Vo - 20170214 - 0078655
                var lastContractbyPro = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateEffective).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lastContractbyPro != null)
                {
                    var lastContractExtendBypro = lstAppdixContract.Where(s => s.ContractID == lastContractbyPro.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContractExtendBypro != null)
                    {
                        workHistory.ContractAllowance1 = lastContractExtendBypro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractExtendBypro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractExtendBypro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractExtendBypro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractExtendBypro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractExtendBypro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractExtendBypro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractExtendBypro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractExtendBypro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractExtendBypro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractExtendBypro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractExtendBypro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractExtendBypro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractExtendBypro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractExtendBypro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractExtendBypro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractExtendBypro.Salary;
                    }
                    else
                    {
                        workHistory.ContractAllowance1 = lastContractbyPro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractbyPro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractbyPro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractbyPro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractbyPro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractbyPro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractbyPro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractbyPro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractbyPro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractbyPro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractbyPro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractbyPro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractbyPro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractbyPro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractbyPro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractbyPro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractbyPro.Salary;
                    }
                }
                #endregion


                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                var workhistorySalary = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == workHistory.ID).FirstOrDefault();
                if (workhistorySalary != null)
                {
                    workHistory.NoteSalary = workhistorySalary.Note;
                    workHistory.PersonalRateSalary = workhistorySalary.PersonalRate;

                    workHistory.GrossAmountBaicSalary = workhistorySalary.E_GrossAmount != null ? workhistorySalary.E_GrossAmount.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary1 = workhistorySalary.E_AllowanceAmount1 != null ? workhistorySalary.E_AllowanceAmount1.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary2 = workhistorySalary.E_AllowanceAmount2 != null ? workhistorySalary.E_AllowanceAmount2.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary3 = workhistorySalary.E_AllowanceAmount3 != null ? workhistorySalary.E_AllowanceAmount3.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary4 = workhistorySalary.E_AllowanceAmount4 != null ? workhistorySalary.E_AllowanceAmount4.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary5 = workhistorySalary.E_AllowanceAmount5 != null ? workhistorySalary.E_AllowanceAmount5.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary6 = workhistorySalary.E_AllowanceAmount6 != null ? workhistorySalary.E_AllowanceAmount6.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary7 = workhistorySalary.E_AllowanceAmount7 != null ? workhistorySalary.E_AllowanceAmount7.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary8 = workhistorySalary.E_AllowanceAmount8 != null ? workhistorySalary.E_AllowanceAmount8.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary9 = workhistorySalary.E_AllowanceAmount9 != null ? workhistorySalary.E_AllowanceAmount9.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary10 = workhistorySalary.E_AllowanceAmount10 != null ? workhistorySalary.E_AllowanceAmount10.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary11 = workhistorySalary.E_AllowanceAmount11 != null ? workhistorySalary.E_AllowanceAmount11.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary12 = workhistorySalary.E_AllowanceAmount12 != null ? workhistorySalary.E_AllowanceAmount12.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary13 = workhistorySalary.E_AllowanceAmount13 != null ? workhistorySalary.E_AllowanceAmount13.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary14 = workhistorySalary.E_AllowanceAmount14 != null ? workhistorySalary.E_AllowanceAmount14.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary15 = workhistorySalary.E_AllowanceAmount15 != null ? workhistorySalary.E_AllowanceAmount15.DecryptValue() : null;

                }
                #endregion

                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                //Quyen.Quach 09/11/2017 0089715  Xóa logic cũ
                #endregion

                //Quyen.Quach 09/11/2017 0089715  Điều chỉnh enum xuất lương gần nhất
                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null && basicSalaryNearest.E_GrossAmount != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = basicSalaryNearest.E_GrossAmount != null ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }

                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }
                //Quyen.Quach 08/12/2017 0090941
                if (workHistory.DateEffective != null && workHistory.DateComeBack != null)
                {
                    workHistory.AppointmentMonthVer2 = (int)(Math.Round((double)(workHistory.DateComeBack.Value.Subtract(workHistory.DateEffective).Days / (365.25 / 12))));
                }
                var WorkHistoryNearest = ilWorkHistoryNearest.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (WorkHistoryNearest != null)
                {
                    //Quyen.Quach 27/01/2018 0092792
                    workHistory.LastAbilityTitleVNI = WorkHistoryNearest.AbilityTitleVNI;
                    workHistory.LastAbilityTitleEng = WorkHistoryNearest.AbilityTitleEng;
                }
                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWorkHistoryByTypeOfTransfer(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            var exportService = new Cat_ExportServices();
            valueFields = valueFieldsExportID[0];
            //string _exportID = valueFieldsExportID[1];
            Guid exportID;
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ExportWorkHistoryByIds, ref status);

            if (lstWorkHistory == null)
                return null;

            #region Lấy Dữ liệu hợp đồng
            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);
            #endregion

            var ProfileServices = new Hre_ProfileServices();
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();

            var lstWorkhistoryIDs = lstWorkHistory.Select(s => s.ID).ToList();

            var ilSSmall = lstWorkHistory.Select(s => new Hre_WorkHistorySuperSmallEntity() { ID = s.ID, ProfileID = s.ProfileID, DateEffective = s.DateEffective }).ToList();
            var ilWorkHistoryNearest = ProfileServices.GetWorkHistoryNearest(ilSSmall);
            if (ilWorkHistoryNearest.HasValue() && ilWorkHistoryNearest.Count > 0)
            {
                var iltemp = ilWorkHistoryNearest.Select(s => s.ID).ToList();
                if (iltemp.HasValue() && iltemp.Count > 0)
                {
                    lstWorkhistoryIDs.AddRange(iltemp);
                }
            }
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);
            var _lstWorkhistorySalary = ProfileServices.GetBasicSalaryBylstWorkHistoryIDs(lstWorkhistoryIDs);
            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistoryByProfile = _WorkHistoryServices.GetWorkHistoryPositionByLstProfileID(lstProfileIDs);
            var _CutOffDurationServices = new Att_CutOffDurationServices();
            var lstCutOffDuration = _CutOffDurationServices.GetListDuration();
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                var template = exportService.GetData<Cat_ExportEntity>(workHistory.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                    workHistory.AppointmentMonth = Common.CalculateMonthDifference(workHistory.DateEffective, workHistory.DateComeBack.Value);
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }
                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.GrossAmount = basicSalaryByProfile.GrossAmount;
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20161229 - 0077326
                var lastWorkHistory = lstWorkHistoryByProfile.Where(s => s.ProfileID == workHistory.ProfileID).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (lastWorkHistory != null)
                {
                    workHistory.PrePositionEngName = lastWorkHistory.PositionEngName;
                    //workHistory.ChairmanNationalityEN = lastWorkHistory.ChairmanNationalityEN;
                }

                //Son.Vo - 20160923 - 0073491
                var lastContractByWorkHis = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateOfEffect).OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractByWorkHis != null)
                {
                    workHistory.DayOfAnnualLeave = lastContractByWorkHis.DayOfAnnualLeave;
                }

                var cutOffByHistory = lstCutOffDuration.Where(s => s.DateStart <= workHistory.DateEffective && workHistory.DateEffective <= s.DateEnd).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (cutOffByHistory != null)
                {
                    workHistory.CutOffDurationName = cutOffByHistory.CutOffDurationName;
                }
                #endregion

                #region Son.Vo - 20170214 - 0078655
                var lastContractbyPro = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateEffective).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lastContractbyPro != null)
                {
                    var lastContractExtendBypro = lstAppdixContract.Where(s => s.ContractID == lastContractbyPro.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContractExtendBypro != null)
                    {
                        workHistory.ContractAllowance1 = lastContractExtendBypro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractExtendBypro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractExtendBypro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractExtendBypro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractExtendBypro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractExtendBypro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractExtendBypro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractExtendBypro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractExtendBypro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractExtendBypro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractExtendBypro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractExtendBypro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractExtendBypro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractExtendBypro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractExtendBypro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractExtendBypro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractExtendBypro.Salary;
                    }
                    else
                    {
                        workHistory.ContractAllowance1 = lastContractbyPro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractbyPro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractbyPro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractbyPro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractbyPro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractbyPro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractbyPro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractbyPro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractbyPro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractbyPro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractbyPro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractbyPro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractbyPro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractbyPro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractbyPro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractbyPro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractbyPro.Salary;
                    }
                }
                #endregion


                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                var workhistorySalary = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == workHistory.ID).FirstOrDefault();
                if (workhistorySalary != null)
                {
                    workHistory.NoteSalary = workhistorySalary.Note;
                    workHistory.PersonalRateSalary = workhistorySalary.PersonalRate;

                    workHistory.GrossAmountBaicSalary = workhistorySalary.E_GrossAmount != null ? workhistorySalary.E_GrossAmount.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary1 = workhistorySalary.E_AllowanceAmount1 != null ? workhistorySalary.E_AllowanceAmount1.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary2 = workhistorySalary.E_AllowanceAmount2 != null ? workhistorySalary.E_AllowanceAmount2.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary3 = workhistorySalary.E_AllowanceAmount3 != null ? workhistorySalary.E_AllowanceAmount3.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary4 = workhistorySalary.E_AllowanceAmount4 != null ? workhistorySalary.E_AllowanceAmount4.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary5 = workhistorySalary.E_AllowanceAmount5 != null ? workhistorySalary.E_AllowanceAmount5.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary6 = workhistorySalary.E_AllowanceAmount6 != null ? workhistorySalary.E_AllowanceAmount6.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary7 = workhistorySalary.E_AllowanceAmount7 != null ? workhistorySalary.E_AllowanceAmount7.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary8 = workhistorySalary.E_AllowanceAmount8 != null ? workhistorySalary.E_AllowanceAmount8.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary9 = workhistorySalary.E_AllowanceAmount9 != null ? workhistorySalary.E_AllowanceAmount9.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary10 = workhistorySalary.E_AllowanceAmount10 != null ? workhistorySalary.E_AllowanceAmount10.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary11 = workhistorySalary.E_AllowanceAmount11 != null ? workhistorySalary.E_AllowanceAmount11.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary12 = workhistorySalary.E_AllowanceAmount12 != null ? workhistorySalary.E_AllowanceAmount12.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary13 = workhistorySalary.E_AllowanceAmount13 != null ? workhistorySalary.E_AllowanceAmount13.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary14 = workhistorySalary.E_AllowanceAmount14 != null ? workhistorySalary.E_AllowanceAmount14.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary15 = workhistorySalary.E_AllowanceAmount15 != null ? workhistorySalary.E_AllowanceAmount15.DecryptValue() : null;

                }
                #endregion

                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                //Quyen.Quach 09/11/2017 0089715  Xóa logic cũ
                #endregion

                //Quyen.Quach 09/11/2017 0089715  Điều chỉnh enum xuất lương gần nhất
                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null && basicSalaryNearest.E_GrossAmount != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = basicSalaryNearest.E_GrossAmount != null ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }

                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }
                //Quyen.Quach 08/12/2017 0090941
                if (workHistory.DateEffective != null && workHistory.DateComeBack != null)
                {
                    workHistory.AppointmentMonthVer2 = (int)(Math.Round((double)(workHistory.DateComeBack.Value.Subtract(workHistory.DateEffective).Days / (365.25 / 12))));
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWorkHistoryAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {

            var actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            var exportService = new Cat_ExportServices();
            if (model.ExportId != null)
            {
                template = exportService.GetData<Cat_ExportEntity>(model.ExportId, ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = int.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(lstModel, ConstantSql.hrm_hr_sp_get_WorkHistoryList, ref status);

            if (lstWorkHistory == null)
                return null;

            #region Lấy Dữ liệu hợp đồng
            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);
            #endregion

            var ProfileServices = new Hre_ProfileServices();
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();
            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistoryByProfile = _WorkHistoryServices.GetWorkHistoryPositionByLstProfileID(lstProfileIDs);
            var _CutOffDurationServices = new Att_CutOffDurationServices();
            var lstCutOffDuration = _CutOffDurationServices.GetListDuration();
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);

            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.GrossAmount = basicSalaryByProfile.GrossAmount;
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20161229 - 0077326
                var lastWorkHistory = lstWorkHistoryByProfile.Where(s => s.ProfileID == workHistory.ProfileID).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (lastWorkHistory != null)
                {
                    workHistory.PrePositionEngName = lastWorkHistory.PositionEngName;
                }

                //Son.Vo - 20160923 - 0073491
                var lastContractByWorkHis = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateOfEffect).OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractByWorkHis != null)
                {
                    workHistory.DayOfAnnualLeave = lastContractByWorkHis.DayOfAnnualLeave;
                }

                var cutOffByHistory = lstCutOffDuration.Where(s => s.DateStart <= workHistory.DateEffective && workHistory.DateEffective <= s.DateEnd).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (cutOffByHistory != null)
                {
                    workHistory.CutOffDurationName = cutOffByHistory.CutOffDurationName;
                }
                #endregion

                #region Son.Vo - 20170214 - 0078655
                var lastContractbyPro = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateEffective).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lastContractbyPro != null)
                {
                    var lastContractExtendBypro = lstAppdixContract.Where(s => s.ContractID == lastContractbyPro.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContractExtendBypro != null)
                    {
                        workHistory.ContractAllowance1 = lastContractExtendBypro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractExtendBypro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractExtendBypro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractExtendBypro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractExtendBypro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractExtendBypro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractExtendBypro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractExtendBypro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractExtendBypro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractExtendBypro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractExtendBypro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractExtendBypro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractExtendBypro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractExtendBypro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractExtendBypro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractExtendBypro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractExtendBypro.Salary;
                    }
                    else
                    {
                        workHistory.ContractAllowance1 = lastContractbyPro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractbyPro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractbyPro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractbyPro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractbyPro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractbyPro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractbyPro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractbyPro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractbyPro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractbyPro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractbyPro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractbyPro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractbyPro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractbyPro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractbyPro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractbyPro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractbyPro.Salary;
                    }
                }
                #endregion

                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null && basicSalaryNearest.E_GrossAmount != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = basicSalaryNearest.E_GrossAmount != null ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }

                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWorkHistoryAllByProfileID(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            var exportService = new Cat_ExportServices();
            valueFields = valueFieldsExportID[0];
            //string _exportID = valueFieldsExportID[1];
            Guid exportID;
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;

            if (valueFields.Contains("Index"))
            {
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);
                template = actionService.GetData<Cat_ExportEntity>(lstObjExport, ConstantSql.hrm_cat_sp_get_ExportWord, ref status).Where(s => s.ScreenName == valueFields).FirstOrDefault();
            }
            else
            {
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
                }
            }

            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(Common.DotNetToOracle(selectedIds.FirstOrDefault().ToString()), ConstantSql.hrm_hr_sp_get_WorkHistoryByProfileId, ref status);
            if (lstWorkHistory == null)
                return null;

            #region Lấy Dữ liệu hợp đồng
            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);
            #endregion

            var ProfileServices = new Hre_ProfileServices();
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();

            var lstWorkhistoryIDs = lstWorkHistory.Select(s => s.ID).ToList();

            var ilSSmall = lstWorkHistory.Select(s => new Hre_WorkHistorySuperSmallEntity() { ID = s.ID, ProfileID = s.ProfileID, DateEffective = s.DateEffective }).ToList();
            var ilWorkHistoryNearest = ProfileServices.GetWorkHistoryNearest(ilSSmall);
            if (ilWorkHistoryNearest.HasValue() && ilWorkHistoryNearest.Count > 0)
            {
                var iltemp = ilWorkHistoryNearest.Select(s => s.ID).ToList();
                if (iltemp.HasValue() && iltemp.Count > 0)
                {
                    lstWorkhistoryIDs.AddRange(iltemp);
                }
            }
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);
            var _lstWorkhistorySalary = ProfileServices.GetBasicSalaryBylstWorkHistoryIDs(lstWorkhistoryIDs);
            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _WorkHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkHistoryByProfile = _WorkHistoryServices.GetWorkHistoryPositionByLstProfileID(lstProfileIDs);
            var _CutOffDurationServices = new Att_CutOffDurationServices();
            var lstCutOffDuration = _CutOffDurationServices.GetListDuration();
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var ext = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                    workHistory.AppointmentMonth = Common.CalculateMonthDifference(workHistory.DateEffective, workHistory.DateComeBack.Value);
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }
                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.GrossAmount = basicSalaryByProfile.GrossAmount;
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20161229 - 0077326
                var lastWorkHistory = lstWorkHistoryByProfile.Where(s => s.ProfileID == workHistory.ProfileID).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (lastWorkHistory != null)
                {
                    workHistory.PrePositionEngName = lastWorkHistory.PositionEngName;
                    //workHistory.ChairmanNationalityEN = lastWorkHistory.ChairmanNationalityEN;
                }

                //Son.Vo - 20160923 - 0073491
                var lastContractByWorkHis = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateOfEffect).OrderBy(s => s.DateStart).FirstOrDefault();
                if (lastContractByWorkHis != null)
                {
                    workHistory.DayOfAnnualLeave = lastContractByWorkHis.DayOfAnnualLeave;
                }

                var cutOffByHistory = lstCutOffDuration.Where(s => s.DateStart <= workHistory.DateEffective && workHistory.DateEffective <= s.DateEnd).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (cutOffByHistory != null)
                {
                    workHistory.CutOffDurationName = cutOffByHistory.CutOffDurationName;
                }
                #endregion

                #region Son.Vo - 20170214 - 0078655
                var lastContractbyPro = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.DateStart >= workHistory.DateEffective).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lastContractbyPro != null)
                {
                    var lastContractExtendBypro = lstAppdixContract.Where(s => s.ContractID == lastContractbyPro.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContractExtendBypro != null)
                    {
                        workHistory.ContractAllowance1 = lastContractExtendBypro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractExtendBypro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractExtendBypro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractExtendBypro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractExtendBypro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractExtendBypro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractExtendBypro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractExtendBypro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractExtendBypro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractExtendBypro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractExtendBypro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractExtendBypro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractExtendBypro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractExtendBypro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractExtendBypro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractExtendBypro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractExtendBypro.Salary;
                    }
                    else
                    {
                        workHistory.ContractAllowance1 = lastContractbyPro.Allowance1;
                        workHistory.ContractAllowance2 = lastContractbyPro.Allowance2;
                        workHistory.ContractAllowance3 = lastContractbyPro.Allowance3;
                        workHistory.ContractAllowance4 = lastContractbyPro.Allowance4;
                        workHistory.ContractAllowance5 = lastContractbyPro.Allowance5;
                        workHistory.ContractAllowance6 = lastContractbyPro.Allowance6;
                        workHistory.ContractAllowance7 = lastContractbyPro.Allowance7;
                        workHistory.ContractAllowance8 = lastContractbyPro.Allowance8;
                        workHistory.ContractAllowance9 = lastContractbyPro.Allowance9;
                        workHistory.ContractAllowance10 = lastContractbyPro.Allowance10;
                        workHistory.ContractAllowance11 = lastContractbyPro.Allowance11;
                        workHistory.ContractAllowance12 = lastContractbyPro.Allowance12;
                        workHistory.ContractAllowance13 = lastContractbyPro.Allowance13;
                        workHistory.ContractAllowance14 = lastContractbyPro.Allowance14;
                        workHistory.ContractAllowance15 = lastContractbyPro.Allowance15;
                        workHistory.ContractDayOfAnnualLeave = lastContractbyPro.DayOfAnnualLeave;
                        workHistory.ContractSalary = lastContractbyPro.Salary;
                    }
                }
                #endregion


                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                var workhistorySalary = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == workHistory.ID).FirstOrDefault();
                if (workhistorySalary != null)
                {
                    workHistory.NoteSalary = workhistorySalary.Note;
                    workHistory.PersonalRateSalary = workhistorySalary.PersonalRate;

                    workHistory.GrossAmountBaicSalary = workhistorySalary.E_GrossAmount != null ? workhistorySalary.E_GrossAmount.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary1 = workhistorySalary.E_AllowanceAmount1 != null ? workhistorySalary.E_AllowanceAmount1.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary2 = workhistorySalary.E_AllowanceAmount2 != null ? workhistorySalary.E_AllowanceAmount2.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary3 = workhistorySalary.E_AllowanceAmount3 != null ? workhistorySalary.E_AllowanceAmount3.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary4 = workhistorySalary.E_AllowanceAmount4 != null ? workhistorySalary.E_AllowanceAmount4.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary5 = workhistorySalary.E_AllowanceAmount5 != null ? workhistorySalary.E_AllowanceAmount5.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary6 = workhistorySalary.E_AllowanceAmount6 != null ? workhistorySalary.E_AllowanceAmount6.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary7 = workhistorySalary.E_AllowanceAmount7 != null ? workhistorySalary.E_AllowanceAmount7.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary8 = workhistorySalary.E_AllowanceAmount8 != null ? workhistorySalary.E_AllowanceAmount8.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary9 = workhistorySalary.E_AllowanceAmount9 != null ? workhistorySalary.E_AllowanceAmount9.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary10 = workhistorySalary.E_AllowanceAmount10 != null ? workhistorySalary.E_AllowanceAmount10.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary11 = workhistorySalary.E_AllowanceAmount11 != null ? workhistorySalary.E_AllowanceAmount11.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary12 = workhistorySalary.E_AllowanceAmount12 != null ? workhistorySalary.E_AllowanceAmount12.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary13 = workhistorySalary.E_AllowanceAmount13 != null ? workhistorySalary.E_AllowanceAmount13.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary14 = workhistorySalary.E_AllowanceAmount14 != null ? workhistorySalary.E_AllowanceAmount14.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary15 = workhistorySalary.E_AllowanceAmount15 != null ? workhistorySalary.E_AllowanceAmount15.DecryptValue() : null;

                }
                #endregion

                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                //Quyen.Quach 09/11/2017 0089715  Xóa logic cũ
                #endregion

                //Quyen.Quach 09/11/2017 0089715  Điều chỉnh enum xuất lương gần nhất                
                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null && basicSalaryNearest.E_GrossAmount != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = basicSalaryNearest.E_GrossAmount != null ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }
                var WorkHistoryNearest = ilWorkHistoryNearest.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (WorkHistoryNearest != null)
                {
                    //Quyen.Quach 27/01/2018 0092792
                    workHistory.LastAbilityTitleVNI = WorkHistoryNearest.AbilityTitleVNI;
                    workHistory.LastAbilityTitleEng = WorkHistoryNearest.AbilityTitleEng;
                }
                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }

                return Json(fileZip);
            }
            return Json(fileDoc);
        }


        //Son.Vo - xuất word màn hình ds quá trình điều động - tăng lương
        public ActionResult ExportWorkHistorySalaryByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            var exportService = new Cat_ExportServices();

            if (!string.IsNullOrEmpty(valueFields))
            {
                template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ExportWorkHistoryByIds, ref status);
            if (lstWorkHistory == null)
                return null;
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();

            var lstWorkhistoryIDs = lstWorkHistory.Select(s => s.ID).ToList();
            var ilSSmall = lstWorkHistory.Select(s => new Hre_WorkHistorySuperSmallEntity() { ID = s.ID, ProfileID = s.ProfileID, DateEffective = s.DateEffective }).ToList();


            #region Lấy thêm dữ liệu khác
            var ProfileServices = new Hre_ProfileServices();
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);

            var ilWorkHistoryNearest = ProfileServices.GetWorkHistoryNearest(ilSSmall);
            if (ilWorkHistoryNearest.HasValue() && ilWorkHistoryNearest.Count > 0)
            {
                var iltemp = ilWorkHistoryNearest.Select(s => s.ID).ToList();
                if (iltemp.HasValue() && iltemp.Count > 0)
                {
                    lstWorkhistoryIDs.AddRange(iltemp);
                }
            }


            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);

            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _lstWorkhistorySalary = ProfileServices.GetBasicSalaryBylstWorkHistoryIDs(lstWorkhistoryIDs);
            #endregion
            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                    workHistory.AppointmentMonth = Common.CalculateMonthDifference(workHistory.DateEffective, workHistory.DateComeBack.Value);
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }
                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs. ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20160827 - lấy enum note của lương cb quá trình điều động - tăng lương
                var workhistorySalary = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == workHistory.ID).FirstOrDefault();
                if (workhistorySalary != null)
                {
                    workHistory.NoteSalary = workhistorySalary.Note;
                    workHistory.PersonalRateSalary = workhistorySalary.PersonalRate;

                    workHistory.GrossAmountBaicSalary = workhistorySalary.E_GrossAmount != null ? workhistorySalary.E_GrossAmount.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary1 = workhistorySalary.E_AllowanceAmount1 != null ? workhistorySalary.E_AllowanceAmount1.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary2 = workhistorySalary.E_AllowanceAmount2 != null ? workhistorySalary.E_AllowanceAmount2.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary3 = workhistorySalary.E_AllowanceAmount3 != null ? workhistorySalary.E_AllowanceAmount3.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary4 = workhistorySalary.E_AllowanceAmount4 != null ? workhistorySalary.E_AllowanceAmount4.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary5 = workhistorySalary.E_AllowanceAmount5 != null ? workhistorySalary.E_AllowanceAmount5.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary6 = workhistorySalary.E_AllowanceAmount6 != null ? workhistorySalary.E_AllowanceAmount6.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary7 = workhistorySalary.E_AllowanceAmount7 != null ? workhistorySalary.E_AllowanceAmount7.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary8 = workhistorySalary.E_AllowanceAmount8 != null ? workhistorySalary.E_AllowanceAmount8.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary9 = workhistorySalary.E_AllowanceAmount9 != null ? workhistorySalary.E_AllowanceAmount9.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary10 = workhistorySalary.E_AllowanceAmount10 != null ? workhistorySalary.E_AllowanceAmount10.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary11 = workhistorySalary.E_AllowanceAmount11 != null ? workhistorySalary.E_AllowanceAmount11.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary12 = workhistorySalary.E_AllowanceAmount12 != null ? workhistorySalary.E_AllowanceAmount12.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary13 = workhistorySalary.E_AllowanceAmount13 != null ? workhistorySalary.E_AllowanceAmount13.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary14 = workhistorySalary.E_AllowanceAmount14 != null ? workhistorySalary.E_AllowanceAmount14.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary15 = workhistorySalary.E_AllowanceAmount15 != null ? workhistorySalary.E_AllowanceAmount15.DecryptValue() : null;

                }
                #endregion
                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                //Quyen.Quach 09/11/2017 0089715  Điều chỉnh enum xuất lương gần nhất
                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                double? totalSalaryNear = 0;
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = !string.IsNullOrEmpty(basicSalaryNearest.E_GrossAmount) ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    totalSalaryNear += !string.IsNullOrEmpty(basicSalaryNearest.E_GrossAmount) ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }
                var WorkHistoryNearest = ilWorkHistoryNearest.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (WorkHistoryNearest != null)
                {
                    //Quyen.Quach 27/01/2018 0092792
                    workHistory.LastAbilityTitleVNI = WorkHistoryNearest.AbilityTitleVNI;
                    workHistory.LastAbilityTitleEng = WorkHistoryNearest.AbilityTitleEng;
                    //Quyen.Quach 13/10/2017 088670 
                    workHistory.ProfileJobTitleNameNear = WorkHistoryNearest.JobTitleName;
                    var workhistorySalaryNearest = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == WorkHistoryNearest.ID).FirstOrDefault();
                    if (workhistorySalaryNearest != null)
                    {
                        workHistory.WorkhistorySalaryClassNameNear = workhistorySalaryNearest.SalaryClassName;
                        #region  Lấy tổng 15 phu cap
                        if (workhistorySalaryNearest.E_AllowanceAmount1 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount1 != null ? workhistorySalaryNearest.E_AllowanceAmount1.DecryptValue() : null;
                            workHistory.AllowanceAmountSalary1Near = workhistorySalaryNearest.E_AllowanceAmount1 != null ? workhistorySalaryNearest.E_AllowanceAmount1.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount2 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount2 != null ? workhistorySalaryNearest.E_AllowanceAmount2.DecryptValue() : null;
                            workHistory.AllowanceAmountSalary2Near = workhistorySalaryNearest.E_AllowanceAmount2 != null ? workhistorySalaryNearest.E_AllowanceAmount2.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount3 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount3.DecryptValue();
                            workHistory.AllowanceAmountSalary3Near = workhistorySalaryNearest.E_AllowanceAmount3 != null ? workhistorySalaryNearest.E_AllowanceAmount3.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount4 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount4.DecryptValue(); ;
                            workHistory.AllowanceAmountSalary4Near = workhistorySalaryNearest.E_AllowanceAmount4 != null ? workhistorySalaryNearest.E_AllowanceAmount4.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount5 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount5.DecryptValue();
                            workHistory.AllowanceAmountSalary5Near = workhistorySalaryNearest.E_AllowanceAmount5 != null ? workhistorySalaryNearest.E_AllowanceAmount5.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount6 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount6.DecryptValue();
                            workHistory.AllowanceAmountSalary6Near = workhistorySalaryNearest.E_AllowanceAmount6 != null ? workhistorySalaryNearest.E_AllowanceAmount6.DecryptValue() : null; ;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount7 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount7.DecryptValue();
                            workHistory.AllowanceAmountSalary7Near = workhistorySalaryNearest.E_AllowanceAmount7 != null ? workhistorySalaryNearest.E_AllowanceAmount7.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount8 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount8.DecryptValue();
                            workHistory.AllowanceAmountSalary8Near = workhistorySalaryNearest.E_AllowanceAmount8 != null ? workhistorySalaryNearest.E_AllowanceAmount8.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount9 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount9.DecryptValue();
                            workHistory.AllowanceAmountSalary9Near = workhistorySalaryNearest.E_AllowanceAmount9 != null ? workhistorySalaryNearest.E_AllowanceAmount9.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount10 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount10.DecryptValue();
                            workHistory.AllowanceAmountSalary10Near = workhistorySalaryNearest.E_AllowanceAmount10 != null ? workhistorySalaryNearest.E_AllowanceAmount10.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount11 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount11.DecryptValue();
                            workHistory.AllowanceAmountSalary11Near = workhistorySalaryNearest.E_AllowanceAmount11 != null ? workhistorySalaryNearest.E_AllowanceAmount11.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount12 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount12.DecryptValue();
                            workHistory.AllowanceAmountSalary12Near = workhistorySalaryNearest.E_AllowanceAmount12 != null ? workhistorySalaryNearest.E_AllowanceAmount12.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount13 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount13.DecryptValue();
                            workHistory.AllowanceAmountSalary13Near = workhistorySalaryNearest.E_AllowanceAmount13 != null ? workhistorySalaryNearest.E_AllowanceAmount13.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.AllowanceAmount14 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount14.DecryptValue();
                            workHistory.AllowanceAmountSalary14Near = workhistorySalaryNearest.E_AllowanceAmount14 != null ? workhistorySalaryNearest.E_AllowanceAmount14.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.AllowanceAmount15 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount15.DecryptValue();
                            workHistory.AllowanceAmountSalary15Near = workhistorySalaryNearest.E_AllowanceAmount15 != null ? workhistorySalaryNearest.E_AllowanceAmount15.DecryptValue() : null;
                        }
                        #endregion
                    }
                }
                workHistory.TotalSalaryNear = totalSalaryNear;
                #endregion

                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }
                //Quyen.Quach 08/12/2017 0090941
                if (workHistory.DateEffective != null && workHistory.DateComeBack != null)
                {
                    workHistory.AppointmentMonthVer2 = (int)(Math.Round((double)(workHistory.DateComeBack.Value.Subtract(workHistory.DateEffective).Days / (365.25 / 12))));
                }
                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWorkHistorySalaryByTypeOfTransfer(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;


            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstWorkHistory = _ActionService.GetData<Hre_WorkHistoryEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ExportWorkHistoryByIds, ref status);
            if (lstWorkHistory == null)
                return null;
            var lstCompanyID = lstWorkHistory.Where(s => s.CompanyID != null).Select(s => s.CompanyID.Value).Distinct().ToList();

            var lstWorkhistoryIDs = lstWorkHistory.Select(s => s.ID).ToList();
            var ilSSmall = lstWorkHistory.Select(s => new Hre_WorkHistorySuperSmallEntity() { ID = s.ID, ProfileID = s.ProfileID, DateEffective = s.DateEffective }).ToList();


            #region Lấy thêm dữ liệu khác
            var ProfileServices = new Hre_ProfileServices();
            var _lstdelegateCompany = ProfileServices.GetlstDelegateCompany(lstCompanyID);

            var ilWorkHistoryNearest = ProfileServices.GetWorkHistoryNearest(ilSSmall);
            if (ilWorkHistoryNearest.HasValue() && ilWorkHistoryNearest.Count > 0)
            {
                var iltemp = ilWorkHistoryNearest.Select(s => s.ID).ToList();
                if (iltemp.HasValue() && iltemp.Count > 0)
                {
                    lstWorkhistoryIDs.AddRange(iltemp);
                }
            }


            var _ContractServices = new Hre_ContractServices();
            var lstProfileIDs = lstWorkHistory.Select(s => s.ProfileID).Distinct().ToList();
            var lstContract = _ContractServices.GetLstContractByProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppdixContract = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);

            var _lstQualification = ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var _lstbasicSalary = ProfileServices.GetBasicSalaryBylstProIDs(lstProfileIDs);
            var _lstWorkhistorySalary = ProfileServices.GetBasicSalaryBylstWorkHistoryIDs(lstWorkhistoryIDs);
            #endregion
            int i = 0;

            var fileDoc = string.Empty;
            var exportService = new Cat_ExportServices();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            foreach (var workHistory in lstWorkHistory)
            {
                var template = exportService.GetData<Cat_ExportEntity>(workHistory.ExportID, ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                if (!Directory.Exists(dirpath))
                    Directory.CreateDirectory(dirpath);

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                i++;
                string outputPath = string.Empty;
                #region Xử lý Datetime
                workHistory.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                workHistory.DateNow_Day = DateTime.Now.Day.ToString();
                workHistory.DateNow_Month = DateTime.Now.Month.ToString();
                workHistory.DateNow_Year = DateTime.Now.Year.ToString();
                workHistory.DateEffectiveFormat = workHistory.DateEffective.ToString("dd/MM/yyyy");

                if (workHistory.DateNotice.HasValue)
                {
                    workHistory.DateNoticeFormat = workHistory.DateNotice.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfEffect.HasValue)
                {
                    workHistory.DateOfEffectFormat = workHistory.DateOfEffect.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.IDDateOfIssue.HasValue)
                {
                    workHistory.IDDateOfIssueFormat = workHistory.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateOfBirth.HasValue)
                {
                    workHistory.DateOfBirthFormat = workHistory.DateOfBirth.Value.ToString("dd/MM/yyyy");
                }
                if (workHistory.DateComeBack.HasValue)
                {
                    workHistory.DateComeBackFormat = workHistory.DateComeBack.Value.ToString("dd/MM/yyyy");
                    workHistory.AppointmentMonth = Common.CalculateMonthDifference(workHistory.DateEffective, workHistory.DateComeBack.Value);
                }
                #endregion

                var qualiquication = _lstQualification.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (qualiquication != null)
                {
                    workHistory.HreProfileQualificationName = qualiquication.QualificationName;
                    workHistory.TrainingPlace = qualiquication.TrainingPlace;
                }

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveName = "Ms.";
                    workHistory.NameByGerder = "Chị ";
                    workHistory.GraveNames = "Bà";
                    workHistory.GraveNameEN = "Mrs.";
                    workHistory.GraveNameVN = "Bà";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveName = "Mr.";
                    workHistory.NameByGerder = "Anh ";
                    workHistory.GraveNames = "Ông";
                    workHistory.GraveNameEN = "Mr.";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveName = "Mr/Mrs ";
                    workHistory.NameByGerder = "Anh/Chị";
                    workHistory.GraveNames = "Ông/Bà";
                    workHistory.GraveNameEN = "Mr/Mrs";
                    workHistory.GraveNameVN = "Khác ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (workHistory.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Chị ";
                    workHistory.ChairmanGraveNameEN1 = "Ms.";
                    workHistory.ChairmanGraveName = "Bà";
                    workHistory.ChairmanGraveNameEN = "Mrs.";
                }
                else if (workHistory.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.ChairmanGraveName1 = "Anh ";
                    workHistory.ChairmanGraveNameEN1 = "Mr.";
                    workHistory.ChairmanGraveName = "Ông";
                    workHistory.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                var catdelegatecompanyid = _lstdelegateCompany.Where(s => s.CompanyID == workHistory.CompanyID && s.IsDefault == true).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                if (catdelegatecompanyid != null)
                {
                    workHistory.DelegateCompanyProfileName = catdelegatecompanyid.DelegateCompanyProfileName;
                    workHistory.CompanyID = catdelegatecompanyid.CompanyID;
                    workHistory.DelegateJobTitle = catdelegatecompanyid.DelegateJobTitle;
                    workHistory.DelegateJobTitleShortName = catdelegatecompanyid.DelegateJobTitleShortName;
                }
                #region Quyen.Quach -23/06/2017- 0084502:Thêm enum lấy danh xưng từ bảng hre_profile
                if (workHistory.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    workHistory.GraveNameEN = "Mr. ";
                    workHistory.GraveNameVN = "Anh ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    workHistory.GraveNameEN = "Ms. ";
                    workHistory.GraveNameVN = "Chị ";
                }
                else if (workHistory.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    workHistory.GraveNameEN = "Mr/Mrs. ";
                    workHistory.GraveNameVN = "Anh/Chị ";
                }
                #endregion

                if (lstContract != null)
                {
                    lstContract = lstContract.OrderByDescending(s => s.DateOfEffect).ToList();
                    foreach (var item in lstContract)
                    {
                        #region lấy mức lương điều chỉnh theo phu lục hợp đông mới nhất.
                        var _AppendixContract = lstAppdixContract.Where(s => s.ContractID == item.ID).OrderByDescending(s => s.DateStart).Take(1).FirstOrDefault();
                        if (_AppendixContract != null)
                        {
                            workHistory.Salary = _AppendixContract.Salary;
                            workHistory.Allowance1 = _AppendixContract.Allowance1;
                            workHistory.Allowance2 = _AppendixContract.Allowance2;
                            workHistory.Allowance3 = _AppendixContract.Allowance3;
                            workHistory.Allowance4 = _AppendixContract.Allowance4;
                        }
                        #endregion
                    }

                    //Son.Vo - 20160923 - 0073491
                    var lastContract = lstContract.Where(s => s.ProfileID == workHistory.ProfileID && s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart <= workHistory.DateOfEffect)
                        .OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (lastContract != null)
                    {
                        workHistory.ContractNo = lastContract.ContractNo;
                    }
                }

                #region Son.Vo - 20160708 - 0070116: Thêm enum xuất word màn hình danh sách quá trình điều động/bổ nhiệm
                var basicSalaryByProfile = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date <= workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    workHistory.SalaryRankName = basicSalaryByProfile.SalaryRankName;
                    workHistory.SalaryStandard = basicSalaryByProfile.SalaryStandard;
                    workHistory.SalaryMax = basicSalaryByProfile.SalaryMax;
                    workHistory.SalaryMin = basicSalaryByProfile.SalaryMin;
                    if (basicSalaryByProfile.SalaryStandard != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryStandardPersonalRate = basicSalaryByProfile.SalaryStandard * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMin != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMinPersonalRate = basicSalaryByProfile.SalaryMin * basicSalaryByProfile.PersonalRate;
                    }
                    if (basicSalaryByProfile.SalaryMax != null && basicSalaryByProfile.PersonalRate != null)
                    {
                        workHistory.SalaryMaxPersonalRate = basicSalaryByProfile.SalaryMax * basicSalaryByProfile.PersonalRate;
                    }

                    #region  Lấy tổng lương
                    double? totalSalary = 0;
                    if (basicSalaryByProfile.GrossAmount != null)
                    {
                        totalSalary += basicSalaryByProfile.GrossAmount.ToDouble();
                    }
                    if (basicSalaryByProfile.AllowanceAmount1 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount1;
                        workHistory.AllowanceAmount1 = basicSalaryByProfile.AllowanceAmount1;
                    }
                    if (basicSalaryByProfile.AllowanceAmount2 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount2;
                        workHistory.AllowanceAmount2 = basicSalaryByProfile.AllowanceAmount2;
                    }
                    if (basicSalaryByProfile.AllowanceAmount3 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount3;
                        workHistory.AllowanceAmount3 = basicSalaryByProfile.AllowanceAmount3;
                    }
                    if (basicSalaryByProfile.AllowanceAmount4 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount4;
                        workHistory.AllowanceAmount4 = basicSalaryByProfile.AllowanceAmount4;
                    }
                    if (basicSalaryByProfile.AllowanceAmount5 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount5;
                        workHistory.AllowanceAmount5 = basicSalaryByProfile.AllowanceAmount5;
                    }
                    if (basicSalaryByProfile.AllowanceAmount6 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount6;
                        workHistory.AllowanceAmount6 = basicSalaryByProfile.AllowanceAmount6;
                    }
                    if (basicSalaryByProfile.AllowanceAmount7 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount7;
                        workHistory.AllowanceAmount7 = basicSalaryByProfile.AllowanceAmount7;
                    }
                    if (basicSalaryByProfile.AllowanceAmount8 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount8;
                        workHistory.AllowanceAmount8 = basicSalaryByProfile.AllowanceAmount8;
                    }
                    if (basicSalaryByProfile.AllowanceAmount9 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount9;
                        workHistory.AllowanceAmount9 = basicSalaryByProfile.AllowanceAmount9;
                    }
                    if (basicSalaryByProfile.AllowanceAmount10 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount10;
                        workHistory.AllowanceAmount10 = basicSalaryByProfile.AllowanceAmount10;
                    }
                    if (basicSalaryByProfile.AllowanceAmount11 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount11;
                        workHistory.AllowanceAmount11 = basicSalaryByProfile.AllowanceAmount11;
                    }
                    if (basicSalaryByProfile.AllowanceAmount12 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount12;
                        workHistory.AllowanceAmount12 = basicSalaryByProfile.AllowanceAmount12;
                    }
                    if (basicSalaryByProfile.AllowanceAmount13 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount13;
                        workHistory.AllowanceAmount13 = basicSalaryByProfile.AllowanceAmount13;
                    }
                    if (basicSalaryByProfile.AllowanceAmount14 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount14;
                        workHistory.AllowanceAmount14 = basicSalaryByProfile.AllowanceAmount14;
                    }
                    if (basicSalaryByProfile.AllowanceAmount15 != null)
                    {
                        totalSalary += basicSalaryByProfile.AllowanceAmount15;
                        workHistory.AllowanceAmount15 = basicSalaryByProfile.AllowanceAmount15;
                    }
                    workHistory.TotalSalary = totalSalary;
                    #endregion

                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp
                    double? totalInsuranceAndAllowance = 0;
                    double? totalAllowanceAmount = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmount += basicSalaryByProfile.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmount = basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowance = totalAllowanceAmount + basicSalaryByProfile.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmount = totalAllowanceAmount;
                    workHistory.TotalInsuranceAndAllowanceAmount = totalInsuranceAndAllowance;
                    #endregion
                }
                #endregion

                #region Son.Vo - 20160827 - lấy enum note của lương cb quá trình điều động - tăng lương
                var workhistorySalary = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == workHistory.ID).FirstOrDefault();
                if (workhistorySalary != null)
                {
                    workHistory.NoteSalary = workhistorySalary.Note;
                    workHistory.PersonalRateSalary = workhistorySalary.PersonalRate;

                    workHistory.GrossAmountBaicSalary = workhistorySalary.E_GrossAmount != null ? workhistorySalary.E_GrossAmount.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary1 = workhistorySalary.E_AllowanceAmount1 != null ? workhistorySalary.E_AllowanceAmount1.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary2 = workhistorySalary.E_AllowanceAmount2 != null ? workhistorySalary.E_AllowanceAmount2.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary3 = workhistorySalary.E_AllowanceAmount3 != null ? workhistorySalary.E_AllowanceAmount3.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary4 = workhistorySalary.E_AllowanceAmount4 != null ? workhistorySalary.E_AllowanceAmount4.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary5 = workhistorySalary.E_AllowanceAmount5 != null ? workhistorySalary.E_AllowanceAmount5.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary6 = workhistorySalary.E_AllowanceAmount6 != null ? workhistorySalary.E_AllowanceAmount6.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary7 = workhistorySalary.E_AllowanceAmount7 != null ? workhistorySalary.E_AllowanceAmount7.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary8 = workhistorySalary.E_AllowanceAmount8 != null ? workhistorySalary.E_AllowanceAmount8.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary9 = workhistorySalary.E_AllowanceAmount9 != null ? workhistorySalary.E_AllowanceAmount9.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary10 = workhistorySalary.E_AllowanceAmount10 != null ? workhistorySalary.E_AllowanceAmount10.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary11 = workhistorySalary.E_AllowanceAmount11 != null ? workhistorySalary.E_AllowanceAmount11.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary12 = workhistorySalary.E_AllowanceAmount12 != null ? workhistorySalary.E_AllowanceAmount12.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary13 = workhistorySalary.E_AllowanceAmount13 != null ? workhistorySalary.E_AllowanceAmount13.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary14 = workhistorySalary.E_AllowanceAmount14 != null ? workhistorySalary.E_AllowanceAmount14.DecryptValue() : null;
                    workHistory.AllowanceAmountSalary15 = workhistorySalary.E_AllowanceAmount15 != null ? workhistorySalary.E_AllowanceAmount15.DecryptValue() : null;

                }
                #endregion
                #region [Anh.Le][16/04/216][84190][Thêm các enum để cấu hình mẫu word]
                //Quyen.Quach 09/11/2017 0089715  Điều chỉnh enum xuất lương gần nhất
                //Nguyen.Le - 04/01/2018 - 0091921 Điều chỉnh enum xuất word lương cơ bản cũ GrossAmountBaicSalaryNearest
                double? totalSalaryNear = 0;
                var basicSalaryNearest = _lstbasicSalary.Where(s => s.ProfileID == workHistory.ProfileID && s.DateOfEffect != null && s.DateOfEffect.Date < workHistory.DateEffective.Date && s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryNearest != null)
                {
                    workHistory.GrossAmountBaicSalaryNearest = !string.IsNullOrEmpty(basicSalaryNearest.E_GrossAmount) ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    totalSalaryNear += !string.IsNullOrEmpty(basicSalaryNearest.E_GrossAmount) ? basicSalaryNearest.E_GrossAmount.DecryptValue() : null;
                    //Nguyen.Le - 04/01/2018 - 0092018 Thêm enum xuất word - tổng tiền bảo hiểm, phụ cấp
                    #region  Lấy tổng lương bảo hiểm và phụ cấp gần nhất
                    double? totalInsuranceAndAllowanceNearest = 0;
                    double? totalAllowanceAmountNearest = 0;

                    if (basicSalaryByProfile.E_AllowanceAmount1 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount1.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount2 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount2.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount3 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount3.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount4 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount4.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount5 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount5.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount6 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount6.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount7 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount7.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount8 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount8.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount9 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount9.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount10 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount10.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount11 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount11.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount12 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount12.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount13 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount13.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount14 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount14.DecryptValue();
                    }
                    if (basicSalaryByProfile.E_AllowanceAmount15 != null)
                    {
                        totalAllowanceAmountNearest += basicSalaryNearest.E_AllowanceAmount15.DecryptValue();
                    }
                    if (basicSalaryNearest.E_InsuranceAmount != null)
                    {
                        workHistory.InsuranceAmountNearest = basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                        totalInsuranceAndAllowanceNearest = totalAllowanceAmountNearest + basicSalaryNearest.E_InsuranceAmount.DecryptValue();
                    }
                    workHistory.TotalAllowanceAmountNearest = totalAllowanceAmountNearest;
                    workHistory.TotalInsuranceAndAllowanceAmountNearest = totalInsuranceAndAllowanceNearest;
                    #endregion
                }
                var WorkHistoryNearest = ilWorkHistoryNearest.Where(s => s.ProfileID == workHistory.ProfileID).FirstOrDefault();
                if (WorkHistoryNearest != null)
                {
                    //Quyen.Quach 27/01/2018 0092792
                    workHistory.LastAbilityTitleVNI = WorkHistoryNearest.AbilityTitleVNI;
                    workHistory.LastAbilityTitleEng = WorkHistoryNearest.AbilityTitleEng;
                    //Quyen.Quach 13/10/2017 088670 
                    workHistory.ProfileJobTitleNameNear = WorkHistoryNearest.JobTitleName;
                    var workhistorySalaryNearest = _lstWorkhistorySalary.Where(s => s.WorkHistoryID == WorkHistoryNearest.ID).FirstOrDefault();
                    if (workhistorySalaryNearest != null)
                    {
                        workHistory.WorkhistorySalaryClassNameNear = workhistorySalaryNearest.SalaryClassName;
                        #region  Lấy tổng 15 phu cap
                        if (workhistorySalaryNearest.E_AllowanceAmount1 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount1 != null ? workhistorySalaryNearest.E_AllowanceAmount1.DecryptValue() : null;
                            workHistory.AllowanceAmountSalary1Near = workhistorySalaryNearest.E_AllowanceAmount1 != null ? workhistorySalaryNearest.E_AllowanceAmount1.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount2 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount2 != null ? workhistorySalaryNearest.E_AllowanceAmount2.DecryptValue() : null;
                            workHistory.AllowanceAmountSalary2Near = workhistorySalaryNearest.E_AllowanceAmount2 != null ? workhistorySalaryNearest.E_AllowanceAmount2.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount3 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount3.DecryptValue();
                            workHistory.AllowanceAmountSalary3Near = workhistorySalaryNearest.E_AllowanceAmount3 != null ? workhistorySalaryNearest.E_AllowanceAmount3.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount4 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount4.DecryptValue(); ;
                            workHistory.AllowanceAmountSalary4Near = workhistorySalaryNearest.E_AllowanceAmount4 != null ? workhistorySalaryNearest.E_AllowanceAmount4.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount5 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount5.DecryptValue();
                            workHistory.AllowanceAmountSalary5Near = workhistorySalaryNearest.E_AllowanceAmount5 != null ? workhistorySalaryNearest.E_AllowanceAmount5.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount6 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount6.DecryptValue();
                            workHistory.AllowanceAmountSalary6Near = workhistorySalaryNearest.E_AllowanceAmount6 != null ? workhistorySalaryNearest.E_AllowanceAmount6.DecryptValue() : null; ;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount7 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount7.DecryptValue();
                            workHistory.AllowanceAmountSalary7Near = workhistorySalaryNearest.E_AllowanceAmount7 != null ? workhistorySalaryNearest.E_AllowanceAmount7.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount8 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount8.DecryptValue();
                            workHistory.AllowanceAmountSalary8Near = workhistorySalaryNearest.E_AllowanceAmount8 != null ? workhistorySalaryNearest.E_AllowanceAmount8.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount9 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount9.DecryptValue();
                            workHistory.AllowanceAmountSalary9Near = workhistorySalaryNearest.E_AllowanceAmount9 != null ? workhistorySalaryNearest.E_AllowanceAmount9.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount10 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount10.DecryptValue();
                            workHistory.AllowanceAmountSalary10Near = workhistorySalaryNearest.E_AllowanceAmount10 != null ? workhistorySalaryNearest.E_AllowanceAmount10.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount11 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount11.DecryptValue();
                            workHistory.AllowanceAmountSalary11Near = workhistorySalaryNearest.E_AllowanceAmount11 != null ? workhistorySalaryNearest.E_AllowanceAmount11.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount12 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount12.DecryptValue();
                            workHistory.AllowanceAmountSalary12Near = workhistorySalaryNearest.E_AllowanceAmount12 != null ? workhistorySalaryNearest.E_AllowanceAmount12.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.E_AllowanceAmount13 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount13.DecryptValue();
                            workHistory.AllowanceAmountSalary13Near = workhistorySalaryNearest.E_AllowanceAmount13 != null ? workhistorySalaryNearest.E_AllowanceAmount13.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.AllowanceAmount14 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount14.DecryptValue();
                            workHistory.AllowanceAmountSalary14Near = workhistorySalaryNearest.E_AllowanceAmount14 != null ? workhistorySalaryNearest.E_AllowanceAmount14.DecryptValue() : null;
                        }
                        if (workhistorySalaryNearest.AllowanceAmount15 != null)
                        {
                            totalSalaryNear += workhistorySalaryNearest.E_AllowanceAmount15.DecryptValue();
                            workHistory.AllowanceAmountSalary15Near = workhistorySalaryNearest.E_AllowanceAmount15 != null ? workhistorySalaryNearest.E_AllowanceAmount15.DecryptValue() : null;
                        }
                        #endregion
                    }
                }
                workHistory.TotalSalaryNear = totalSalaryNear;
                #endregion

                if (workHistory.TAddress != null)
                {
                    workHistory.TAddressEN = RemoveSign4VietnameseString(workHistory.TAddress);
                }
                if (workHistory.PAddress != null)
                {
                    workHistory.PAddressEN = RemoveSign4VietnameseString(workHistory.PAddress);
                }
                //Quyen.Quach 08/12/2017 0090941
                if (workHistory.DateEffective != null && workHistory.DateComeBack != null)
                {
                    workHistory.AppointmentMonthVer2 = (int)(Math.Round((double)(workHistory.DateComeBack.Value.Subtract(workHistory.DateEffective).Days / (365.25 / 12))));
                }
                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lstWorkHistoryExport = new List<Hre_WorkHistoryForExportEntity>();
                var workHistoryExport = workHistory.CopyData<Hre_WorkHistoryForExportEntity>();
                lstWorkHistoryExport.Add(workHistoryExport);
                ExportService.ExportWord(outputPath, templatepath, lstWorkHistoryExport);
            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        public ActionResult ExportWorkHistorySelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchExModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate

            //Nguyen.Le - 14/11/2017 - 0089883
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            HeaderInfo headerInfo6 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5, headerInfo6 };
            #endregion
            var result = actionService.GetData<Hre_WorkHistoryModel>(model.WorkHistoryID, ConstantSql.hrm_hr_sp_get_WorkHistoryByIds, ref status);
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportWorkHistoryByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            //Nguyen.Le - 14/11/2017 - 0089883
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            HeaderInfo headerInfo6 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5, headerInfo6 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistoryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkHistoryModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_WorkHistoryModel>(lstModel, ConstantSql.hrm_hr_sp_get_WorkHistoryList, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //hau.le-85997-20170821
        public ActionResult ExportStopWorkingByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_StopWorkingModel(),
                    FileName = "Hre_StopWorking",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_StopWorkingModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_StopWorkingModel>(lstModel, ConstantSql.hrm_hr_sp_get_StopWorking, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            var lstProfileIDs = result.Select(s => s.ProfileID.Value).Distinct().ToList();
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            foreach (var item in result)
            {
                var ContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart <= item.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (ContractByProfileID != null)
                {
                    if (ContractByProfileID.ContractTypeID != null)
                        item.ContractTypeNames = _CatContractTypeServices.GetContractTypeNameByID(ContractByProfileID.ContractTypeID);
                }
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }
        //hau.le-85997-20170821
        public ActionResult ExportStopWorkingSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchExModel model)
        {
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            #endregion
            var result = actionService.GetData<Hre_StopWorkingModel>(model.StopWorkingIDS, ConstantSql.hrm_hr_sp_get_StopWorkingByListIds, ref status);
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            //hau.le-85997-20170831

            var lstProfileIDs = result.Select(s => s.ProfileID.Value).Distinct().ToList();
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            foreach (var item in result)
            {
                var ContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart <= item.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (ContractByProfileID != null)
                {
                    if (ContractByProfileID.ContractTypeID != null)
                        item.ContractTypeNames = _CatContractTypeServices.GetContractTypeNameByID(ContractByProfileID.ContractTypeID);
                }
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //hau.le-85997-20170821
        public ActionResult ExportStopWorkingWaitingByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingWaitingApprovedSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_StopWorkingModel(),
                    FileName = "Hre_StopWorking",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_StopWorkingModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_StopWorkingModel>(lstModel, ConstantSql.hrm_hr_sp_get_StopWorkingWaiting, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            //hau.le-85997-20170831
            var lstProfileIDs = result.Select(s => s.ProfileID.Value).Distinct().ToList();
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            foreach (var item in result)
            {
                var ContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart <= item.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (ContractByProfileID != null)
                {
                    if (ContractByProfileID.ContractTypeID != null)
                        item.ContractTypeNames = _CatContractTypeServices.GetContractTypeNameByID(ContractByProfileID.ContractTypeID);
                }
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //hau.le-85997-20170821
        public ActionResult ExportStopWorkingWaitingSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingWaitingApprovedSearchExModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();
            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            #endregion
            var result = actionService.GetData<Hre_StopWorkingModel>(model.IDS, ConstantSql.hrm_hr_sp_get_WaitingStopWorkingByListId, ref status);
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            //hau.le-85997-20170831
            var lstProfileIDs = result.Select(s => s.ProfileID.Value).Distinct().ToList();
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            foreach (var item in result)
            {
                var ContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart <= item.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (ContractByProfileID != null)
                {
                    if (ContractByProfileID.ContractTypeID != null)
                        item.ContractTypeNames = _CatContractTypeServices.GetContractTypeNameByID(ContractByProfileID.ContractTypeID);
                }
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //Quyen.Quach 28/07/2017 - 85848 Lấy ds nhóm phụ cấp theo chức danh màn hình hợp đồng 
        public ActionResult GetUsualAllowanceGroupbyPositionID(Guid? PositionID)
        {
            if (PositionID != null)
            {
                var positionservices = new Cat_PositionServices();
                var positionentity = positionservices.GetUsualAllowanceGroupbyPositionID(PositionID.Value);
                return Json(positionentity, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult ExportSelectWorkHistoryByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistoryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_WorkHistoryModel>(model.selectedIds, ConstantSql.hrm_hr_sp_get_WorkHistoryByIds, UserLogin, ref status);
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #region Export Excel Workhistory salary

        [HttpPost]
        public ActionResult GetWorkHistorySalaryList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_WorkHistorySalaryEntity, Hre_WorkHistorySalaryModel, Hre_WorkHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistorySalaryList);
        }

        public ActionResult ExportWorkHistorySalaryByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistorySalaryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkHistorySalaryModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_WorkHistorySalaryModel>(lstModel, ConstantSql.hrm_hr_sp_get_WorkHistorySalaryList, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportSelectWorkHistorySalaryByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistorySalaryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_WorkHistorySalaryModel>(model.selectedIds, ConstantSql.hrm_hr_sp_get_WorkHistorySalaryByIds, UserLogin, ref status);
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        [HttpPost]
        public ActionResult ApproveWorkHistory(string selectedIds)
        {
            var service = new Hre_WorkHistoryServices();
            var userId = Guid.Empty;
            Guid.TryParse(UserID, out userId);
            var message = service.ActionApproved(selectedIds, UserLogin, userId);
            return Json(message);
        }

        [HttpPost]
        public ActionResult CancelWorkHistory(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var service = new Hre_WorkHistoryServices();
                var message = service.ActionCancel(selectedIds, Guid.Parse(UserID));
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }

        [HttpPost]
        public ActionResult WaitApproveWorkHistory(string selectedIds)
        {
            var service = new Hre_WorkHistoryServices();
            var message = service.ActionWaitApprove(selectedIds);
            return Json(message);
        }

        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho WorkHistory (Hre_WorkHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns> 
        [HttpPost]
        public ActionResult GetWorkHistoryList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryList);
        }

        [HttpPost]
        public ActionResult GetWorkHistoryWaitingApproveList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryWaitingSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistoryWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryWaitingApprove);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho WorkHistory (Hre_WorkHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportWorkHistoryList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryList);
        }

        public ActionResult GetRelativeByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Hre_RelativesViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_RelativeByProfileId, ref status);
            if (result != null && result.Count > 0)
            {
                foreach (var relative in result)
                {
                    if (!string.IsNullOrEmpty(relative.YearOfBirth))
                    {
                        try
                        {
                            string yearparse = relative.YearOfBirth.Substring(relative.YearOfBirth.Length - 4, 4);
                            int Year = int.Parse(yearparse);
                            relative.YearOfBirthDateTime = new DateTime(Year, 1, 1);
                        }
                        catch
                        {
                        }
                    }
                }
            }
            result = result.OrderBy(s => s.YearOfBirthDateTime).ToList(); // Son.Vo - 20160926 - 0073633
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetHouseholdInfoByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin, LanguageCode);
                var result = actionServices.GetData<Hre_HouseholdInfoModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_HouseholdInfoByProfileId, ref status);
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //[08/12/2015][to.le][Modify Func][0061242]
        //Load kỳ nghỉ theo từng nhân viên lên lưới
        public ActionResult GetDependantListByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(profileID);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_DependantEntity>(objs, ConstantSql.hrm_hr_sp_get_DependantByProfileId, ref status);
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }


        //[14/11/2015][to.le][Modify Func][0059714]
        //Load kỳ nghỉ theo từng nhân viên lên lưới
        public ActionResult GetHolidayInfoByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(profileID);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_HolidayInfoEntity>(objs, ConstantSql.hrm_hre_sp_get_HolidayInfoByProfileID, ref status);
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }


        public ActionResult GetDependantByProfileID([DataSourceRequest] DataSourceRequest request, Att_ProIDAndCutIDModel model)
        {
            // Son.vo - 20141220 - lấy người thân không cần truyền vào kỳ công làm gì.
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(model.ProfileID));
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var result = actionServices.GetData<Hre_DependantEntity>(objs, ConstantSql.hrm_hr_sp_get_DependantByProfileId, ref status);
            if (result == null)
            {
                return null;
            }

            if (model.IsExport)
            {
                status = ExportService.Export(result, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
                return Json(status);
            }
            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của WorkHistory (Hre_WorkHistory) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportWorkHistorySelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_WorkHistoryByIds);
        }

        public ActionResult GetWorkHistoryByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null && profileID != Guid.Empty)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(profileID);
                var result = actionServices.GetData<Hre_WorkHistoryForViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_WorkHistoryByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }
        public ActionResult GetWorkHistorySalaryByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null && profileID != Guid.Empty)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(profileID);
                var result = actionServices.GetData<Hre_WorkHistorySalaryForViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_WorkHistorySalaryByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult GetTopWorkHistoryByProfileID(Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var result = actionServices.GetData<Hre_WorkHistoryEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_WorkHistoryByProfileId, ref status).ToList();
            Hre_WorkHistoryEntity objWorkHistory = new Hre_WorkHistoryEntity();
            if (result.Count > 0)
            {
                objWorkHistory = result.OrderByDescending(s => s.DateEffective).FirstOrDefault();
                return Json(objWorkHistory);
            }
            else
            {
                return null;
            }
        }

        public ActionResult GetTopStopWorkingByProfileID(Guid profileID)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            //Quyen.Quach - 2017/06/26 - 0082691 Ràng buộc dữ liệu khi chọn nhân viên vào làm lại
            var result = actionServices.GetData<Hre_StopWorkingEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status).Where(s => s.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(s => s.DateStop).FirstOrDefault();
            if (result != null)
            {
                return Json(result);
            }
            else
            {
                return Json(string.Empty);
            }
        }

        public ActionResult GetCandidateHistoryByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(null);
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var result = actionServices.GetData<Hre_CandidateHistoryViewProfileDetailModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_CandidateHistoryByProfileId, ref status);
            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// [Quoc.Do] - Xuất các dòng dữ liệu được theo ProfileID của VisaInfo (Hre_VisaInfo) 
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult GetVisaInfoByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var result = actionServices.GetData<Hre_VisaInfoEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_VisaInfoByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        #region Hre_ResidenceCard
        // Son.Vo - 20151029 - lấy ds thẻ cư trú màn hình chi tiết NV
        public ActionResult GetResidenceCardByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var result = actionServices.GetData<Hre_ResidenceCardEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ResidenceCardByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        [HttpPost]
        public ActionResult GetResidentCardList([DataSourceRequest] DataSourceRequest request, Hre_ResidenceCardSearchModel model)
        {
            if (model.CodeEmp != null)
            {
                if (model.CodeEmp.Contains(','))
                {
                    model.StrCodeEmp = model.CodeEmp;
                    model.CodeEmp = null;
                }
            }
            return GetListDataAndReturn<Hre_ResidenceCardModel, Hre_ResidenceCardEntity, Hre_ResidenceCardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ResidentCard);
        }

        public ActionResult ExportAllResidentCardList([DataSourceRequest] DataSourceRequest request, Hre_ResidenceCardSearchModel model)
        {
            return ExportAllAndReturn<Hre_ResidenceCardEntity, Hre_ResidenceCardModel, Hre_ResidenceCardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ResidentCard);
        }

        public ActionResult ExportSelectedResidentCardByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ResidenceCardSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ResidenceCardModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ResidenceCardModel>(model.strResidenceCardID, ConstantSql.hrm_hr_sp_get_ResidentCardByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ResidenceCardModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportResidentCardByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ResidenceCardSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ResidenceCardModel(),
                    FileName = "Hre_ResidenceCardModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ResidenceCardModel>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportId != Guid.Empty)
            {
                result = actionService.GetData<Hre_ResidenceCardModel>(lstModel, ConstantSql.hrm_hr_sp_get_ResidentCard, ref status);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportResidenceCardSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ResidenceCardEntity, Hre_ResidenceCardModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ResidentCardByIds);
        }
        #endregion



        #endregion

        #region Hre_Workpermit

        // Son.Vo - 20151110 - 0059873
        public ActionResult GetWorkPermitByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var result = actionServices.GetData<Hre_WorkPermitEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_WorkPermitByProfileId, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        [HttpPost]
        public ActionResult GetWorkPermitList([DataSourceRequest] DataSourceRequest request, Hre_WorkPermitSearchModel model)
        {
            if (model.CodeEmp != null)
            {
                if (model.CodeEmp.Contains(','))
                {
                    model.StrCodeEmp = model.CodeEmp;
                    model.CodeEmp = null;
                }
            }
            return GetListDataAndReturn<Hre_WorkPermitModel, Hre_WorkPermitEntity, Hre_WorkPermitSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkPermit);
        }

        public ActionResult ExportAllWorkPermitList([DataSourceRequest] DataSourceRequest request, Hre_WorkPermitSearchModel model)
        {
            return ExportAllAndReturn<Hre_WorkPermitEntity, Hre_WorkPermitModel, Hre_WorkPermitSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkPermit);
        }

        public ActionResult ExportSelectedWorkPermitByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkPermitSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_WorkPermitModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_WorkPermitModel>(model.strWorkPermitID, ConstantSql.hrm_hr_sp_get_WorkPermitByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_WorkPermitModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportWorkPermitByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkPermitSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkPermitModel(),
                    FileName = "Hre_WorkPermitModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkPermitModel>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportId != Guid.Empty)
            {
                result = actionService.GetData<Hre_WorkPermitModel>(lstModel, ConstantSql.hrm_hr_sp_get_WorkPermit, ref status);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportWorkPermitSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_WorkPermitEntity, Hre_WorkPermitModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_WorkPermitByIds);
        }
        #endregion

        #region Report HR
        #region Báo cáo Passport Expiry
        [HttpPost]
        public ActionResult GetDatePassportExpiryFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            var _dayfrom = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_SHOWPASSPORTEXPIRYDATEFROM);
            if (_dayfrom >= 0)
            {
                DateFrom = DateTo.AddDays(-_dayfrom);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDatePassportExpiryToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            var sysServices = new Sys_AttOvertimePermitConfigServices();
            var _dateto = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_SHOWPASSPORTEXPIRYDATETO);
            if (_dateto >= 0)
            {
                DateFrom = DateTo.AddDays(_dateto);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetReportPassportExpiryValidate(Hre_ReportPassportExpiryModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportPassportExpiryModel>(LanguageCode, model, "Hre_ReportPassportExpiry", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetReportPassportExpiry([DataSourceRequest] DataSourceRequest request, Hre_ReportPassportExpiryModel model)
        {
            #region Tạo  Template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportPassportExpiryModel(),
                    FileName = "Hre_ReportPassportExpiry",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            var _ProfileServices = new Hre_ProfileServices();
            var result = _ProfileServices.GetReportPassportExpiry(model.DateFrom, model.DateTo);
            foreach (var PassportExpiryEntity in result)
            {
                if (PassportExpiryEntity.JobTitleID != null)
                {
                    var JobTitleEnt = _ProfileServices.GetJobTitleDataByID(PassportExpiryEntity.JobTitleID.Value);
                    if (JobTitleEnt != null)
                    {
                        PassportExpiryEntity.JobTitleName = JobTitleEnt.JobTitleName;
                    }
                }
                if (PassportExpiryEntity.PositionID != null)
                {
                    var PositionEnt = _ProfileServices.GetPositionDataByID(PassportExpiryEntity.PositionID.Value);
                    if (PositionEnt != null)
                    {
                        PassportExpiryEntity.PositionName = PositionEnt.PositionName;
                    }
                }
                if (PassportExpiryEntity.OrgStructureID != null)
                {
                    var OrgStructEnt = _ProfileServices.GetOrgStructureDataByID(PassportExpiryEntity.OrgStructureID.Value);
                    var OrgUnitEnt = _ProfileServices.GetOrgUnitDataByID(PassportExpiryEntity.OrgStructureID.Value);
                    if (OrgStructEnt != null)
                    {
                        PassportExpiryEntity.OrgStructureName = OrgStructEnt.OrgStructureName;
                    }
                    if (OrgUnitEnt != null)
                    {
                        PassportExpiryEntity.E_BRANCH = OrgUnitEnt.E_BRANCH;
                        PassportExpiryEntity.E_COMPANY = OrgUnitEnt.E_COMPANY;
                        PassportExpiryEntity.E_DEPARTMENT = OrgUnitEnt.E_DEPARTMENT;
                        PassportExpiryEntity.E_DIVISION = OrgUnitEnt.E_DIVISION;
                        PassportExpiryEntity.E_SECTION = OrgUnitEnt.E_SECTION;
                        PassportExpiryEntity.E_TEAM = OrgUnitEnt.E_TEAM;
                        PassportExpiryEntity.E_UNIT = OrgUnitEnt.E_UNIT;
                    }
                }
            }
            //hau.le-87697-20170906
            var result2 = result.ToList().Translate<Hre_ReportPassportExpiryModel>();
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result2, null, UserGuidID, model.ExportType);

                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));

        }
        #endregion

        #region BC head count Loại HĐ
        public ActionResult GetReportHCContractTypeValidate(Hre_ReportHCContractTypeModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCContractTypeModel>(LanguageCode, model, "Hre_ReportHCContractType", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        public ActionResult GetReportHCContractType([DataSourceRequest] DataSourceRequest request, Hre_ReportHCContractTypeModel model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();

            object obj = new Hre_ReportHCSeniorityModel();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            var result = service.GetReportHCContractType(model.MonthSearch, model.IsCreateTemplate);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportHCContractTypeModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                result.Rows[0].Delete();
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    var colName = model.ValueFields;
                    valueField = colName.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        [HttpPost]
        public ActionResult GetReportExpiryContract([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractSearchModel model)
        {
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);

            var From = DateTime.Now.AddMonths(-1);
            var To = DateTime.Now.AddMonths(1);
            if (model.DateFrom == null)
            {
                model.DateFrom = From;
            }
            if (model.DateTo == null)
            {
                model.DateTo = To;
            }
            var result = new List<Hre_ReportExpiryContractModel>();
            string status = string.Empty;
            if (!model.IsCreateTemplate)
            {
                if (model.ExportID != Guid.Empty)
                {
                    #region trường hợp export
                    var listObj = new List<object>();
                    listObj.Add(model.strOrgStructureID);
                    listObj.Add(model.Status);
                    listObj.Add(model.DateFrom);
                    listObj.Add(model.DateTo);
                    listObj.Add(model.CodeEmp);
                    listObj.Add(model.ProfileName);
                    listObj.Add(model.IDNo);
                    listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
                    listObj.Add(model.DateSignedFrom);
                    listObj.Add(model.DateSignedTo);
                    listObj.Add(model.ContractNo);
                    listObj.Add(model.EvaType);
                    listObj.Add(model.strContractTypeID);
                    listObj.Add(model.DateEndFrom);
                    listObj.Add(model.DateEndTo);
                    listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
                    // Son.Vo - theo task - 0054827
                    listObj.Add(model.JobTitleID);
                    listObj.Add(model.PositionID);
                    listObj.Add(model.EmpTypeID);
                    listObj.Add(model.Gender);
                    listObj.Add(model.DateStartFrom);
                    listObj.Add(model.DateStartTo);
                    listObj.Add(model.StatusSyn);
                    listObj.Add(model.IsNotSignContinue);
                    listObj.Add(model.strEmployeeGroupID);
                    listObj.Add(model.IsCreateTemplate);
                    listObj.Add(model.ExportID);
                    listObj.Add(model.ExportType);
                    listObj.Add(1);
                    listObj.Add(int.MaxValue - 1);
                    result = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContract, ref status).OrderByDescending(m => m.DateStart).ToList();
                    #endregion
                }
                else
                {
                    return GetListDataAndReturn<Hre_ReportExpiryContractModel, Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptExpireContract);
                }
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, UserGuidID, model.ExportType);
                return Json(fullPath);
                //ExportService.ExportWord(@"D:\app\TestHD.doc", @"D:\app\BD_HDLDNV.doc", result);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportEducationCharList([DataSourceRequest] DataSourceRequest request, Hre_ReportEducationChartListModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportEducationChartListModel(),
                    FileName = "Hre_ReportEducationChartList",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate

            var From = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            var To = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);

            #endregion

            if (model.DateFrom != null)
            {
                From = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                To = model.DateTo.Value;
            }
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            var strOrgIDs = new List<object>();
            strOrgIDs.AddRange(new object[3]);
            strOrgIDs[0] = (object)model.OrgStructureID;
            string status = string.Empty;
            var lstProfile = actionServices.GetData<Hre_Profile4ReportEducationCharListEntity>(strOrgIDs, ConstantSql.hrm_hr_sp_get_ProfileIdsByStrOrg, ref status).ToList();
            var result = service.GetReportEducationCharList(From, To, lstProfile, model.AppliedForThisPeriod, model.EducationIDs).ToList().Translate<Hre_ReportEducationChartListModel>();

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportHCSeniorityV2Validate(Hre_ReportHCSeniorityV2Model model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCSeniorityV2Model>(LanguageCode, model, "Hre_ReportHCSeniorityV2", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);

        }

        public ActionResult GetReportHCSeniorityV2([DataSourceRequest] DataSourceRequest request, Hre_ReportHCSeniorityV2Model model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportHCSeniorityV2Model();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var result = service.GetReportHCSeniorityV2(model.MonthYear, model.OrgStructureID, model.OrgStructureTypeID, model.IsProfileQuit, model.IsCreateTemplate, UserLogin, model.ExportID);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    HeaderInfo = listHeaderInfo,
                    FileName = "Hre_ReportHCSeniorityV2Model",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    var colName = model.ValueFields;
                    valueField = colName.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportWordReportTransferViaBankByTemplate(List<Guid> listID, Sal_ReportTransferViaBankSearchModel model)
        {


            string messages = string.Empty;
            string status = string.Empty;
            string path = Common.GetPath(string.Empty);
            #region Lấy dữ liệu template
            Cat_ExportEntity template = null;
            string outputPath = string.Empty;
            string templatepath = string.Empty;
            var baseServices = new BaseService();
            var ext = string.Empty;
            string strOrderExportWord = string.Empty;
            if (model.ExportWorkID != null)
            {
                template = baseServices.GetData<Cat_ExportEntity>(model.ExportWorkID, ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }

            if (template == null)
            {
                messages = "NotTemplate";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            else
            {
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                if (!string.IsNullOrEmpty(template.OrderNumber))
                {
                    strOrderExportWord = template.OrderNumber.Trim();
                }
            }
            ext = template.TemplateFile.Split('.').LastOrDefault();

            string _ProfileIDs = string.Empty;
            #endregion
            #region lấy dữ liệu theo id chọn
            if (listID != null && listID.Count > 0)
            {
                _ProfileIDs = listID.ToSplitString();
            }
            var service = new Sal_ReportService();

            var hrService = new ActionService(UserLogin, LanguageCode);
            List<Guid> listBankID = new List<Guid>();
            List<Guid> listCurrencyID = new List<Guid>();
            List<Guid> lstGradeID = new List<Guid>();
            if (!string.IsNullOrEmpty(model.GradeID))
            {
                lstGradeID = model.GradeID.Split(',').Select(s => Guid.Parse(s)).ToList();
            }
            if (model.BankID != null)
            {
                listBankID.Add((Guid)model.BankID);
            }
            //[18/09/2017][tien.nguyen][Modify Func][0087902]
            if (model.BankID != null)
            {
                listCurrencyID.Add((Guid)model.CurrencyID);
            }
            DateTime _dateStart = DateTime.Now;
            DateTime _dateEnd = DateTime.Now;
            Hre_ProfileEntity profileByID = new Hre_ProfileEntity();
            Att_CutOffDurationEntity cutoff = new Att_CutOffDurationEntity();
            cutoff = hrService.GetByIdUseStore<Att_CutOffDurationEntity>(model.CutOffDurationID.Value, ConstantSql.hrm_att_sp_get_CutOffDurationById, ref status);
            if (cutoff != null)
            {
                _dateStart = cutoff.DateStart;
                _dateEnd = cutoff.DateEnd;
            }
            List<Sal_PayrollTableEntity> lstProfileFull = new List<Sal_PayrollTableEntity>();
            ActionService actionServices = new ActionService(UserLogin, LanguageCode);
            //[07112015][bang.nguyen][59591][bug]
            //xuất du dữ liệu
            #region get nhan vien cho bc
            Sal_PayrollTableServices payrollTableService = new Sal_PayrollTableServices();
            lstProfileFull = payrollTableService.GetPayrollTableBySearch(UserLogin, model.CutOffDurationID, _dateStart, _dateEnd, _ProfileIDs, model.OrgStructureID, null, null, null, model.PayrollGroupIDs, null, model.strWorkPlaceID, null, null, model.GradeID, null, null, null, null);

            #endregion
            //[09032016][bang.nguyen][64401][modify]
            //nếu Iscash = 0 hay = null thì mới hiện thị trên báo cáo
            lstProfileFull = lstProfileFull.Where(s => s.IsCash == null || s.IsCash == false).ToList();

            if (model.Settlement != null)
            {
                lstProfileFull = lstProfileFull.Where(s => s.Settlement == model.Settlement).ToList();
            }
            //[29032016][bang.nguyen][65529][Bug]
            //loc trạng thái nhân viên theo trạng thái nhân viên trong bảng lương
            if (!string.IsNullOrEmpty(model.StatusEmployees) && model.StatusEmployees != PayrollTableProfileStatus.E_PROFILE_ALL.ToString())
            {
                if (model.StatusEmployees == PayrollTableProfileStatus.E_PROFILE_NEW_ACTIVE.ToString())
                {
                    lstProfileFull = lstProfileFull.Where(m => m.EmpStatus == PayrollTableProfileStatus.E_PROFILE_NEW.ToString()
                                                                  || m.EmpStatus == PayrollTableProfileStatus.E_PROFILE_ACTIVE.ToString()).ToList();
                }
                else
                {
                    lstProfileFull = lstProfileFull.Where(s => s.EmpStatus == model.StatusEmployees).ToList();
                }
            }
            string nameReport = "Sal_ReportTransferViaBankModel";
            DataTable table = service.GetReportTransferViaBank(lstProfileFull, model.GroupBank, listBankID, listCurrencyID, cutoff,
                                        model.NoDisplay0Data, model.ElementType, nameReport, lstGradeID, UserLogin, model.IsCreateTemplate, model.ExportId);

            #endregion



            DateTime DateStart = DateTime.Now;
            var fileDoc = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportSalaryTableMonth" + suffix;
            if (table.Rows.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }

            int indexfile = 0;

            //[19/04/2017][bang.nguyen][81181][Modify Func]
            double soThuTu = 0;
            double _soTinhDaySo = 1;
            string strDaySo = string.Empty;
            if (!string.IsNullOrEmpty(strOrderExportWord))
            {
                DataView dtview = new DataView(table);
                dtview.Sort = strOrderExportWord + " asc";
                table = dtview.ToTable();
                double countChuSo = table.Rows.Count.ToString().Length - 1;
                _soTinhDaySo = Math.Pow(10d, countChuSo);
            }

            DataTable tableExportWord = table.Clone();
            foreach (DataRow row in table.Rows)
            {
                tableExportWord.Clear();
                var _id = row["ID"];
                string _fileName = row["CodeEmp"].ToString();
                _fileName = Common.ChuyenTVKhongDau(_fileName);

                //khi add file vào thư mục (file không còn sắp xếp như đúng thứ tự đã sắp xếp => thêm số thứ tự trước tên file khi add => để sắp xếp đúng thứ tự)
                if (!string.IsNullOrEmpty(strOrderExportWord))
                {
                    soThuTu += 1;
                    if (soThuTu % _soTinhDaySo == 0)
                    {
                        strDaySo = soThuTu.ToString();
                    }
                    else
                    {
                        strDaySo = (soThuTu / _soTinhDaySo).ToString().Replace(".", "");
                    }

                    _fileName = strDaySo + "_" + _fileName;
                }

                indexfile += 1;
                outputPath = folferPath + "/" + _fileName + suffix + indexfile.ToString() + "_" + template.TemplateFile;

                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + _fileName + suffix + indexfile.ToString() + "_" + template.TemplateFile;

                tableExportWord.ImportRow(row);
                ExportService.ExportWord(outputPath, templatepath, tableExportWord);
            }
            if (table.Rows.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";

                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');

                if (fileZipSplit.Count() > 0)
                {
                    if (model.IsExportWordToPDF == true)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                        var urlReturnPDF = urlReturn.Replace(".docx", ".pdf").Replace(".doc", ".pdf");

                        var messenge = Common.ConvertWordToPDF(path + urlReturn.Replace(" ", ""), path + urlReturnPDF.Replace(" ", ""));
                        Common.WriteLogFunction(true, UserLogin, "LogFile_" + DateTime.Now.ToString("ddMMyyyy"), UserLogin, "LocalTest001", messenge);


                        messageReturn = NotificationType.Success.ToString() + "," + urlReturnPDF;
                    }
                    else
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    }

                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            if (model.IsExportWordToPDF == true)
            {
                string filePDF = fileDoc.Replace(".docx", ".pdf").Replace(".doc", ".pdf");
                string statusConvert = Common.ConvertWordToPDF(path + fileDoc.Replace(NotificationType.Success.ToString() + ",", ""), path + filePDF.Replace(NotificationType.Success.ToString() + ",", ""));

                if (statusConvert != string.Empty)
                {
                    return Json(NotificationType.Error.ToString() + "," + statusConvert);
                }

                return Json(filePDF);
            }
            else
            {
                return Json(fileDoc);
            }
        }

        public ActionResult GetReportTransferViaBank([DataSourceRequest] DataSourceRequest request, Sal_ReportTransferViaBankSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Sal_ReportTransferViaBankSearchModel>(LanguageCode, model, "Sal_ReportTransferViaBank", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            var service = new Sal_ReportService();
            string status = string.Empty;
            var hrService = new ActionService(UserLogin, LanguageCode);
            List<Guid> listBankID = new List<Guid>();
            List<Guid> listCurrencyID = new List<Guid>();
            List<Guid> lstGradeID = new List<Guid>();
            if (!string.IsNullOrEmpty(model.GradeID))
            {
                lstGradeID = model.GradeID.Split(',').Select(s => Guid.Parse(s)).ToList();
            }
            if (model.BankID != null)
            {
                listBankID.Add((Guid)model.BankID);
            }
            if (model.CurrencyID != null)
            {
                listCurrencyID.Add((Guid)model.CurrencyID);
            }
            DateTime _dateStart = DateTime.Now;
            DateTime _dateEnd = DateTime.Now;
            Hre_ProfileEntity profileByID = new Hre_ProfileEntity();
            Att_CutOffDurationEntity cutoff = new Att_CutOffDurationEntity();
            cutoff = hrService.GetByIdUseStore<Att_CutOffDurationEntity>(model.CutOffDurationID.Value, ConstantSql.hrm_att_sp_get_CutOffDurationById, ref status);
            if (cutoff != null)
            {
                _dateStart = cutoff.DateStart;
                _dateEnd = cutoff.DateEnd;
            }
            List<Sal_PayrollTableEntity> lstProfileFull = new List<Sal_PayrollTableEntity>();
            ActionService actionServices = new ActionService(UserLogin, LanguageCode);
            //[07112015][bang.nguyen][59591][bug]
            //xuất du dữ liệu
            if (!model.IsCreateTemplate)
            {
                #region get nhan vien cho bc
                //List<object> paraProfile = new List<object>();
                //paraProfile.AddRange(new object[12]);
                //if (model.ProfileID != null && model.ProfileID != string.Empty)
                //{
                //    paraProfile[1] = Common.DotNetToOracle(model.ProfileID);
                //}
                //paraProfile[2] = model.OrgStructureID;
                ////nhom luong
                //if (!string.IsNullOrEmpty(model.PayrollGroupIDs))
                //{
                //    paraProfile[6] = Common.DotNetToOracle(model.PayrollGroupIDs);
                //}
                //paraProfile[10] = 1;
                //paraProfile[11] = int.MaxValue - 1;  
                //lstProfileFull = actionServices.GetData<Hre_ProfileEntity>(paraProfile, ConstantSql.hrm_hr_sp_get_ProfileForReport, ref status);

                Sal_PayrollTableServices payrollTableService = new Sal_PayrollTableServices();
                lstProfileFull = payrollTableService.GetPayrollTableBySearch(UserLogin, model.CutOffDurationID, _dateStart, _dateEnd, model.ProfileID, model.OrgStructureID, null, null, null, model.PayrollGroupIDs, null, model.strWorkPlaceID, null, null, model.GradeID, null, null, null, null);

                #endregion
                //[09032016][bang.nguyen][64401][modify]
                //nếu Iscash = 0 hay = null thì mới hiện thị trên báo cáo
                lstProfileFull = lstProfileFull.Where(s => s.IsCash == null || s.IsCash == false).ToList();

                if (model.Settlement != null)
                {
                    lstProfileFull = lstProfileFull.Where(s => s.Settlement == model.Settlement).ToList();
                }
                //[29032016][bang.nguyen][65529][Bug]
                //loc trạng thái nhân viên theo trạng thái nhân viên trong bảng lương
                if (!string.IsNullOrEmpty(model.StatusEmployees) && model.StatusEmployees != PayrollTableProfileStatus.E_PROFILE_ALL.ToString())
                {
                    if (model.StatusEmployees == PayrollTableProfileStatus.E_PROFILE_NEW_ACTIVE.ToString())
                    {
                        lstProfileFull = lstProfileFull.Where(m => m.EmpStatus == PayrollTableProfileStatus.E_PROFILE_NEW.ToString()
                                                                      || m.EmpStatus == PayrollTableProfileStatus.E_PROFILE_ACTIVE.ToString()).ToList();
                    }
                    else
                    {
                        lstProfileFull = lstProfileFull.Where(s => s.EmpStatus == model.StatusEmployees).ToList();
                    }
                }
            }
            string nameReport = "Sal_ReportTransferViaBankModel";
            DataTable result = service.GetReportTransferViaBank(lstProfileFull, model.GroupBank, listBankID, listCurrencyID, cutoff,
                                        model.NoDisplay0Data, model.ElementType, nameReport, lstGradeID, UserLogin, model.IsCreateTemplate, model.ExportId);
            if (model.UserID != null)
            {
                profileByID = hrService.GetByIdUseStore<Hre_ProfileEntity>((Guid)model.UserID, ConstantSql.hrm_hr_sp_get_ProfileById, ref status);
            }
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "GradeCfgName", Value = model.GradeCfgName };
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "CodeEmp", Value = profileByID.CodeEmp };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "DateFrom", Value = cutoff.DateStart };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateTo", Value = cutoff.DateEnd };
            #region[92155][09/01/2018]
            string Companylogo = GetCompanyLogo(model.OrgStructureID);
            var headerInfo6 = new HeaderInfo() { Name = "CompanyLogo", Value = null, ColumnType = typeof(object) };

            var templatepath = Common.GetPath(Common.TemplateURL) + Companylogo;
            if (!string.IsNullOrEmpty(Companylogo) && System.IO.File.Exists(templatepath))
            {
                headerInfo6.Value = System.IO.File.ReadAllBytes(Common.GetPath(Common.TemplateURL) + Companylogo);
            }
            #endregion
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo5, headerInfo2, headerInfo1, headerInfo3, headerInfo4, headerInfo6 };
            if (model != null && model.IsCreateTemplate)
            {
                //[92155][09/01/2018]
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Name = "CompanyLogo(Picture:FitToCell)";
                    }
                }
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = result,
                    FileName = nameReport,
                    HeaderInfo = listHeaderInfo,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            return new JsonResult() { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #region Báo cáo check list hồ sơ

        public ActionResult GetReportCheckList([DataSourceRequest] DataSourceRequest request, Hre_ReportCheckListSearchModel model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportUnusualHDTModel();
            var isDataTable = true;

            var lstHre_ReqDocument = new List<Hre_ReqDocumentEntity>();
            var lstRequirment = new List<Cat_ReqDocumentEntity>();
            var actionService = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            if (!model.IsCreateTemplate)
            {
                var objProfile = new List<object>();
                objProfile.AddRange(new object[21]);
                objProfile[0] = model.ProfileName;
                objProfile[1] = model.CodeEmp;
                objProfile[2] = model.OrgStructureID;
                objProfile[3] = model.PositionID;
                objProfile[4] = model.Gender;
                objProfile[5] = model.IDNo;
                objProfile[6] = model.JobTitleID;
                objProfile[7] = model.EmpTypeID;
                objProfile[8] = model.DateFrom;
                objProfile[9] = model.DateTo;
                objProfile[10] = model.WorkPlaceID;
                objProfile[11] = model.RankID;
                objProfile[12] = model.CodeAttendance;
                objProfile[13] = model.CodeEmpClient;
                objProfile[14] = model.IsTalent;
                objProfile[19] = 1;
                objProfile[20] = int.MaxValue - 1;
                lstHre_ReqDocument = actionService.GetData<Hre_ReqDocumentEntity>(objProfile, ConstantSql.hrm_hr_sp_get_ReportCheckList, ref status).ToList();
            }

            var result = service.GetReportCheckList(lstHre_ReqDocument, model.IsCreateTemplate);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return new JsonResult() { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion

        #region [04112015][bang.nguyen][59495][modify] Thêm button Export Payroll Transfer By e-Banking
        public ActionResult ExportReportTransferPayroll([DataSourceRequest] DataSourceRequest request, Sal_ReportTransferPayrollSearchModel model)
        {
            #region Validate
            if (!model.IsCreateTemplate)
            {
                string message = string.Empty;
                var checkValidate = ValidatorService.OnValidateData<Sal_ReportTransferPayrollSearchModel>(LanguageCode, model, "Sal_ReportTransferPayroll", ref message);
                if (!checkValidate)
                {
                    var ls = new object[] { "error", message };
                    return Json(ls);
                }
            }

            #endregion
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            var isDataTable = false;
            var lstProfileIDs = new List<Hre_ProfileEntity>();
            var CutOffDuration = new Att_CutOffDurationEntity();
            object obj = new DataTable();

            DateTime _dateStart = DateTime.Now;
            DateTime _dateEnd = DateTime.Now;
            DateTime _DatePayMent = DateTime.Now;
            if (model.DatePayMent != null)
            {
                _DatePayMent = model.DatePayMent.Value;
            }
            if (!model.IsCreateTemplate)
            {
                List<object> strorgIDs = new List<object>();
                strorgIDs.AddRange(new object[3]);
                strorgIDs[0] = (object)model.OrgStructureID;
                lstProfileIDs = actionServices.GetData<Hre_ProfileEntity>(strorgIDs, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrg, ref status).ToList();

                if (model.CutoffDurationID != null)
                {
                    CutOffDuration = actionServices.GetByIdUseStore<Att_CutOffDurationEntity>((Guid)model.CutoffDurationID, ConstantSql.hrm_att_sp_get_CutOffDurationById, ref status);
                    _dateStart = CutOffDuration.DateStart;
                    _dateEnd = CutOffDuration.DateEnd;
                }
            }
            var ids = new List<Guid>();
            if (model.ProfileID != null)
            {
                ids = model.ProfileID
                   .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                   .Select(x => Guid.Parse(x))
                   .ToList();
                lstProfileIDs = lstProfileIDs.Where(s => ids.Contains(s.ID)).ToList();
            }

            if (model.Settlement != null)
            {
                lstProfileIDs = lstProfileIDs.Where(s => s.Settlement == model.Settlement).ToList();
            }

            if (model.StatusSyn == StatusEmployee.E_WORKING.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => (pro.DateQuit == null || pro.DateQuit >= _dateEnd) && pro.DateHire < _dateStart).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_NEWEMPLOYEE.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateHire <= _dateEnd && pro.DateHire >= _dateStart).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_STOPWORKING.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateQuit != null && pro.DateQuit.Value.Date <= _dateEnd.Date && pro.DateQuit.Value.Date >= _dateStart.Date).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_WORKINGANDNEW.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateQuit == null || pro.DateQuit >= _dateEnd).ToList();
            }

            var result = service.GetReportTransferPayroll(model.ExportId, model.IsCreateTemplate, UserLogin, lstProfileIDs, model.BankID, model.CutoffDurationID, model.CurrencyID, model.ExportId, _DatePayMent);

            string statusCur = string.Empty;
            var lstObjCurrency = new List<object>();
            lstObjCurrency.AddRange(new object[4]);
            lstObjCurrency[2] = 1;
            lstObjCurrency[3] = int.MaxValue - 1;
            var listCurrency = actionServices.GetData<Cat_CurrencyEntity>(lstObjCurrency, ConstantSql.hrm_cat_sp_get_Currency, ref status).ToList();

            var currencyname = listCurrency.Where(s => s.ID == model.CurrencyID).FirstOrDefault();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = CutOffDuration.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = CutOffDuration.DateEnd };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "DatePayment", Value = model.DatePayMent ?? DateTime.MinValue };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "CurrencyName", Value = currencyname != null ? currencyname.CurrencyName : string.Empty };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "Space", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5 };
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Sal_ReportTransferPayroll",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, ExportFileType.CSV);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        [HttpPost]
        public ActionResult GetProfileNotFullData([DataSourceRequest] DataSourceRequest request, Hre_ReportNotFullDataSearchModel model)
        {
            var actionService = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            var isDataTable = false;
            var service = new BaseService();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileservice = new Hre_ProfileServices();
            object obj = new Hre_ProfileForExportModel();
            var result = new List<Hre_ProfileEntity>();
            if (!model.IsCreateTemplate)
            {
                var objs = new List<object>();
                objs.AddRange(new object[16]);
                objs[0] = model.ProfileName;
                objs[1] = model.CodeEmp;
                objs[2] = model.OrgStructureID;
                objs[3] = model.PositionID;
                objs[4] = model.Gender;
                objs[5] = model.IDNo;
                objs[6] = model.JobTitleID;
                objs[7] = model.EmpTypeID;
                objs[8] = model.DateFrom;
                objs[9] = model.DateTo;
                objs[14] = 1;
                objs[15] = int.MaxValue - 1;
                result = actionServices.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotFullData, ref status);
            }
            var lstProfileIDS = result.Select(s => s.ID).ToList();
            var lstresult = profileservice.GetReportProfileLackOfInfo(result, UserLogin).Translate<Hre_ProfileForExportModel>();

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = lstresult;
                isDataTable = false;
            }

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileForExportModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, lstresult, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return new JsonResult { Data = lstresult.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };
        }

        [HttpPost]
        public ActionResult GetEmployeeBankAccountList([DataSourceRequest] DataSourceRequest request, Sal_SalaryInformationModel model)
        {
            #region Validate
            //string message = string.Empty;
            //var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Sal_SalaryInformationModel>(LanguageCode, model, "GetEmployeeBankAccountList", ref message);
            //if (!checkValidate)
            //{
            //    var ls = new object[] { "error", message };
            //    return Json(ls);
            //}
            #endregion
            string status = string.Empty;
            var isDataTable = false;
            var service = new BaseService();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>();

            var profileservice = new Hre_ProfileServices();
            object obj = new Sal_SalaryInformationEntity();
            var result = new List<Sal_SalaryInformationEntity>();
            int Page = request.Page;
            int PageSize = request.PageSize;
            if (model.ExportId != Guid.Empty)
            {
                Page = 1;
                PageSize = int.MaxValue - 1;
            }
            if (!model.IsCreateTemplate)
            {

                var objs = new List<object>();
                objs.AddRange(new object[10]);
                objs[0] = !string.IsNullOrEmpty(model.ProfileIDs) ? Common.DotNetToOracle(model.ProfileIDs) : null;
                objs[1] = model.BankCode;
                objs[2] = model.BankCode2;
                objs[3] = model.AccountNo;
                objs[4] = model.AccountNo2;
                objs[5] = model.DateStart ?? null;
                if (model.DateEnd != null)
                {
                    objs[6] = model.DateEnd.Value.AddDays(1).AddMilliseconds(-1000);
                }
                if (!string.IsNullOrEmpty(model.strOrgStructureID))
                {
                    objs[7] = model.strOrgStructureID;
                }
                objs[8] = Page;
                objs[9] = PageSize;
                result = actionServices.GetData<Sal_SalaryInformationEntity>(objs, ConstantSql.sal_sp_get_Sal_EmployeeBankAccount, ref status);


                var objBranch = new List<object>();
                objBranch.AddRange(new object[6]);
                objBranch[4] = 1;
                objBranch[5] = int.MaxValue - 1;
                var lstBranch = actionServices.GetData<Cat_BranchEntity>(objBranch, ConstantSql.cat_sp_get_Branch, ref status).ToList();

                foreach (var item in result)
                {
                    if (item.BranchID != null)
                    {
                        var branch1ByBank = lstBranch.Where(s => s.ID == item.BranchID.Value).FirstOrDefault();
                        if (branch1ByBank != null)
                        {
                            item.CountryNameOfBranch = branch1ByBank.CountryName;
                            item.CountryCodeOfBranch = branch1ByBank.CountryCode;
                            item.BranchCode = branch1ByBank.BranchCode;
                            item.SwiftCodeOfBranch = branch1ByBank.BranchSwiftCode;
                        }
                    }

                    if (item.BranchID2 != null)
                    {
                        var branch2ByBank = lstBranch.Where(s => s.ID == item.BranchID2.Value).FirstOrDefault();

                        if (branch2ByBank != null)
                        {
                            item.CountryNameOfBranch2 = branch2ByBank.CountryName;
                            item.CountryCodeOfBranch2 = branch2ByBank.CountryCode;
                            item.BranchCode2 = branch2ByBank.BranchCode;
                            item.SwiftCodeOfBranch2 = branch2ByBank.BranchSwiftCode;
                        }
                    }
                }
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Sal_SalaryInformationModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                string fullPath = string.Empty;
                fullPath = ExportService.ExportLocalOrFTP(model.ExportId, result, listHeaderInfo, UserGuidID);

                #region Upload file Local
                //Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
                //string CustomPath = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT);
                //bool? CustomPathActive = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT_CHECK);
                //if (CustomPathActive == true && !string.IsNullOrEmpty(CustomPath))
                //{
                //    if (!CustomPath.EndsWith("//"))
                //    { CustomPath += "//"; }
                //    fullPath = ExportService.ExportCustomPath(model.ExportId, null, listHeaderInfo, result, CustomPath, ExportFileType.CSV);
                //}
                //else
                //{
                //    fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, ExportFileType.CSV);
                //}
                #endregion

                #region Uploadfile FTP
                //string CustomPathFtp = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT_FTP);
                //bool? CustomPathFTPActive = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT_FTP_CHECK);
                //if (CustomPathFTPActive == true && !String.IsNullOrEmpty(CustomPathFtp))
                //{
                //    string UserName = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT_USERNAME);
                //    string PassWord = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_EMPLOYEE_BANK_ACCOUNT_PASS);
                //    ResultsObject Result = Common.UpLoadFileFTP(UserName, PassWord, CustomPathFtp, fullPath.Replace("Success,Downloads/", ""), Common.GetPath(fullPath.Replace("Success,", "")));
                //}
                #endregion

                return Json(fullPath);

            }

            var listEntity = result.ToList();
            if (listEntity != null)
            {
                VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
                request.Page = 1;
                var dataSourceResult = listEntity.ToDataSourceResult(request);
                if (listEntity.FirstOrDefault().GetPropertyValue("TotalRow") != null)
                {
                    dataSourceResult.Total = listEntity.Count() <= 0 ? 0 : (int)listEntity.FirstOrDefault().GetPropertyValue("TotalRow");
                }
                return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
            }
            var listModelNull = new List<Sal_SalaryInformationModel>();
            ModelState.AddModelError("Id", status);
            return Json(listModelNull.ToDataSourceResult(request, ModelState));
        }

        public ActionResult GetReportTransferPayrollValidate(Sal_ReportTransferPayrollSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Sal_ReportTransferPayrollSearchModel>(LanguageCode, model, "Sal_ReportTransferPayroll", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        public ActionResult GetReportTransferPayroll([DataSourceRequest] DataSourceRequest request, Sal_ReportTransferPayrollSearchModel model)
        {
            #region Validate
            if (!model.IsCreateTemplate)
            {
                string message = string.Empty;
                var checkValidate = ValidatorService.OnValidateData<Sal_ReportTransferPayrollSearchModel>(LanguageCode, model, "Sal_ReportTransferPayroll", ref message);
                if (!checkValidate)
                {
                    return Json(message);
                }
            }

            #endregion
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            var isDataTable = false;
            var lstProfileIDs = new List<Hre_ProfileEntity>();
            var CutOffDuration = new Att_CutOffDurationEntity();
            object obj = new DataTable();

            DateTime _dateStart = DateTime.Now;
            DateTime _dateEnd = DateTime.Now;
            DateTime _DatePayMent = DateTime.Now;
            if (model.DatePayMent != null)
            {
                _DatePayMent = model.DatePayMent.Value;
            }
            if (!model.IsCreateTemplate)
            {
                List<object> paraProfile = new List<object>();
                paraProfile.AddRange(new object[13]);
                if (!string.IsNullOrEmpty(model.ProfileID))
                {
                    paraProfile[1] = Common.DotNetToOracle(model.ProfileID);
                }

                paraProfile[2] = (object)model.OrgStructureID;
                paraProfile[11] = 1;
                paraProfile[12] = int.MaxValue - 1;
                lstProfileIDs = actionServices.GetData<Hre_ProfileEntity>(paraProfile, ConstantSql.hrm_hr_sp_get_ProfileForReport, ref status).ToList();


                if (model.CutoffDurationID != null)
                {
                    CutOffDuration = actionServices.GetByIdUseStore<Att_CutOffDurationEntity>((Guid)model.CutoffDurationID, ConstantSql.hrm_att_sp_get_CutOffDurationById, ref status);
                    _dateStart = CutOffDuration.DateStart;
                    _dateEnd = CutOffDuration.DateEnd;
                }
            }


            if (model.Settlement != null)
            {
                lstProfileIDs = lstProfileIDs.Where(s => s.Settlement == model.Settlement).ToList();
            }

            if (model.StatusSyn == StatusEmployee.E_WORKING.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => (pro.DateQuit == null || pro.DateQuit >= _dateEnd) && pro.DateHire < _dateStart).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_NEWEMPLOYEE.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateHire <= _dateEnd && pro.DateHire >= _dateStart).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_STOPWORKING.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateQuit != null && pro.DateQuit.Value.Date <= _dateEnd.Date && pro.DateQuit.Value.Date >= _dateStart.Date).ToList();
            }
            else if (model.StatusSyn == StatusEmployee.E_WORKINGANDNEW.ToString())
            {
                lstProfileIDs = lstProfileIDs.Where(pro => pro.DateQuit == null || pro.DateQuit >= _dateEnd).ToList();
            }

            var result = service.GetReportTransferPayroll(model.ExportId, model.IsCreateTemplate, UserLogin, lstProfileIDs, model.BankID, model.CutoffDurationID, model.CurrencyID, model.ExportId, _DatePayMent);

            string statusCur = string.Empty;
            var lstObjCurrency = new List<object>();
            lstObjCurrency.AddRange(new object[4]);
            lstObjCurrency[2] = 1;
            lstObjCurrency[3] = int.MaxValue - 1;
            var listCurrency = actionServices.GetData<Cat_CurrencyEntity>(lstObjCurrency, ConstantSql.hrm_cat_sp_get_Currency, ref status).ToList();

            var currencyname = listCurrency.Where(s => s.ID == model.CurrencyID).FirstOrDefault();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = CutOffDuration.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = CutOffDuration.DateEnd };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "DatePayment", Value = model.DatePayMent ?? DateTime.MinValue };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "CurrencyName", Value = currencyname != null ? currencyname.CurrencyName : string.Empty };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "Space", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5 };
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Sal_ReportTransferPayroll",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                string fullPath = string.Empty;
                //fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, ExportFileType.CSV);
                fullPath = ExportService.ExportLocalOrFTP(model.ExportId, result, listHeaderInfo, UserGuidID);

                #region Upload file Local
                //Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
                //string CustomPath = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL);
                //bool? CustomPathActive = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL_CHECK);
                //if (CustomPathActive == true && !string.IsNullOrEmpty(CustomPath))
                //{
                //    if (!CustomPath.EndsWith("//"))
                //    { CustomPath += "//"; }
                //    fullPath = ExportService.ExportCustomPath(model.ExportId, null, listHeaderInfo, result, CustomPath, ExportFileType.CSV);
                //}
                //else
                //{
                //    fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, ExportFileType.CSV);
                //}
                #endregion

                #region Uploadfile FTP
                ResultsObject Result = new ResultsObject();
                //string CustomPathFtp = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL_FTP);
                //bool? CustomPathFTPActive = sysServices.GetConfigValue<bool>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL_FTP_CHECK);
                //if (CustomPathFTPActive == true && !String.IsNullOrEmpty(CustomPathFtp))
                //{
                //    string UserName = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL_USERNAME);
                //    string PassWord = sysServices.GetConfigValue<string>(AppConfig.HRM_SAL_URL_SAVE_REPORT_TRANSFER_PAYROLL_PASS);
                //    Result = Common.UpLoadFileFTP(UserName, PassWord, CustomPathFtp, fullPath.Replace("Success,Downloads/", ""), Common.GetPath(fullPath.Replace("Success,", "")));
                //}
                Result.Messenger = fullPath;
                #endregion

                return Json(Result);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportWorkHistoryDeptValidate(Hre_ReportWorkHistoryDeptModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportWorkHistoryDeptModel>(LanguageCode, model, "Hre_ReportWorkHistoryDept", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }


        #region BC HeadCount Doanh Số
        public ActionResult GetReportHCSalesValidate(Hre_ReportHCSalesModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCSalesModel>(LanguageCode, model, "Hre_ReportHCSales", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
                //return Json(message);
            }
            #endregion
            return Json(message);

        }

        public ActionResult GetReportHCSales([DataSourceRequest] DataSourceRequest request, Hre_ReportHCSalesModel model)
        {
            var service = new Hre_ReportServices();
            var eva_Service = new Eva_ReportServices();
            var hrService = new Hre_ProfileServices();

            //List<object> listObj = new List<object>();
            //listObj.Add(model.OrgStructureID);
            //listObj.Add(string.Empty);
            //listObj.Add(string.Empty);

            //string status = string.Empty;

            //var listEntity = hrService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgStructure, ref status).Select(s => s.ID).ToList();

            var result = eva_Service.GetReportHCSales(model.dateSearch, model.OrgStructureID, model.IsCreateTemplate, UserLogin);
            //var rs = result.Translate<Hre_ReportMonthlyHCModel>();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            object obj = new Hre_ReportHCSalesModel();
            var isDataTable = false;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportHCSalesModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                //var row = result.Rows.Count;
                // result.Rows[row - 1].Delete();
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);

                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            //0string dataReturn = result.ConvertDataTabletoString();
            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        #region BC Mẫu 05AKK / 05BKK
        public ActionResult GetReportABKK([DataSourceRequest] DataSourceRequest request, Ins_Report05ABKKModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Ins_Report05ABKKModel>(LanguageCode, model, "Ins_Report05ABKK", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            Hre_ReportServices hr_service = new Hre_ReportServices();
            var table = hr_service.GetReportABKK(model.IsCreateTemplate, UserLogin, model.OrgStructureID, model.From3Month, model.DateFrom, model.Dateto, model.IsShowFinalizationZero, model.IsShowProFileZero, model.WorkPlaceID, model.ExportId);
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "MonthFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "MonthTo", Value = model.Dateto };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = table,
                    FileName = "Ins_Report05ABKK",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, table, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return new JsonResult() { Data = table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        #endregion

        /// <summary>
        /// Kiểm tra điều kiện bắt buộc báo cáo head count thâm niên ver.2
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult GetReportHCEducationV2Validate(Hre_ReportHCSeniorityV2Model model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCSeniorityV2Model>(LanguageCode, model, "Hre_ReportHCSeniorityV2", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);

        }

        public ActionResult GetReportHCEducationV2([DataSourceRequest] DataSourceRequest request, Hre_ReportHCEducationV2Model model)
        {
            var service = new Hre_ReportServices();
            //var service = new Pur_MCAMService();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportHCSeniorityV2Model();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var result = service.GetReportHCEducationV2(model.MonthYear, model.OrgStructureID, model.OrgStructureTypeID, model.IsProfileQuit, model.IsCreateTemplate, UserLogin, model.ExportID);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    HeaderInfo = listHeaderInfo,
                    FileName = "Hre_ReportHCEducationV2Model",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    var colName = model.ValueFields;
                    valueField = colName.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #region Báo cáo Sinh nhật
        [HttpPost]
        public ActionResult GetReportExpiredWorkPermit([DataSourceRequest] DataSourceRequest request, Hre_WorkPermitModel model)
        {
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom.Value : DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo.Value : DateTime.Now };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            #region Tạo  Template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkPermitModel(),
                    FileName = "Hre_WorkPermit",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_WorkPermitModel>(LanguageCode, model, "Hre_ReportWorkPermit", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = new List<Hre_WorkPermitModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionServices.GetData<Hre_WorkPermitEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptExpiredWorkPermit, ref status).ToList().Translate<Hre_WorkPermitModel>();
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));

        }

        [HttpPost]
        public ActionResult GetReportExpiredWorkPermitFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEBEFOR = sysServices.GetConfigValue<int>(AppConfig.PAPRlABORPHEPSLED_VALUEBEFOR);
            if (_VALUEBEFOR >= 0)
            {
                DateFrom = DateTo.AddDays(-_VALUEBEFOR);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetReportExpiredWorkPermitToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEAFTER = sysServices.GetConfigValue<int>(AppConfig.PAPRlABORPHEPSLED_VALUEAFTER);
            if (_VALUEAFTER >= 0)
            {
                DateFrom = DateTo.AddDays(_VALUEAFTER);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult GetReportContractdetailV2([DataSourceRequest] DataSourceRequest request, Hre_ReportContractDetailSearchModel model)
        {
            var _ReportServices = new Hre_ReportServices();
            var actionService = new ActionService(UserLogin);

            #region Getdata
            string status = string.Empty;
            var lstResult = new List<Hre_ContractEntity>();
            if (!model.IsCreateTemplate)
            {
                request.PageSize = int.MaxValue - 1;
                lstResult = GetListData<Hre_ContractEntity, Hre_ContractEntity, Hre_ReportContractDetailSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ReportContractDetail, ref status).ToList();
            }
            #endregion
            DataTable Table = _ReportServices.GetReportContractDetail(lstResult, model.IsCreateTemplate);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart != null ? model.DateStart : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd != null ? model.DateEnd : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_RptContractDetail",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #region BC Visa Hết Hạn
        [HttpPost]
        public ActionResult GetDateVisaFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEAFTER = sysServices.GetConfigValue<int>(AppConfig.VISAED_VALUEAFTER);
            if (_VALUEAFTER >= 0)
            {
                DateFrom = DateTo.AddDays(-_VALUEAFTER);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateVisaToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEBEFOR = sysServices.GetConfigValue<int>(AppConfig.VISAED_VALUEBEFOR);
            if (_VALUEBEFOR >= 0)
            {
                DateFrom = DateTo.AddDays(_VALUEBEFOR);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }


        #endregion

        #region BC HeadCount theo tháng

        public ActionResult GetReportHCByMonthValidate(Hre_ReportHCByMonthModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCByMonthModel>(LanguageCode, model, "Hre_ReportHCByMonth", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            return Json(message);
            #endregion

        }

        public ActionResult GetReportHCByMonth([DataSourceRequest] DataSourceRequest request, Hre_ReportHCByMonthModel model)
        {

            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportHCByMonthModel();
            var isDataTable = false;
            #region  Getdata
            var result = service.GetReportHCByMonth(model.dateSearch,
                model.OrgStructureIDs,
                model.IsCreateTemplate, UserLogin);
            #endregion

            #region Create template
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "MonthOfEffect", Value = model.dateSearch ?? DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo4 };

            if (model.IsCreateTemplateForDynamicGrid)
            {

                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportHCByMonthModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable,
                    HeaderInfo = listHeaderInfo,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region Export
            if (model.ExportID != Guid.Empty)
            {

                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            #endregion
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        [HttpPost]
        public ActionResult GetReportDetailProfileHDTJob([DataSourceRequest] DataSourceRequest request, Hre_ReportDetailProfileHDTJobModel model)
        {
            #region Validate
            string status = string.Empty;
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportDetailProfileHDTJobModel>(LanguageCode, model, "Hre_ReportDetailProfileHDTJob", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion
            var actionService = new ActionService(UserLogin);
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportDetailProfileHDTJobModel();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateSearch", Value = model.DateSearch != null ? model.DateSearch : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            List<object> lstObjSearch = new List<object>();
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(model.OrgStructureID);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(null);
            lstObjSearch.Add(1);
            lstObjSearch.Add(int.MaxValue - 1);
            var result = actionService.GetData<Hre_HDTJobEntity>(lstObjSearch, ConstantSql.hrm_hr_sp_get_HDTJob, ref status).Where(s =>
                (s.DateFrom <= model.DateSearch && s.DateTo >= model.DateSearch) || (s.DateFrom <= model.DateSearch && s.DateTo == null)).ToList();

            if (result.Count > 0)
            {
                var profileServices = new Hre_ProfileServices();
                var listResult = profileServices.getHDTJobByPrice(result, model.DateFrom, model.DateTo).Translate<Hre_ReportDetailProfileHDTJobModel>();
                return Json(listResult.ToDataSourceResult(request));
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportDetailProfileHDTJobModel(),
                    FileName = "Hre_ReportDetailProfileHDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportDependantProfileQuit([DataSourceRequest] DataSourceRequest request, Hre_ReportDependantProfileQuitModel model)
        {
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportDependantProfileQuitModel(),
                    FileName = "Hre_ReportDependantProfileQuit",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportDependantProfileQuitModel>(LanguageCode, model, "Hre_ReportPayHDTJob", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportDependantProfileQuit(model.DateQuitFrom, model.DateQuitTo, model.WorkPlaceID, model.OrgStructureID, UserLogin).Translate<Hre_ReportDependantProfileQuitModel>();
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #region Báo cáo trường hợp bất thường HDT Job

        public ActionResult GetReportUnusualHDTValidate(Hre_ReportUnusualHDTModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportUnusualHDTModel>(LanguageCode, model, "Hre_ReportUnusualHDT", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        public ActionResult GetReportUnusualHDT([DataSourceRequest] DataSourceRequest request, Hre_ReportUnusualHDTModel model)
        {
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportUnusualHDTModel>(LanguageCode, model, "Hre_ReportUnusualHDT", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportUnusualHDTModel();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            DateTime datefrom = DateTime.Now;
            DateTime dateto = DateTime.Now;
            if (model.DateFrom != null)
            {
                datefrom = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                dateto = model.DateTo.Value.AddDays(1).AddMinutes(-1);
            }

            var result = service.GetReportUnusualHDT(
                datefrom,
                dateto,
                model.OrgStructureIDs,
                model.IsCreateTemplate,
                UserLogin,
                model.ProfileName,
                model.CodeEmp,
                Guid.Parse(UserID)
                );

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportUnusualHDTModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        #region Hre_ReportSummaryDependantDeduction
        public ActionResult GetReportSummaryDependantDeductionValidate(Hre_ReportSummaryDependantDeductionModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportSummaryDependantDeductionModel>(LanguageCode, model, "Hre_ReportSummaryDependantDeduction", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetReportSummaryDependantDeduction([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryDependantDeductionModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "MonthFrom", Value = model.MonthFrom ?? DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "MonthTo", Value = model.MonthTo ?? DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportSummaryDependantDeductionModel(),
                    FileName = "Hre_ReportSummaryDependantDeductionModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSummaryDependantDeductionModel>(LanguageCode, model, "Hre_ReportSummaryDependantDeduction", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            List<object> paraDependant = new List<object>();
            paraDependant.AddRange(new object[12]);
            paraDependant[10] = 1;
            paraDependant[11] = int.MaxValue - 1;
            var lstDependant = actionService.GetData<Hre_DependantEntity>(paraDependant, ConstantSql.hrm_hr_sp_get_Dependant, ref status);
            var ReportServices = new Hre_ReportServices();

            if (model.MonthFrom != null && model.MonthTo != null && lstDependant != null)
            {
                lstDependant = lstDependant.Where(s =>
                    ((model.MonthFrom <= s.MonthOfExpiry && s.MonthOfExpiry <= model.MonthTo) || (s.MonthOfExpiry == null))
                    && (s.MonthOfEffect <= model.MonthTo)).ToList();
            }
            var result = ReportServices.GetReportSummaryDependantDeduction(lstDependant, model.IsCreateTemplate);

            if (model.ExportId != Guid.Empty)
            {
                if (model.MonthFrom != null && model.MonthTo != null)
                {
                    var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }
                else
                {
                    var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        [HttpPost]
        public ActionResult GetReportHDTJobOut([DataSourceRequest] DataSourceRequest request, Hre_ReportHDTJobOutSearchModel model)
        {
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_HDTJobModel(),
                    FileName = "Hre_HDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportHDTJobOutSearchModel>(LanguageCode, model, "Hre_ReportHDTJobOut", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportHDTJobOut(model.DateTo, model.OrgStructureID, model.WorkPlaceID, model.ProfileName, model.CodeEmp, UserLogin).Translate<Hre_HDTJobModel>();

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportHDTJobIn([DataSourceRequest] DataSourceRequest request, Hre_ReportHDTJobInSearchModel model)
        {
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_HDTJobModel(),
                    FileName = "Hre_HDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportHDTJobInSearchModel>(LanguageCode, model, "Hre_ReportHDTJobIn", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportHDTJobIn(model.DateFrom, model.OrgStructureID, model.WorkPlaceID, model.ProfileName, model.CodeEmp, UserLogin).Translate<Hre_HDTJobModel>();

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportHDTJobDecisionAssignWork([DataSourceRequest] DataSourceRequest request, Hre_ReportHDTJobDecisionAssignWorkSearchModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_HDTJobModel(),
                    FileName = "Hre_HDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportHDTJobDecisionAssignWorkSearchModel>(LanguageCode, model, "Hre_ReportHDTJobDecisionAssignWork", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }

            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportHDTJobDecisionAssignWork(model.DateFrom, model.OrgStructureID, model.PositionID, model.JobTitleID, model.ProfileName, model.CodeEmp, UserLogin).Translate<Hre_HDTJobModel>();

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #region BC NV Cho Nghi Viec
        public ActionResult GetReportProfileIsWaitingStopWorkingList([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileWaitingStopWorkingSearchModel model)
        {
            string status = string.Empty;
            //var isDataTable = false;
            var actionService = new ActionService(UserLogin);
            //object obj = new Hre_ProfileModel();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            if ((model.IsCreateTemplate == true && model.IsCreateTemplateForDynamicGrid == true) || model.ExportId != Guid.Empty)
            {
                lstModel = new ListQueryModel
                {
                    PageSize = int.MaxValue - 1,
                    PageIndex = 1,
                    Filters = ExtractFilterAttributes(request),
                    Sorts = ExtractSortAttributes(request),
                    AdvanceFilters = ExtractAdvanceFilterAttributes(model)
                };
            }

            //son.vo - theo task 0052438 
            var listProfile = new List<Hre_ProfileEntity>();
            if (!model.IsCreateTemplateForDynamicGrid && !model.IsCreateTemplate)
            {
                listProfile = actionService.GetData<Hre_ProfileEntity>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileWaitingStopWoking, ref status);
            }
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportProfileWaitingStopWorking(listProfile);
            var isDataTable = false;
            object obj = new DataTable();
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportProfileWaitingStopWorkingEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable

                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = string.Empty;
                if (headerInfo1.Value == null || headerInfo2.Value == null)
                {
                    fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                }
                else
                {
                    fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                }
                return Json(fullPath);
            }
            //return new JsonResult() { Data = result.ToDataSourceResult(request), MaxJsonLength = int.MaxValue };
            #region mapping dataTable to dataList
            List<Hre_ReportProfileWaitingStopWorkingModel> dataList = new List<Hre_ReportProfileWaitingStopWorkingModel>();
            Hre_ReportProfileWaitingStopWorkingModel aTSource = null;

            if (result.Rows.Count > 0)
            {
                const BindingFlags flags = BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic;
                var objFieldNames = (from PropertyInfo aProp in typeof(Hre_ReportProfileWaitingStopWorkingModel).GetProperties(flags)
                                     select new
                                     {
                                         Name = aProp.Name,
                                         Type = Nullable.GetUnderlyingType(aProp.PropertyType) ?? aProp.PropertyType
                                     }).ToList();
                var dataTblFieldNames = (from DataColumn aHeader in result.Columns
                                         select new { Name = aHeader.ColumnName, Type = aHeader.DataType }).ToList();
                var commonFields = objFieldNames.Intersect(dataTblFieldNames).ToList();
                foreach (DataRow dataRow in result.AsEnumerable().ToList())
                {
                    aTSource = new Hre_ReportProfileWaitingStopWorkingModel();
                    foreach (var aField in commonFields)
                    {
                        PropertyInfo propertyInfos = aTSource.GetType().GetProperty(aField.Name);
                        if (dataRow[aField.Name] == DBNull.Value)
                            continue;
                        propertyInfos.SetValue(aTSource, dataRow[aField.Name], null);
                    }
                    dataList.Add(aTSource);
                }
            }
            #endregion
            return Json(dataList.ToDataSourceResult(request));
        }

        #endregion

        #region [05/01/2016][Phuc.Nguyen][New Func][0062552] Bổ sung báo cáo headcount theo loại nhân viên
        public ActionResult GetReportYearHC([DataSourceRequest] DataSourceRequest request, Hre_ReportYearHCModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportYearHCModel>(LanguageCode, model, "Hre_ReportYearHC", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            var reportServices = new Hre_ReportServices();
            DataTable result = reportServices.GetReportYearHC(model.Year, model.EmpTypeID, model.IsCreateTemplate);

            #region Xử lý cách export mới

            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "Year", Value = model.Year };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Today };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportYearHCModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable,
                    HeaderInfo = listHeaderInfo,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        #endregion

        #region HieuVan - Báo cáo nhân viên nghỉ việc
        public ActionResult GetReportProfileQuitV2([DataSourceRequest] DataSourceRequest request, Hre_ReportGeneralSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            if (model.IsCreateTemplate && model.DateStart == null && model.DateEnd == null)
            {
                model.DateStart = DateTime.Now;
                model.DateEnd = DateTime.Now;
            }
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportGeneralSearchModel>(LanguageCode, model, "Hre_ReportProfileQuitV2", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion

            var relativesServices = new Hre_ReportServices();
            string NameTable = "ReportProfileQuitV2";

            DataTable Table = relativesServices.GetReportProfileQuitV2(model.OrgStructureID, (DateTime)model.DateStart,
                (DateTime)model.DateEnd, model.CodeEmp, model.ProfileName, model.ResignReasonID, model.TypeOfStopID, model.JobTitleID, model.PositionID, model.WorkPlaceID, model.IsCreateTemplate, NameTable, UserLogin);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }

            //Nguyen.Le - 14/11/2017 - 0089883
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion

        #region HieuVan - Báo cáo thông tin nhân viên
        public ActionResult GetReportProfileInformation([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileInformationSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportProfileInformationSearchModel>(LanguageCode, model, "Hre_ReportProfileInformation", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message);
            }
            #endregion
            string status = string.Empty;
            var Services = new Hre_ReportServices();
            var actionservices = new ActionService(UserLogin, LanguageCode);
            string NameTable = "ReportProfileInformation";

            var lstProfile = new List<Hre_ProfileEntity>();
            if (!model.IsCreateTemplate)
            {
                if (model.strWorkPlaceID != null)
                {
                    model.strWorkPlaceID = Common.DotNetToOracle(model.strWorkPlaceID);
                }
                if (model.strProfileID != null)
                {
                    model.strProfileID = Common.DotNetToOracle(model.strProfileID);
                }
                var listModel = new List<object>();
                listModel.AddRange(new object[22]);
                listModel[2] = model.OrgStructureID;
                //Son.Vo - 20160519 - 0067752 - thêm đk lọc
                listModel[8] = model.DateHireFrom;
                listModel[9] = model.DateHireTo;
                listModel[12] = model.DateQuitFrom;
                listModel[13] = model.DateQuitTo;
                listModel[14] = model.strWorkPlaceID;
                listModel[15] = model.strProfileID;
                listModel[20] = 1;
                listModel[21] = Int32.MaxValue - 1;
                lstProfile = actionservices.GetData<Hre_ProfileEntity>(listModel, ConstantSql.hrm_hr_sp_get_rptProfileInformation, ref status);
            }

            DataTable Table = Services.GetReportProfileInformation(lstProfile, model.DateStart, model.DateEnd, model.IsCreateTemplate, NameTable);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion

        #region HieuVan - Hỗ trợ báo cáo thông tin nhân viên tại 1 thời điểm
        public ActionResult GetReportProfileInformationMoment([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileInformationMomentSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportProfileInformationMomentSearchModel>(LanguageCode, model, "Hre_ReportProfileInformationMoment", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message);
            }
            #endregion

            var Services = new Hre_ReportServices();
            var actionService = new ActionService(UserLogin);

            #region Getdata
            string status = string.Empty;
            var listProfileByOrg = new List<Hre_ProfileEntity>();
            var lstWorkhistory = new List<Hre_WorkHistoryEntity>();
            if (!model.IsCreateTemplate)
            {
                var listObj = new List<object>();
                listObj.Add(model.OrgStructureID);
                listObj.Add(model.ProfileName);
                listObj.Add(model.CodeEmp);
                listObj.Add(model.DateStart);
                listObj.Add(model.IsFilterWorkHistory);
                listObj.Add(model.WorkPlaceID);
                listObj.Add(model.SalaryClassID);
                //Son.Vo - 20161103 - 0075120
                listProfileByOrg = actionService.GetData<Hre_ProfileEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileForRptProInfo, ref status).ToList();
            }

            #endregion

            string NameTable = "ReportProfileInformationMoment";
            DataTable Table = Services.GetReportProfileInformationMoment(listProfileByOrg, model.DateStart, model.IsCreateTemplate, NameTable);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd != null ? model.DateEnd : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion

        #region Son.Vo - 20151126 - Báo cáo hợp đồng hết hạn
        public ActionResult GetReportContractExpired([DataSourceRequest] DataSourceRequest request, Hre_ReportContractExpiredSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportContractExpiredSearchModel>(LanguageCode, model, "Hre_ReportGeneral", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            string status = string.Empty;
            var Services = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            DateTime? dateTo = null;
            DateTime? dateFrom = null;
            if (isshowloopcontract == false)
            {
                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                dateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                dateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
            }
            var isDataTable = false;
            var listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.Status);
            listObj.Add(dateFrom);
            listObj.Add(dateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.IDNo);
            listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
            listObj.Add(model.DateSignedStart);
            listObj.Add(model.DateSignedEnd);
            listObj.Add(model.ContractNo);
            listObj.Add(null);
            listObj.Add(model.ContractTypeID);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
            // Son.Vo - theo task - 0054827
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.Gender);
            listObj.Add(model.DateHireFrom);
            listObj.Add(model.DateHireTo);
            listObj.Add(model.StatusSyn);
            listObj.Add(null);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstContractEntity = new List<Hre_ReportExpiryContractEntity>();
            if (!model.IsCreateTemplate)
            {
                if (isshowloopcontract == true)
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_ReportContractExpiredByLoop, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
                else
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_ReportContractExpired, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
            }
            string NameTable = "ReportContractExpired";
            DataTable Table = Services.GetReportContractExpired(lstContractEntity, model.IsCreateTemplate, NameTable);
            #region Xử lý cách export mới
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateEndFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEndTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            #endregion
        }

        public ActionResult ExportReportContractExpired([DataSourceRequest] DataSourceRequest request, Hre_ReportContractExpiredSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportContractExpiredSearchModel>(LanguageCode, model, "Hre_ReportGeneral", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            string status = string.Empty;
            var Services = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            DateTime? dateTo = null;
            DateTime? dateFrom = null;
            if (isshowloopcontract == false)
            {
                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                dateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                dateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
            }
            var isDataTable = false;
            var listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.Status);
            listObj.Add(dateFrom);
            listObj.Add(dateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.IDNo);
            listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
            listObj.Add(model.DateSignedStart);
            listObj.Add(model.DateSignedEnd);
            listObj.Add(model.ContractNo);
            listObj.Add(null);
            listObj.Add(model.ContractTypeID);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
            // Son.Vo - theo task - 0054827
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.Gender);
            listObj.Add(model.DateHireFrom);
            listObj.Add(model.DateHireTo);
            listObj.Add(model.StatusSyn);
            listObj.Add(null);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstContractEntity = new List<Hre_ReportExpiryContractEntity>();
            if (!model.IsCreateTemplate)
            {
                if (isshowloopcontract == true)
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_ReportContractExpiredByLoop, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
                else
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_ReportContractExpired, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
            }
            string NameTable = "ReportContractExpired";
            DataTable Table = Services.GetReportContractExpired(lstContractEntity, model.IsCreateTemplate, NameTable);
            #region Xử lý cách export mới
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = Table;
                isDataTable = true;
            }
            //Son.Vo - 20180109 - 0091952
            string Companylogo = GetCompanyLogo(model.OrgStructureID);
            var headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateEndFrom };
            var headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEndTo };
            var headerInfo3 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo4 = new HeaderInfo() { Name = "CompanyLogo", Value = null, ColumnType = typeof(object) };
            var templatepath = Common.GetPath(Common.TemplateURL) + Companylogo;
            if (!string.IsNullOrEmpty(Companylogo) && System.IO.File.Exists(templatepath))
            {
                headerInfo4.Value = System.IO.File.ReadAllBytes(Common.GetPath(Common.TemplateURL) + Companylogo);
            }
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            if (model != null && model.IsCreateTemplate)
            {
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Name = "CompanyLogo(Picture:FitToCell)";
                    }
                }

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
            #endregion
        }
        #endregion

        #region HieuVan - Báo cáo hợp đồng hiện tại
        public ActionResult GetReportContractCurrent([DataSourceRequest] DataSourceRequest request, Hre_ReportGeneralSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportGeneralSearchModel>(LanguageCode, model, "Hre_ReportGeneral", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion

            var Services = new Hre_ReportServices();
            var actionService = new ActionService(UserLogin);

            #region Getdata
            string status = string.Empty;
            List<Hre_ProfileEntity> listProfileByOrg = new List<Hre_ProfileEntity>();
            if (!model.IsCreateTemplate)
            {
                //Lọc theo phòng ban
                List<object> listObj = new List<object>();
                listObj.Add(model.OrgStructureID);
                listObj.Add(model.ProfileName);
                listObj.Add(model.CodeEmp);
                listProfileByOrg = actionService.GetData<Hre_ProfileEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrg, ref status);
            }
            #endregion

            string NameTable = "ReportContractCurrent";
            DataTable Table = Services.GetReportContractCurrent(listProfileByOrg, (DateTime)model.DateStart, (DateTime)model.DateEnd, model.IsCreateTemplate, NameTable);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = NameTable,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion

        [HttpPost]
        public ActionResult GetReportRecieveObjectByTime([DataSourceRequest] DataSourceRequest request, Hre_ReportRecieveObjectByTimeModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportRecieveObjectByTimeModel>(LanguageCode, model, "Hre_ReportRecieveObjectByTime", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model.DateFrom == DateTime.MinValue)
            {
                model.DateFrom = DateTime.Now;
            }
            if (model.DateTo == DateTime.MaxValue)
            {
                model.DateTo = DateTime.Now;
            }
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportRecieveObjectByTime(model.OrgStructureID, model.DateFrom, model.DateTo, model.IsCreateTemplate, UserLogin);
            object obj = new DataTable();
            bool isDataTable = false;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportRecieveObjectByTime",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public string ValidateHDTJob(Guid? ProfileID, DateTime? DateFrom, DateTime? DateTo)
        {
            string messageValidate = string.Empty;
            var baseService = new BaseService();
            string status = string.Empty;
            var lstHDTjobs = baseService.GetData<Hre_HDTJobEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_HDTJobsByProfileId, UserLogin, ref status).Where(s => s.DateFrom != DateFrom).ToList();
            foreach (var item in lstHDTjobs)
            {
                if (DateFrom <= item.DateFrom && item.DateFrom <= DateTo && DateFrom != item.DateFrom && item.DateTo != DateTo)
                {
                    messageValidate = ConstantDisplay.HRM_EmpRegisteredOnThisTime.TranslateString();
                }
            }
            return messageValidate;
        }

        [HttpPost]
        public ActionResult GetReportSumaryHDTProfile([DataSourceRequest] DataSourceRequest request, Hre_ReportSumaryHDTProfileModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateFrom ?? DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateTo ?? DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportSumaryHDTProfileModel(),
                    FileName = "Hre_ReportSumaryHDTProfile",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSumaryHDTProfileModel>(LanguageCode, model, "Hre_ReportSumaryHDTProfile", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportSumaryHDTProfile(
                model.DateFrom,
                model.DateTo,
                model.HDTJobGroupID,
                model.CodeEmp, UserLogin).Translate<Hre_ReportSumaryHDTProfileModel>();

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        #region Hre_ReportSummaryDependant
        public ActionResult ValidateReportSummaryDependantList([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryDependantSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSummaryDependantSearchModel>(LanguageCode, model, "Hre_ReportSummaryDependant", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
        }

        public ActionResult GetReportSummaryDependantList([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryDependantSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSummaryDependantSearchModel>(LanguageCode, model, "Hre_ReportSummaryDependant", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            string status = string.Empty;
            var service = new BaseService();
            var actionservices = new ActionService(UserLogin, LanguageCode);
            var reportServices = new Hre_DependantServices();
            var lstDependant = new List<Hre_ReportSummaryDependantEntity>();
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "MonthOfExpiry", Value = model.MonthOfExpiry };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = request.PageSize,
                PageIndex = request.Page,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            if (!model.IsCreateTemplate)
            {
                if (model.ExportId != Guid.Empty)
                {
                    request.PageSize = int.MaxValue - 1;
                }
                lstDependant = GetListData<Hre_ReportSummaryDependantEntity, Hre_ReportSummaryDependantEntity, Hre_ReportSummaryDependantSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptSummaryDependant, ref status);
            }
            lstDependant = reportServices.GetReportSummaryDependant(lstDependant, model.IsCreateTemplate);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportSummaryDependantModel(),
                    FileName = "Hre_ReportSummaryDependantEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false

                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                string fullPath = "";
                if (model.MonthOfExpiry != null)
                {
                    fullPath = ExportService.Export(model.ExportId, lstDependant.Translate<Hre_ReportSummaryDependantModel>(), listHeaderInfo, UserGuidID, model.ExportType);
                }
                else
                {
                    fullPath = ExportService.Export(model.ExportId, lstDependant.Translate<Hre_ReportSummaryDependantModel>(), null, UserGuidID, model.ExportType);
                }

                return Json(fullPath);
            }
            if (lstDependant != null)
            {
                request.Page = 1;
                var _datasource = lstDependant.ToDataSourceResult(request);
                int total = lstDependant.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)lstDependant.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
                _datasource.Total = total;
                _datasource.Data = lstDependant;
                return Json(_datasource, JsonRequestBehavior.AllowGet);
            }
            return Json(lstDependant);

        }
        #endregion

        #region Báo cáo thống kê người phụ thuộc
        public ActionResult GetReportDependantList([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryDependantModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var cufoff = new Att_CutOffDurationEntity();
            if (model.CutOffDurationID != null)
            {
                cufoff = actionService.GetData<Att_CutOffDurationEntity>(Common.DotNetToOracle(model.CutOffDurationID.ToString()), ConstantSql.hrm_att_sp_get_CutOffDurationById, ref status).FirstOrDefault();
            }
            var service = new BaseService();

            var ReportServices = new Hre_ReportServices();
            List<object> paraDependant = new List<object>();
            paraDependant.AddRange(new object[12]);
            paraDependant[0] = model.ProfileName;
            paraDependant[1] = model.CodeEmp;
            paraDependant[2] = model.OrgStructureID;
            paraDependant[3] = model.JobTitleID;
            paraDependant[4] = model.PositionID;
            paraDependant[5] = model.DependantName;
            paraDependant[6] = model.RelationID;
            paraDependant[7] = model.WorkPlaceIds;
            paraDependant[8] = model.PayrollGroupID;
            paraDependant[9] = model.isIncludeQuitEmp;
            paraDependant[10] = 1;
            paraDependant[11] = int.MaxValue - 1;
            var lstDependant = new List<Hre_DependantEntity>();
            if (!model.IsCreateTemplate)
            {
                lstDependant = actionService.GetData<Hre_DependantEntity>(paraDependant, ConstantSql.hrm_hr_sp_get_RptDependantList, ref status).ToList();
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "MonthOfExpiry", Value = model.MonthOfExpiry != null ? model.MonthOfExpiry : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "PrintData", Value = DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CutOffDurationName", Value = cufoff != null ? cufoff.CutOffDurationName : null };

            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "CodeUserPrint", Value = lstDependant.FirstOrDefault() != null ? lstDependant.FirstOrDefault().UserCodeEmp : model.UserCodeEmp };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            //if (lstDependant.Count == 0)
            //{
            //    return Json(null);
            //}

            if (cufoff.ID != Guid.Empty)
            {
                lstDependant = lstDependant.Where(s => (s.MonthOfEffect <= cufoff.DateEnd && cufoff.DateEnd <= s.MonthOfExpiry)
                || (s.MonthOfEffect <= cufoff.DateEnd && s.MonthOfExpiry == null)).ToList();
                foreach (var item in lstDependant)
                {
                    item.CutOffDurationName = cufoff.CutOffDurationName;
                }
            }

            if (model.MonthOfExpiry != null && lstDependant != null)
            {
                lstDependant = lstDependant.Where(s => (s.MonthOfEffect <= model.MonthOfExpiry && model.MonthOfExpiry <= s.MonthOfExpiry)
                    || (s.MonthOfEffect <= model.MonthOfExpiry && s.MonthOfExpiry == null)).ToList();
            }

            DataTable result = ReportServices.GetReportDependant(lstDependant, model.IsCreateTemplate);
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportSummaryDependant",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                string fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }
        #endregion

        [HttpPost]
        public ActionResult GetReportHDTJobNotDateEnd([DataSourceRequest] DataSourceRequest request, Hre_ReportHDTJobNotDateEndModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportHDTJobNotDateEndModel(),
                    FileName = "Hre_ReportHDTJobNotDateEnd",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportHDTJobNotDateEndModel>(LanguageCode, model, "Hre_ReportHDTJobNotDateEnd", ref message);
            if (!checkValidate)
            {
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportHDTJobNotDateEnd(
                model.DateFrom,
                model.DateTo,
                model.OrgStructureIDs, UserLogin).Translate<Hre_ReportHDTJobNotDateEndModel>();

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetDelegateApproveList([DataSourceRequest] DataSourceRequest request, Sys_DelegateApproveSearchModel Sys_GroupSearchModel)
        {
            return GetListDataAndReturn<Sys_DelegateApprovedModel, Sys_DelegateApproveEntity, Sys_DelegateApproveSearchModel>(request, Sys_GroupSearchModel, ConstantSql.hrm_sys_sp_get_DelegateApproveByUserID);
        }

        [HttpPost]
        public ActionResult GetReportSumarySeniorHDTProfile([DataSourceRequest] DataSourceRequest request, Hre_ReportSumarySeniorHDTProfileModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSumarySeniorHDTProfileModel>(LanguageCode, model, "Hre_ReportSumaryHDTProfile", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetReportSumarySeniorHDTProfile(model.DateFrom, model.DateTo, model.ProfileName, model.CodeEmp, model.OrgStructureID, UserLogin).Translate<Hre_ReportSumarySeniorHDTProfileModel>();
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateFrom ?? DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateTo ?? DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "E_DEPARTMENT", Value = (model.OrgStructureID != null && result != null) ? result.FirstOrDefault().E_DEPARTMENT : "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportSumarySeniorHDTProfileModel(),
                    FileName = "Hre_ReportSumarySeniorHDTProfile",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportSummaryDisciplineValidate(Hre_ReportSummaryDisciplineModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportSummaryDisciplineModel>(LanguageCode, model, "Hre_ReportSummaryDiscipline", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetReportSummaryDiscipline([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryDisciplineModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model.DateFrom == null)
            {
                model.DateFrom = DateTime.Now.Date;
            }
            if (model.DateTo == null)
            {
                model.DateTo = DateTime.Now.AddDays(1).AddMilliseconds(-1);
            }

            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            var isDataTable = false;
            object obj = new Hre_ReportSummaryDisciplineModel();

            string status = string.Empty;
            var result = service.GetReportSummaryDiscipline(model.DateFrom.Value, model.DateTo.Value, model.OrgStructureID, model.IsCreateTemplate, UserLogin);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                result.Columns.RemoveAt(2);
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportSummaryDisciplineModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportRelatives([DataSourceRequest] DataSourceRequest request, Hre_ReportRelativesSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportRelativesEntity(),
                    FileName = "Hre_ReportRelatives",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportRelativesSearchModel>(LanguageCode, model, "Hre_ReportRelatives", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ReportRelativesEntity>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportId != Guid.Empty)
            {
                result = actionService.GetData<Hre_ReportRelativesEntity>(lstModel, ConstantSql.hrm_hr_sp_get_RptRelatives, ref status);
            }
            //Trường hợp click search
            else if (!model.IsCreateTemplate && model.ExportId == Guid.Empty)
            {
                return GetListDataAndReturn<Hre_ReportRelativesModel, Hre_ReportRelativesEntity, Hre_ReportRelativesSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptRelatives);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportKaizenDetail([DataSourceRequest] DataSourceRequest request, Kai_ReportKaizenDetailSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Kai_ReportKaizenDetailModel();

            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Kai_ReportKaizenDetailSearchModel>(LanguageCode, model, "Kai_ReportKaizenDetail", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            DateTime dateFrom = DateTime.Now;
            DateTime dateTo = DateTime.Now;
            if (model.DateFrom != null)
            {
                dateFrom = model.DateFrom.Value;
                dateTo = new DateTime(dateFrom.Year, dateFrom.Month, 1).AddMonths(1).AddDays(-1);
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = dateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = dateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };


            var listPara = new List<object>();
            listPara.AddRange(new object[5]);
            listPara[0] = model.OrgStructureIds;
            listPara[1] = new DateTime(dateFrom.Year, dateFrom.Month, 1);
            listPara[2] = dateTo;
            listPara[3] = 1;
            listPara[4] = int.MaxValue - 1;

            var result = actionService.GetData<Kai_ReportKaizenDetailEntity>(listPara, ConstantSql.hrm_sal_sp_get_RptKaizenDataDetail, ref status).Translate<Kai_ReportKaizenDetailModel>();

            // Bỏ điều kiên tìm kiếm theo yêu cầu của task:"50149"
            //if (result != null)
            //    result = result.Where(s => (s.IsPaymentOut == false || s.IsPaymentOut == null)).ToList();
            if (model != null && model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Kai_ReportKaizenDetailModel(),
                    FileName = "Kai_ReportKaizenDetail",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportKaizenMonthly([DataSourceRequest] DataSourceRequest request, Kai_ReportCTKaizenDataMonthlySearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Kai_ReportKaizenDetailModel();

            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Kai_ReportCTKaizenDataMonthlySearchModel>(LanguageCode, model, "Kai_ReportCTKaizenDataMonthly", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            DateTime dateFrom = DateTime.Now;
            DateTime dateTo = DateTime.Now;
            if (model.DateFrom != null)
            {
                dateFrom = model.DateFrom.Value;
                dateTo = new DateTime(dateFrom.Year, dateFrom.Month, 1).AddMonths(1).AddDays(-1);
            }

            var Lstresult = new List<Kai_ReportKaizenDetailModel>();
            if (!model.IsCreateTemplate)
            {

                var listPara = new List<object>();
                listPara.AddRange(new object[5]);
                listPara[0] = model.OrgStructureIds;
                listPara[1] = new DateTime(dateFrom.Year, dateFrom.Month, 1);
                listPara[2] = dateTo;
                listPara[3] = 1;
                listPara[4] = int.MaxValue - 1;

                var result = actionService.GetData<Kai_ReportKaizenDetailEntity>(listPara, ConstantSql.hrm_sal_sp_get_RptKaizenDataDetail, ref status).Where(s =>
                     (s.IsPaymentOut == false || s.IsPaymentOut == null) && s.Status == EnumDropDown.Kai_KaizenDataStatus.E_APPROVED.ToString()).ToList().Translate<Kai_ReportKaizenDetailModel>();

                var lstProfileIDs = result.Select(s => s.ProfileID).Distinct().ToList();
                foreach (var profileID in lstProfileIDs)
                {
                    var ReportKaizenDetail = new Kai_ReportKaizenDetailModel();
                    var SumAmount = result.Where(s => s.ProfileID == profileID).Sum(s => s.SumAmount);
                    var profile = result.Where(s => s.ProfileID == profileID).FirstOrDefault();
                    ReportKaizenDetail.CodeEmp = profile.CodeEmp;
                    ReportKaizenDetail.ProfileName = profile.ProfileName;
                    ReportKaizenDetail.E_UNIT = profile.E_UNIT;
                    ReportKaizenDetail.E_DIVISION = profile.E_DIVISION;
                    ReportKaizenDetail.E_DEPARTMENT = profile.E_DEPARTMENT;
                    ReportKaizenDetail.E_TEAM = profile.E_TEAM;
                    ReportKaizenDetail.E_SECTION = profile.E_SECTION;
                    ReportKaizenDetail.SumAmount = SumAmount;
                    Lstresult.Add(ReportKaizenDetail);
                }
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = dateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = dateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplateForDynamicGrid)
            {
                obj = Lstresult;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Kai_ReportKaizenDetailModel(),
                    FileName = "Kai_ReportKaizenDetail",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Lstresult, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            //request.Page = 1;
            DataSourceResult Result = Lstresult.ToDataSourceResult(request);
            Result.Total = Lstresult.Count > 0 ? Lstresult.Count : 0;
            return Json(Result);
        }


        [HttpPost]
        public ActionResult GetReportPayHDTJob([DataSourceRequest] DataSourceRequest request, Hre_ReportPayHDTJobModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportPayHDTJobModel(),
                    FileName = "Hre_ReportPayHDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportPayHDTJobModel>(LanguageCode, model, "Hre_ReportPayHDTJob", ref message);
            if (!checkValidate)
            {
                // var ls = new object[] { "error", message };
                return Json(message, JsonRequestBehavior.AllowGet);
            }
            #endregion
            var ReportServices = new Hre_ReportServices();
            var result = ReportServices.GetPayHDTJob(model.DateFrom, model.DateTo, model.OrgStructureIDs, UserLogin, model.ProfileName, model.CodeEmp).Translate<Hre_ReportPayHDTJobModel>();

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportProfileHDTInMonthValidate(Hre_ReportProfileHDTInMonthModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportProfileHDTInMonthModel>(LanguageCode, model, "Hre_ReportProfileHDTInMonth", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetReportProfileHDTInMonth([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileHDTInMonthModel model)
        {

            if (model.Month == null)
            {
                model.Month = DateTime.Now;
            }
            object obj = new Hre_ReportProfileHDTInMonthModel();
            var isDataTable = false;
            var reportServices = new Hre_ReportServices();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.Month };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.MonthTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            var result = reportServices.GetReportProfileHDTInMonth(model.Month, model.MonthTo, model.OrgStructureIDs, model.ProfileName, model.CodeEmp, model.IsCreateTemplate, UserLogin);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportProfileHDTInMonthModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return new JsonResult { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };
            //return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportProfileHDTNotWork([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileHDTNotWorkModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileHDTNotWorkModel>(LanguageCode, model, "Hre_ReportProfileHDTNotWork", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion

            var ReportServices = new Hre_ReportServices();
            string ReportName = "Hre_ReportProfileHDTNotWork";
            var Table = ReportServices.GetReportProfileHDTNotWork(model.DateFrom, model.DateTo, model.OrgStructureIDs, ReportName, model.IsCreateTemplate, UserLogin);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = ReportName,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        /// <summary>
        /// [SonVo] - 2014/06/05
        /// Lấy dữ liệu load lên lưới bằng store
        /// </summary>
        /// <param name="request"></param>
        /// <param name="otModel"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetReportCodeNotInSystem([DataSourceRequest] DataSourceRequest request, Hre_ReportCodeNotInSystemModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportCodeNotInSystemModel(),
                    FileName = " Hre_ReportCodeNotInSystem",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var actionServices = new ActionService(UserLogin);
            var hrService = new Hre_ProfileServices();
            //ListQueryModel lstModel = new ListQueryModel
            //{
            //    PageIndex = request.Page,
            //    Filters = ExtractFilterAttributes(request),
            //    Sorts = ExtractSortAttributes(request)
            //};
            DateTime From = SqlDateTime.MinValue.Value;
            DateTime To = SqlDateTime.MaxValue.Value;
            if (model.DateFrom != null)
            {
                From = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                To = model.DateTo.Value;
            }
            List<object> listobj = new List<object>();
            //Quyen.Quach 0087813 10/09/2017 Sửa lỗi truyển sai giá trị vào store
            listobj.Add(From);
            listobj.Add(To);
            listobj.Add(1);
            listobj.Add(Int32.MaxValue - 1);
            string status = string.Empty;
            var result = actionServices.GetData<Hre_ReportCodeNotInSystemEntity>(listobj, ConstantSql.hrm_hr_sp_get_RptCodeNotInSystem, ref status).ToList().Translate<Hre_ReportCodeNotInSystemModel>();
            //var result = service.GetReportCodeNotInSystem(From, To).ToList().Translate<Hre_ReportCodeNotInSystemModel>();

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, UserGuidID, model.ExportType);

                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [SonVo] - 2014/06/05
        /// Lấy dữ liệu load lên lưới bằng store
        /// </summary>
        /// <param name="request"></param>
        /// <param name="otModel"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetReportHDTJob([DataSourceRequest] DataSourceRequest request, Hre_ReportHDTJobModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportHDTJobModel(),
                    FileName = "Hre_ReportHDTJob",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportHDTJobModel>(LanguageCode, model, "Hre_ReportHDTJob", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            var actionServices = new ActionService(UserLogin);
            var hrService = new Hre_ProfileServices();

            DateTime From = SqlDateTime.MinValue.Value;
            DateTime To = SqlDateTime.MaxValue.Value;
            if (model.DateFrom != null)
            {
                From = model.DateFrom.Value;
            }
            if (model.DateTo != null)
            {
                To = model.DateTo.Value;
            }
            string status = string.Empty;
            var hdtJobServices = new Hre_HDTJobServices();
            List<object> listObjHDTJob = new List<object>();
            listObjHDTJob.Add(model.OrgStructureID);
            listObjHDTJob.Add(model.DateFrom);
            listObjHDTJob.Add(model.DateTo);
            var result = actionServices.GetData<Hre_ReportHDTJobEntity>(listObjHDTJob, ConstantSql.hrm_hr_sp_get_RptHDTJob, ref status).ToList().Translate<Hre_ReportHDTJobModel>();

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, null, UserGuidID, model.ExportType);

                return Json(fullPath);
            }


            return Json(result.ToDataSourceResult(request));
        }

        #region BC NV đang làm việc
        public ActionResult GetReportProfileWorkingValidate(Hre_ReportProfileWorkingModel model)
        {

            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportProfileWorkingModel>(LanguageCode, model, "Hre_ReportProfileWorking", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetReportProfileWorking([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileWorkingSearchModel model)
        {
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileWorkingSearchModel>(LanguageCode, model, "Hre_ReportProfileWorking", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion
            string status = string.Empty;

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var isDataTable = false;
            object obj = new Hre_ReportProfileWorkingEntity();

            //Son.Vo - 20180109 - 0091952
            string Companylogo = GetCompanyLogo(model.OrgStructureID);
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom.Value : DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo.Value : DateTime.Now };
            var headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = null, ColumnType = typeof(object) };
            var templatepath = Common.GetPath(Common.TemplateURL) + Companylogo;
            if (!string.IsNullOrEmpty(Companylogo) && System.IO.File.Exists(templatepath))
            {
                headerInfo3.Value = System.IO.File.ReadAllBytes(Common.GetPath(Common.TemplateURL) + Companylogo);
            }

            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };


            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ReportProfileWorkingEntity>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportId != Guid.Empty)
            {
                result = actionServices.GetData<Hre_ReportProfileWorkingEntity>(lstModel, ConstantSql.hrm_hr_sp_get_RptWorkingProfile, ref status);
            }

            // Trường hợp click search
            else if (!model.IsCreateTemplate && model.ExportId == Guid.Empty)
            {
                return GetListDataAndReturn<Hre_ReportProfileWorkingModel, Hre_ReportProfileWorkingEntity, Hre_ReportProfileWorkingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptWorkingProfile);
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Name = "CompanyLogo(Picture:FitToCell)";
                    }
                }

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportProfileWorkingEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {

                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult GetReportProfileProbation([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileProbationModel model)
        {
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart != null ? model.DateStart : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd != null ? model.DateEnd : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportProfileProbationModel(),
                    FileName = "Hre_ReportProfileProbation",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileProbationModel>(LanguageCode, model, "Hre_ReportProfileProbation", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);

            DateTime From = SqlDateTime.MinValue.Value;
            DateTime To = SqlDateTime.MaxValue.Value;
            if (model.DateStart != null)
            {
                From = model.DateStart.Value;
            }
            if (model.DateEnd != null)
            {
                To = model.DateEnd.Value;
            }

            List<object> listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(From);
            listObj.Add(To);

            string status = string.Empty;
            var result = new List<Hre_ReportProfileProbationModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionServices.GetData<Hre_ReportProfileProbationEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptProbationProfile, ref status).ToList().Translate<Hre_ReportProfileProbationModel>();
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportPrenancy([DataSourceRequest] DataSourceRequest request, Hre_ReportPregnancyModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportPregnancyModel>(LanguageCode, model, "Hre_ReportPregnancy", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            string status = string.Empty;

            DateTime From = SqlDateTime.MinValue.Value;
            DateTime To = SqlDateTime.MaxValue.Value;
            if (model.DateStart != null)
            {
                From = model.DateStart.Value;
            }
            if (model.DateEnd != null)
            {
                To = model.DateEnd.Value;
            }
            var isDataTable = false;
            object obj = new Hre_ReportPregnancyModel();

            List<object> listObj = new List<object>();
            listObj.Add(model.DateStart);
            listObj.Add(model.DateEnd);
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.ProfileName);
            listObj.Add(model.CodeEmp);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstRptPrenancyModel = new List<Hre_ReportPregnancyModel>();
            if (!model.IsCreateTemplate)
            {
                lstRptPrenancyModel = actionServices.GetData<Hre_ReportPregnancyModel>(listObj, ConstantSql.hrm_hr_sp_get_RptPrenancy, ref status).ToList();
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = lstRptPrenancyModel;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportPregnancyModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {

                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, lstRptPrenancyModel, null, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(lstRptPrenancyModel.ToDataSourceResult(request));
        }

        public ActionResult GetReportProfileQuitValidate(Hre_ReportProfileQuitModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportProfileQuitModel>(LanguageCode, model, "Hre_ReportProfileQuit", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }


        public ActionResult GetReportProfileQuit([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileQuitModel model)
        {
            var service = new Hre_ReportServices();
            var contractServices = new Hre_ContractServices();
            var _CatEthnicGroupServices = new Cat_EthnicGroupServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();
            var actionServices = new ActionService(UserLogin);
            #region Tạo template Hre_ReportProfileQuit
            DataTable table = new DataTable("Hre_ReportProfileQuit");
            table.Columns.Add("CodeEmp");
            table.Columns.Add("ProfileName");
            table.Columns.Add("OrgStructureName");
            table.Columns.Add("CodeOrg");
            table.Columns.Add("JobTitleName");
            table.Columns.Add("PositionName");
            table.Columns.Add("DateHire", typeof(DateTime));
            table.Columns.Add("DayOfBirth", typeof(int));
            table.Columns.Add("MonthOfBirth", typeof(int));
            table.Columns.Add("YearOfBirth", typeof(int));
            table.Columns.Add("DateSign", typeof(DateTime));
            table.Columns.Add("RequestDate", typeof(DateTime));
            table.Columns.Add("DateStart", typeof(DateTime));
            table.Columns.Add("DateEnd", typeof(DateTime));
            table.Columns.Add("DateQuit", typeof(DateTime));
            table.Columns.Add("ResignReasonName");
            table.Columns.Add("OrgStructureID");
            table.Columns.Add("E_UNIT");
            table.Columns.Add("E_DIVISION");
            table.Columns.Add("E_DEPARTMENT");
            table.Columns.Add("E_SECTION");
            table.Columns.Add("E_TEAM");
            table.Columns.Add("E_GrossAmount", typeof(double));
            table.Columns.Add("E_MaleBirth", typeof(DateTime));
            table.Columns.Add("E_FeMaleBirth", typeof(DateTime));
            table.Columns.Add("E_ProfileCount");
            table.Columns.Add("E_ProfileIsWorking");
            table.Columns.Add("E_FEMALE");
            table.Columns.Add("E_MALE");
            table.Columns.Add("E_Profile_FEMALE");
            table.Columns.Add("E_Profile_MALE");
            table.Columns.Add("ProfileQuit");
            table.Columns.Add("AllowanceID1Name");
            table.Columns.Add("Allowance1", typeof(double));
            table.Columns.Add("AllowanceID2Name");
            table.Columns.Add("Allowance2", typeof(double));
            table.Columns.Add("AllowanceID3Name");
            table.Columns.Add("Allowance3", typeof(double));
            table.Columns.Add("AllowanceID4Name");
            table.Columns.Add("Allowance4", typeof(double));
            table.Columns.Add("Seniority");
            table.Columns.Add("ContractNo");
            table.Columns.Add("ContractTypeName");
            table.Columns.Add("E_DEPARTMENT_Count");
            table.Columns.Add("IDNo");
            table.Columns.Add("SocialInsNo");
            table.Columns.Add("EthnicGroupName");
            table.Columns.Add("FirstContractTypeName");
            table.Columns.Add("UnitTime");
            table.Columns.Add("ReportProfileQuitDuration");
            table.Columns.Add("TerminateDate");
            table.Columns.Add("EducationLevelName");
            table.Columns.Add("TypeOfStopName");
            table.Columns.Add("Type");
            #endregion
            //DateTime From = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            //DateTime To = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);
            DateTime From = SqlDateTime.MinValue.Value;
            DateTime To = SqlDateTime.MaxValue.Value;
            string status = string.Empty;
            if (model.DateStart != null)
            {
                From = model.DateStart.Value;
            }
            if (model.DateEnd != null)
            {
                To = model.DateEnd.Value;
            }
            List<object> listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(From);
            listObj.Add(To);
            var result = new List<Hre_ReportProfileQuitModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionServices.GetData<Hre_ReportProfileQuitEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptQuitProfile, ref status).ToList().Translate<Hre_ReportProfileQuitModel>();
            }
            var lstProfileIDs = result.Select(s => s.ID).Distinct().ToList();

            #region [22/10/2015][Phuc.Nguyen][Modify Func][0058725] Lấy enum xuất excel báo cáo nhân viên nghỉ việc
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            #endregion

            foreach (var item in result)
            {
                DataRow dr = table.NewRow();
                dr["CodeEmp"] = item.CodeEmp;
                dr["ProfileName"] = item.ProfileName;
                dr["OrgStructureName"] = item.OrgStructureName;
                dr["CodeOrg"] = item.CodeOrg;
                dr["JobTitleName"] = item.JobTitleName;
                dr["PositionName"] = item.PositionName;
                if (item.DateHire != null)
                    dr["DateHire"] = item.DateHire;
                if (item.DayOfBirth != null)
                    dr["DayOfBirth"] = item.DayOfBirth.Value;
                if (item.MonthOfBirth != null)
                    dr["MonthOfBirth"] = item.MonthOfBirth.Value;
                if (item.YearOfBirth != null)
                    dr["YearOfBirth"] = item.YearOfBirth.Value;

                if (item.RequestDate != null)
                    dr["RequestDate"] = item.RequestDate;

                if (item.DateQuit != null)
                    dr["DateQuit"] = item.DateQuit;
                dr["ResignReasonName"] = item.ResignReasonName;
                dr["OrgStructureID"] = item.OrgStructureID;
                dr["E_UNIT"] = item.E_UNIT;
                dr["E_DIVISION"] = item.E_DIVISION;
                dr["E_DEPARTMENT"] = item.E_DEPARTMENT;
                dr["E_SECTION"] = item.E_SECTION;
                dr["E_TEAM"] = item.E_TEAM;
                if (item.E_GrossAmount != null)
                    dr["E_GrossAmount"] = item.E_GrossAmount;
                if (item.E_MaleBirth != null)
                    dr["E_MaleBirth"] = item.E_MaleBirth;
                if (item.E_FeMaleBirth != null)
                    dr["E_FeMaleBirth"] = item.E_FeMaleBirth;
                dr["E_ProfileCount"] = item.E_ProfileCount;
                dr["E_ProfileIsWorking"] = item.E_ProfileIsWorking;
                dr["E_FEMALE"] = item.E_FEMALE;
                dr["E_MALE"] = item.E_MALE;
                dr["E_Profile_FEMALE"] = item.E_Profile_FEMALE;
                dr["E_Profile_MALE"] = item.E_Profile_MALE;
                dr["ProfileQuit"] = item.ProfileQuit;
                dr["AllowanceID1Name"] = item.AllowanceID1Name;
                if (item.Allowance1 != null)
                    dr["Allowance1"] = item.Allowance1;
                dr["AllowanceID2Name"] = item.AllowanceID2Name;
                if (item.Allowance2 != null)
                    dr["Allowance2"] = item.Allowance2;
                dr["AllowanceID3Name"] = item.AllowanceID3Name;
                if (item.Allowance3 != null)
                    dr["Allowance3"] = item.Allowance3;
                dr["AllowanceID4Name"] = item.AllowanceID4Name;
                if (item.Allowance4 != null)
                    dr["Allowance4"] = item.Allowance4;
                dr["Seniority"] = item.Seniority;
                dr["E_DEPARTMENT_Count"] = item.E_DEPARTMENT_Count;

                var lstContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateEnd).FirstOrDefault();
                if (lstContractByProfileID != null)
                {
                    dr["ContractNo"] = lstContractByProfileID.ContractNo;
                    dr["ContractTypeName"] = lstContractByProfileID.ContractTypeName;
                }
                //hau.le-20170829-87273
                var lstContractByProfileIDCurrent = lstContracts.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lstContractByProfileIDCurrent != null)
                {
                    if (lstContractByProfileIDCurrent.DateSigned != null)
                        dr["DateSign"] = lstContractByProfileIDCurrent.DateSigned;
                    if (lstContractByProfileIDCurrent.DateStart != null)
                        dr["DateStart"] = lstContractByProfileIDCurrent.DateStart;
                    if (lstContractByProfileIDCurrent.DateEnd != null)
                        dr["DateEnd"] = lstContractByProfileIDCurrent.DateEnd;
                }
                //hau.le-20170906-87285

                dr["IDNo"] = item.IDNo;
                dr["SocialInsNo"] = item.SocialInsNo;
                if (item.EthnicID != null && item.EthnicID != Guid.Empty)
                    dr["EthnicGroupName"] = _CatEthnicGroupServices.GetEthnicGroupNameByID(item.EthnicID.Value);
                var lstFirstContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED").OrderBy(s => s.DateStart).FirstOrDefault();
                if (lstFirstContractByProfileID != null)
                {

                    if (lstFirstContractByProfileID.ContractTypeID != null && lstFirstContractByProfileID.ContractTypeID != Guid.Empty)
                        dr["FirstContractTypeName"] = _CatContractTypeServices.GetContractTypeNameByID(lstFirstContractByProfileID.ContractTypeID);
                }
                var lstNewContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart < item.DateQuit).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (lstNewContractByProfileID != null)
                {

                    if (lstNewContractByProfileID.ContractTypeID != null && lstNewContractByProfileID.ContractTypeID != Guid.Empty)
                        dr["UnitTime"] = _CatContractTypeServices.GetContractTypeByID(lstNewContractByProfileID.ContractTypeID) == null ? "" : _CatContractTypeServices.GetContractTypeByID(lstNewContractByProfileID.ContractTypeID).UnitTime;
                    dr["ReportProfileQuitDuration"] = lstNewContractByProfileID.Duration;
                    dr["TerminateDate"] = lstNewContractByProfileID.TerminateDate;
                    //Quyen.Quach 26/10/2017 0089014
                    dr["Type"] = _CatContractTypeServices.GetContractTypeByID(lstNewContractByProfileID.ContractTypeID) == null ? "" : _CatContractTypeServices.GetContractTypeByID(lstNewContractByProfileID.ContractTypeID).Type;
                }
                dr["EducationLevelName"] = item.EducationLevelName;
                dr["TypeOfStopName"] = item.TypeOfStopName;
                table.Rows.Add(dr);
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateStart != null ? model.DateStart : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateEnd != null ? model.DateEnd : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = table,
                    FileName = "Hre_ReportProfileQuit",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Xuat Excel
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, table, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            #endregion
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetReportWorkHistoryDept([DataSourceRequest] DataSourceRequest request, Hre_ReportWorkHistoryDeptModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportWorkHistoryDeptModel>(LanguageCode, model, "Hre_ReportWorkHistoryDept", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message);
            }

            #endregion

            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var rptServices = new Hre_ReportServices();
            List<object> listObj = new List<object>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(model.ProfileName);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.OrgStructureIDs);
            listObj.Add(Common.DotNetToOracle(model.StrTypeOfTransfer));
            listObj.Add(model.SalaryClassID);
            listObj.Add(model.WorkPlaceID);
            listObj.Add(model.Status);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = new List<Hre_ReportWorkHistoryDeptModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionServices.GetData<Hre_ReportWorkHistoryDeptEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptWorkHistoryDept, ref status).ToList().Translate<Hre_ReportWorkHistoryDeptModel>();
            }

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "WorkPlaceName", Value = ((result != null && result.FirstOrDefault() != null) && result.FirstOrDefault().WorkPlaceName != null) ? result.FirstOrDefault().WorkPlaceName : "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "UserPrint", Value = ((result != null && result.FirstOrDefault() != null) && result.FirstOrDefault().UserPrint != null) ? result.FirstOrDefault().UserPrint : "" };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "DatePrint", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportWorkHistoryDeptModel(),
                    FileName = "Hre_ReportWorkHistoryDept",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ReportWorkHistoryDeptValidate(Hre_ReportWorkHistoryDeptModel model)
        {
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportWorkHistoryDeptModel>(LanguageCode, model, "Hre_ReportWorkHistoryDeptValidate", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }



            return Json(message);
        }

        public ActionResult ExportWordReportWorkHistoryDeptByTemplate(List<Guid> selectedIds, string valueFields, Hre_ReportWorkHistoryDeptModel model)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var contractServices = new Hre_ReportWorkHistoryDeptModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);

            var actionServices = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            listObj.AddRange(new object[5]);
            listObj[0] = strIDs;
            listObj[1] = model.DateFrom;
            listObj[2] = model.DateTo;
            listObj[3] = 1;
            listObj[4] = Int32.MaxValue - 1;


            string status = string.Empty;
            var lstReportWorkHistory = actionServices.GetData<Hre_ReportWorkHistoryDeptEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptWorkHistoryDeptByids, ref status).ToList();
            if (lstReportWorkHistory == null)
                return null;
            int i = 0;
            var lstReportWorkHistoryID = lstReportWorkHistory.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstReportWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var ReportWorkHistory in lstReportWorkHistory)
            {
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);
                template = actionServices.GetData<Cat_ExportEntity>(lstObjExport, ConstantSql.hrm_cat_sp_get_ExportWord, ref status).Where(s => s.ScreenName == valueFields).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ReportWorkHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                var lst = new List<Hre_ReportWorkHistoryDeptEntity>();
                lst.Add(ReportWorkHistory);
                ExportService.ExportWord(outputPath, templatepath, lst);
            }
            if (lstReportWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult GetDateReportProfileNewFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEAFTER = sysServices.GetConfigValue<int>(AppConfig.E_NEWEMPLOYEE_VALUEAFTER);
            if (_VALUEAFTER >= 0)
            {
                DateFrom = DateTo.AddDays(-_VALUEAFTER);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateReportProfileNewToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEBEFOR = sysServices.GetConfigValue<int>(AppConfig.E_NEWEMPLOYEE_VALUEBEFOR);
            if (_VALUEBEFOR >= 0)
            {
                DateFrom = DateTo.AddDays(_VALUEBEFOR);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }


        public ActionResult GetReportProfileNew([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileNewModel model)
        {
            string status = string.Empty;
            var services = new Hre_ReportServices();
            var isDataTable = false;
            object obj = new Hre_ReportProfileNewEntity();

            #region Validate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            string message = string.Empty;
            if (!model.IsCreateTemplate)
            {
                var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileNewModel>(LanguageCode, model, "Hre_ReportProfileNew", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }
            }
            #endregion

            var lstProfile = new List<Hre_ReportProfileNewEntity>();
            var actionService = new ActionService(UserLogin, LanguageCode);
            List<object> listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.SalaryClassID);
            listObj.Add(model.CodeCandidate);
            listObj.Add(model.WorkPlaceID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            if (!model.IsCreateTemplate)
            {
                lstProfile = actionService.GetData<Hre_ReportProfileNewEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptProfileNew, ref status).ToList();
            }

            if (model.DateFrom == null)
            {
                model.DateFrom = DateTime.Now;
            }

            if (model.DateTo == null)
            {
                model.DateTo = DateTime.Now;
            }
            var result = services.GetReportProfileNew(lstProfile,
                model.IsCreateTemplate,
                model.DateFrom.Value,
                model.DateTo.Value);

            if (model != null && model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportProfileNewEntity(),
                    FileName = "Hre_ReportProfileNew",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        #region Báo cáo Sinh nhật
        [HttpPost]
        public ActionResult GetReportBirthday([DataSourceRequest] DataSourceRequest request, Hre_ReportBirthdayModel model)
        {
            //Nguyen.Le - 14/11/2017 - 0089883
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom.Value : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo.Value : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = string.Empty };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            HeaderInfo headerInfo5 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            HeaderInfo headerInfo6 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5, headerInfo6 };

            #region Tạo  Template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportBirthdayModel(),
                    FileName = "Hre_ReportBirthday",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportBirthdayModel>(LanguageCode, model, "Hre_ReportBirthday", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            List<Guid?> OrgIds = new List<Guid?>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.DateQuitFrom);
            listObj.Add(model.DateQuitTo);
            listObj.Add(model.WorkPlaceID);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = actionServices.GetData<Hre_ReportBirthdayEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptBirthday, ref status).ToList().Translate<Hre_ReportBirthdayModel>();

            #region Logo
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            //Nguyen.Le - 14/11/2017 - 0089883
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = Companylogo;
                }
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));

        }
        #endregion

        #region Báo cáo Kỷ Luật
        [HttpPost]
        public ActionResult GetReportProfileDiscipline([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileDisciplineModel model)
        {
            #region Code cũ
            //var service = new Hre_ReportServices();
            //var hrService = new Hre_ProfileServices();
            //var isDataTable = false;
            //object obj = new Hre_ReportProfileDisciplineModel();
            //List<object> listObj = new List<object>();
            //DateTime From = SqlDateTime.MinValue.Value;
            //DateTime To = SqlDateTime.MaxValue.Value;
            //List<Guid?> OrgIds = new List<Guid?>();
            //if (model.DateFrom != null)
            //{
            //    From = model.DateFrom.Value;
            //    listObj.Add(From);
            //}
            //else
            //{
            //    listObj.Add(null);
            //}
            //if (model.DateTo != null)
            //{
            //    To = model.DateTo.Value;
            //    listObj.Add(To);
            //}
            //else
            //{
            //    listObj.Add(null);
            //}

            //string strOrgIDs = null;
            //if (!string.IsNullOrEmpty(model.OrgStructureID))
            //{
            //    strOrgIDs = model.OrgStructureID;
            //}

            //listObj.Add(strOrgIDs);


            //string status = string.Empty;
            //var result = hrService.GetData<Hre_ReportProfileDisciplineEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptDiscripline, ref status).ToList().Translate<Hre_ReportProfileDisciplineModel>();

            //if (model.IsCreateTemplateForDynamicGrid)
            //{
            //    obj = result;
            //    isDataTable = true;
            //}
            //if (model != null && model.IsCreateTemplate)
            //{
            //    var path = Common.GetPath("Templates");
            //    ExportService exportService = new ExportService();
            //    ConfigExport cfgExport = new ConfigExport()
            //    {
            //        Object = obj,
            //        FileName = "Hre_ReportProfileDisciplineModel",
            //        OutPutPath = path,
            //        DownloadPath = Hrm_Main_Web + "Templates",
            //        IsDataTable = isDataTable
            //    };
            //    var str = exportService.CreateTemplate(cfgExport);
            //    return Json(str);
            //}

            //if (model.ExportID != Guid.Empty)
            //{
            //    if (result != null && result.Count > 0)
            //    {
            //        #region lấy Org và OrgType

            //        var orgServices = new Cat_OrgStructureServices();
            //        var lstObjOrg = new List<object>();
            //        lstObjOrg.Add(null);
            //        lstObjOrg.Add(null);
            //        lstObjOrg.Add(null);
            //        lstObjOrg.Add(1);
            //        lstObjOrg.Add(int.MaxValue - 1);
            //        var lstOrg = orgServices.GetData<Cat_OrgStructureEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure, ref status).ToList();

            //        var orgTypeService = new Cat_OrgStructureTypeServices();
            //        var lstObjOrgType = new List<object>();
            //        lstObjOrgType.Add(null);
            //        lstObjOrgType.Add(null);
            //        lstObjOrgType.Add(1);
            //        lstObjOrgType.Add(int.MaxValue - 1);
            //        var lstOrgType = orgTypeService.GetData<Cat_OrgStructureTypeEntity>(lstObjOrgType, ConstantSql.hrm_cat_sp_get_OrgStructureType, ref status).ToList();
            //        #endregion

            //        foreach (var item in result)
            //        {
            //            Guid? orgId = item.OrgStructureID1;
            //            var org = lstOrg.FirstOrDefault(s => s.ID == item.OrgStructureID1);
            //            var orgBranch = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_BRANCH, lstOrg, lstOrgType);
            //            var orgGroup = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_GROUP, lstOrg, lstOrgType);
            //            var orgOrg = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_DEPARTMENT, lstOrg, lstOrgType);
            //            var orgTeam = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_TEAM, lstOrg, lstOrgType);
            //            var orgSection = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_SECTION, lstOrg, lstOrgType);
            //            var orgDivision = LibraryService.GetNearestParentEntity(orgId, OrgUnit.E_DIVISION, lstOrg, lstOrgType);

            //            item.BranchName = orgBranch != null ? orgBranch.OrgStructureName : string.Empty;
            //            item.GroupName = orgGroup != null ? orgGroup.OrgStructureName : string.Empty;
            //            item.DepartmentName = orgOrg != null ? orgOrg.OrgStructureName : string.Empty;
            //            item.TeamName = orgTeam != null ? orgTeam.OrgStructureName : string.Empty;
            //            item.SectionName = orgSection != null ? orgSection.OrgStructureName : string.Empty;
            //            item.DivisionName = orgDivision != null ? orgDivision.OrgStructureName : string.Empty;

            //            item.DisciplineCount = result.Where(s => s.ProfileID == item.ProfileID).Count();
            //        }

            //    }
            //    string[] valueField = null;
            //    if (model.ValueFields != null)
            //    {
            //        valueField = model.ValueFields.Split(',');
            //    }
            //    var fullPath = ExportService.Export(model.ExportID, result, null, model.ExportType);

            //    return Json(fullPath);
            //}
            //return Json(result.ToDataSourceResult(request)); 
            #endregion

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom ?? DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo ?? DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportProfileDisciplineModel(),
                    FileName = "Hre_ReportProfileDiscipline",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileDisciplineModel>(LanguageCode, model, "Hre_ReportProfileDiscipline", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            List<object> listObj = new List<object>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(model.OrgStructureID);

            string status = string.Empty;

            var result = actionServices.GetData<Hre_ReportProfileDisciplineEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptDiscripline, ref status).ToList().Translate<Hre_ReportProfileDisciplineModel>();
            var lstprofileids = result.Select(s => s.ProfileID).ToList();

            foreach (var item in result)
            {
                Guid profileID = item.ProfileID;
                item.count = result.Count(s => s.ProfileID == profileID);
            }


            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Báo cáo Khen Thưởng
        [HttpPost]
        public ActionResult GetReportReward([DataSourceRequest] DataSourceRequest request, Hre_ReportRewardModel model)
        {
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportRewardModel>(LanguageCode, model, "Hre_ReportReward", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ReportRewardModel();
            var listObj = new List<object>();
            listObj.Add(model.DateFrom);
            listObj.Add(model.DateTo);
            listObj.Add(model.strOrgStructureID);
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            string status = string.Empty;
            var result = actionServices.GetData<Hre_ReportRewardEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptReward, ref status).ToList().Translate<Hre_ReportRewardModel>();

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportReward",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion


        #region Báo cáo lịch sử làm việc nhân viên
        [HttpPost]
        public ActionResult GetReportHistoryProfile([DataSourceRequest] DataSourceRequest request, Hre_ReportHistoryProfileModel model)
        {
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            List<Guid?> OrgIds = new List<Guid?>();
            listObj.Add(model.DateHireFrom);
            listObj.Add(model.DateHireTo);
            listObj.Add(model.DateQuitFrom);
            listObj.Add(model.DateQuitTo);
            listObj.Add(model.ProfileName);
            listObj.Add(model.CodeEmp);
            string strOrgIDs = null;
            if (!string.IsNullOrEmpty(model.OrgStructureID))
            {
                strOrgIDs = model.OrgStructureID;
            }

            listObj.Add(strOrgIDs);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = new List<Hre_ReportHistoryProfileModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionServices.GetData<Hre_ReportHistoryProfileEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptHistoryProfile, ref status).ToList().Translate<Hre_ReportHistoryProfileModel>();
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportHistoryProfileModel(),
                    FileName = "Hre_ReportHistoryProfile",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Báo cáo Nhân Viên Chưa Có Hợp Đồng
        public ActionResult ExportSelectedReportProfileNotContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileNotContractSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_VisaInfoModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ReportProfileNotContractModel>(model.strContractID, ConstantSql.hrm_hr_sp_get_RptNotContractByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportProfileNotContractModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetReportProfileNotContract([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileNotContractSearchModel model)
        {
            if (model.IsCreateTemplate == false && model.ExportID == Guid.Empty)
            {
                return GetListDataAndReturn<Hre_ReportProfileNotContractModel, Hre_ReportProfileNotContractEntity, Hre_ReportProfileNotContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptNotContract);
            }
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            // Son.Vo - 0050699 - sửa lại đk load 
            var result = new List<Hre_ReportProfileNotContractModel>();
            if (!model.IsCreateTemplate)
            {
                var listObj = new List<object>();
                listObj.AddRange(new object[19]);
                listObj[0] = model.OrgStructureID;
                listObj[1] = model.DateHireFrom;
                listObj[2] = model.DateHireTo;
                listObj[3] = model.PositionID;
                listObj[4] = model.JobTitleID;
                listObj[5] = model.Gender;
                listObj[6] = model.EmpTypeID;
                listObj[7] = model.ProfileName;
                listObj[8] = model.CodeEmp;
                listObj[9] = model.EmpType;
                listObj[10] = model.StatusSyn;
                listObj[11] = model.EmployeeGroupID;
                listObj[17] = 1;
                listObj[18] = int.MaxValue - 1;
                result = actionServices.GetData<Hre_ReportProfileNotContractEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptNotContract, ref status).ToList().Translate<Hre_ReportProfileNotContractModel>();
            }

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportProfileNotContractModel(),
                    FileName = "Hre_ReportProfileNotContract",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportReportProfileNotContractSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ReportProfileNotContractEntity, Hre_ReportProfileNotContractModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_RptNotContractByIds);
        }

        [HttpPost]
        public ActionResult ExportReportProfileNotContractList([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileNotContractSearchModel model)
        {
            return ExportAllAndReturn<Hre_ReportProfileNotContractEntity, Hre_ReportProfileNotContractModel, Hre_ReportProfileNotContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptNotContract);
        }

        #endregion

        #region Báo cáo số lượng nhân viên theo phòng ban
        public ActionResult GetReportOrgProfle([DataSourceRequest] DataSourceRequest request, CatOrgStructureModel model)
        {
            //[Anh.Le] Đưa hàm xuất teplate lên đây để tăng tốc độ xuất template
            #region Tạo template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new CatOrgStructureModel(),
                    FileName = "CatOrgStructureModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            List<object> listObj = new List<object>();
            List<Guid?> OrgIds = new List<Guid?>();
            string strOrgIDs = null;
            if (!string.IsNullOrEmpty(model.strOrgStructureID))
            {
                strOrgIDs = model.strOrgStructureID;
            }
            int Page = request.Page;
            int PageSize = request.PageSize;
            if (model.ExportID != Guid.Empty)
            {
                Page = 1;
                PageSize = int.MaxValue - 1;
            }
            listObj = new List<object>();
            listObj.AddRange(new object[3]);
            listObj[0] = strOrgIDs;
            listObj[1] = Page;
            listObj[2] = PageSize;
            string status = string.Empty;
            var result = actionServices.GetData<Cat_OrgStructureEntity>(listObj, ConstantSql.hrm_hr_sp_get_RptOrgProfile, ref status).ToList().Translate<CatOrgStructureModel>();
            request.Page = 1;
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            var _datasource = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            _datasource.Total = total;
            _datasource.Data = result;
            return Json(_datasource, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Báo cáo Thâm niên
        [HttpPost]
        public ActionResult GetReportSeniority([DataSourceRequest] DataSourceRequest request, Hre_ReportSenioritySearchModel model)
        {
            #region MyRegion
            //Son.Vo - 20180109 - 0091952
            string Companylogo = GetCompanyLogo(model.OrgStructureID);
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateSeniority != null ? model.DateSeniority.Value : DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "CompanyLogo", Value = null, ColumnType = typeof(object) };
            var templatepath = Common.GetPath(Common.TemplateURL) + Companylogo;
            if (!string.IsNullOrEmpty(Companylogo) && System.IO.File.Exists(templatepath))
            {
                headerInfo2.Value = System.IO.File.ReadAllBytes(Common.GetPath(Common.TemplateURL) + Companylogo);
            }
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Name = "CompanyLogo(Picture:FitToCell)";
                    }
                }

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportSeniorityModel(),
                    FileName = "Hre_ReportSeniority",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            #region Validate

            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportSenioritySearchModel>(LanguageCode, model, "Hre_ReportSeniority", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }

            #endregion
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin);
            string status = string.Empty;
            var listObj = new List<object>();
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.DateSeniority);
            listObj.Add(model.IsIncludeQuitEmp);
            listObj.Add(model.TypeSearch);
            listObj.Add(model.YearSeniorityFrom);
            listObj.Add(model.YearSeniorityTo);
            listObj.Add(model.MonthSeniorityFrom);
            listObj.Add(model.MonthSeniorityTo);
            listObj.Add(model.strProfileID);
            listObj.Add(model.IsCreateTemplate);
            listObj.Add(model.IsCreateTemplateForDynamicGrid);
            listObj.Add(model.ExportID);
            listObj.Add(model.ExportType);
            listObj.Add(1);
            if (model.ExportID != Guid.Empty)
            {
                listObj.Add(int.MaxValue - 1);
            }
            else
            {
                listObj.Add(request.PageSize);
            }
            var listProfiles = actionServices.GetData<Hre_ReportSeniorityEntity>(listObj, ConstantSql.hrm_hr_sp_get_ReportSeniority, ref status).ToList();

            var result = service.GetReportSeniority(listProfiles).Translate<Hre_ReportSeniorityModel>().OrderBy(s => s.CodeEmp).ToList();
            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }

            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            return Json(dataSourceResult);
        }

        #endregion

        #region BC Headcount thâm niên
        public ActionResult GetReportHCSeniorityValidate(Hre_ReportHCSeniorityModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCSeniorityModel>(LanguageCode, model, "Hre_ReportHCSeniority", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
                //return Json(message);
            }
            #endregion
            return Json(message);

        }


        public ActionResult GetReportHCSeniority([DataSourceRequest] DataSourceRequest request, Hre_ReportHCSeniorityModel model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();

            object obj = new Hre_ReportHCSeniorityModel();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            var result = service.GetReportHCSeniority(model.MonthSearch, model.JobtitleID, model.OrgStructureID, model.OrgStructureTypeID, model.isIncludeQuitEmp, model.IsCreateTemplate, UserLogin);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportHCSeniorityModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }


            if (model.ExportID != Guid.Empty)
            {
                result.Rows[0].Delete();
                //var row = result.Rows.Count;
                //result.Rows[row - 1].Delete();

                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);

                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    var colName = model.ValueFields;
                    valueField = colName.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            //  string dataReturn = result.ConvertDataTabletoString();
            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        #region BC HeadCount Giới Tính

        public ActionResult GetReportHCGenderValidate(Hre_ReportHCGenderModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportHCGenderModel>(LanguageCode, model, "Hre_ReportHCGender", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
                //return Json(message);
            }
            #endregion
            return Json(message);

        }
        public ActionResult CreateTemplate(string t1, bool t2, string t3, string t4, bool t5, bool t6, string t7, string t8)
        {
            var service = new BaseService();
            Cat_ExportEntity exportEntity = new Cat_ExportEntity()
            {
                ExportName = t1,
                IsColumnDynamic = t2,
                ScreenName = t4,
                TemplateFile = t3,
                IsReadOnly = t5,
                IsProtected = t6,
                IsSmartMarkers = true,
                Formula = t7,
                PasswordExport = t8,
            };

            var _mess = service.Add(exportEntity);
            exportEntity.ActionStatus = _mess;
            return Json(exportEntity, JsonRequestBehavior.AllowGet);
            //return Json("");
        }
        //public ActionResult CreateTemplate(CreateTemplateModel model)
        //{
        //    if (model != null)
        //    {
        //        var service = new BaseService();
        //        Cat_ExportEntity exportEntity = new Cat_ExportEntity()
        //        {
        //            ExportName = model.TemplateName,
        //            IsColumnDynamic = model.IsDynamic,
        //            ScreenName = model.ScreenName,
        //            TemplateFile = model.TemplateFile
        //        };

        //        service.Add(exportEntity);
        //    }
        //    return Json("");
        //}
        public ActionResult SelectPlanHeadCountV2History([DataSourceRequest] DataSourceRequest request, Guid? planheadcountid)
        {
            if (planheadcountid != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(planheadcountid);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_PlanHeadCountEntity>(objs, ConstantSql.hrm_hr_sp_get_PlanHeadCountByIdToViewHistory, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }
        public ActionResult GetReportHCGender([DataSourceRequest] DataSourceRequest request, Hre_ReportHCGenderModel model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportHCGenderModel();
            var isDataTable = false;
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = DateTime.Now };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            var result = service.GetReportHCGender(model.MonthSearch, model.JobtitleID, model.OrgStructureID, model.OrgStructureTypeID, model.Gender, model.isIncludeQuitEmp, model.IsCreateTemplate, UserLogin);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportHCGenderModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                result.Rows[0].Delete();
                var col = result.Columns.Count;
                result.Columns.RemoveAt(col - 1);
                //  var row = result.Rows.Count;
                //    result.Rows[row - 1].Delete();

                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region BC HeadCount Hàng Tháng

        public ActionResult GetReportMonthlyHCValidate(Hre_ReportMonthlyHCModel model)
        {
            #region Validate
            string message = string.Empty;
            bool checkValidate;
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowPos.ToString())
            {
                checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportMonthlyHCModel>(LanguageCode, model, "Hre_ReportMonthlyHC", ref message);
            }
            else if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowJob.ToString())
            {
                checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportMonthlyHCModel>(LanguageCode, model, "Hre_ReportMonthlyHCJob", ref message);
            }
            else if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowOrgType.ToString())
            {
                checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportMonthlyHCModel>(LanguageCode, model, "Hre_ReportMonthlyHCV2", ref message);
            }
            else if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowUnit.ToString())
            {
                checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportMonthlyHCModel>(LanguageCode, model, "Hre_ReportMonthlyUnit", ref message);
            }
            else
            {
                checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportMonthlyHCModel>(LanguageCode, model, "Hre_ReportMonthlyHC_OrTher", ref message);
            }
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
            }
            #endregion
            return Json(message);
        }

        public ActionResult GetReportMonthlyHC([DataSourceRequest] DataSourceRequest request, Hre_ReportMonthlyHCModel model)
        {
            if (model.JobtitleID.Count == 1 && model.JobtitleID[0] == null)
            {
                var lstguid = new List<Guid?>();
                model.JobtitleID = lstguid;
            }
            if (model.PayrollGroupID.Count == 1 && model.PayrollGroupID[0] == null)
            {
                var lstguid = new List<Guid?>();
                model.PayrollGroupID = lstguid;
            }
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportMonthlyHCModel();
            var isDataTable = false;
            var ActionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            DataTable result = new DataTable();

            #region Get cau hinh nhan ban nhan vien
            var key = AppConfig.HRM_HRE_CONFIG_ISONLYCOUNTROOTPROFILE.ToString();
            var lstConfig = ActionServices.GetData<Sys_AllSettingEntity>(key, ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status);
            bool _confi = false;
            if (!Common.CheckListNullOrEmty(lstConfig))
            {
                if (lstConfig.FirstOrDefault() != null)
                {
                    bool.TryParse(lstConfig.FirstOrDefault().Value1, out _confi);
                }
            }
            #endregion

            #region Lay du lieu theo loai bao cao
            // THEO CHUC DANH
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowJob.ToString())
            {
                if (model.OrgStructureID == Guid.Empty)
                {
                    result = service.GetReportMonthlyHCV2(model.dateSearch, model.JobtitleID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
                }
                else
                {
                    result = service.GetReportMonthlyHC(model.dateSearch, model.JobtitleID, model.OrgStructureID, model.OrgStructureTypeID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
                }
            }

            //THEO COST CENTRE
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowCos.ToString())
                result = service.GetReportMonthlyHC_CostCentre(model.dateSearch, model.CostCentreID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO NHOM QUOC TICH
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowNatGroup.ToString())
                result = service.GetReportMonthlyHC_NatGroup(model.dateSearch, null, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO CHU VU
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowPos.ToString())
                result = service.GetReportMonthlyHC_Position(model.dateSearch, model.PostionID, model.OrgStructureID, model.OrgStructureTypeID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO NHOM NHAN VIEN 
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowEmpGroup.ToString())
                result = service.GetReportMonthlyHC_EmpGroup(model.dateSearch, null, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO LOAI NHAN VIEN
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowEmployeeType.ToString())
                result = service.GetReportMonthlyHC_EmployeeType(model.dateSearch, model.EmployeeTypeID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO LOAI Phong Ban
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowOrgType.ToString())
                result = service.GetReportMonthlyHC_OrgStructureType(model.dateSearch, model.OrgStructureIDs, model.OrgStructureTypeID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            //THEO khối
            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowUnit.ToString())
                result = service.GetReportMonthlyHC_UnitType(model.dateSearch, model.UnitStructureIDs, model.UnitType, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);

            if (model.FollowJob == EnumDropDown.HeadCountByMonth.E_FollowPayrollGroup.ToString())
                result = service.GetReportMonthlyHC_PayrollGroup(model.dateSearch, model.PayrollGroupID, model.IsCreateTemplate, UserLogin, model.IsAllowCutOff, _confi);
            var rs = result.Translate<Hre_ReportMonthlyHCModel>().OrderBy(s => s.OrderOrg).ToList();
            #endregion

            #region tao template
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            //Son.Vo - 20180109 - 0091952
            string Companylogo = GetCompanyLogo(model.OrgStructureIDs);
            var headerInfo1 = new HeaderInfo() { Name = "MonthYear", Value = model.dateSearch };
            var headerInfo2 = new HeaderInfo() { Name = "CompanyLogo", Value = null, ColumnType = typeof(object) };
            var templatepath = Common.GetPath(Common.TemplateURL) + Companylogo;
            if (!string.IsNullOrEmpty(Companylogo) && System.IO.File.Exists(templatepath))
            {
                headerInfo2.Value = System.IO.File.ReadAllBytes(Common.GetPath(Common.TemplateURL) + Companylogo);
            }
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Name = "CompanyLogo(Picture:FitToCell)";
                    }
                }

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportMonthlyHCModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region Xuat bao cao
            if (model.ExportID != Guid.Empty)
            {

                result.DefaultView.Sort = "OrderOrg";
                DataView TableView = result.DefaultView;
                DataTable NewTable = TableView.ToTable();

                var fullPath = ExportService.Export(model.ExportID, NewTable, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            #endregion

            return Json(rs.ToDataSourceResult(request));
        }
        #endregion
        #region BC BC định biên nhân sự theo chức vụ

        public ActionResult GetReportSummaryHeadCountInMonthValidate(Hre_ReportSummaryHeadCountInMonthModel model)
        {
            #region Validate
            string message = string.Empty;
            bool checkValidate;
            checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportSummaryHeadCountInMonthModel>(LanguageCode, model, "Hre_ReportSummaryHeadCountInMonth", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
                //return Json(message);
            }
            #endregion
            return Json(message);

        }

        public ActionResult GetReportSummaryHeadCountInMonth([DataSourceRequest] DataSourceRequest request, Hre_ReportSummaryHeadCountInMonthModel model)
        {
            var service = new Hre_ReportServices();
            var hrService = new Hre_ProfileServices();
            object obj = new Hre_ReportSummaryHeadCountInMonthModel();
            var isDataTable = false;
            var ActionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            DataTable result = new DataTable();

            #region Lay du lieu theo loai bao cao
            result = service.GetReportSummaryHeadCountInMonth(model.MonthSearch, model.OrgStructureIDs, model.PostionID, model.IsCreateTemplate, UserLogin);
            var rs = result.Translate<Hre_ReportSummaryHeadCountInMonthModel>().OrderBy(s => s.OrderOrg).ToList();
            #endregion

            #region tao template
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "MonthSearch", Value = model.MonthSearch };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportSummaryHeadCountInMonthModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            #region Xuat bao cao
            if (model.ExportID != Guid.Empty)
            {

                result.DefaultView.Sort = "OrgStructureName";
                DataView TableView = result.DefaultView;
                DataTable NewTable = TableView.ToTable();

                var fullPath = ExportService.Export(model.ExportID, NewTable, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            #endregion
            return Json(rs.ToDataSourceResult(request));
        }
        #endregion
        #region BC thay đổi nhân sự
        public ActionResult GetReportChangePersonalValidate(Hre_ReportChangePersonalModel model)
        {
            #region Validate
            string message = string.Empty;
            bool checkValidate;
            checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportChangePersonalModel>(LanguageCode, model, "Hre_ReportReportChangePersonal", ref message);
            if (!checkValidate)
            {
                var ls = new object[] { "error", message };
                return Json(ls);
                //return Json(message);
            }
            #endregion
            return Json(message);

        }
        public ActionResult GetReportChangePersonal([DataSourceRequest] DataSourceRequest request, Hre_ReportChangePersonalModel model)
        {
            object obj = new Hre_ReportChangePersonalModel();
            var isDataTable = false;
            var reportServices = new Hre_ReportServices();

            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model.selectedIds == null)
                model.selectedIds = new List<string>();
            var result = reportServices.GetReportChangePersonal(model.selectedIds, model.DateFrom, model.DateTo, model.OrgStructureIDs, model.IsCreateTemplate, UserLogin);

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportChangePersonalModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);

                return Json(fullPath);
            }
            return new JsonResult { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue };
        }
        #endregion

        #region BC NV làm lại
        [HttpPost]
        public ActionResult GetReportProfileComeBack([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileComeBackModel model)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var contractServices = new Hre_ContractServices();
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            #region Validate
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ReportProfileComeBackModel>(LanguageCode, model, "Hre_ReportProfileComeBack", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            #endregion

            var lstpara = new List<object>();
            lstpara.AddRange(new object[9]);
            lstpara[0] = model.DateFrom;
            lstpara[1] = model.DateTo;
            lstpara[2] = model.OrgStructureIDs;
            lstpara[3] = model.ProfileName;
            lstpara[4] = model.CodeEmp;
            lstpara[5] = model.RankID;
            lstpara[6] = model.WorkPlaceID;
            lstpara[7] = 1;
            lstpara[8] = int.MaxValue - 1;
            var result = new List<Hre_ReportProfileComeBackEntity>();
            if (!model.IsCreateTemplate && !model.IsCreateTemplateForDynamicGrid)
            {
                result = actionServices.GetData<Hre_ReportProfileComeBackEntity>(lstpara, ConstantSql.hrm_hr_sp_get_RptProfileComBack, ref status);
            }
            var dataResult = contractServices.GetDataContractByProfileID(result, UserLogin);

            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = dataResult;
                isDataTable = true;
            }


            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportProfileComeBackEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, dataResult, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        public ActionResult ExportProfileComeBackByTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
            {
                Directory.CreateDirectory(dirpath);
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
            {
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            }

            objs.Add(strIDs);
            var lstPerformance = actionServices.GetData<Hre_ReportProfileComeBackModel>(strIDs, ConstantSql.hrm_hr_sp_get_RptProfileComBackByID, ref status);
            if (lstPerformance == null)
            {
                return null;
            }
            int i = 0;
            var lstPerformanceID = lstPerformance.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "Hre_ReportProfileComeBackModel" + suffix;
            if (lstPerformanceID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            int fileOrderNumber = 0;
            foreach (var performance in lstPerformance)
            {

                fileOrderNumber++;
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                List<object> lstObjExport = new List<object>();
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(null);
                lstObjExport.Add(1);
                lstObjExport.Add(10000000);

                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = actionServices.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, performance.ProfileID != null ? (Guid)performance.ProfileID : Guid.Empty, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                var lstPers = new List<Hre_ReportProfileComeBackModel>();
                lstPers.Add(performance);
                ExportService.ExportWord(outputPath, templatepath, lstPers);
            }
            if (lstPerformanceID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        #endregion

        #region Son.Vo - 20151222 - 0062037 - Báo cáo tình hình thay đổi lao động
        public ActionResult GetReportChangeLabor([DataSourceRequest] DataSourceRequest request, Hre_ReportChangeLaborSearchModel model)
        {
            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportChangeLaborSearchModel>(LanguageCode, model, "Hre_ReportChangeLabor", ref message);
            if (!checkValidate && !model.IsCreateTemplate)
            {
                return Json(message);
            }
            #endregion
            string status = string.Empty;
            var Services = new Hre_ReportServices();
            var actionservices = new ActionService(UserLogin, LanguageCode);

            var lstProfile = new List<Hre_ProfileEntity>();
            if (!model.IsCreateTemplate)
            {
                var listModel = new List<object>();
                listModel.AddRange(new object[15]);
                listModel[0] = model.DateStart;
                listModel[1] = model.DateEnd;
                listModel[2] = model.OrgStructureID;
                listModel[3] = model.DateHireFrom;
                listModel[4] = model.DateHireTo;
                listModel[5] = model.DateQuitFrom;
                listModel[6] = model.DateQuitTo;
                listModel[7] = Common.DotNetToOracle(model.ProfileID);
                listModel[8] = model.CompanyID;
                listModel[13] = 1;
                listModel[14] = Int32.MaxValue - 1;
                lstProfile = actionservices.GetData<Hre_ProfileEntity>(listModel, ConstantSql.hrm_hr_sp_get_ProfileForRptChangeLabor, ref status);
            }
            string nameReport = "ReportChangeLabor";
            DataTable Table = Services.GetReportChangeLabor(lstProfile, model.DateStart, model.DateEnd, model.IsCreateTemplate, nameReport);

            #region Xử lý cách export mới
            var isDataTable = false;
            DataTable obj = null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                var col = Table.Columns.Count;
                Table.Columns.RemoveAt(col - 1);
                obj = Table;
                isDataTable = true;
            }
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = nameReport,
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, Table, listHeaderInfo, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }
            #endregion

            return new JsonResult() { Data = Table.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        #endregion
        #endregion

        #region Hre_ExpiryContract
        public ActionResult ExportReportExpiryContractSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_RptExpireContractByIds);
        }

        [HttpPost]
        public ActionResult ExportReportExpiryContractList([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractSearchModel model)
        {
            #region get data
            string status = string.Empty;
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            DateTime? dateTo = null;
            DateTime? dateFrom = null;
            if (isshowloopcontract == false)
            {
                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                dateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                dateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
            }
            var isDataTable = false;
            var listObj = new List<object>();
            listObj.Add(model.strOrgStructureID);
            listObj.Add(model.Status);
            listObj.Add(dateFrom);
            listObj.Add(dateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.IDNo);
            listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
            listObj.Add(model.DateSignedFrom);
            listObj.Add(model.DateSignedTo);
            listObj.Add(model.ContractNo);
            listObj.Add(model.EvaType);
            listObj.Add(model.strContractTypeID);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
            // Son.Vo - theo task - 0054827
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.Gender);
            listObj.Add(model.DateStartFrom);
            listObj.Add(model.DateStartTo);
            listObj.Add(model.StatusSyn);
            listObj.Add(model.IsNotSignContinue);
            listObj.Add(model.strEmployeeGroupID);
            listObj.Add(model.IsCreateTemplate);
            listObj.Add(model.ExportID);
            listObj.Add(model.ExportType);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstContractEntity = new List<Hre_ReportExpiryContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (isshowloopcontract == true)
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoop, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
                else
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContract, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
            }
            #endregion
            status = ExportService.ExportAll(lstContractEntity, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
            return Json(status);
        }

        public ActionResult ExportSelectedExpiryContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractModel model)
        {
            var headerInfo = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo };
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ReportExpiryContractModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ReportExpiryContractModel>(model.strExpiryContractID, ConstantSql.hrm_hr_sp_get_RptExpireContractByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ReportExpiryContractModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool ischeckBydateComeBack = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISCHECKCONTRACTBYDATECOMEBACK);
            var contractServices = new Hre_ContractServices();
            var lstPofileID = result.Select(s => s.ProfileID).Distinct().ToList();
            var lstContractbyProfile = contractServices.GetListContractForCountSign(lstPofileID);
            foreach (var item in result)
            {
                var lstContract = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.DateStart <= item.DateStart).ToList();
                item.CountSig = lstContract.Count();
                if (ischeckBydateComeBack == true)
                {
                    var lstContracts = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.Type != EnumDropDown.TypeContract.E_PROBATION.ToString()
                   && s.CompanyID == item.CompanyID
                   && (
                       (s.DatehireNew == null && s.DateStart >= s.DateHire)
                   || (s.DatehireNew != null && s.DateStart >= s.DatehireNew)
                   )).ToList();
                    item.CountSigCompany = lstContracts.Count();
                }
                else
                {
                    var lstContracts = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.Type != EnumDropDown.TypeContract.E_PROBATION.ToString()
                   && s.CompanyID == item.CompanyID && s.DateStart >= s.DateHire).ToList();
                    item.CountSigCompany = lstContracts.Count();
                }
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        // Son.Vo - 20161226 - 0077134 - load thông tin lương cb theo đánh giá hđ
        public ActionResult LoadDataSalaryForEvaContract(string selectedIDs)
        {
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            if (!string.IsNullOrEmpty(selectedIDs))
            {
                var lstIds = selectedIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                if (lstIds.Count == 1)
                {
                    var lastBasicSalary = _BasicSalaryServices.GetLstBasicSalaryByContract(lstIds).FirstOrDefault();
                    return Json(lastBasicSalary);
                }
                return Json(null);
            }
            return Json(null);
        }

        public ActionResult LoadDataSalaryForEvaContractByContractExtend(string selectedIDs, DateTime? datestart)
        {
            var _ContractExtendServices = new Hre_ContractExtendServices();
            if (!string.IsNullOrEmpty(selectedIDs) && datestart != null)
            {
                var lstIds = selectedIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                if (lstIds.Count == 1 && lstIds[0] != null)
                {
                    Guid contractID = Guid.Parse(lstIds[0].ToString());
                    var ContractExtend = _ContractExtendServices.GetLastContractExtend4EvaContract(contractID, datestart.Value);
                    return Json(ContractExtend);
                }
                return Json(null);
            }
            return Json(null);
        }

        [HttpPost]
        // Son.Vo - 20161226 - 0077134
        public ActionResult StrLoadEvaluationDataFrom()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            string strDataLoadFrom = Sys_Services.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_LOADEVALUATIONDATAFROM);
            if (!string.IsNullOrEmpty(strDataLoadFrom) && strDataLoadFrom == LoadEvaluationDataFrom.E_BASICSALARY.ToString())
            {
                return Json(strDataLoadFrom, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(strDataLoadFrom, JsonRequestBehavior.AllowGet);
            }
        }

        //Son.Vo - 20160607 - 0068069
        [HttpPost]
        public ActionResult GetExpiryContractMLC([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractModel model)
        {
            #region MyRegion
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };

            #region Xuất template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportExpiryContractModel(),
                    FileName = "Hre_ReportExpiryContract",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            string status = string.Empty;
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            DateTime? dateTo = null;
            DateTime? dateFrom = null;
            if (isshowloopcontract == false)
            {
                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAYMLC_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAYMLC_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                dateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                dateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
            }
            var isDataTable = false;
            var listObj = new List<object>();
            listObj.Add(model.strOrgStructureID);
            listObj.Add(model.Status);
            listObj.Add(dateFrom);
            listObj.Add(dateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.IDNo);
            listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
            listObj.Add(model.DateSignedFrom);
            listObj.Add(model.DateSignedTo);
            listObj.Add(model.ContractNo);
            listObj.Add(model.EvaType);
            listObj.Add(model.strContractTypeID);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
            // Son.Vo - theo task - 0054827
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.Gender);
            listObj.Add(model.DateStartFrom);
            listObj.Add(model.DateStartTo);
            listObj.Add(model.StatusSyn);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstContractEntity = new List<Hre_ReportExpiryContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (isshowloopcontract == true)
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoopMLC, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
                else
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractMLC, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
            }
            #endregion

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, lstContractEntity, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(lstContractEntity.ToDataSourceResult(request));
        }

        //Son.Vo - 20160603 - kết xuất word theo combobox - DS HĐ đến hạn
        public ActionResult ExportComboboxExpiryContractByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            string status = string.Empty;
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            Cat_ContractTemplateEntity contractTemplate = null;
            var exportService = new Cat_ExportServices();
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            //if (template == null)
            //{
            //    messages = "Error";
            //    return Json(messages, JsonRequestBehavior.AllowGet);
            //}

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var contractServices = new Hre_ContractServices();
            var _ProfileServices = new Hre_ProfileServices();
            var currencyServices = new Cat_CurrencyServices();
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstContract = actionServices.GetData<Hre_ContractEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status);
            if (lstContract == null)
                return null;
            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var lstProfileID = new List<Guid>();
            if (lstContract != null)
            {
                lstProfileID = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            }
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workhistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileID);
            //Son.Vo - 20161003 - 0073806
            lstContract = contractServices.GetTop5LatestContract(lstContract);
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileID);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileID);
            var basicSalaryByProfile = _BasicSalaryServices.GetBasicSalaryBylstProIDs(lstProfileID).Where(s => s.DateOfEffect != null).OrderByDescending(s => s.DateOfEffect).ToList();
            var ext = string.Empty;
            var templatepath = string.Empty;

            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            if (template != null && template.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(template.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(template.OrderNumber)).ToList();
                }
            }
            #endregion

            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var exportServices = new Cat_ExportServices();
            var lstExportallcontemp = exportServices.GetListExportAll();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            string fileNameDownload = null;

            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                string outputPath = string.Empty;
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                    }

                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                    }

                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                    }

                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                    }

                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                    }

                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                    }

                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                    }

                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                    }

                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                    }

                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                    }

                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                    }

                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                    }

                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                    }

                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                    }

                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                    }

                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                    }

                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                    }
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female ";
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GenderEN = "Male ";
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                #region Quyen.Quach-17062017-Task 0083786
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                #region [22/12/2015][to.le][Modify Func][0061817]
                var workingHistoryEntity = lstWorkhistory.Where(s => s.ProfileID == contract.ProfileID && s.DateEffective <= contract.DateEnd).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workingHistoryEntity != null)
                {
                    contract.PositionName = workingHistoryEntity.PositionName;
                    contract.JobTitleName = workingHistoryEntity.JobTitleName;
                }
                #endregion

                #region Xử lý datetime
                if (contract.DateEndProbation != null && contract.DateHire != null)
                {
                    contract.ProbationDays = (int)contract.DateEndProbation.Value.Subtract(contract.DateHire.Value).TotalDays;
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                if (contract.DateStart != null)
                {
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                }

                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEndMonth = contract.DateEnd.Value.Month;
                    contract.DateEndYear = contract.DateEnd.Value.Year;
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateEndMonth = contract.DateHire.Value.Month;
                    contract.DateEndYear = contract.DateHire.Value.Year;
                    contract.DateHireFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateEndProbation.HasValue)
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.DateQuit.HasValue)
                    contract.DateQuitFormat = contract.DateQuit.Value.ToString("dd/MM/yyyy");
                #endregion
                //Quyen.Quach 20170623 - 0084491: Thêm enum xuất word màn hình DS HĐ đến hạn	
                var _salarybasic = basicSalaryByProfile.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (_salarybasic != null)
                {
                    if (_salarybasic.E_GrossAmount == null)
                    {
                        if (_salarybasic.GrossAmount != null)
                        {
                            contract.GrossAmount = _salarybasic.GrossAmount.ToDouble();
                        }
                    }
                    else
                    {
                        contract.GrossAmount = _salarybasic.E_GrossAmount.DecryptValue();
                    }
                    contract.DateOfEffect = _salarybasic.DateOfEffect;
                }

                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                contract.SalaryFormat = contract.Salary.HasValue ? contract.Salary.Value.ToString("N") : "0";

                #region Son.Vo - 20170228 - 0079357
                if (contract.PassportNo != null)
                {
                    contract.NoIDCardPass = contract.PassportNo;
                    contract.DateIDCardPass = contract.PassportDateOfIssue;
                    contract.PlaceIDCardPass = contract.PassportPlaceOfIssue;
                }
                if (contract.ProfileIDCard != null)
                {
                    contract.NoIDCardPass = contract.ProfileIDCard;
                    contract.DateIDCardPass = contract.ProfileIDCardDateOfIssue;
                    contract.PlaceIDCardPass = contract.ProfileIDCardPlaceOfIssue;
                }
                if (contract.IDNo != null)
                {
                    contract.NoIDCardPass = contract.IDNo;
                    contract.DateIDCardPass = contract.IDDateOfIssue;
                    contract.PlaceIDCardPass = contract.IDPlaceOfIssue;
                }

                #endregion
                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }

                #region Son.Vo - 20170222 - 0079071 Xứ lý tổng lương thử việc + Phụ cấp
                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }


                #endregion
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (template != null && template.IsExportAllOn1File != null && template.IsExportAllOn1File.Value)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlFileZip = fileZipSplit[1].Split('/');
                        if (urlFileZip.Count() > 0)
                        {
                            var urlFile = Common.GetPath(Common.DownloadURL) + urlFileZip[urlFileZip.Length - 1];
                            var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(urlFile, urlOutPath, ext, lstFileOrder, fileNameDownload);
                            messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                        }

                    }
                    return Json(messageReturn);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }

        //Son.Vo - 20160603 - kết xuất word theo loại HĐ - DS HĐ đến hạn
        public ActionResult ExportExpiryContractByTemplate(List<Guid> selectedIds, string valueFields, bool isRar)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstContract = actionServices.GetData<Hre_ContractEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ContractsByListId, ref status);

            if (lstContract == null)
                return null;
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workhistoryServices.GetWorkHistoryOrgListByLstProfileID(lstProfileIDs);
            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;


            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            var templatepath = string.Empty;

            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            var lstExportID = lstContract.Where(s => s.ExportID != null).Select(s => s.ExportID.Value).Distinct().ToList();
            var exportServices = new Cat_ExportServices();
            var lstExportall = exportServices.GetListExport(lstExportID);
            var ExportToCheckOrder = lstExportall.FirstOrDefault();
            if (ExportToCheckOrder != null && ExportToCheckOrder.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(ExportToCheckOrder.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(ExportToCheckOrder.OrderNumber)).ToList();
                }
            }
            #endregion

            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var lstExportallcontemp = exportServices.GetListExportAll();
            var lstattgrade = contractServices.GetGradeAttendanceByGrade(lstProfileIDs);
            string fileNameDownload = null;

            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(selectedIds);
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string outputPath = string.Empty;
                if (contract.ExportID != null)
                {
                    template = lstExportall.Where(s => s.ID == contract.ExportID).FirstOrDefault();
                }
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                    }

                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                    }

                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                    }

                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                    }

                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                    }

                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                    }

                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                    }

                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                    }

                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                    }

                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                    }

                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                    }

                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                    }

                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyIDName = CurenncyID11.CurrencyName;
                    }

                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                    }

                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                    }

                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                    }

                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                    }
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion

                //[22/12/2015][to.le][Modify Func][0061817] 
                //Chức danh - Hre_WorkingHistory.PositionID => PositionName (ngày hiệu lực lớn nhất và <= ngày kết thúc hợp đồng đang chọn)
                //Chức vụ - Hre_WorkingHistory.JobtitleID => JobtitleName (ngày hiệu lực lớn nhất và <= ngày kết thúc hợp đồng đang chọn)
                //Số ngày thử việc => Hre_Profile.ProbationDays
                var workingHistoryEntity = lstWorkhistory.Where(s => s.ProfileID == contract.ProfileID && s.DateEffective <= contract.DateEnd).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workingHistoryEntity != null)
                {
                    contract.PositionName = workingHistoryEntity.PositionName;
                    contract.JobTitleName = workingHistoryEntity.JobTitleName;
                }
                if (contract.DateEndProbation != null && contract.DateHire != null)
                {
                    contract.ProbationDays = (int)contract.DateEndProbation.Value.Subtract(contract.DateHire.Value).TotalDays;
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                if (contract.DateStart != null)
                {
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                }

                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEndMonth = contract.DateEnd.Value.Month;
                    contract.DateEndYear = contract.DateEnd.Value.Year;
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateEndMonth = contract.DateHire.Value.Month;
                    contract.DateEndYear = contract.DateHire.Value.Year;
                    contract.DateHireFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateEndProbation.HasValue)
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                contract.SalaryFormat = contract.Salary.HasValue ? contract.Salary.Value.ToString("N") : "0";

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.DateQuit.HasValue)
                    contract.DateQuitFormat = contract.DateQuit.Value.ToString("dd/MM/yyyy");
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }

                #region Son.Vo - 20170222 - 0079071 Xứ lý tổng lương thử việc + Phụ cấp
                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region dịch tổng lương/ tổng lương tv
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }

                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }


                #endregion
                #endregion
                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                #region Nguyen.Le 30/11/2017 0090346 Lấy Số ngày phép năm từ bảng Chế độ công

                var annualentity = lstattgrade.Where(s => s.ProfileID == contract.ProfileID).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                if (annualentity != null)
                {
                    contract.DayOfAnnualLeave = annualentity.TotalDayAnnualLeaveOnYear;
                }
                #endregion

                #region  Nguyen.Le - 29/01/2018 - 0092424 Thêm enum xuất word - Ngày hết hạn PLHĐ 1 năm, Ngày trả thẻ 1, Ngày trả thẻ 2

                if (contract.DateEnd != null)
                {
                    contract.BeforeDateEnd = contract.DateEnd.Value.AddDays(-1);
                }

                var contractExtend = lstContractExtend.Where(s => s.ContractID == contract.ID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contractExtend != null && contractExtend.DateEnd != null)
                {
                    contract.ContractExtend_BeforeDateEnd = contractExtend.DateEnd.Value.AddDays(-1);
                    contract.ContractExtend_DateEnd = contractExtend.DateEnd;
                }

                #endregion
                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348
                if (string.IsNullOrEmpty(fileNameDownload))
                {
                    fileNameDownload = genneralNameExport;
                }
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (isRar)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var fileSplit = fileZipSplit[1].Split('/');

                        var urlFile = Common.GetPath(Common.DownloadURL) + fileSplit[2];
                        var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(urlFile, urlOutPath, ext, lstFileOrder, fileNameDownload);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    }
                    return Json(messageReturn);
                }

            }
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult GetExpiryContract([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractSearchModel model)
        {
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            #endregion

            #region Xuất template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportExpiryContractModel(),
                    FileName = "Hre_ReportExpiryContract",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region get data
            string status = string.Empty;
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            if (isshowloopcontract == false)
            {
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                if (ShowBeforDate1 != null)
                {
                    model.DateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
                }

                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                if (ShowAfterDate1 != null)
                {
                    model.DateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                }
            }

            var lstContractEntity = new List<Hre_ReportExpiryContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (model.ExportID != Guid.Empty)
                {
                    #region trường hợp export
                    var listObj = new List<object>();
                    listObj.Add(model.strOrgStructureID);
                    listObj.Add(model.Status);
                    listObj.Add(model.DateFrom);
                    listObj.Add(model.DateTo);
                    listObj.Add(model.CodeEmp);
                    listObj.Add(model.ProfileName);
                    listObj.Add(model.IDNo);
                    listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
                    listObj.Add(model.DateSignedFrom);
                    listObj.Add(model.DateSignedTo);
                    listObj.Add(model.ContractNo);
                    listObj.Add(model.EvaType);
                    listObj.Add(model.strContractTypeID);
                    listObj.Add(model.DateEndFrom);
                    listObj.Add(model.DateEndTo);
                    listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
                    // Son.Vo - theo task - 0054827
                    listObj.Add(model.JobTitleID);
                    listObj.Add(model.PositionID);
                    listObj.Add(model.EmpTypeID);
                    listObj.Add(model.Gender);
                    listObj.Add(model.DateStartFrom);
                    listObj.Add(model.DateStartTo);
                    listObj.Add(model.StatusSyn);
                    listObj.Add(model.IsNotSignContinue);
                    listObj.Add(model.strEmployeeGroupID);
                    listObj.Add(model.IsCreateTemplate);
                    listObj.Add(model.ExportID);
                    listObj.Add(model.ExportType);
                    listObj.Add(1);
                    listObj.Add(int.MaxValue - 1);
                    if (isshowloopcontract == true)
                    {
                        lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoop, ref status).OrderByDescending(m => m.DateStart).ToList();
                    }
                    else
                    {
                        lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContract, ref status).OrderByDescending(m => m.DateStart).ToList();
                    }
                    #endregion
                }
                else
                {
                    if (isshowloopcontract == true)
                    {
                        return GetListDataAndReturn<Hre_ReportExpiryContractModel, Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoop);
                    }
                    else
                    {
                        return GetListDataAndReturn<Hre_ReportExpiryContractModel, Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RptExpireContract);
                    }
                }
            }
            #endregion

            if (model.ExportID != Guid.Empty)
            {
                string CompanyLogo = string.Empty;
                if (!Common.CheckListNullOrEmty(lstContractEntity))
                {
                    CompanyLogo = lstContractEntity.Where(s => s.CompanyLogo != null).Select(s => s.CompanyLogo).FirstOrDefault();
                }
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }

                }
                var fullPath = ExportService.Export(model.ExportID, lstContractEntity, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(lstContractEntity.ToDataSourceResult(request));
        }
        //Quyen.Quach 18/10/2017 0088746
        [HttpPost]
        public ActionResult GetExpiryContractV2([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractSearchExModel model)
        {
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            #endregion

            #region Xuất template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportExpiryContractModel(),
                    FileName = "Hre_ReportExpiryContract",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region get data
            string status = string.Empty;
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            if (isshowloopcontract == false)
            {
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                if (ShowBeforDate1 != null)
                {
                    model.DateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
                }

                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                if (ShowAfterDate1 != null)
                {
                    model.DateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                }
            }

            var lstContractEntity = new List<Hre_ReportExpiryContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (model.ExportID != Guid.Empty)
                {
                    #region trường hợp export
                    var listObj = new List<object>();
                    listObj.Add(model.IsExpireNotProcess);
                    listObj.Add(model.strOrgStructureID);
                    listObj.Add(model.Status);
                    listObj.Add(model.DateFrom);
                    listObj.Add(model.DateTo);
                    listObj.Add(model.CodeEmp);
                    listObj.Add(model.ProfileName);
                    listObj.Add(model.IDNo);
                    listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
                    listObj.Add(model.DateSignedFrom);
                    listObj.Add(model.DateSignedTo);
                    listObj.Add(model.ContractNo);
                    listObj.Add(model.EvaType);
                    listObj.Add(model.strContractTypeID);
                    listObj.Add(model.DateEndFrom);
                    listObj.Add(model.DateEndTo);
                    listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
                    // Son.Vo - theo task - 0054827
                    listObj.Add(model.StrJobTitleID);
                    listObj.Add(model.StrPositionID);
                    listObj.Add(model.EmpTypeID);
                    listObj.Add(model.Gender);
                    listObj.Add(model.DateStartFrom);
                    listObj.Add(model.DateStartTo);
                    listObj.Add(model.StatusSyn);
                    listObj.Add(model.IsNotSignContinue);
                    listObj.Add(model.strEmployeeGroupID);
                    listObj.Add(model.IsCreateTemplate);
                    listObj.Add(model.ExportID);
                    listObj.Add(model.ExportType);
                    listObj.Add(1);
                    listObj.Add(int.MaxValue - 1);
                    if (isshowloopcontract == true)
                    {
                        lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoopV2, ref status).OrderByDescending(m => m.DateStart).ToList();
                    }
                    else
                    {
                        lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractV2, ref status).OrderByDescending(m => m.DateStart).ToList();
                    }
                    #endregion
                }
                else
                {
                    if (isshowloopcontract == true)
                    {
                        return GetListDataAndReturn<Hre_ReportExpiryContractModel, Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractSearchExModel>(request, model, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoopV2);
                    }
                    else
                    {
                        return GetListDataAndReturn<Hre_ReportExpiryContractModel, Hre_ReportExpiryContractEntity, Hre_ReportExpiryContractSearchExModel>(request, model, ConstantSql.hrm_hr_sp_get_RptExpireContractV2);
                    }
                }
            }
            #endregion

            if (model.ExportID != Guid.Empty)
            {
                string CompanyLogo = string.Empty;
                if (!Common.CheckListNullOrEmty(lstContractEntity))
                {
                    CompanyLogo = lstContractEntity.Where(s => s.CompanyLogo != null).Select(s => s.CompanyLogo).FirstOrDefault();
                }
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }

                }
                var fullPath = ExportService.Export(model.ExportID, lstContractEntity, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(lstContractEntity.ToDataSourceResult(request));
        }


        [HttpPost]
        public ActionResult ExportExpiryContractAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ReportExpiryContractSearchModel model)
        {
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            HeaderInfo headerInfo4 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            #endregion

            #region Xuất template
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ReportExpiryContractModel(),
                    FileName = "Hre_ReportExpiryContract",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            #region get data
            string status = string.Empty;
            var service = new Hre_ReportServices();
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            var contractServices = new Hre_ContractServices();
            BaseService baseServices = new BaseService();
            bool isshowloopcontract = profileServices.IsNotUseExpiryContractLoop();

            DateTime? dateTo = null;
            DateTime? dateFrom = null;
            if (isshowloopcontract == false)
            {
                var ShowAfterDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEAFTE", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                var ShowBeforDate1 = actionServices.GetData<Sys_AllSettingEntity>("HRM_HRE_CONTRACT_ALERT_EXPRIDAY_VALUEBEFOR", ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status).FirstOrDefault();
                dateTo = DateTime.Now.AddDays(Convert.ToDouble(ShowAfterDate1.Value1));
                dateFrom = DateTime.Now.AddDays(-Convert.ToDouble(ShowBeforDate1.Value1));
            }
            var isDataTable = false;
            var listObj = new List<object>();
            listObj.Add(model.strOrgStructureID);
            listObj.Add(model.Status);
            listObj.Add(dateFrom);
            listObj.Add(dateTo);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.ProfileName);
            listObj.Add(model.IDNo);
            listObj.Add(Common.DotNetToOracle(model.StrWorkPlaceID));
            listObj.Add(model.DateSignedFrom);
            listObj.Add(model.DateSignedTo);
            listObj.Add(model.ContractNo);
            listObj.Add(model.EvaType);
            listObj.Add(model.strContractTypeID);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(Common.DotNetToOracle(model.StrSalaryClassID));
            // Son.Vo - theo task - 0054827
            listObj.Add(model.JobTitleID);
            listObj.Add(model.PositionID);
            listObj.Add(model.EmpTypeID);
            listObj.Add(model.Gender);
            listObj.Add(model.DateStartFrom);
            listObj.Add(model.DateStartTo);
            listObj.Add(model.StatusSyn);
            listObj.Add(model.IsNotSignContinue);
            listObj.Add(model.strEmployeeGroupID);
            listObj.Add(model.IsCreateTemplate);
            listObj.Add(model.ExportID);
            listObj.Add(model.ExportType);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            var lstContractEntity = new List<Hre_ReportExpiryContractModel>();
            if (!model.IsCreateTemplate)
            {
                if (isshowloopcontract == true)
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContractByLoop, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
                else
                {
                    lstContractEntity = actionServices.GetData<Hre_ReportExpiryContractModel>(listObj, ConstantSql.hrm_hr_sp_get_RptExpireContract, ref status).OrderByDescending(m => m.DateStart).ToList();
                }
            }
            #endregion

            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(lstContractEntity))
            {
                CompanyLogo = lstContractEntity.Where(s => s.CompanyLogo != null).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }

            //Son.Vo - 20170519 - 0082506
            var lstPofileID = lstContractEntity.Select(s => s.ProfileID).Distinct().ToList();
            var lstContractbyProfile = contractServices.GetListContractForCountSign(lstPofileID);

            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool ischeckBydateComeBack = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISCHECKCONTRACTBYDATECOMEBACK);


            foreach (var item in lstContractEntity)
            {
                var lstContract = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.DateStart <= item.DateStart).ToList();
                item.CountSig = lstContract.Count();
                //Quyen.Quach - 20170615 - 0084187
                if (ischeckBydateComeBack == true)
                {
                    var lstContracts = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.Type != EnumDropDown.TypeContract.E_PROBATION.ToString()
                   && s.CompanyID == item.CompanyID
                   && (
                       (s.DatehireNew == null && s.DateStart >= s.DateHire)
                   || (s.DatehireNew != null && s.DateStart >= s.DatehireNew)
                   )).ToList();
                    item.CountSigCompany = lstContracts.Count();
                }
                else
                {
                    var lstContracts = lstContractbyProfile.Where(s => s.ProfileID == item.ProfileID && s.Type != EnumDropDown.TypeContract.E_PROBATION.ToString()
                   && s.CompanyID == item.CompanyID && s.DateStart >= s.DateHire).ToList();
                    item.CountSigCompany = lstContracts.Count();
                }

            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, lstContractEntity, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(lstContractEntity.ToDataSourceResult(request));
        }

        public ActionResult GetDataByCostCentreID([DataSourceRequest] DataSourceRequest request, Guid costcentreID)
        {
            var service = new ActionService(UserLogin);
            string status = string.Empty;
            var entity = service.GetByIdUseStore<Cat_CateCodeModel>(costcentreID, ConstantSql.hrm_cat_sp_get_CateCodeByIds, ref status);
            return Json(entity, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetDataByContractTypeID([DataSourceRequest] DataSourceRequest request, Guid contractTypeID)
        {
            var service = new ActionService(UserLogin);
            string status = string.Empty;
            var entity = service.GetByIdUseStore<CatContractTypeModel>(contractTypeID, ConstantSql.hrm_cat_sp_get_ContractTypeById, ref status);
            return Json(entity, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Hre_AppendixContract
        public ActionResult ExportContractExtendSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ContractExtendEntity, Hre_ContractExtendModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ContractExtendByIds);
        }

        [HttpPost]
        public ActionResult ExportContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            return ExportAllAndReturn<Hre_ContractExtendEntity, Hre_ContractExtendModel, Hre_AppendixContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContractExtendList);
        }

        public ActionResult ExportSelectedAppendixContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractExtendSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ContractExtendModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ContractExtendModel>(model.strContractExtendIDs, ConstantSql.hrm_hr_sp_get_ContractExtendByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ContractExtendModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetAppendixContractByContractList([DataSourceRequest] DataSourceRequest request, Guid? ContractID)
        {
            if (ContractID != null && ContractID != Guid.Empty)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(ContractID);
                var result = actionService.GetData<Hre_AppendixContractEntity>(objs, ConstantSql.hrm_cat_sp_get_AppendixContractByContractID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        public JsonResult GetMultiRelatives(string text)
        {
            return GetDataForControl<Hre_RelativesMultiModel, Hre_RelativesMultiEntity>(text, ConstantSql.hrm_hr_sp_get_Relatives_Multi);
        }


        /// <summary>
        /// [Son.Vo] - Lấy danh sách dữ liệu cho AppendixContract (Hre_AppendixContract) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetAppendixContractList([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractSearchModel model)
        {
            return GetListDataAndReturn<Hre_AppendixContractModel, Hre_AppendixContractEntity, Hre_AppendixContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContract);
        }

        [HttpPost]
        public ActionResult GetAppendixExpiredContractList([DataSourceRequest] DataSourceRequest request, Hre_AppendixExpiredContractSearchModel model)
        {
            return GetListDataAndReturn<Hre_AppendixContractModel, Hre_AppendixContractEntity, Hre_AppendixExpiredContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixExpiredContract);
        }

        [HttpPost]
        public ActionResult GetExpiredContractExtendList([DataSourceRequest] DataSourceRequest request, Hre_ExpiredContractExtendSearchModel model)
        {
            return GetListDataAndReturn<Hre_ContractExtendModel, Hre_ContractExtendEntity, Hre_ExpiredContractExtendSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ExpiredContractExtend);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho AppendixContract (Hre_AppendixContract) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportAppendixContractList([DataSourceRequest] DataSourceRequest request, Hre_AppendixContractSearchModel model)
        {
            return ExportAllAndReturn<Hre_AppendixContractEntity, Hre_AppendixContractModel, Hre_AppendixContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_AppendixContract);
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của AppendixContract (Hre_AppendixContract) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportAppendixContractSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_AppendixContractEntity, Hre_AppendixContractModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_AppendixContractByIds);
        }


        #endregion

        #region General

        /// <summary>
        /// [Hien.Pham] - Hàm mở rộng chuyển các tham số điều kiện tìm kiếm thành đối tượng param
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        private List<HRM.Infrastructure.Utilities.FilterAttribute> ExtractAdvanceFilterAttributes(object model)
        {
            List<HRM.Infrastructure.Utilities.FilterAttribute> list = new List<HRM.Infrastructure.Utilities.FilterAttribute>();
            if (model == null)
                return list;

            PropertyInfo[] propertyInfos = model.GetType().GetProperties();
            List<PropertyInfo> lstPropertyInfo = propertyInfos.ToList();

            foreach (PropertyInfo _profertyInfo in lstPropertyInfo)
            {
                //result.IsChangeApprove = profileGrade != null ? profileGrade.IsChangeApprove : null;
                //result.FormularDurationType = profileGrade != null ? profileGrade.FormularDurationType : string.Empty;
                HRM.Infrastructure.Utilities.FilterAttribute attribute = new HRM.Infrastructure.Utilities.FilterAttribute()
                {
                    Member = _profertyInfo.Name,
                    MemberType = _profertyInfo.PropertyType,
                    Value2 = model.GetPropertyValue(_profertyInfo.Name)
                };

                if (_profertyInfo.PropertyType.Name == "List`1")
                {
                    attribute.MemberType = typeof(object);
                    var lstObj = (model.GetPropertyValue(_profertyInfo.Name) as IList);
                    object result = null;
                    if (lstObj != null)
                        result = string.Join(",", lstObj.OfType<object>().Select(x => x.ToString()).ToArray());
                    attribute.Value2 = result;
                }
                else if (_profertyInfo.PropertyType == typeof(DateTime))
                {
                    attribute.MemberType = typeof(DateTime);
                    if (attribute.Value2 != null && attribute.Value2.ToString() == DateTime.MinValue.ToString())
                    {
                        attribute.Value2 = null;
                    }
                }

                list.Add(attribute);
            }
            return list;
        }
        private List<SortAttribute> ExtractSortAttributes(DataSourceRequest request)
        {
            List<SortAttribute> list = new List<SortAttribute>();
            if (request.Sorts == null)
                return list;
            foreach (var sort in request.Sorts)
            {
                SortAttribute attribute = new SortAttribute()
                {
                    Member = sort.Member,
                    SortDirection = sort.SortDirection
                };
                list.Add(attribute);
            }
            return list;
        }
        private List<HRM.Infrastructure.Utilities.FilterAttribute> ExtractFilterAttributes(DataSourceRequest request)
        {
            List<HRM.Infrastructure.Utilities.FilterAttribute> list = new List<HRM.Infrastructure.Utilities.FilterAttribute>();
            if (request.Filters == null)
                return list;
            IList<IFilterDescriptor> filterDescriptor = new List<IFilterDescriptor>();
            if (request.Filters.Count > 0 && request.Filters[0].GetType() == typeof(CompositeFilterDescriptor))
            {
                filterDescriptor = ((CompositeFilterDescriptor)request.Filters[0]).FilterDescriptors.ToList();
            }
            else
            {
                filterDescriptor = request.Filters;
            }
            foreach (FilterDescriptor filter in filterDescriptor)
            {
                HRM.Infrastructure.Utilities.FilterAttribute attribute = new HRM.Infrastructure.Utilities.FilterAttribute()
                {
                    Member = filter.Member,
                    MemberType = filter.MemberType,
                    Value = filter.Value
                };
                switch (filter.Operator)
                {
                    case Kendo.Mvc.FilterOperator.IsEqualTo:
                        attribute.Operator = FILTEROPERATOR.Equals;
                        break;
                    case Kendo.Mvc.FilterOperator.Contains:
                        attribute.Operator = FILTEROPERATOR.Contains;
                        break;
                    case Kendo.Mvc.FilterOperator.StartsWith:
                        attribute.Operator = FILTEROPERATOR.StartWith;
                        break;
                    case Kendo.Mvc.FilterOperator.EndsWith:
                        attribute.Operator = FILTEROPERATOR.EndWith;
                        break;
                }
                list.Add(attribute);
            }
            request.Filters = null;
            return list;
        }
        #endregion

        #region Hre_StopWorking
        [HttpPost, ValidateInput(false)]
        public ActionResult SaveStopWorking([Bind(Prefix = "Model")] Hre_StopWorkingModel model, [Bind(Prefix = "Modeldetail")] List<Hre_ProfileWorkListModel> modeldetail)
        {
            var hreGetdata = new Hre_GetDataController();
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            var _StopWorkServices = new Hre_StopWorkingServices();
            var _TraineeServices = new Tra_TraineeServices();
            var _ProfileServices = new Hre_ProfileServices();

            #region Validate
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_StopWorkingModel>(LanguageCode, model, model.TableValidate, ref message);
            if (!checkValidate)
            {
                model.ActionStatus = message;
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            var lstProfile = new List<Guid>();
            lstProfile.Add(model.ProfileID.Value);
            if (model.ProfileID != null && model.DateStop != null)
            {
                bool _WARPROQUITNOTCOMTIME = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_TRA_CONFIG_TRAINEEREGISTER_WARPROQUITNOTCOMTIME);
                string messageValidate = _TraineeServices.ValidateCreateStopWorking(lstProfile, model.DateStop.Value, _WARPROQUITNOTCOMTIME);
                if (messageValidate != null)
                {
                    model.ActionStatus = messageValidate.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            if (model.ProfileID != null && model.RequestDate != null)
            {
                string messageValidate = _TraineeServices.ValidateCreateStopWorkingbyRequestDate(lstProfile, model.RequestDate.Value);
                if (messageValidate != null)
                {
                    model.ActionStatus = messageValidate.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }

            var lstpro = new List<Guid>();
            lstpro.Add((Guid)model.ProfileID);
            var lstresult = _StopWorkServices.GetLstStopWorkingForValidateProfileID(lstpro);
            // Son.vo Theo task 0052965
            var lstInvalid = lstresult.Where(s => s.ID != model.ID && s.DateComeBack == null
                && s.StatusComeBack != EnumDropDown.StopWorkStatus.E_APPROVED.ToString()
                && s.StatusComeBack != EnumDropDown.StopWorkStatus.E_CANCEL.ToString()
                && s.Status != EnumDropDown.StopWorkStatus.E_CANCEL.ToString() && model.StopWorkType != EnumDropDown.StopWorkType.E_RETIREMENT.ToString()).ToList();
            if (lstInvalid.Count > 0)
            {
                message = ConstantMessages.RegisterDuplicate.TranslateString();
                model.ActionStatus = message;
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            //Son.Vo - 20160310 - 0064315
            bool _ISNOTUSEPROCESSAPPROVEDSTOP = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDSTOP);
            var ApprovedGradeEntity = _StopWorkServices.GetApprovedGradeStopWorking();
            if (model.IsUpdateWorkHistory != "1" && model.DateStop != null)
            {
                var lstProfileIDs = new List<Guid>();
                lstProfileIDs.Add((Guid)model.ProfileID);
                if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                {
                    if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                    {
                        var isAlertUpdateWorkhistory = _StopWorkServices.IsExistWorkhistoryByDateStop(lstProfileIDs, model.DateStop.Value);
                        if (isAlertUpdateWorkhistory == true)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_HR_StopWorking_DoYouWantToUpdateWorkHistory.ToString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                    {
                        var isAlertUpdateWorkhistory = _StopWorkServices.IsExistWorkhistoryByDateStop(lstProfileIDs, model.DateStop.Value);
                        if (isAlertUpdateWorkhistory == true)
                        {
                            model.ActionStatus = ConstantDisplay.HRM_HR_StopWorking_DoYouWantToUpdateWorkHistory.ToString();
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
            }


            #endregion

            #region Update Phòng ban theo logic
            var _pro = _ProfileServices.GetProfileNameIDs(lstpro).FirstOrDefault();
            if (_pro != null)
            {
                var orgProfile = _pro.OrgStructureID;
                if (orgProfile != null)
                {
                    model.OrgStructureID = orgProfile;
                }
            }
            if (model.Status == null)
            {
                model.Status = EnumDropDown.StopWorkStatus.E_WAITAPPROVE.ToString();
            }
            #endregion

            bool notAllowQuitWhenNotFinishWorkList = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_NOTALLOWQUITWHENNOTFINISHWORKLIST);
            bool notUseProcessApprovedStop = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDSTOP);
            bool isConfigApprovedStopWorking = _StopWorkServices.CheckConfigApprovedStopWorking();

            bool isCreate = false;
            if (model.ID == Guid.Empty)
            {
                isCreate = true;
            }
            if (modeldetail != null && modeldetail.Count > 0)
            {
                // Nếu có cấu hình không cho nghỉ khi chưa hoàn thành công việc
                if (notAllowQuitWhenNotFinishWorkList == true)
                {
                    // Nếu không dùng quy trình duyệt && không cấu hình duyệt theo cấp độ duyệt
                    if (isConfigApprovedStopWorking == false && notUseProcessApprovedStop == true)
                    {
                        // Kiểm tra có dòng worklist nào chưa hoàn thành hay không
                        //Quyen.Quach 08/01/2018 0091985
                        var lstNotFinish = modeldetail.Where(s => s.Status != WorkListStatus.E_DONE.ToString()).ToList();
                        if (lstNotFinish.Count > 0)
                        {
                            message = ConstantDisplay.EmployeeNotFinishWorkList.TranslateString();
                            model.ActionStatus = message;
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            //Lưu stopWorking, update profileworklist có sẵn thành isdelete vơi loại e_quit, thêm hre_profileworklist theo dữ liệu nhập trên giao diện
                            var stopworkingEntity = new Hre_StopWorkingEntity();
                            if (model != null && isCreate == true)
                            {
                                stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                stopworkingEntity.ID = Guid.NewGuid();
                                _StopWorkServices.Add(stopworkingEntity);
                                model.ID = stopworkingEntity.ID;
                            }
                            else
                            {
                                stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                var stopForUpdate = _StopWorkServices.GetStopWorkingByID(model.ID);
                                if (stopForUpdate != null)
                                {
                                    stopworkingEntity.SurveyProfileID = stopForUpdate.SurveyProfileID;
                                }
                                _StopWorkServices.Edit(stopworkingEntity);
                            }

                            #region Logic chuyển qua từ logic cũ của Hre_StopworkingController
                            //Son.Vo - 20160310 - 0064330
                            bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
                            if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true && model.TypeRegister == "ProfileQuitRegisterComeback")
                            {
                                string messeageref = _StopWorkServices.ApprovedComebackByConfig(stopworkingEntity);
                            }

                            if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                            {
                                if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                                {
                                    var lstIDs = new List<Guid>();
                                    lstIDs.Add(stopworkingEntity.ID);
                                    string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                    {
                                        model.ActionStatus = messeageref;
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && stopworkingEntity.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                                {
                                    var lstIDs = new List<Guid>();
                                    lstIDs.Add(stopworkingEntity.ID);
                                    string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                    {
                                        model.ActionStatus = messeageref;
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }

                            //Son.Vo - 20160830 - 0064315
                            if (_ISNOTUSEPROCESSAPPROVEDSTOP == true && model.TypeRegister == "ProfileRegisterRetirement")
                            {
                                var lstIDs = new List<Guid>();
                                lstIDs.Add(stopworkingEntity.ID);
                                string messeageref = _StopWorkServices.ActionApprovedRetirement(lstIDs, LanguageCode);
                                if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                {
                                    model.ActionStatus = messeageref;
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            if (model.StopWorkType == EnumDropDown.StopWorkType.E_SUSPENSE.ToString() && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && isCreate == true)
                            {
                                var positionServices = new Cat_PositionServices();
                                string messageref = positionServices.UpdateHeadPosProfile(model.ProfileID.Value);
                            }
                            #endregion

                            //Quyen.Quach 20/11/2017 0090214
                            if (isCreate == true)
                            {
                                message = _StopWorkServices.UpdateIsdeletelistQuitWorkListByProfile(model.ProfileID.Value);
                                message = _StopWorkServices.AddProfileWorkListForStopWork(stopworkingEntity.ID, model.ProfileID.Value, modeldetail.Translate<Hre_ProfileWorkListEntity>());
                                model.ActionStatus = message;
                            }
                            else
                            {
                                message = _StopWorkServices.EditProfileWorkListForStopWork(modeldetail.Translate<Hre_ProfileWorkListEntity>());
                                model.ActionStatus = message;
                            }
                        }
                    }
                    else
                    {
                        if (model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                        {
                            // Kiểm tra có dòng worklist nào chưa hoàn thành hay không
                            //Quyen.Quach 08/01/2018 0091985
                            var lstNotFinish = modeldetail.Where(s => s.Status != WorkListStatus.E_DONE.ToString()).ToList();
                            if (lstNotFinish.Count > 0)
                            {
                                message = ConstantDisplay.EmployeeNotFinishWorkList.TranslateString();
                                model.ActionStatus = message;
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                //Lưu stopWorking, update profileworklist có sẵn thành isdelete vơi loại e_quit, thêm hre_profileworklist theo dữ liệu nhập trên giao diện
                                var stopworkingEntity = new Hre_StopWorkingEntity();
                                if (model != null && isCreate == true)
                                {
                                    stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                    stopworkingEntity.ID = Guid.NewGuid();
                                    _StopWorkServices.Add(stopworkingEntity);
                                    model.ID = stopworkingEntity.ID;
                                }
                                else
                                {
                                    stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                    var stopForUpdate = _StopWorkServices.GetStopWorkingByID(model.ID);
                                    if (stopForUpdate != null)
                                    {
                                        stopworkingEntity.SurveyProfileID = stopForUpdate.SurveyProfileID;
                                    }
                                    _StopWorkServices.Edit(stopworkingEntity);
                                }

                                #region Logic chuyển qua từ logic cũ của Hre_StopworkingController
                                //Son.Vo - 20160310 - 0064330
                                bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
                                if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true && model.TypeRegister == "ProfileQuitRegisterComeback")
                                {
                                    string messeageref = _StopWorkServices.ApprovedComebackByConfig(stopworkingEntity);
                                }

                                if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                                {
                                    if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                                    {
                                        var lstIDs = new List<Guid>();
                                        lstIDs.Add(stopworkingEntity.ID);
                                        string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                        if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                        {
                                            model.ActionStatus = messeageref;
                                            return Json(model, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                    else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && stopworkingEntity.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                                    {
                                        var lstIDs = new List<Guid>();
                                        lstIDs.Add(stopworkingEntity.ID);
                                        string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                        if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                        {
                                            model.ActionStatus = messeageref;
                                            return Json(model, JsonRequestBehavior.AllowGet);
                                        }
                                    }
                                }

                                //Son.Vo - 20160830 - 0064315
                                if (_ISNOTUSEPROCESSAPPROVEDSTOP == true && model.TypeRegister == "ProfileRegisterRetirement")
                                {
                                    var lstIDs = new List<Guid>();
                                    lstIDs.Add(stopworkingEntity.ID);
                                    string messeageref = _StopWorkServices.ActionApprovedRetirement(lstIDs, LanguageCode);
                                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                    {
                                        model.ActionStatus = messeageref;
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }

                                if (model.StopWorkType == EnumDropDown.StopWorkType.E_SUSPENSE.ToString() && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && isCreate == true)
                                {
                                    var positionServices = new Cat_PositionServices();
                                    string messageref = positionServices.UpdateHeadPosProfile(model.ProfileID.Value);
                                }
                                #endregion

                                //Quyen.Quach 20/11/2017 0090214
                                if (isCreate == true)
                                {
                                    message = _StopWorkServices.UpdateIsdeletelistQuitWorkListByProfile(model.ProfileID.Value);
                                    message = _StopWorkServices.AddProfileWorkListForStopWork(stopworkingEntity.ID, model.ProfileID.Value, modeldetail.Translate<Hre_ProfileWorkListEntity>());
                                }
                                else
                                {
                                    message = _StopWorkServices.EditProfileWorkListForStopWork(modeldetail.Translate<Hre_ProfileWorkListEntity>());
                                }
                            }
                        }
                        else
                        {
                            //Lưu stopWorking, update profileworklist có sẵn thành isdelete vơi loại e_quit, thêm hre_profileworklist theo dữ liệu nhập trên giao diện
                            var stopworkingEntity = new Hre_StopWorkingEntity();
                            if (model != null && isCreate == true)
                            {
                                stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                stopworkingEntity.ID = Guid.NewGuid();
                                _StopWorkServices.Add(stopworkingEntity);
                            }
                            else
                            {
                                stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                                var stopForUpdate = _StopWorkServices.GetStopWorkingByID(model.ID);
                                if (stopForUpdate != null)
                                {
                                    stopworkingEntity.SurveyProfileID = stopForUpdate.SurveyProfileID;
                                }
                                _StopWorkServices.Edit(stopworkingEntity);
                            }
                            #region Logic chuyển qua từ logic cũ của Hre_StopworkingController
                            //Son.Vo - 20160310 - 0064330
                            bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
                            if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true && model.TypeRegister == "ProfileQuitRegisterComeback")
                            {
                                string messeageref = _StopWorkServices.ApprovedComebackByConfig(stopworkingEntity);
                            }

                            if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                            {
                                if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                                {
                                    var lstIDs = new List<Guid>();
                                    lstIDs.Add(stopworkingEntity.ID);
                                    string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                    {
                                        model.ActionStatus = messeageref;
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && stopworkingEntity.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                                {
                                    var lstIDs = new List<Guid>();
                                    lstIDs.Add(stopworkingEntity.ID);
                                    string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                    {
                                        model.ActionStatus = messeageref;
                                        return Json(model, JsonRequestBehavior.AllowGet);
                                    }
                                }
                            }

                            //Son.Vo - 20160830 - 0064315
                            if (_ISNOTUSEPROCESSAPPROVEDSTOP == true && model.TypeRegister == "ProfileRegisterRetirement")
                            {
                                var lstIDs = new List<Guid>();
                                lstIDs.Add(stopworkingEntity.ID);
                                string messeageref = _StopWorkServices.ActionApprovedRetirement(lstIDs, LanguageCode);
                                if (messeageref != null && messeageref != NotificationType.Success.ToString())
                                {
                                    model.ActionStatus = messeageref;
                                    return Json(model, JsonRequestBehavior.AllowGet);
                                }
                            }

                            if (model.StopWorkType == EnumDropDown.StopWorkType.E_SUSPENSE.ToString() && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && isCreate == true)
                            {
                                var positionServices = new Cat_PositionServices();
                                string messageref = positionServices.UpdateHeadPosProfile(model.ProfileID.Value);
                            }
                            #endregion
                            //Quyen.Quach 20/11/2017 0090214
                            if (isCreate == true)
                            {
                                message = _StopWorkServices.UpdateIsdeletelistQuitWorkListByProfile(model.ProfileID.Value);
                                message = _StopWorkServices.AddProfileWorkListForStopWork(stopworkingEntity.ID, model.ProfileID.Value, modeldetail.Translate<Hre_ProfileWorkListEntity>());
                            }
                            else
                            {
                                message = _StopWorkServices.EditProfileWorkListForStopWork(modeldetail.Translate<Hre_ProfileWorkListEntity>());
                            }
                        }
                    }
                }
                else
                {
                    //Lưu stopWorking, update profileworklist có sẵn thành isdelete vơi loại e_quit, thêm hre_profileworklist theo dữ liệu nhập trên giao diện
                    var stopworkingEntity = new Hre_StopWorkingEntity();
                    if (model != null && isCreate == true)
                    {
                        stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                        stopworkingEntity.ID = Guid.NewGuid();
                        _StopWorkServices.Add(stopworkingEntity);
                        model.ID = stopworkingEntity.ID;
                    }
                    else
                    {
                        stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                        var stopForUpdate = _StopWorkServices.GetStopWorkingByID(model.ID);
                        if (stopForUpdate != null)
                        {
                            stopworkingEntity.SurveyProfileID = stopForUpdate.SurveyProfileID;
                        }
                        _StopWorkServices.Edit(stopworkingEntity);
                    }

                    #region Logic chuyển qua từ logic cũ của Hre_StopworkingController
                    //Son.Vo - 20160310 - 0064330
                    bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
                    if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true && model.TypeRegister == "ProfileQuitRegisterComeback")
                    {
                        string messeageref = _StopWorkServices.ApprovedComebackByConfig(stopworkingEntity);
                    }

                    if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                    {
                        if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                        {
                            var lstIDs = new List<Guid>();
                            lstIDs.Add(stopworkingEntity.ID);
                            string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                            if (messeageref != null && messeageref != NotificationType.Success.ToString())
                            {
                                model.ActionStatus = messeageref;
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && stopworkingEntity.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                        {
                            var lstIDs = new List<Guid>();
                            lstIDs.Add(stopworkingEntity.ID);
                            string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                            if (messeageref != null && messeageref != NotificationType.Success.ToString())
                            {
                                model.ActionStatus = messeageref;
                                return Json(model, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }

                    //Son.Vo - 20160830 - 0064315
                    if (_ISNOTUSEPROCESSAPPROVEDSTOP == true && model.TypeRegister == "ProfileRegisterRetirement")
                    {
                        var lstIDs = new List<Guid>();
                        lstIDs.Add(stopworkingEntity.ID);
                        string messeageref = _StopWorkServices.ActionApprovedRetirement(lstIDs, LanguageCode);
                        if (messeageref != null && messeageref != NotificationType.Success.ToString())
                        {
                            model.ActionStatus = messeageref;
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }

                    if (model.StopWorkType == EnumDropDown.StopWorkType.E_SUSPENSE.ToString() && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && isCreate == true)
                    {
                        var positionServices = new Cat_PositionServices();
                        string messageref = positionServices.UpdateHeadPosProfile(model.ProfileID.Value);
                    }
                    #endregion

                    if (isCreate == true)
                    {
                        message = _StopWorkServices.UpdateIsdeletelistQuitWorkListByProfile(model.ProfileID.Value);
                        message = _StopWorkServices.AddProfileWorkListForStopWork(stopworkingEntity.ID, model.ProfileID.Value, modeldetail.Translate<Hre_ProfileWorkListEntity>());
                    }
                    else
                    {
                        message = _StopWorkServices.EditProfileWorkListForStopWork(modeldetail.Translate<Hre_ProfileWorkListEntity>());
                    }
                }
            }
            else
            {
                //Lưu stopWorking, update profileworklist có sẵn thành isdelete vơi loại e_quit, thêm hre_profileworklist theo dữ liệu nhập trên giao diện
                var stopworkingEntity = new Hre_StopWorkingEntity();
                if (model != null && isCreate == true)
                {
                    stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                    stopworkingEntity.ID = Guid.NewGuid();
                    _StopWorkServices.Add(stopworkingEntity);
                    model.ID = stopworkingEntity.ID;
                }
                else
                {
                    stopworkingEntity = model.CopyData<Hre_StopWorkingEntity>();
                    var stopForUpdate = _StopWorkServices.GetStopWorkingByID(model.ID);
                    if (stopForUpdate != null)
                    {
                        stopworkingEntity.SurveyProfileID = stopForUpdate.SurveyProfileID;
                    }
                    _StopWorkServices.Edit(stopworkingEntity);
                }

                #region Logic chuyển qua từ logic cũ của Hre_StopworkingController
                //Son.Vo - 20160310 - 0064330
                bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
                if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true && model.TypeRegister == "ProfileQuitRegisterComeback")
                {
                    string messeageref = _StopWorkServices.ApprovedComebackByConfig(stopworkingEntity);
                }

                if (model.TypeRegister == "ProfileRegisterStop" && ApprovedGradeEntity == null)
                {
                    if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
                    {
                        var lstIDs = new List<Guid>();
                        lstIDs.Add(stopworkingEntity.ID);
                        string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                        if (messeageref != null && messeageref != NotificationType.Success.ToString())
                        {
                            model.ActionStatus = messeageref;
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (_ISNOTUSEPROCESSAPPROVEDSTOP == false && stopworkingEntity.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                    {
                        var lstIDs = new List<Guid>();
                        lstIDs.Add(stopworkingEntity.ID);
                        string messeageref = _StopWorkServices.ActionApproved(lstIDs, LanguageCode, Guid.Parse(UserID));
                        if (messeageref != null && messeageref != NotificationType.Success.ToString())
                        {
                            model.ActionStatus = messeageref;
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }

                //Son.Vo - 20160830 - 0064315
                if (_ISNOTUSEPROCESSAPPROVEDSTOP == true && model.TypeRegister == "ProfileRegisterRetirement")
                {
                    var lstIDs = new List<Guid>();
                    lstIDs.Add(stopworkingEntity.ID);
                    string messeageref = _StopWorkServices.ActionApprovedRetirement(lstIDs, LanguageCode);
                    if (messeageref != null && messeageref != NotificationType.Success.ToString())
                    {
                        model.ActionStatus = messeageref;
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }

                if (model.StopWorkType == EnumDropDown.StopWorkType.E_SUSPENSE.ToString() && model.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && isCreate == true)
                {
                    var positionServices = new Cat_PositionServices();
                    string messageref = positionServices.UpdateHeadPosProfile(model.ProfileID.Value);
                }
                #endregion

                message = _StopWorkServices.UpdateIsdeletelistQuitWorkListByProfile(model.ProfileID.Value);
            }
            model.ActionStatus = message;
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        // Son.Vo - 20161221 - 0076709
        public ActionResult IsLoadResignInfoByDateStop()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _ISLOADRESIGNINFOBYDATESTOP = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISLOADRESIGNINFOBYDATESTOP);
            if (_ISLOADRESIGNINFOBYDATESTOP == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        // Son.Vo - 20160409 - 0065837
        public ActionResult IsNotLoadDefaultStatus()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _IsShow = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_NOTLOADDEFAULTSTATUSSEARCHSTOPWORKING);
            if (_IsShow == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult CheckDataPersonalSubmitStop(string ProfileID, DateTime? datequitSubmit, bool? isCheckTrainingDeduct, DateTime? dateQuitInLaw)
        {
            if (!string.IsNullOrEmpty(ProfileID))
            {
                var profileID = Guid.Empty;
                if (!string.IsNullOrEmpty(ProfileID))
                {
                    profileID = Common.ConvertToGuid(ProfileID);
                }
                var actionServices = new Hre_StopWorkingServices();
                var result = actionServices.CheckDataPersonalSubmitStop(profileID, datequitSubmit, isCheckTrainingDeduct, dateQuitInLaw);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult GetDataViewStopPersonal(string ProfileID, DateTime? dateQuitSubmit)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileDataViewPersonalStopWorkingByID(profileID, dateQuitSubmit);
            if (profile != null)
            {
                return Json(profile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public ActionResult GetStopWorkingPersonal([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var result = ActionService.GetData<Hre_StopWorkingModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetProfileQuitWorkListByProfile([DataSourceRequest] DataSourceRequest request, Guid? profileID, Guid? stopID)
        {
            if (profileID != null)
            {
                var profileServices = new Hre_ProfileServices();
                var result = profileServices.GetListProfileWorkListForStopWorking(profileID.Value, stopID);
                if (result == null)
                {
                    result = new List<Hre_ProfileWorkListEntity>();
                }
                if (request != null && request.Sorts.Count > 0)
                {
                    var sortWorkList = request.Sorts.FirstOrDefault(m => m.Member == Hre_ProfileWorkListModel.FieldNames.WorkListID);
                    if (sortWorkList.HasValue())
                    {
                        sortWorkList.Member = Hre_ProfileWorkListModel.FieldNames.WorkListName;
                    }
                    var sortProfile = request.Sorts.FirstOrDefault(m => m.Member == Hre_ProfileWorkListModel.FieldNames.Profile2ID);
                    if (sortProfile.HasValue())
                    {
                        sortProfile.Member = Hre_ProfileWorkListModel.FieldNames.Profile2Name;
                    }
                }
                var dataSourceResult = result.ToDataSourceResult(request);
                var serializer = new JavaScriptSerializer();
                var returnresult = new ContentResult();
                serializer.MaxJsonLength = Int32.MaxValue;
                returnresult.Content = serializer.Serialize(dataSourceResult);
                returnresult.ContentType = "application/json";
                return returnresult;
            }
            return null;
        }

        public ActionResult GetUserApproveStopWorking(string userSubmit, string profileID)
        {
            if (!string.IsNullOrEmpty(userSubmit) || !string.IsNullOrEmpty(profileID))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _StopWorkingServices = new Hre_StopWorkingServices();
                var entity = _StopWorkingServices.GetHighSuppervisorApproveStopWorking(profileID, userSubmit, UserID, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }

        [HttpPost]
        public ActionResult GetRetirementList([DataSourceRequest] DataSourceRequest request, Hre_RetirementSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_RetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Retirement);
        }

        [HttpPost]
        public ActionResult CancelRetirement(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var message = service.ActionCancelRetirement(selectedIds, UserLogin);
            return Json(message);
        }

        [HttpPost]
        public ActionResult ApproveRetirement(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var service = new Hre_StopWorkingServices();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var message = service.ActionApprovedRetirement(lstIds, LanguageCode);
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }

        [HttpPost]
        public ActionResult GetDataViewRetirement(string ProfileID)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileDataViewRetirementByID(profileID);
            string deptPath = null;
            if (profile != null)
            {
                return Json(profile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //Son.Vo - 20160519 - 0067329 - validate khi cấu hình cam kết thời gian đào tạo
        public string ValidateCreateStopWorking(Guid? profileID, DateTime? datestop, DateTime? requestdate)
        {
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool _WARPROQUITNOTCOMTIME = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_TRA_CONFIG_TRAINEEREGISTER_WARPROQUITNOTCOMTIME);
            var _TraineeServices = new Tra_TraineeServices();
            var lstProfile = new List<Guid>();
            lstProfile.Add(profileID.Value);
            if (profileID != null && datestop != null)
            {
                string messageValidate = _TraineeServices.ValidateCreateStopWorking(lstProfile, datestop.Value, _WARPROQUITNOTCOMTIME);
                if (messageValidate != null)
                {
                    return messageValidate.TranslateString();
                }
                else
                {
                    return null;
                }
            }
            if (profileID != null && requestdate != null)
            {
                string messageValidate = _TraineeServices.ValidateCreateStopWorkingbyRequestDate(lstProfile, requestdate.Value);
                if (messageValidate != null)
                {
                    return messageValidate.TranslateString();
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        //son.Vo - 20160310 - 0064315 - kiểm tra có cấu hình bỏ qua quy trình duyệt vào làm lại
        [HttpPost]
        public ActionResult IsNotUseProcessApprovedComeBack()
        {
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool _ISNOTUSEPROCESSAPPROVEDCOMEBACK = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDCOMEBACK);
            if (_ISNOTUSEPROCESSAPPROVEDCOMEBACK == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        //son.Vo - 20160310 - 0064315 - kiểm tra có cấu hình bỏ qua quy trình đăng ký vào làm lại
        [HttpPost]
        public ActionResult IsNotUseProcessApprovedStop()
        {
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            bool _ISNOTUSEPROCESSAPPROVEDSTOP = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISNOTUSEPROCESSAPPROVEDSTOP);
            if (_ISNOTUSEPROCESSAPPROVEDSTOP == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public string ValidateStopWorking([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_StopWorkingModel>(LanguageCode, model, model.TableValidate, ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult GetDateStopWorkingFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSTOPWORKINGFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSTOPWORKINGFROM);
            if (_DAYSTOPWORKINGFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSTOPWORKINGFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateStopWorkingToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSTOPWORKINGTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSTOPWORKINGTO);
            if (_DAYSTOPWORKINGTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSTOPWORKINGTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult GetDateProfileSupervisorQuitFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWSHOWQUITSUPERVISORFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWSHOWQUITSUPERVISORFROM);
            if (_DAYSHOWSHOWQUITSUPERVISORFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSHOWSHOWQUITSUPERVISORFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateProfileSupervisorQuitToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSHOWSHOWQUITSUPERVISORTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWSHOWQUITSUPERVISORTO);
            if (_DAYSHOWSHOWQUITSUPERVISORTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSHOWSHOWQUITSUPERVISORTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetStopWorkingList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            //Nguyen.Le - 25/11/2017 - 0090387
            if (model.DateTo != null)
            {
                var DateTo = new DateTime(model.DateTo.Value.Year, model.DateTo.Value.Month, model.DateTo.Value.Day, 23, 59, 59);
                model.DateTo = DateTo;
            }
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_StopWorkingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorking);
        }

        [HttpPost]
        public ActionResult GetStopWorkingWaitingApprovedList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_StopWorkingWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorkingWaiting);
        }

        public ActionResult ExportStopWorkingList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel, Hre_StopWorkingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorking);
        }

        //Quyen.Quach- 15/07/2017 - 0085419: Lỗi xuất excel ra không đúng dữ liệu tại màn hình DS nv đăng ký nghỉ việc	
        public ActionResult ExportStopWorkingWaitingApprovedList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingWaitingApprovedSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_StopWorkingWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorkingWaiting);
        }
        //Quyen.Quach 31/07/2017 - 0086095 : Xuất excel theo từng NV màn hình DS NV đăng ký nghỉ việc chờ duyệt
        public ActionResult ExportSelectedStopWorkingWaitingApproved(string selectedIds, string valueFields)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_StopWorking";
            var status = string.Empty;
            List<object> lstObj = new List<object>();
            lstObj.Add(selectedIds);
            _table = objBase.GetDataTable(lstObj, ConstantSql.hrm_hr_sp_get_WaitingStopWorkingByListId, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, valueFields.Split(','), null);
            return Json(message);
            //return ExportSelectedAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel>(lstObj, valueFields, ConstantSql.hrm_hr_sp_get_WaitingStopWorkingByListId);
        }

        public ActionResult ExportRetirementList([DataSourceRequest] DataSourceRequest request, Hre_RetirementSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel, Hre_RetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Retirement);
        }

        [HttpPost]
        public ActionResult ApproveStopWorking(string selectedIds, string isUpdateWorkhistory)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var service = new Hre_StopWorkingServices();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var message = service.ActionApproved(lstIds, LanguageCode, Guid.Parse(UserID), isUpdateWorkhistory);
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }

        [HttpPost]
        public ActionResult CancelStopWorking(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var stopWorkingServices = new Hre_StopWorkingServices();
            var ApprovedGradeEntity = stopWorkingServices.GetApprovedGradeStopWorking();
            var message = service.ActionCancel(selectedIds, UserLogin, Guid.Parse(UserID));
            return Json(message);
        }

        [HttpPost]
        public ActionResult CancelTempCutContract(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var stopWorkingServices = new Hre_StopWorkingServices();
            var message = service.ActionCancelTempCutContract(selectedIds, UserLogin, Guid.Parse(UserID));
            return Json(message);
        }

        [HttpPost]
        public ActionResult UpdateWorkingPosition(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var message = service.UpdateWorkingPosition(selectedIds, UserLogin);
            return Json(message);
        }

        //Son.Vo - xuất word ds đăng ký nghỉ việc theo template chọn ở màn hình (làm thêm or sửa enum hàm này phải làm thêm ở hàm ExportStopWorkingByTypeStop)
        public ActionResult ExportStopWorkingByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");
            DateTime DateStart = DateTime.Now;

            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_WorkHistoryServices();
            var profileServices = new Hre_ProfileServices();
            var _ContractServices = new Hre_ContractServices();
            var Cat_CountryService = new Cat_CountryServices();
            var baseService = new BaseService();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            List<object> lstObjCat = new List<object>();
            lstObjCat.Add(null);
            lstObjCat.Add(null);
            lstObjCat.Add(1);
            lstObjCat.Add(int.MaxValue - 1);
            lstObjCat.Add(UserLogin);
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            //Nguyen.Le - 20170825 - 0087198
            var lstStopWorking = baseService.GetData<Hre_StopWorkingEntity>(strIDs, ConstantSql.hrm_hr_sp_get_StopWorkingByListIds, UserLogin, ref status);
            var listCat_Company = actionService.GetData<Cat_CompanyEntity>(lstObjCat, ConstantSql.hrm_cat_sp_get_Company, ref status);
            if (lstStopWorking == null)
                return null;
            int i = 0;
            var lstProfileIDS = lstStopWorking.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();

            var lstContractByProfileIDs = _ContractServices.GetLstContractByProfileIDs(lstProfileIDS);

            var lstContractIDs = lstContractByProfileIDs.Select(s => s.ID).Distinct().ToList();
            var lstExtendContractByProfileIDs = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_StopWorking" + suffix;
            if (lstStopWorking.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;

            //[to.le][05/03/2016][0064408]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lstQualification = profileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDS);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workhistoryServices.GetlstWorkhistory4ExportWordStopWorking(lstProfileIDS);
            //hau.le-88142-20170928
            var lstorg = lstStopWorking.Where(s => s.OrgStructureID != null).Select(s => s.OrgStructureID.Value).Distinct().ToList();
            var listCatOrgUnitEntity = profileServices.GetLstOrgUnitDataByLstOrgID(lstorg);
            var ext = string.Empty;
            foreach (var stopWorking in lstStopWorking)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                var exportService = new Cat_ExportServices();
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (!string.IsNullOrEmpty(valueFields))
                {
                    template = actionService.GetData<Cat_ExportEntity>(Common.DotNetToOracle(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                }

                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                ext = template.TemplateFile.Split('.').LastOrDefault();

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                var qualification = _lstQualification.Where(s => s.ProfileID == stopWorking.ProfileID).FirstOrDefault();
                if (qualification != null)
                {
                    stopWorking.QualificationName = qualification.QualificationName;
                    stopWorking.TrainingPlace = qualification.TrainingPlace;
                }

                #region lấy thông tin HĐ
                var contractbyStopWorking = lstContractByProfileIDs.Where(s => s.ProfileID == stopWorking.ProfileID).FirstOrDefault();
                if (contractbyStopWorking != null)
                {
                    stopWorking.WorkPlaceName = contractbyStopWorking.WorkPlaceName;
                    stopWorking.ContractTypeName = contractbyStopWorking.ContractTypeName;
                    stopWorking.ContractNo = contractbyStopWorking.ContractNo;
                    if (contractbyStopWorking.DateOfContractEva != null)
                    {
                        stopWorking.DateOfContractEva_Day = contractbyStopWorking.DateOfContractEva.Value.Day.ToString();
                        stopWorking.DateOfContractEva_Month = contractbyStopWorking.DateOfContractEva.Value.Month.ToString();
                        stopWorking.DateOfContractEva_Year = contractbyStopWorking.DateOfContractEva.Value.Year.ToString();
                        stopWorking.DateOfContractEvaFormat = contractbyStopWorking.DateOfContractEva.Value.ToString("dd/MM/yyyy");
                        stopWorking.DateOfContractEvaFormatEN = contractbyStopWorking.DateOfContractEva.Value.ToString("dd-MMM-yyyy");
                    }
                    if (contractbyStopWorking.DateSigned != null)
                    {
                        stopWorking.DateSignedFormat = contractbyStopWorking.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractbyStopWorking.DateStart != null)
                    {
                        stopWorking.DateStart_Day = contractbyStopWorking.DateStart.Day.ToString();
                        stopWorking.DateStart_Month = contractbyStopWorking.DateStart.Month.ToString();
                        stopWorking.DateStart_Year = contractbyStopWorking.DateStart.Year.ToString();
                        stopWorking.DateStartFormat = contractbyStopWorking.DateStart.ToString("dd/MM/yyyy");
                    }
                    if (contractbyStopWorking.DateEnd != null)
                    {
                        stopWorking.DateEnd_Day = contractbyStopWorking.DateEnd.Value.Day.ToString();
                        stopWorking.DateEnd_Month = contractbyStopWorking.DateEnd.Value.Month.ToString();
                        stopWorking.DateEnd_Year = contractbyStopWorking.DateEnd.Value.Year.ToString();
                        stopWorking.DateEndFormat = contractbyStopWorking.DateEnd.Value.ToString("dd/MM/yyyy");
                        stopWorking.DateEndSub7 = contractbyStopWorking.DateEnd.Value.AddDays(-7).ToString("dd/MM/yyyy");
                    }
                    var contractExtendByContract = lstExtendContractByProfileIDs.Where(s => s.ContractID == contractbyStopWorking.ID).FirstOrDefault();
                    if (contractExtendByContract != null)
                    {
                        stopWorking.AnnexCode = contractExtendByContract.AnnexCode;
                        if (contractExtendByContract.DateStart != null)
                        {
                            stopWorking.DateExtendStart_Day = contractExtendByContract.DateStart.Value.Day.ToString();
                            stopWorking.DateExtendStart_Month = contractExtendByContract.DateStart.Value.Month.ToString();
                            stopWorking.DateExtendStart_Year = contractExtendByContract.DateStart.Value.Year.ToString();
                        }
                        if (contractExtendByContract.DateEnd != null)
                        {
                            stopWorking.DateExtendEnd_Day = contractExtendByContract.DateEnd.Value.Day.ToString();
                            stopWorking.DateExtendEnd_Month = contractExtendByContract.DateEnd.Value.Month.ToString();
                            stopWorking.DateExtendEnd_Year = contractExtendByContract.DateEnd.Value.Year.ToString();
                        }
                    }
                }
                #endregion

                #region [07/11/2015][To.Le][0064884] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (stopWorking.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    stopWorking.GraveName = "Ms.";
                    stopWorking.NameByGerder = "Chị ";
                    stopWorking.GraveNames = "Bà";
                    stopWorking.GraveNameEN = "Mrs.";

                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    stopWorking.GraveName = "Mr.";
                    stopWorking.NameByGerder = "Anh ";
                    stopWorking.GraveNames = "Ông";
                    stopWorking.GraveNameEN = "Mr.";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    stopWorking.GraveName = "Mr/Mrs ";
                    stopWorking.NameByGerder = "Anh/Chị";
                    stopWorking.GraveNames = "Ông/Bà";
                    stopWorking.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                #region xử lý datetime
                stopWorking.DateNow_Day = DateTime.Now.Day.ToString();
                stopWorking.DateNow_Month = DateTime.Now.Month.ToString();
                stopWorking.DateNow_Year = DateTime.Now.Year.ToString();
                if (stopWorking.DateStop.HasValue)
                {
                    stopWorking.DateStop_Day = stopWorking.DateStop.Value.Day.ToString();
                    stopWorking.DateStop_Month = stopWorking.DateStop.Value.Month.ToString();
                    stopWorking.DateStop_Year = stopWorking.DateStop.Value.Year.ToString();
                    stopWorking.DateStopFormat = stopWorking.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (stopWorking.DateQuit.HasValue)
                    stopWorking.DateQuitFormat = stopWorking.DateQuit.Value.ToString("dd/MM/yyyy");

                if (stopWorking.RequestDate.HasValue)
                {
                    stopWorking.RequestDateFormat = stopWorking.RequestDate.Value.ToString("dd/MM/yyyy");
                    stopWorking.RequestDate_Day = stopWorking.RequestDate.Value.Day.ToString();
                    stopWorking.RequestDate_Month = stopWorking.RequestDate.Value.Month.ToString();
                    stopWorking.RequestDate_Year = stopWorking.RequestDate.Value.Year.ToString();
                }
                int Year = 0;
                int Month = 0;
                if (stopWorking.DateHire.HasValue)
                {
                    if (stopWorking.DateStop != null)
                    {
                        if (stopWorking.DateHire.Value.Year == stopWorking.DateStop.Value.Year)
                        {
                            if (stopWorking.DateHire.Value.Month < stopWorking.DateStop.Value.Month)
                            {
                                Month = stopWorking.DateStop.Value.Month - stopWorking.DateHire.Value.Month;
                                if (stopWorking.DateStop.Value.Day <= stopWorking.DateHire.Value.Day)
                                {
                                    Month = Month - 1;
                                }
                            }
                        }
                        else
                        {
                            if (stopWorking.DateHire.Value.Year < stopWorking.DateStop.Value.Year)
                            {
                                if (stopWorking.DateHire.Value.Month < stopWorking.DateStop.Value.Month)
                                {
                                    Month = stopWorking.DateStop.Value.Month - stopWorking.DateHire.Value.Month;
                                    if (stopWorking.DateStop.Value.Day <= stopWorking.DateHire.Value.Day)
                                    {
                                        Month = Month - 1;
                                    }
                                }
                                if (stopWorking.DateHire.Value.Month == stopWorking.DateStop.Value.Month)
                                {
                                    Month = stopWorking.DateStop.Value.Month - stopWorking.DateHire.Value.Month;
                                    if (stopWorking.DateStop.Value.Day <= stopWorking.DateHire.Value.Day)
                                    {
                                        Month = Month - 1;
                                    }
                                }
                                Year = stopWorking.DateStop.Value.Year - stopWorking.DateHire.Value.Year;
                                Month += Year * 12;
                            }
                        }
                    }

                    var countYearMonth = profileServices.CountYearWorking(stopWorking.ProfileID.Value, stopWorking.DateHire.Value, true);
                    if (countYearMonth != null)
                    {
                        if (countYearMonth.CountYear != null)
                        {
                            stopWorking.CountYearWorking = countYearMonth.CountYear.ToString();
                        }
                        if (countYearMonth.CountMonth != null)
                        {
                            stopWorking.CountMonthWorking = countYearMonth.CountMonth.ToString();
                        }
                    }
                    stopWorking.DateHireFormat = stopWorking.DateHire.Value.ToString("dd/MM/yyyy");

                }
                #endregion
                #region [hao.huynh][20170727]- 0085792: Thêm ENum xuất word địa chỉ tiếng Anh trong màn hình DS NV đăng kí nghỉ việc
                stopWorking.PAddressEN = !(string.IsNullOrEmpty(stopWorking.PAddress)) ? RemoveSign4VietnameseString(stopWorking.PAddress) : string.Empty;
                stopWorking.TAddressEN = !(string.IsNullOrEmpty(stopWorking.TAddress)) ? RemoveSign4VietnameseString(stopWorking.TAddress) : string.Empty;
                #endregion

                //Quyen.Quach- 17/07/2017 - 0084685 Xử lý điều kiện lấy enum xuất word
                var contract = lstContractByProfileIDs.Where(s => s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart != null && stopWorking.DateStop != null &&
                    s.DateStart.Date <= stopWorking.DateStop.Value.Date && s.ProfileID == stopWorking.ProfileID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contract != null)
                {
                    stopWorking.Duration = contract.Duration;
                    stopWorking.ContractNoTerminate = contract.ContractNo;
                    stopWorking.DateSignedTerminate = contract.DateSigned;
                    stopWorking.DateStartTerminate = contract.DateStart;
                    //[hao.huynh]-0085846: Thêm Enum xuất word trong màn hình DS NV đăng kí nghỉ việc
                    stopWorking.E_ContractDateEnd = contract.DateEnd;
                }

                if (stopWorking.ProfileIDCard != null)
                {
                    stopWorking.IDCardNo = stopWorking.ProfileIDCard;
                    stopWorking.DateIDCardNo = stopWorking.ProfileIDCardDateOfIssue;
                    stopWorking.PlaceIDCardNo = stopWorking.ProfileIDCardPlaceOfIssue;
                }
                else
                {
                    stopWorking.IDCardNo = stopWorking.ProfileIDNo;
                    stopWorking.DateIDCardNo = stopWorking.ProfileIDDateOfIssue;
                    stopWorking.PlaceIDCardNo = stopWorking.IDPlaceOfIssue;
                }
                //hau.le-87893-20170919
                stopWorking.IDPlaceOfIssueEN = stopWorking.IDPlaceOfIssue == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(stopWorking.IDPlaceOfIssue);
                //hau.le-88142-20170928
                var CatOrgUnitEntity = listCatOrgUnitEntity.Where(s => s.OrgstructureID == stopWorking.OrgStructureID).FirstOrDefault();
                if (CatOrgUnitEntity != null)
                {
                    stopWorking.E_DIVISION_E = CatOrgUnitEntity.E_DIVISION_E;
                    stopWorking.E_UNIT_E = CatOrgUnitEntity.E_UNIT_E;

                }
                var workhistoryByStop = lstWorkhistory.Where(s => s.ProfileID == stopWorking.ProfileID && stopWorking.DateStop != null && s.DateEffective.Date <= stopWorking.DateStop.Value.Date).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByStop != null)
                {
                    //Nguyen.Le - 01/02/2018 - 0092955
                    if (!string.IsNullOrEmpty(workhistoryByStop.CompanyNameEN))
                    {
                        stopWorking.WorkCompanyNameEN = workhistoryByStop.CompanyNameEN;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.CompanyName))
                    {
                        stopWorking.WorkCompanyName = workhistoryByStop.CompanyName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.PositionEngName))
                    {
                        stopWorking.PositionEngName = workhistoryByStop.PositionEngName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.PositionName))
                    {
                        stopWorking.PositionName = workhistoryByStop.PositionName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.WorkPlaceDescription))
                    {
                        stopWorking.WorkPlaceDescription = workhistoryByStop.WorkPlaceDescription;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.SupervisorName))
                    {
                        stopWorking.SupervisorName = workhistoryByStop.SupervisorName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.SupervisorGender))
                    {
                        stopWorking.SupervisorGender = workhistoryByStop.SupervisorGender.TranslateString();
                        if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_MALE.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Ông";
                            stopWorking.SupervisorGraveNameVN2 = "Anh ";
                            stopWorking.SupervisorGraveNameEN = "Mr ";
                        }
                        else if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_FEMALE.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Bà";
                            stopWorking.SupervisorGraveNameVN2 = "Chị ";
                            stopWorking.SupervisorGraveNameEN = "Ms ";
                        }
                        else if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_OTHER.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Khác ";
                            stopWorking.SupervisorGraveNameVN2 = "Khác ";
                            stopWorking.SupervisorGraveNameVN2 = "Other ";
                        }
                    }
                    //[hao.huynh]-0085846: Thêm Enum xuất word trong màn hình DS NV đăng kí nghỉ việc
                    if (listCat_Company != null)
                    {
                        var itemCompany = listCat_Company.Where(m => m.ID == workhistoryByStop.CompanyID).FirstOrDefault();
                        if (itemCompany != null)
                        {
                            if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Ông";
                                stopWorking.E_ChairmanGraveNameEN = "Mr.";
                            }
                            else if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Bà";
                                stopWorking.E_ChairmanGraveNameEN = "Ms.";
                            }
                            else if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Khác ";
                                stopWorking.E_ChairmanGraveNameEN = "Other ";
                            }
                            else
                            {
                                stopWorking.E_ChairmanGraveNameVN = string.Empty;
                                stopWorking.E_ChairmanGraveNameEN = string.Empty;
                            }
                            stopWorking.E_ChairmanNameVN = itemCompany.ChairmanNameVN;
                            stopWorking.E_ChairmanNameEN = itemCompany.ChairmanNameEN;
                            stopWorking.E_ChairmanNationalityVN = itemCompany.ChairmanNationalityVN;
                            stopWorking.E_ChairmanNationalityEN = itemCompany.ChairmanNationalityEN;
                            stopWorking.E_ChairmanPositionVN = itemCompany.ChairmanPositionVN;
                            stopWorking.E_ChairmanPositionEN = itemCompany.ChairmanPositionEN;
                            stopWorking.E_CompanyAddressVN = itemCompany.AddressVN;
                            stopWorking.E_CompanyAddressEN = itemCompany.AddressEN;
                            stopWorking.E_CompanyPhone = itemCompany.Phone;
                            stopWorking.E_CompanyFax = itemCompany.Fax;
                        }
                    }
                }
                if (stopWorking.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Ông";
                    stopWorking.ProfileGraveNameVN2 = "Anh ";
                    stopWorking.ProfileGraveNameEN = "Mr ";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Bà";
                    stopWorking.ProfileGraveNameVN2 = "Chị ";
                    stopWorking.ProfileGraveNameEN = "Ms ";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Khác ";
                    stopWorking.ProfileGraveNameVN2 = "Khác ";
                    stopWorking.ProfileGraveNameVN2 = "Other ";
                }
                //Quyen.Quach 27/10/2017 0087840 
                if (stopWorking.DateQuitApprove != null && stopWorking.DateStop != null)
                {
                    int SoNgay = (int)(stopWorking.DateQuitApprove.Value - stopWorking.DateStop.Value).TotalDays;
                    int days = 0;
                    var datestop = stopWorking.DateStop.Value;
                    while (datestop <= stopWorking.DateQuitApprove)
                    {
                        if (datestop.DayOfWeek == DayOfWeek.Sunday)
                        {
                            ++days;
                        }
                        datestop = datestop.AddDays(1);
                    }
                    stopWorking.DateStopViolate = SoNgay + 1 - days;
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, stopWorking.ProfileID != null ? (Guid)stopWorking.ProfileID : Guid.Empty, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lststopworking = new List<Hre_StopWorkingForExportEntity>();
                var stopworkingExport = stopWorking.CopyData<Hre_StopWorkingForExportEntity>();
                lststopworking.Add(stopworkingExport);
                ExportService.ExportWord(outputPath, templatepath, lststopworking);
            }
            List<object> lstNo = new List<object>();
            lstNo.Add(strIDs);
            if (lstStopWorking.Count > 1)
            {
                var updateNoPrint1 = actionService.UpdateData<Hre_StopWorkingForExportEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
                var fileZip = Common.MultiExport("", true, folderName);
                string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                //Son.Vo - 20161110 - 0075382 Kết xuất nhiu file thành 1 file
                var messageReturn = string.Empty;
                var urlOutPath = Common.GetPath(Common.TemplateURL);
                var fileZipSplit = fileZip.Split(',');
                if (fileZipSplit.Count() > 0)
                {
                    var urlReturn = ExportService.ExportAllWordToOneFile(dirpathDownload, urlOutPath, ext);
                    messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                    return Json(messageReturn);
                }
                return Json(fileZip);
            }
            var updateNoPrint2 = actionService.UpdateData<Hre_StopWorkingEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
            return Json(fileDoc);
        }

        // Son.Vo - 20160530 - 0068081 - xuất word theo template ở màn hình loại nghỉ việc(làm thêm or sửa enum hàm này phải làm thêm ở hàm ExportStopWorkingByTemplate)
        public ActionResult ExportStopWorkingByTypeStop(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var _ContractServices = new Hre_ContractServices();
            var profileServices = new Hre_ProfileServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            List<object> lstObjCat = new List<object>();
            lstObjCat.Add(null);
            lstObjCat.Add(null);
            lstObjCat.Add(1);
            lstObjCat.Add(int.MaxValue - 1);
            lstObjCat.Add(UserLogin);
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstStopWorking = actionService.GetData<Hre_StopWorkingEntity>(objs, ConstantSql.hrm_hr_sp_get_StopWorkingByListId, ref status);
            var listCat_Company = actionService.GetData<Cat_CompanyEntity>(lstObjCat, ConstantSql.hrm_cat_sp_get_Company, ref status);
            if (lstStopWorking == null)
                return null;
            int i = 0;
            var lstProfileIDS = lstStopWorking.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();

            var lstContractByProfileIDs = _ContractServices.GetContractDataByLstProfileIDs(lstProfileIDS);

            var lstContractIDs = lstContractByProfileIDs.Select(s => s.ID).Distinct().ToList();
            var lstExtendContractByProfileIDs = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_StopWorking" + suffix;
            if (lstStopWorking.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;

            //[to.le][05/03/2016][0064408]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lstQualification = profileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDS);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workhistoryServices.GetlstWorkhistory4ExportWordStopWorking(lstProfileIDS);
            //hau.le-88142-20170928
            var lstorg = lstStopWorking.Where(s => s.OrgStructureID != null).Select(s => s.OrgStructureID.Value).Distinct().ToList();
            var listCatOrgUnitEntity = profileServices.GetLstOrgUnitDataByLstOrgID(lstorg);
            foreach (var stopWorking in lstStopWorking)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (stopWorking.ExportID.HasValue)
                    template = service.GetData<Cat_ExportEntity>(Common.DotNetToOracle(stopWorking.ExportID.Value.ToString()), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                var qualification = _lstQualification.Where(s => s.ProfileID == stopWorking.ProfileID).FirstOrDefault();
                if (qualification != null)
                {
                    stopWorking.QualificationName = qualification.QualificationName;
                    stopWorking.TrainingPlace = qualification.TrainingPlace;
                }
                var contractbyStopWorking = lstContractByProfileIDs.Where(s => s.ProfileID == stopWorking.ProfileID).FirstOrDefault();
                if (contractbyStopWorking != null)
                {
                    stopWorking.WorkPlaceName = contractbyStopWorking.WorkPlaceName;
                    stopWorking.ContractTypeName = contractbyStopWorking.ContractTypeName;
                    stopWorking.ContractNo = contractbyStopWorking.ContractNo;
                    if (contractbyStopWorking.DateOfContractEva != null)
                    {
                        stopWorking.DateOfContractEva_Day = contractbyStopWorking.DateOfContractEva.Value.Day.ToString();
                        stopWorking.DateOfContractEva_Month = contractbyStopWorking.DateOfContractEva.Value.Month.ToString();
                        stopWorking.DateOfContractEva_Year = contractbyStopWorking.DateOfContractEva.Value.Year.ToString();
                        stopWorking.DateOfContractEvaFormat = contractbyStopWorking.DateOfContractEva.Value.ToString("dd/MM/yyyy");
                        stopWorking.DateOfContractEvaFormatEN = contractbyStopWorking.DateOfContractEva.Value.ToString("dd-MMM-yyyy");
                    }
                    if (contractbyStopWorking.DateSigned != null)
                    {
                        stopWorking.DateSignedFormat = contractbyStopWorking.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractbyStopWorking.DateStart != null)
                    {
                        stopWorking.DateStart_Day = contractbyStopWorking.DateStart.Day.ToString();
                        stopWorking.DateStart_Month = contractbyStopWorking.DateStart.Month.ToString();
                        stopWorking.DateStart_Year = contractbyStopWorking.DateStart.Year.ToString();
                        stopWorking.DateStartFormat = contractbyStopWorking.DateStart.ToString("dd/MM/yyyy");
                    }
                    if (contractbyStopWorking.DateEnd != null)
                    {
                        stopWorking.DateEnd_Day = contractbyStopWorking.DateEnd.Value.Day.ToString();
                        stopWorking.DateEnd_Month = contractbyStopWorking.DateEnd.Value.Month.ToString();
                        stopWorking.DateEnd_Year = contractbyStopWorking.DateEnd.Value.Year.ToString();
                        stopWorking.DateEndFormat = contractbyStopWorking.DateEnd.Value.ToString("dd/MM/yyyy");
                        stopWorking.DateEndSub7 = contractbyStopWorking.DateEnd.Value.AddDays(-7).ToString("dd/MM/yyyy");
                    }
                    var contractExtendByContract = lstExtendContractByProfileIDs.Where(s => s.ContractID == contractbyStopWorking.ID).FirstOrDefault();
                    if (contractExtendByContract != null)
                    {
                        stopWorking.AnnexCode = contractExtendByContract.AnnexCode;
                        if (contractExtendByContract.DateStart != null)
                        {
                            stopWorking.DateExtendStart_Day = contractExtendByContract.DateStart.Value.Day.ToString();
                            stopWorking.DateExtendStart_Month = contractExtendByContract.DateStart.Value.Month.ToString();
                            stopWorking.DateExtendStart_Year = contractExtendByContract.DateStart.Value.Year.ToString();
                        }
                        if (contractExtendByContract.DateEnd != null)
                        {
                            stopWorking.DateExtendEnd_Day = contractExtendByContract.DateEnd.Value.Day.ToString();
                            stopWorking.DateExtendEnd_Month = contractExtendByContract.DateEnd.Value.Month.ToString();
                            stopWorking.DateExtendEnd_Year = contractExtendByContract.DateEnd.Value.Year.ToString();
                        }
                    }
                }
                stopWorking.DateNow_Day = DateTime.Now.Day.ToString();
                stopWorking.DateNow_Month = DateTime.Now.Month.ToString();
                stopWorking.DateNow_Year = DateTime.Now.Year.ToString();
                if (stopWorking.DateStop.HasValue)
                {
                    stopWorking.DateStop_Day = stopWorking.DateStop.Value.Day.ToString();
                    stopWorking.DateStop_Month = stopWorking.DateStop.Value.Month.ToString();
                    stopWorking.DateStop_Year = stopWorking.DateStop.Value.Year.ToString();
                    stopWorking.DateStopFormat = stopWorking.DateStop.Value.ToString("dd/MM/yyyy");
                }
                if (stopWorking.DateQuit.HasValue)
                    stopWorking.DateQuitFormat = stopWorking.DateQuit.Value.ToString("dd/MM/yyyy");

                if (stopWorking.RequestDate.HasValue)
                {
                    stopWorking.RequestDateFormat = stopWorking.RequestDate.Value.ToString("dd/MM/yyyy");
                    stopWorking.RequestDate_Day = stopWorking.RequestDate.Value.Day.ToString();
                    stopWorking.RequestDate_Month = stopWorking.RequestDate.Value.Month.ToString();
                    stopWorking.RequestDate_Year = stopWorking.RequestDate.Value.Year.ToString();
                }

                #region [07/11/2015][To.Le][0064884] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (stopWorking.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    stopWorking.GraveName = "Ms.";
                    stopWorking.NameByGerder = "Chị ";
                    stopWorking.GraveNames = "Bà";
                    stopWorking.GraveNameEN = "Mrs.";

                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    stopWorking.GraveName = "Mr.";
                    stopWorking.NameByGerder = "Anh ";
                    stopWorking.GraveNames = "Ông";
                    stopWorking.GraveNameEN = "Mr.";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    stopWorking.GraveName = "Mr/Mrs ";
                    stopWorking.NameByGerder = "Anh/Chị";
                    stopWorking.GraveNames = "Ông/Bà";
                    stopWorking.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                int Year = 0;
                int Month = 0;
                if (stopWorking.DateHire.HasValue)
                {
                    #region Son.Vo - 20160718 - 0070725 - đếm số năm, tháng làm việc
                    if (stopWorking.DateStop != null)
                    {
                        Year = ((12 * (stopWorking.DateStop.Value.Year - stopWorking.DateHire.Value.Year)) + stopWorking.DateStop.Value.Month - stopWorking.DateHire.Value.Month) / 12;
                        if (Year > 0)
                        {
                            Month = ((12 * (stopWorking.DateStop.Value.Year - stopWorking.DateHire.Value.Year)) + stopWorking.DateStop.Value.Month - stopWorking.DateHire.Value.Month) % 12;
                            stopWorking.CountYearWorking = Year.ToString();
                            if (Month > 0)
                            {
                                stopWorking.CountMonthWorking = Month.ToString();
                            }
                        }
                    }
                    #endregion
                    stopWorking.DateHireFormat = stopWorking.DateHire.Value.ToString("dd/MM/yyyy");
                }
                #region [hao.huynh][20170727]- 0085792: Thêm ENum xuất word địa chỉ tiếng Anh trong màn hình DS NV đăng kí nghỉ việc
                stopWorking.PAddressEN = !(string.IsNullOrEmpty(stopWorking.PAddress)) ? RemoveSign4VietnameseString(stopWorking.PAddress) : string.Empty;
                stopWorking.TAddressEN = !(string.IsNullOrEmpty(stopWorking.TAddress)) ? RemoveSign4VietnameseString(stopWorking.TAddress) : string.Empty;
                #endregion
                //Quyen.Quach- 17/07/2017 - 0084685 Xử lý điều kiện lấy enum xuất word
                var contract = lstContractByProfileIDs.Where(s => s.Status == EnumDropDown.Status.E_APPROVED.ToString() && s.DateStart != null && stopWorking.DateStop != null &&
                    s.DateStart.Date <= stopWorking.DateStop.Value.Date && s.ProfileID == stopWorking.ProfileID).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (contract != null)
                {
                    stopWorking.Duration = contract.Duration;
                    stopWorking.ContractNoTerminate = contract.ContractNo;
                    stopWorking.DateSignedTerminate = contract.DateSigned;
                    stopWorking.DateStartTerminate = contract.DateStart;
                    //[hao.huynh]-0085846: Thêm Enum xuất word trong màn hình DS NV đăng kí nghỉ việc
                    stopWorking.E_ContractDateEnd = contract.DateEnd;
                }
                //Quyen.Quach 27/10/2017 0087840 
                if (stopWorking.DateQuitApprove != null && stopWorking.DateStop != null)
                {
                    int SoNgay = (int)(stopWorking.DateQuitApprove.Value - stopWorking.DateStop.Value).TotalDays;
                    int days = 0;
                    var datestop = stopWorking.DateStop.Value;
                    while (datestop <= stopWorking.DateQuitApprove)
                    {
                        if (datestop.DayOfWeek == DayOfWeek.Sunday)
                        {
                            ++days;
                        }
                        datestop = datestop.AddDays(1);
                    }
                    stopWorking.DateStopViolate = SoNgay + 1 - days;
                }
                var workhistoryByStop = lstWorkhistory.Where(s => s.ProfileID == stopWorking.ProfileID && stopWorking.DateStop != null && s.DateEffective.Date <= stopWorking.DateStop.Value.Date).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByStop != null)
                {
                    //Nguyen.Le - 01/02/2018 - 0092955
                    if (!string.IsNullOrEmpty(workhistoryByStop.CompanyName))
                    {
                        stopWorking.WorkCompanyName = workhistoryByStop.CompanyName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.CompanyNameEN))
                    {
                        stopWorking.WorkCompanyNameEN = workhistoryByStop.CompanyNameEN;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.PositionEngName))
                    {
                        stopWorking.PositionEngName = workhistoryByStop.PositionEngName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.PositionName))
                    {
                        stopWorking.PositionName = workhistoryByStop.PositionName;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.WorkPlaceDescription))
                    {
                        stopWorking.WorkPlaceDescription = workhistoryByStop.WorkPlaceDescription;
                    }
                    if (!string.IsNullOrEmpty(workhistoryByStop.SupervisorName))
                    {
                        stopWorking.SupervisorName = workhistoryByStop.SupervisorName;
                    }

                    if (!string.IsNullOrEmpty(workhistoryByStop.SupervisorGender))
                    {
                        stopWorking.SupervisorGender = workhistoryByStop.SupervisorGender.TranslateString();
                        if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_MALE.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Ông";
                            stopWorking.SupervisorGraveNameVN2 = "Anh ";
                            stopWorking.SupervisorGraveNameEN = "Mr ";
                        }
                        else if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_FEMALE.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Bà";
                            stopWorking.SupervisorGraveNameVN2 = "Chị ";
                            stopWorking.SupervisorGraveNameEN = "Ms ";
                        }
                        else if (workhistoryByStop.SupervisorGender == EnumDropDown.Gender.E_OTHER.ToString())
                        {
                            stopWorking.SupervisorGraveNameVN = "Khác ";
                            stopWorking.SupervisorGraveNameVN2 = "Khác ";
                            stopWorking.SupervisorGraveNameVN2 = "Other ";
                        }
                    }

                    if (stopWorking.ProfileIDCard != null)
                    {
                        stopWorking.IDCardNo = stopWorking.ProfileIDCard;
                        stopWorking.DateIDCardNo = stopWorking.ProfileIDCardDateOfIssue;
                        stopWorking.PlaceIDCardNo = stopWorking.ProfileIDCardPlaceOfIssue;
                    }
                    else
                    {
                        stopWorking.IDCardNo = stopWorking.ProfileIDNo;
                        stopWorking.DateIDCardNo = stopWorking.ProfileIDDateOfIssue;
                        stopWorking.PlaceIDCardNo = stopWorking.IDPlaceOfIssue;
                    }
                    //hau.le-87893-20170919
                    stopWorking.IDPlaceOfIssueEN = stopWorking.IDPlaceOfIssue == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(stopWorking.IDPlaceOfIssue);
                    //[hao.huynh]-0085846: Thêm Enum xuất word trong màn hình DS NV đăng kí nghỉ việc
                    if (listCat_Company != null)
                    {
                        var itemCompany = listCat_Company.Where(m => m.ID == workhistoryByStop.CompanyID).FirstOrDefault();
                        if (itemCompany != null)
                        {
                            if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Ông";
                                stopWorking.E_ChairmanGraveNameEN = "Mr.";
                            }
                            else if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Bà";
                                stopWorking.E_ChairmanGraveNameEN = "Ms.";
                            }
                            else if (itemCompany.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                            {
                                stopWorking.E_ChairmanGraveNameVN = "Khác ";
                                stopWorking.E_ChairmanGraveNameEN = "Other ";
                            }
                            else
                            {
                                stopWorking.E_ChairmanGraveNameVN = string.Empty;
                                stopWorking.E_ChairmanGraveNameEN = string.Empty;
                            }
                            stopWorking.E_ChairmanNameVN = itemCompany.ChairmanNameVN;
                            stopWorking.E_ChairmanNameEN = itemCompany.ChairmanNameEN;
                            stopWorking.E_ChairmanNationalityVN = itemCompany.ChairmanNationalityVN;
                            stopWorking.E_ChairmanNationalityEN = itemCompany.ChairmanNationalityEN;
                            stopWorking.E_ChairmanPositionVN = itemCompany.ChairmanPositionVN;
                            stopWorking.E_ChairmanPositionEN = itemCompany.ChairmanPositionEN;
                            stopWorking.E_CompanyAddressVN = itemCompany.AddressVN;
                            stopWorking.E_CompanyAddressEN = itemCompany.AddressEN;
                            stopWorking.E_CompanyPhone = itemCompany.Phone;
                            stopWorking.E_CompanyFax = itemCompany.Fax;
                        }
                    }

                }
                if (stopWorking.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Ông";
                    stopWorking.ProfileGraveNameVN2 = "Anh ";
                    stopWorking.ProfileGraveNameEN = "Mr ";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Bà";
                    stopWorking.ProfileGraveNameVN2 = "Chị ";
                    stopWorking.ProfileGraveNameEN = "Ms ";
                }
                else if (stopWorking.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    stopWorking.ProfileGraveNameVN = "Khác ";
                    stopWorking.ProfileGraveNameVN2 = "Khác ";
                    stopWorking.ProfileGraveNameVN2 = "Other ";
                }
                //hau.le-88142-20170928
                var CatOrgUnitEntity = listCatOrgUnitEntity.Where(s => s.OrgstructureID == stopWorking.OrgStructureID).FirstOrDefault();
                if (CatOrgUnitEntity != null)
                {
                    stopWorking.E_DIVISION_E = CatOrgUnitEntity.E_DIVISION_E;
                    stopWorking.E_UNIT_E = CatOrgUnitEntity.E_UNIT_E;

                }
                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, stopWorking.ProfileID != null ? (Guid)stopWorking.ProfileID : Guid.Empty, i);

                outputPath = folferPath + @"\" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + @"\" + genneralNameExport;

                var lststopworking = new List<Hre_StopWorkingForExportEntity>();
                var stopworkingExport = stopWorking.CopyData<Hre_StopWorkingForExportEntity>();
                lststopworking.Add(stopworkingExport);
                ExportService.ExportWord(outputPath, templatepath, lststopworking);
            }
            List<object> lstNo = new List<object>();
            lstNo.Add(strIDs);
            if (lstStopWorking.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);

                var updateNoPrint1 = actionService.UpdateData<Hre_StopWorkingForExportEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
                return Json(fileZip);
            }
            var updateNoPrint2 = actionService.UpdateData<Hre_StopWorkingForExportEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
            return Json(fileDoc);
        }

        //Quyen.Quach 22/08/2017 - 0087077
        public ActionResult ExportProfileQuitByTypeStop(List<Guid> selectedIds, string valueFields)
        {
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var _ContractServices = new Hre_ContractServices();
            var profileServices = new Hre_ProfileServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            List<object> lstObjCat = new List<object>();
            lstObjCat.Add(null);
            lstObjCat.Add(null);
            lstObjCat.Add(1);
            lstObjCat.Add(int.MaxValue - 1);
            lstObjCat.Add(UserLogin);
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            objs.Add(UserLogin);
            var lstProfile = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileQuitByLstIDs, ref status);
            var listCat_Company = actionService.GetData<Cat_CompanyEntity>(lstObjCat, ConstantSql.hrm_cat_sp_get_Company, ref status);
            if (lstProfile == null)
                return null;
            int i = 0;
            var lstProfileIDS = lstProfile.Where(s => s.ID != null).Select(s => s.ID).Distinct().ToList();

            var lstContractByProfileIDs = _ContractServices.GetContractDataByLstProfileIDs(lstProfileIDS);

            var lstContractIDs = lstContractByProfileIDs.Select(s => s.ID).Distinct().ToList();
            var lstExtendContractByProfileIDs = _ContractServices.GetContractExtendByLstContractIDs(lstContractIDs);

            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileQuit" + suffix;
            if (lstProfile.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;

            //[to.le][05/03/2016][0064408]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lstQualification = profileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDS);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workhistoryServices.GetlstWorkhistory4ExportWordStopWorking(lstProfileIDS);
            foreach (var profile in lstProfile)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                string outputPath = string.Empty;
                if (profile.ExportID.HasValue)
                    template = service.GetData<Cat_ExportEntity>(Common.DotNetToOracle(profile.ExportID.Value.ToString()), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                var qualification = _lstQualification.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (qualification != null)
                {
                    profile.QualificationName = qualification.QualificationName;
                    profile.TrainingPlace = qualification.TrainingPlace;
                }
                var contractbyprofile = lstContractByProfileIDs.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                if (contractbyprofile != null)
                {
                    profile.WorkPlaceName = contractbyprofile.WorkPlaceName;
                    profile.ContractTypeName = contractbyprofile.ContractTypeName;
                    profile.ContractNo = contractbyprofile.ContractNo;
                    if (contractbyprofile.DateSigned != null)
                    {
                        profile.DateSignedFormat = contractbyprofile.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractbyprofile.DateStart != null)
                    {
                        profile.DateStartFormat = contractbyprofile.DateStart.ToString("dd/MM/yyyy");
                    }
                    if (contractbyprofile.DateEnd != null)
                    {
                        profile.DateEndFormat = contractbyprofile.DateEnd.Value.ToString("dd/MM/yyyy");
                    }
                }
                profile.DateNow_Day = DateTime.Now.Day.ToString();
                profile.DateNow_Month = DateTime.Now.Month.ToString();
                profile.DateNow_Year = DateTime.Now.Year.ToString();

                if (profile.DateQuit.HasValue)
                    profile.DateQuitFormat = profile.DateQuit.Value.ToString("dd/MM/yyyy");

                if (profile.RequestDate.HasValue)
                {
                    profile.RequestDateFormat = profile.RequestDate.Value.ToString("dd/MM/yyyy");
                }

                #region [07/11/2015][To.Le][0064884] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (profile.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    profile.GraveName = "Ms.";
                    profile.NameByGerder = "Chị ";
                    profile.GraveNames = "Bà";
                    profile.GraveNameEN = "Mrs.";

                }
                else if (profile.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    profile.GraveName = "Mr.";
                    profile.NameByGerder = "Anh ";
                    profile.GraveNames = "Ông";
                    profile.GraveNameEN = "Mr.";
                }
                else if (profile.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    profile.GraveName = "Mr/Mrs ";
                    profile.NameByGerder = "Anh/Chị";
                    profile.GraveNames = "Ông/Bà";
                    profile.GraveNameEN = "Mr/Mrs";
                }
                #endregion

                string genneralNameExport = ExportService.GenneralFileNameExport(template, profile.ID != null ? (Guid)profile.ID : Guid.Empty, i);

                outputPath = folferPath + @"\" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + @"\" + genneralNameExport;

                var lstProfileExport = new List<Hre_ProfileForExportEntity>();
                var stopworkingExport = profile.CopyData<Hre_ProfileForExportEntity>();
                lstProfileExport.Add(stopworkingExport);
                ExportService.ExportWord(outputPath, templatepath, lstProfileExport);
            }
            List<object> lstNo = new List<object>();
            lstNo.Add(strIDs);
            if (lstProfile.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);

                var updateNoPrint1 = actionService.UpdateData<Hre_StopWorkingForExportEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
                return Json(fileZip);
            }
            var updateNoPrint2 = actionService.UpdateData<Hre_StopWorkingForExportEntity>(lstNo, ConstantSql.hrm_hr_sp_set_UpdateNoPrint, ref status);
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult GetDataViewStop(string ProfileID, DateTime? dateStop)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0 || dateStop == null)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileDataViewStopWorkingByID(profileID, dateStop.Value);
            string deptPath = null;
            if (profile != null)
            {
                if (profile.OrgStructureID != null)
                {
                    deptPath = GetCodeOrgStructure(profile.OrgStructureID.Value);
                }
                profile.OrgStructureName = deptPath;
                #region Son.Vo - 20160601 - 0065849
                if (profile.IsGenerateRequestDate == true)
                {
                    if (profile.RequestDateQuitDays != null)
                    {
                        profile.RequestDate = dateStop.Value.AddDays(-(double)profile.RequestDateQuitDays);
                    }
                    else
                    {
                        profile.RequestDate = dateStop;
                    }
                }
                #endregion

                var sysServices = new Sys_AttOvertimePermitConfigServices();
                var _ISLOAD = sysServices.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISLOADRESIGNINFOBYDATESTOP);
                profile.IsLoadResignInfoByDateStop = _ISLOAD;
                return Json(profile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        //Son.Vo - 20160815 - 0071041
        [HttpPost]
        public ActionResult GetPrenatalForCreateStopWorking(string ProfileID, DateTime? dateStop)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0 || dateStop == null)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileServices = new Hre_ProfileServices();
            var Prenatal = profileServices.GetPrenatalForCreateStopWorking(profileID, dateStop.Value);
            if (Prenatal != null)
            {
                return Json(Prenatal, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetDataViewSuspense(string ProfileID)
        {
            string status = string.Empty;
            var profileID = Guid.Empty;
            if (ProfileID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(ProfileID))
            {
                profileID = Common.ConvertToGuid(ProfileID);
            }
            var profileServices = new Hre_ProfileServices();
            var profile = profileServices.GetProfileDataViewSuspenseByID(profileID);
            string deptPath = null;
            if (profile != null)
            {
                if (profile.OrgStructureID != null)
                {
                    deptPath = GetCodeOrgStructure(profile.OrgStructureID.Value);
                }
                profile.OrgStructureName = deptPath;
                return Json(profile, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        #endregion

        #region Hre_RegisterSuspense
        [HttpPost]
        public ActionResult GetDateComeBackExpectFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSUSPENSEEXPIRYFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWREGISTERSUSPENSEFROM);
            if (_DAYSUSPENSEEXPIRYFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSUSPENSEEXPIRYFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateComeBackExpectToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSUSPENSEEXPIRYTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWREGISTERSUSPENSETO);
            if (_DAYSUSPENSEEXPIRYTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSUSPENSEEXPIRYTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDataByRegistSuspenseID(string SuspenseID)
        {
            string status = string.Empty;
            var suspenseID = Guid.Empty;
            if (SuspenseID.IndexOf(',') > 0)
            {
                return null;
            }
            if (!string.IsNullOrEmpty(SuspenseID))
            {
                suspenseID = Common.ConvertToGuid(SuspenseID);
            }

            var actionService = new ActionService(UserLogin);
            var lstProfile = actionService.GetData<Hre_StopWorkingEntity>(suspenseID, ConstantSql.hrm_hr_sp_get_StopWorkingById, ref status).FirstOrDefault();

            if (lstProfile != null)
            {
                var model = lstProfile.CopyData<Hre_StopWorkingModel>();
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [HttpPost]
        public ActionResult ApproveSuspense(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var message = service.ActionApprovedSuspense(selectedIds, UserLogin);
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetDateSuspenseFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSUSPENSEEXPIRYFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSUSPENSEEXPIRYFROM);
            if (_DAYSUSPENSEEXPIRYFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSUSPENSEEXPIRYFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateSuspenseToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSUSPENSEEXPIRYTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSUSPENSEEXPIRYTO);
            if (_DAYSUSPENSEEXPIRYTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSUSPENSEEXPIRYTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult GetSuspenseList([DataSourceRequest] DataSourceRequest request, Hre_RegisterSuspenseSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_RegisterSuspenseSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Suspense);
        }

        [HttpPost]
        public ActionResult GetProfileSuspenseList([DataSourceRequest] DataSourceRequest request, Hre_SuspenseSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_SuspenseSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileSuspense);
        }

        public ActionResult GetProfileTemporarilyCutContract([DataSourceRequest] DataSourceRequest request, Hre_ProfileTemporarilyCutContractSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_ProfileTemporarilyCutContractSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileTemporarilyCutContrac);
        }

        public ActionResult ExportProfileTemporarilyCutContractByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileTemporarilyCutContractSearchModel model)
        {
            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);

            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model.CopyData<Hre_ProfileTemporarilyCutContractSearchModel>())
            };
            var listResult = new List<Hre_StopWorkingModel>();
            if (model.ExportId != Guid.Empty)
            {
                listResult = service.GetData<Hre_StopWorkingModel>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileTemporarilyCutContrac, ref status);
            }

            #region Tao template
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateComebackFrom", Value = model.DateComebackFrom == null ? DateTime.Now : model.DateComebackFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateComebackTo", Value = model.DateComebackTo == null ? DateTime.Now : model.DateComebackTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_StopWorkingModel(),
                    FileName = "Hre_StopWorkingModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, listResult, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(listResult.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileSuspenseListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_SuspenseSearchModel model)
        {

            string status = string.Empty;
            // var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var actionService = new ActionService(UserLogin);
            #region Profile
            var lstObj = new List<object>();
            lstObj.Add(model.ProfileName);
            lstObj.Add(model.CodeEmp);
            lstObj.Add(model.JobTitleID);
            lstObj.Add(model.PositionID);
            lstObj.Add(model.OrgStructureID);
            lstObj.Add(model.DateFrom);
            lstObj.Add(model.DateTo);
            lstObj.Add(model.TypeSuspense);
            lstObj.Add(model.Status);
            lstObj.Add(model.StatusComeBack);
            lstObj.Add(model.RequestDateComebackFrom);
            lstObj.Add(model.RequestDateComebackTo);
            lstObj.Add(model.DateComebackFrom);
            lstObj.Add(model.DateComebackTo);
            lstObj.Add(model.RankID);
            lstObj.Add(model.IsCreateTemplate);
            lstObj.Add(model.ExportId);
            lstObj.Add(model.ExportType);
            lstObj.Add(1);
            lstObj.Add(int.MaxValue - 1);
            var listResult = new List<Hre_StopWorkingEntity>();
            if (model.ExportId != Guid.Empty)
            {
                listResult = actionService.GetData<Hre_StopWorkingEntity>(lstObj, ConstantSql.hrm_hr_sp_get_ProfileSuspense, ref status);
            }
            #endregion

            #region
            var lisObjClas = new List<object>();
            lisObjClas.AddRange(new object[3]);
            lisObjClas[1] = 1;
            lisObjClas[2] = int.MaxValue - 1;
            var lisClass = actionService.GetData<Cat_SalaryClassEntity>(lisObjClas, ConstantSql.hrm_cat_sp_get_SalaryClass, ref status);
            #endregion
            #region SalaryRank
            var lisObjRank = new List<object>();
            lisObjRank = Common.AddRange(7);
            var lisRank = actionService.GetData<Cat_SalaryRankEntity>(lisObjRank, ConstantSql.hrm_cat_sp_get_SalaryRank, ref status);
            #endregion
            #region Contract
            var contractServices = new Hre_ContractServices();
            var lstProfileIDS = listResult.Select(s => s.ID).ToList();
            var liscontract = contractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
            #endregion
            #region lstContractExtend
            var objContractExtend = new List<object>();
            objContractExtend.AddRange(new object[13]);
            objContractExtend[11] = 1;
            objContractExtend[12] = int.MaxValue - 1;
            var lstContractExtend = new List<Hre_ContractExtendEntity>();
            if (model.ExportId != Guid.Empty)
            {
                lstContractExtend = actionService.GetData<Hre_ContractExtendEntity>(objContractExtend, ConstantSql.hrm_hr_sp_get_ContractExtendList, ref status);
            }
            #endregion
            #region DataTable
            DataTable table = new DataTable("Hre_StopWorkingEntity");
            if (listResult != null)
            {
                PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Hre_StopWorkingEntity));

                foreach (PropertyDescriptor prop in properties)
                    table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                foreach (var item in listResult)
                {
                    if (item.IDDateOfIssue.HasValue)
                    {
                        item.IDDateOfIssueFormat = item.IDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    }

                    DataRow row = table.NewRow();
                    foreach (PropertyDescriptor prop in properties)
                        row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;

                    var lsClassByProClassID = lisClass.Where(s => s.ID == item.SalaryClassID).FirstOrDefault();
                    var lisRankbyclassid = lisRank.Where(s => lsClassByProClassID != null && s.SalaryClassID == lsClassByProClassID.ID).FirstOrDefault();
                    row["SalaryRankName"] = lisRankbyclassid != null ? lisRankbyclassid.SalaryRankName : string.Empty;
                    var liscontractAPPRENTICESHIP = liscontract.Where(s => s.Type == EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString() && s.ProfileID == item.ProfileID).OrderBy(s => s.DateEnd).FirstOrDefault();
                    if (liscontractAPPRENTICESHIP != null)
                    {
                        if (liscontractAPPRENTICESHIP.DateEnd != null)
                            row["DateEndAPPRENTICESHIP"] = liscontractAPPRENTICESHIP.DateEnd;
                        if (liscontractAPPRENTICESHIP.DateStart != null)
                            row["DateStartAPPRENTICESHIP"] = liscontractAPPRENTICESHIP.DateStart;


                    }
                    var liscontractDURATION = liscontract.Where(s => s.ProfileID == item.ProfileID && item.DateStop > s.DateStart).OrderBy(s => s.DateEnd).FirstOrDefault();
                    if (liscontractDURATION != null)
                    {
                        if (liscontractDURATION.DateStart != null)
                            row["DateContractStart"] = liscontractDURATION.DateStart;
                        if (liscontractDURATION.DateEnd != null)
                            row["DateContractEnd"] = liscontractDURATION.DateEnd;
                    }
                    #region PhuLucHopDong
                    if (lstContractExtend != null)
                    {
                        var lisAppdixContractbyprofil = lstContractExtend.Where(s => liscontractDURATION != null && s.ContractID == liscontractDURATION.ID).ToList();
                        int count = 1;
                        foreach (var itemapp in lisAppdixContractbyprofil)
                        {

                            var dateStartTitle = "PL" + count + "_DateStart";
                            var dateEndTitle = "PL" + count + "_DateEnd";

                            if (!table.Columns.Contains(dateStartTitle))
                            {
                                table.Columns.Add(dateStartTitle, typeof(DateTime));
                            }

                            if (!table.Columns.Contains(dateEndTitle))
                            {
                                table.Columns.Add(dateEndTitle, typeof(DateTime));
                            }


                            if (table.Columns.Contains(dateStartTitle))
                            {
                                if (itemapp.DateStart != null)
                                {
                                    row[dateStartTitle] = itemapp.DateStart;
                                }
                            }
                            if (table.Columns.Contains(dateEndTitle))
                            {
                                if (itemapp.DateEnd != null)
                                {
                                    row[dateEndTitle] = itemapp.DateEnd;
                                }
                            }
                        }
                    }
                    #endregion
                    table.Rows.Add(row);
                }
            }
            #endregion

            var profileServices = new Hre_ProfileServices();
            #region Tao template
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = table,
                    FileName = "Hre_StopWorkingEntity",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = true
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, table, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(listResult.ToDataSourceResult(request));
        }

        public ActionResult ExportSuspenseList([DataSourceRequest] DataSourceRequest request, Hre_RegisterSuspenseSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel, Hre_RegisterSuspenseSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Suspense);
        }

        // Xuất template đăng ký tạm hoãn theo mẫu word
        public ActionResult ExportListSuspenseByTemplate(List<Guid> selectedIds, string valueFields)
        {
            DateTime DateStart = DateTime.Now;
            string messages = string.Empty;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            string status = string.Empty;
            var contractServices = new Hre_StopWorkingServices();
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            objs.Add(strIDs);
            var lstStopWorking = actionService.GetData<Hre_StopWorkingEntity>(objs, ConstantSql.hrm_hr_sp_get_StopWorkingByListId, ref status);
            if (lstStopWorking == null)
                return null;
            int i = 0;
            var lstStopWorkingID = lstStopWorking.Select(s => s.ID).Distinct().ToList();
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_Contract" + suffix;

            var lstProfileIDs = lstStopWorking.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var contractservices = new Hre_ContractServices();
            var lstContract = contractservices.GetContractDataByLstProfileIDs(lstProfileIDs);
            var lstContractIDs = lstContract.Select(s => s.ID).ToList();
            var lstAppendixContract = contractservices.GetAppendixContractDataByLstContractIDs(lstContractIDs);
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLstContractExtendByLstContractIDs(lstContractIDs);
            var contractTypeServices = new Cat_ContractTypeServices();

            var lstContractType = contractTypeServices.GetLstContractType();

            if (lstStopWorkingID.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var stopWorking in lstStopWorking)
            {
                //Son.Vo - 20160405 - 0065778
                var contractEntity = lstContract.Where(s => s.ProfileID == stopWorking.ProfileID.Value && s.DateStart <= stopWorking.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();

                var exportService = new Cat_ExportServices();
                string outputPath = string.Empty;
                var template = actionService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, ref status).FirstOrDefault();
                if (template == null)
                {
                    messages = "Error";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }
                if (contractEntity != null)
                {
                    var contracttypeByContract = lstContractType.Where(s => s.ID == contractEntity.ContractTypeID).FirstOrDefault();
                    var appendixContract = lstAppendixContract.Where(s => s.ContractID == contractEntity.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                    var contractExtend = lstContractExtend.Where(s => s.ContractID == contractEntity.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                    stopWorking.DateNowFormat = DateTime.Now.ToString("dd/MM/yyyy");
                    stopWorking.DateNow_Day = DateTime.Now.Day.ToString();
                    stopWorking.DateNow_Month = DateTime.Now.Month.ToString();
                    stopWorking.DateNow_Year = DateTime.Now.Year.ToString();

                    stopWorking.ContractTypeName = contracttypeByContract != null ? contracttypeByContract.ContractTypeName : null;
                    stopWorking.DateStartFormat = contractEntity.DateStart.ToString("dd/MM/yyyy");
                    stopWorking.ContractNo = contractEntity.ContractNo != null ? contractEntity.ContractNo : string.Empty;
                    stopWorking.YearOfBirth = contractEntity.YearOfBirth;
                    stopWorking.MonthOfBirth = contractEntity.MonthOfBirth;
                    stopWorking.DayOfBirth = contractEntity.DayOfBirth;
                    if (stopWorking.DateStop.HasValue)
                    {
                        stopWorking.DateStopFormat = stopWorking.DateStop.Value.ToString("dd/MM/yyyy");
                    }
                    if (stopWorking.DateComeBack.HasValue)
                    {
                        stopWorking.DateComeBackFormat = stopWorking.DateComeBack.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractEntity.DateSigned.HasValue)
                    {
                        stopWorking.DateSignedFormat = contractEntity.DateSigned.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractEntity.DateStart != null)
                    {
                        stopWorking.DateStartFormat = contractEntity.DateStart.ToString("dd/MM/yyyy");
                    }
                    #region Son.Vo - 20160405 - 0065778
                    if (contractEntity.DateEnd.HasValue)
                    {
                        stopWorking.DateEndFormat = contractEntity.DateEnd.Value.ToString("dd/MM/yyyy");
                    }
                    if (contractEntity.DateExtend != null)
                    {
                        stopWorking.DateEndFormat = contractEntity.DateExtend.Value.ToString("dd/MM/yyyy");
                    }
                    if (stopWorking.DateCombackExpected.HasValue)
                    {
                        stopWorking.DateCombackExpectedFormat = stopWorking.DateCombackExpected.Value.ToString("dd/MM/yyyy");
                    }
                    #endregion
                    if (appendixContract != null)
                    {
                        stopWorking.Salary = appendixContract.Salary;
                        if (appendixContract.DateEndAppendixContract.HasValue)
                        {
                            stopWorking.DateEndAppendixContractFormat = appendixContract.DateEndAppendixContract.Value.ToString("dd/MM/yyyy");
                        }
                    }
                    if (contractExtend != null)
                    {
                        stopWorking.AnnexCode = contractExtend.AnnexCode;
                    }
                    //[28/10/2015][to.le][Modify][0059077]
                    //Lấy lương cơ bản trong hợp đồng.
                    if (contractEntity.Salary != null)
                    {
                        stopWorking.ContractSalaryFormat = String.Format("{0:0,0}", contractEntity.Salary);
                    }
                }
                if (stopWorking.RequestDate.HasValue)
                {
                    stopWorking.RequestDateString = stopWorking.RequestDate.Value.ToString("dd/MM/yyyy");
                }

                if (stopWorking.DateStop.HasValue)
                {
                    stopWorking.DateStopString = stopWorking.DateStop.Value.ToString("dd/MM/yyyy");
                }

                if (stopWorking.DateComeBack.HasValue)
                {
                    stopWorking.DateComeBackString = stopWorking.DateComeBack.Value.ToString("dd/MM/yyyy");
                }

                if (stopWorking.DateExpired.HasValue)
                {
                    stopWorking.DateExpiredString = stopWorking.DateExpired.Value.ToString("dd/MM/yyyy");
                }

                if (stopWorking.DateHire.HasValue)
                {
                    stopWorking.DateHireString = stopWorking.DateHire.Value.ToString("dd/MM/yyyy");
                }

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, stopWorking.ProfileID != null ? (Guid)stopWorking.ProfileID : Guid.Empty, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;

                var lststopWorking = new List<Hre_StopWorkingEntity>();
                lststopWorking.Add(stopWorking);
                ExportService.ExportWord(outputPath, templatepath, lststopWorking);
            }
            if (lstStopWorkingID.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        #endregion

        #region Hre_RegisterComback
        public string ValidateDateComback(Guid ProfileID, DateTime DateStop, Guid? ID)
        {
            string status = string.Empty;
            string messageValidate = string.Empty;
            var actionService = new ActionService(UserLogin);
            //Quyen.Quach- 27/07/2017 - 0085885 Loại trừ trường hợp hủy đc tạo mới
            var result = actionService.GetData<Hre_StopWorkingEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status)
            .Where(s => s.StopWorkType == "E_SUSPENSE" && s.Status != EnumDropDown.StopWorkStatus.E_CANCEL.ToString()).OrderByDescending(s => s.DateStop).FirstOrDefault();
            if (result != null)
            {
                if (result.DateStop != null && result.DateComeBack == null && DateStop != result.DateStop && ID != result.ID)
                {
                    messageValidate = ConstantDisplay.HRM_HR_ProfileInSuspenseTime.TranslateString();
                }
                else if (result.DateStop != null && result.DateComeBack != null && result.DateStop <= DateStop && DateStop <= result.DateComeBack && ID != result.ID)
                {
                    messageValidate = ConstantDisplay.HRM_HR_ProfileHaveSuspenseInThisTime.TranslateString();

                }
            }
            return messageValidate;
        }


        public string ValidateDateCombackCreate(Guid ProfileID, DateTime DateStop)
        {
            string status = string.Empty;
            string messageValidate = string.Empty;
            var actionService = new ActionService(UserLogin);
            var result = actionService.GetData<Hre_StopWorkingEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status)
            .Where(s => s.StopWorkType == "E_SUSPENSE").OrderByDescending(s => s.DateStop).FirstOrDefault();
            if (result != null)
            {
                if (result.DateStop != null && result.DateComeBack == null && DateStop != result.DateStop)
                {
                    messageValidate = ConstantDisplay.HRM_HR_ProfileInSuspenseTime.TranslateString();
                }
                else if (result.DateStop != null && result.DateComeBack != null && result.DateStop <= DateStop && DateStop <= result.DateComeBack)
                {
                    messageValidate = ConstantDisplay.HRM_HR_ProfileHaveSuspenseInThisTime.TranslateString();

                }
            }
            return messageValidate;
        }

        public string ValidateRegisterComback(Guid? ID, Guid ProfileID, DateTime DateStop, DateTime DateComback)
        {
            string status = string.Empty;
            string messageValidate = string.Empty;
            var actionService = new ActionService(UserLogin);
            var result = actionService.GetData<Hre_StopWorkingEntity>(Common.DotNetToOracle(ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status).Where(s => s.DateComeBack != null)
            .OrderByDescending(s => s.DateStop).FirstOrDefault();
            if (result != null)
            {
                if (result.DateStop != null && result.DateComeBack != null && DateStop == result.DateStop && DateComback != result.DateComeBack && (result.ID != ID && ID != null))
                {
                    messageValidate = ConstantDisplay.HRM_HRM_EmpHaveRegisterComback.TranslateString();
                }
            }
            return messageValidate;
        }

        [HttpPost]
        public ActionResult ApproveComBack(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var message = service.ActionApprovedComeBack(selectedIds, UserLogin);
            return Json(message);
        }

        [HttpPost]
        public ActionResult ActionCancelComback(string selectedIds)
        {
            var service = new Hre_StopWorkingServices();
            var message = service.ActionCancelComback(selectedIds);
            return Json(message);
        }

        // Son.Vo - theo task 0056895 - tính ngày kết thúc hđ dựa vào ngày vào làm lại + loại HĐ
        [HttpPost]
        public ActionResult GetDateEndFromDateComeBack(Guid? contractTypeID, DateTime? dateComeBack)
        {
            if (contractTypeID != null && dateComeBack != null)
            {
                var profileServices = new Hre_ProfileServices();
                var dateend = profileServices.GetDateEndFromDateComeBack(contractTypeID.Value, dateComeBack.Value);
                return Json(dateend, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult GetDateComeBackFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYCOMEBACKEXPIRYFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYCOMEBACKEXPIRYFROM);
            if (_DAYCOMEBACKEXPIRYFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYCOMEBACKEXPIRYFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateComeBackToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYCOMEBACKEXPIRYTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYCOMEBACKEXPIRYTO);
            if (_DAYCOMEBACKEXPIRYTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYCOMEBACKEXPIRYTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        public string ValidateRegisterComeBack([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_StopWorkingModel>(LanguageCode, model, "Hre_StopWorking_SusRegisterComeBack", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult GetRegisterCombackList([DataSourceRequest] DataSourceRequest request, Hre_RegisterComeBackSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_RegisterComeBackSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RegisterComback);
        }

        public ActionResult ExportRegisterCombackList([DataSourceRequest] DataSourceRequest request, Hre_RegisterComeBackSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel, Hre_RegisterComeBackSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RegisterComback);
        }

        public JsonResult GetResonRegisterByProfileID(Guid profileid)
        {
            var result = new Hre_StopWorkingModel();
            string status = string.Empty;
            if (profileid != Guid.Empty)
            {
                var actionService = new ActionService(UserLogin);
                result = actionService.GetData<Hre_StopWorkingModel>(Common.DotNetToOracle(profileid.ToString()), ConstantSql.hrm_hr_sp_get_StopWorkingByProId, ref status).OrderByDescending(s => s.DateStop).FirstOrDefault();
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetHDTJobGroupByID(Guid HDTJobGroupID)
        {
            var result = new List<Cat_HDTJobGroupModel>();
            string status = string.Empty;
            if (HDTJobGroupID != Guid.Empty)
            {
                var actionService = new ActionService(UserLogin);
                result = actionService.GetData<Cat_HDTJobGroupModel>(HDTJobGroupID, ConstantSql.hrm_cat_sp_get_HDTJobGroupById, ref status);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Khác
        [HttpPost]
        public ActionResult GetFieldInfoCustomByTableName([DataSourceRequest] DataSourceRequest request, string tableName)
        {
            if (!string.IsNullOrEmpty(tableName))
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(tableName);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var lstresult = actionService.GetData<Sys_FieldInfoCustomEntity>(objs, ConstantSql.hrm_hre_sp_get_FieldInfoCustomByTableName, ref status);
                if (lstresult == null)
                {
                    lstresult = new List<Sys_FieldInfoCustomEntity>();
                }
                var dataSourceResult = lstresult.ToDataSourceResult(request);
                var serializer = new JavaScriptSerializer();
                var returnresult = new ContentResult();
                serializer.MaxJsonLength = Int32.MaxValue;
                returnresult.Content = serializer.Serialize(dataSourceResult);
                returnresult.ContentType = "application/json";
                return returnresult;
            }
            return null;
        }


        #region Language
        public ActionResult GetLanguageProID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(null);
            }
            string status = string.Empty;
            var ActionService = new ActionService(UserLogin);
            var result = ActionService.GetData<Hre_ProfileLanguageLevelModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_LanguageprofileId, ref status);
            if (result != null)
            {
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return Json(null);
        }

        public JsonResult GetMultiLanguageType(string text)
        {
            return GetDataForControl<CatLanguageTypeMultiModel, Cat_LanguageTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_LanguageType_Multi);
        }

        public JsonResult GetMultiLanguageLevel(string text)
        {
            return GetDataForControl<CatLanguageLevelMultiModel, Cat_LanguageLevelMultiEntity>(text, ConstantSql.hrm_cat_sp_get_LanguageLevel_Multi);

            //return GetDataForControl<HreAppendixContractTypeMultiModel, hre Cat_ContractTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_AppendixContractType_multi);
        }

        public JsonResult GetMultiLanguageSkill(string text)
        {
            return GetDataForControl<CatLanguageSkillMultiModel, Cat_LanguageSkillMultiEntity>(text, ConstantSql.hrm_cat_sp_get_LanguageSkill_Multi);

            //return GetDataForControl<HreAppendixContractTypeMultiModel, hre Cat_ContractTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_AppendixContractType_multi);
        }

        #endregion

        #region Computing
        public ActionResult GetComputingProID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID == null || profileID == Guid.Empty)
            {
                return Json(null);
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin);
            var result = actionServices.GetData<Hre_ProfileComputingLevelModel>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ComputingprofileId, ref status);
            if (result != null)
            {
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return Json(null);
        }

        public JsonResult GetMultiComputingLevel(string text)
        {
            return GetDataForControl<CatComputingLevelMultiModel, Cat_ComputingLevelMultiEntity>(text, ConstantSql.hrm_cat_sp_get_ComputingLevel_Multi);

            //return GetDataForControl<HreAppendixContractTypeMultiModel, hre Cat_ContractTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_AppendixContractType_multi);
        }

        public JsonResult GetMultiComputingType(string text)
        {
            return GetDataForControl<CatComputingTypeMultiModel, Cat_ComputingTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_ComputingType_Multi);
        }

        #endregion

        #region Education
        public JsonResult GetMultiEducationLevel(string text)
        {
            return GetDataForControl<CatEducationLevelMultiModel, Cat_EducationLevelMultiEntity>(text, ConstantSql.hrm_cat_sp_get_EducationLevel_Multi);

            //return GetDataForControl<HreAppendixContractTypeMultiModel, hre Cat_ContractTypeMultiEntity>(text, ConstantSql.hrm_cat_sp_get_AppendixContractType_multi);
        }

        #endregion

        #region att_profilenotgrade
        public JsonResult GetProfileNotGradeMultids(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(Common.DotNetToOracle(text), ConstantSql.hrm_hr_sp_get_ProfileNotGrade_multids);

        }

        public ActionResult ExportAllProfileNotGrade([DataSourceRequest] DataSourceRequest request, Hre_ProfilenotAttGradeSearchModel model)
        {
            model.CodeEmp = "";
            model.ProfileName = "";
            request.PageSize = int.MaxValue - 1;
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfilenotAttGradeSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileNotGrade);
        }

        public ActionResult ExportAllProfileNotGradeV2([DataSourceRequest] DataSourceRequest request, Hre_ProfileSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileModel(),
                    FileName = "Hre_ProfileModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false,
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            List<object> objs = new List<object>();
            objs.AddRange(new object[7]);
            objs[5] = 1;
            objs[6] = int.MaxValue - 1;
            var lstResult = actionService.GetData<Hre_ProfileModel>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotGrade, ref status);
            var fullPath = ExportService.Export(model.ExportId, lstResult, null, UserGuidID, model.ExportType);
            return Json(fullPath);
        }

        public ActionResult ExportProfileNotGradeSelectedv2(Hre_ProfileSearchModel model, List<Guid> selectedIds)
        {
            ActionService actionService = new ActionService(UserLogin);
            string status = string.Empty;
            var lstProfileNotGradeSelected = actionService.GetData<Hre_ProfileModel>(String.Join(",", selectedIds), ConstantSql.hrm_hr_sp_get_ProfileNotGradeByIds, ref status);
            var fullPath = ExportService.Export(model.ExportId, lstProfileNotGradeSelected, null, UserGuidID, model.ExportType);
            return Json(fullPath);
        }

        public ActionResult ExportProfileNotGradeSelected(List<Guid> selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileEntity, Hre_ProfileModel>(String.Join(",", selectedIds), valueFields, ConstantSql.hrm_hr_sp_get_ProfileNotGradeByIds);
        }
        public ActionResult Get_Att_ProfileNotGrade([DataSourceRequest] DataSourceRequest request, Hre_ProfileModel model)
        {

            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var result = new List<Hre_ProfileEntity>();
            if (model.DateStart != null && model.DateEnd != null)
            {
                List<object> objs = new List<object>();
                objs.AddRange(new object[7]);
                objs[0] = model.ProfileName;
                objs[1] = model.CodeEmp;
                objs[2] = model.DateStart;
                objs[3] = model.DateEnd;
                objs[4] = model.OrgStructureIDs;
                objs[5] = 1;
                objs[6] = int.MaxValue - 1;
                result = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotGrade, ref status);
            }
            else if (model.DateStart != null)
            {
                List<object> objs = new List<object>();
                objs.AddRange(new object[7]);
                objs[0] = model.ProfileName;
                objs[1] = model.CodeEmp;
                objs[2] = null;
                objs[3] = null;
                objs[4] = model.OrgStructureIDs;
                objs[5] = 1;
                objs[6] = int.MaxValue - 1;
                result = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotGrade, ref status).Where(s => s.DateHire != null && s.DateHire.Value >= model.DateStart.Value).ToList();
            }
            else if (model.DateEnd != null)
            {
                List<object> objs = new List<object>();
                objs.AddRange(new object[7]);
                objs[0] = model.ProfileName;
                objs[1] = model.CodeEmp;
                objs[2] = null;
                objs[3] = null;
                objs[4] = model.OrgStructureIDs;
                objs[5] = 1;
                objs[6] = int.MaxValue - 1;
                result = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotGrade, ref status).Where(s => s.DateHire != null && s.DateHire.Value <= model.DateEnd.Value).ToList();
            }
            else
            {
                List<object> objs = new List<object>();
                objs.AddRange(new object[7]);
                objs[0] = model.ProfileName;
                objs[1] = model.CodeEmp;
                objs[2] = model.DateStart;
                objs[3] = model.DateEnd;
                objs[4] = model.OrgStructureIDs;
                objs[5] = 1;
                objs[6] = int.MaxValue - 1;
                result = actionService.GetData<Hre_ProfileEntity>(objs, ConstantSql.hrm_hr_sp_get_ProfileNotGrade, ref status);
            }

            return Json(result.ToDataSourceResult(request));
        }

        #endregion att_profilenotgrade

        #region sal_profilenotgrade

        public JsonResult Get_SAL_ProfileNotGradeMultids(string text)
        {
            return GetDataForControl<Hre_ProfileMultiModel, Hre_ProfileMultiEntity>(Common.DotNetToOracle(text), ConstantSql.hrm_hr_sp_get_PFNGMUlTIds);
        }

        public ActionResult Get_Sal_ProfileNotGrade([DataSourceRequest] DataSourceRequest request, Hre_ProfilenotGradeSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfilenotGradeModel, Hre_ProfilenotGradeEntity, Hre_ProfilenotGradeSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PFNG_sal);
        }

        public ActionResult ExportAllSalProfileNotGrade([DataSourceRequest] DataSourceRequest request, Hre_ProfilenotGradeSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfilenotGradeEntity, Hre_ProfilenotGradeModel, Hre_ProfilenotGradeSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PFNG_sal);
        }

        #endregion

        [HttpPost]
        public ActionResult GetCashAdvanceList([DataSourceRequest] DataSourceRequest request, FIN_CashAdvanceSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var result = new List<FIN_CashAdvanceModel>();
            var lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), FinApproverType.Fin_CashAdvance.ToString());
            string status = string.Empty;
            var actionservice = new ActionService(UserLogin);
            #region MyRegion
            var listobj = new List<object>();
            listobj = Common.AddRange(11);
            listobj[0] = model.DateRequest;
            listobj[1] = model.CashAdvanceName;
            listobj[2] = model.TravelRequestCode;
            listobj[3] = model.TravelRequestName;
            listobj[4] = model.IsCreateTemplate;
            listobj[5] = model.IsCreateTemplateForDynamicGrid;
            listobj[6] = model.ExportId;
            listobj[7] = model.ExportType;
            #endregion
            foreach (var item in lst.Chunk(100))
            {
                listobj[8] = string.Join(",", item);
                var ListData = actionservice.GetData<Fin_CashAdvanceEntity>(listobj, ConstantSql.hrm_hr_sp_get_CashAdvance, ref status);
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    result.AddRange(ListData.Translate<FIN_CashAdvanceModel>());
                }
            }



            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

            //return GetListDataAndReturn<FIN_CashAdvanceModel, Fin_CashAdvanceEntity, FIN_CashAdvanceSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_CashAdvance);
        }

        [System.Web.Mvc.HttpPost]
        public ActionResult ExportClaimList([DataSourceRequest] DataSourceRequest request, FIN_ClaimSearchModel model)
        {
            return ExportAllAndReturn<FIN_ClaimEntity, FIN_ClaimModel, FIN_ClaimSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Claim);
        }

        [HttpPost]
        public ActionResult ExportCashAdvanceByTemplate([DataSourceRequest] DataSourceRequest request, FIN_CashAdvanceSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), FinApproverType.Fin_CashAdvance.ToString());
            string status = string.Empty;
            var isDataTable = false;
            object obj = new FIN_CashAdvanceItemModel();
            var lstModel = new List<FIN_CashAdvanceItemModel>();
            var actionService = new ActionService(UserLogin);
            var result = new List<FIN_CashAdvanceModel>();
            #region MyRegion
            var listobj = new List<object>();
            listobj = Common.AddRange(11);
            listobj[0] = model.DateRequest;
            listobj[1] = model.CashAdvanceName;
            listobj[2] = model.TravelRequestCode;
            listobj[3] = model.TravelRequestName;
            listobj[4] = model.IsCreateTemplate;
            listobj[5] = model.IsCreateTemplateForDynamicGrid;
            listobj[6] = model.ExportId;
            listobj[7] = model.ExportType;
            #endregion
            foreach (var item in lst.Chunk(100))
            {
                listobj[8] = string.Join(",", item);
                var ListData = new List<Fin_CashAdvanceEntity>();
                if (!string.IsNullOrEmpty(model.ValueFields))
                {
                    ListData = actionService.GetData<Fin_CashAdvanceEntity>(model.ValueFields, ConstantSql.hrm_hr_sp_get_CashAdvanceByIDs, ref status);
                }
                else
                {
                    ListData = actionService.GetData<Fin_CashAdvanceEntity>(listobj, ConstantSql.hrm_hr_sp_get_CashAdvance, ref status);
                }
                var lstIds = ListData.Select(s => s.ID).ToList();
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    result.AddRange(ListData.Translate<FIN_CashAdvanceModel>());
                    foreach (var _item in lstIds.Chunk(100))
                    {
                        string ItemID = string.Join(",", _item);
                        lstModel.AddRange(actionService.GetData<FIN_CashAdvanceItemModel>(ItemID, ConstantSql.hrm_hr_sp_get_CashAdvanceItemByCashAdvanceIDs, ref status));
                    }
                }

            }
            #region  lấy người duyệt cuối
            if (!Common.CheckListNullOrEmty(lstModel))
            {
                var LastUserapprover = finser.ListLastApprover(Guid.Parse(UserID), FinApproverType.Fin_CashAdvance.ToString());
                //Chỉ lấy những recore sẻ hiện thị trên lưới.
                foreach (var item in lstModel)
                {
                    if (!string.IsNullOrEmpty(item.StatusLast))
                    {
                        var app = LastUserapprover.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                        if (app != null)
                        {
                            try
                            {
                                //Nếu status là người duyệt cuối cùng duyệt thì lấy
                                var array = item.StatusLast.Split('_');
                                if (Convert.ToInt32(array[array.Length - 1]) == app.OrderNo)
                                {
                                    item.LastApproverName = app.LastApproverName;
                                    item.DateLastApproved = item.DateUpdate;
                                }
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
            }
            #endregion
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = lstModel;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "FIN_CashAdvanceItemModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, lstModel, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetCodeAlocalByProfileID([DataSourceRequest] DataSourceRequest request, Att_ProIDAndCutIDModel model)
        {

            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(model.ProfileID));
            objs.Add(Common.DotNetToOracle(model.CutOffDurationID));
            objs.Add(1);
            objs.Add(10000);

            var result = actionService.GetData<Sal_CodeAlocalEntity>(objs, ConstantSql.hrm_hr_sp_get_CodeAlocalByProfileId, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult GetSalCostCentreSalByProfileID([DataSourceRequest] DataSourceRequest request, Att_ProIDAndCutIDModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(model.ProfileID));
            objs.Add(1);
            objs.Add(int.MaxValue - 1);
            var result = actionService.GetData<Sal_CostCentreSalEntity>(objs, ConstantSql.hrm_hr_sp_get_Sal_CostCentreSalByProfileId, ref status);
            if (result != null)
            {
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult GetPITAmountByProfileID([DataSourceRequest] DataSourceRequest request, Sal_PITAmountProfileDetailSearchModel model)
        {
            if (model.ProfileID != Guid.Empty)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var listParaPITAmount = new List<object>();
                listParaPITAmount.AddRange(new object[6]);
                if (model.MonthYearFrom != null)
                {
                    listParaPITAmount[0] = model.MonthYearFrom;
                }
                if (model.MonthYearTo != null)
                {
                    listParaPITAmount[1] = model.MonthYearTo;
                }
                listParaPITAmount[2] = model.ProfileID.ToString();
                listParaPITAmount[4] = request.Page;
                listParaPITAmount[5] = request.PageSize;
                var result = actionService.GetData<Sal_PITAmountEntity>(listParaPITAmount, ConstantSql.hrm_sal_sp_get_PITAmount, ref status);
                if (result != null)
                {
                    return Json(result.ToDataSourceResult(request));
                }
                else
                {
                    return Json(null);
                }
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult GetPITAmountByProfileIDPortal([DataSourceRequest] DataSourceRequest request, Sal_PITAmountProfileDetailSearchModel model)
        {
            if (model.ProfileID != Guid.Empty)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var listParaPITAmount = new List<object>();
                listParaPITAmount.AddRange(new object[6]);
                if (model.MonthYearFrom != null)
                {
                    listParaPITAmount[0] = model.MonthYearFrom;
                }
                if (model.MonthYearTo != null)
                {
                    listParaPITAmount[1] = model.MonthYearTo;
                }
                listParaPITAmount[2] = model.ProfileID.ToString();
                listParaPITAmount[4] = request.Page;
                listParaPITAmount[5] = request.PageSize;
                var result = actionService.GetData<Sal_PITAmountEntity>(listParaPITAmount, ConstantSql.hrm_sal_sp_get_PITAmount, ref status);
                if (result != null)
                {
                    return Json(result.ToDataSourceResult(request));
                }
                else
                {
                    return Json(null);
                }
            }
            else
            {
                return Json(null);
            }
        }
        public ActionResult New_GetPITAmountByProfileIDPortal(New_Sal_PITAmountProfileDetailSearchModel model)
        {
            if (model.ProfileID != Guid.Empty)
            {
                DataSourceRequest request = new DataSourceRequest();
                request.Page = 1;
                request.PageSize = 100;
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var listParaPITAmount = new List<object>();
                listParaPITAmount.AddRange(new object[6]);
                if (model.MonthYearFrom != null)
                {
                    listParaPITAmount[0] = model.MonthYearFrom;
                }
                if (model.MonthYearTo != null)
                {
                    listParaPITAmount[1] = model.MonthYearTo;
                }
                listParaPITAmount[2] = model.ProfileID.ToString();
                listParaPITAmount[4] = request.Page;
                listParaPITAmount[5] = request.PageSize;
                var result = actionService.GetData<Sal_PITAmountEntity>(listParaPITAmount, ConstantSql.hrm_sal_sp_get_PITAmount, ref status);
                if (result != null)
                {
                    return Json(result.ToDataSourceResult(request));
                }
                else
                {
                    return Json(null);
                }
            }
            else
            {
                return Json(null);
            }
        }


        //kiem tra he so 1nv khong lon hon 1
        public ActionResult CheckRateSalCostCentreSalByProfileID(Att_ProIDAndCutIDModel model)
        {

            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(model.ProfileID));
            objs.Add(1);
            objs.Add(10000);
            var result = actionService.GetData<Sal_CostCentreSalEntity>(objs, ConstantSql.hrm_hr_sp_get_Sal_CostCentreSalByProfileId, ref status);
            double? rate = result.Sum(s => s.Rate);
            var ls = new object[] { rate };
            return Json(ls);
            //  return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Hre_CandidateHistory
        [HttpPost]
        public ActionResult ExportCandidateHistoryListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileCandidateHistorySearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var service = new BaseService();
            object obj = new Hre_CandidateHistoryModel();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_CandidateHistoryModel>();
            if (model != null && !model.IsCreateTemplate)
            {
                result = GetListData<Hre_CandidateHistoryModel, Hre_CandidateHistoryEntity, Hre_ProfileCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileCandidateHistory, ref status);
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_CandidateHistoryModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetProfileCandidateHistory([DataSourceRequest] DataSourceRequest request, Hre_ProfileCandidateHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_CandidateHistoryModel, Hre_CandidateHistoryEntity, Hre_ProfileCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileCandidateHistory);
        }

        public ActionResult ExportListProfileCandidateHistory([DataSourceRequest] DataSourceRequest request, Hre_ProfileCandidateHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_CandidateHistoryEntity, Hre_CandidateHistoryModel, Hre_ProfileCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileCandidateHistory);
        }

        public ActionResult ExportCandidateHistorySelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_CandidateHistoryEntity, Hre_CandidateHistoryModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_CandidateHistoryByIds);
        }

        [HttpPost]
        public ActionResult GetRecCandidateHistory([DataSourceRequest] DataSourceRequest request, Hre_RecCandidateHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_CandidateHistoryModel, Hre_CandidateHistoryEntity, Hre_RecCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RecCandidateHistory);
        }

        public ActionResult ExportListRecCandidateHistory([DataSourceRequest] DataSourceRequest request, Hre_RecCandidateHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_CandidateHistoryEntity, Hre_CandidateHistoryModel, Hre_RecCandidateHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RecCandidateHistory);
        }

        #endregion

        #region Tài chính
        public ActionResult GetDataByItemID([DataSourceRequest] DataSourceRequest request, Guid itemID)
        {
            var service = new ActionService(UserLogin);
            string status = string.Empty;
            var entity = service.GetByIdUseStore<Cat_PurchaseItemsModel>(itemID, ConstantSql.hrm_cat_sp_get_PurchaseItemsById, ref status);
            return Json(entity, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetPurchaseRequestItemByPurchaseRequestID([DataSourceRequest] DataSourceRequest request, Guid PurchaseRequestID)
        {

            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(PurchaseRequestID);
            var result = actionService.GetData<Fin_PurchaseRequestItemModel>(objs, ConstantSql.hrm_cat_sp_get_PRItemByPRID, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ProcessApproveProfileInformation(List<Guid> selectedIds, string ReasonApprove)
        {
            string status = string.Empty;
            var service = new Hre_RequestInfoServices();
            var UserId = Guid.Empty;
            Guid.TryParse(UserID, out UserId);
            status = service.ProcessApprovedRequestInfo(selectedIds, UserLogin, UserId, ReasonApprove, LanguageCode);

            if (status != "")
            {
                return Json(status);
            }
            return Json("");
        }

        public ActionResult ProcessRejectProfileInformation(List<Guid> selectedIds, string Reason)
        {
            string status = string.Empty;
            var service = new Hre_RequestInfoServices();
            var UserId = Guid.Empty;
            Guid.TryParse(UserID, out UserId);
            status = service.ProcessRejectRequestInfo(selectedIds, UserLogin, UserId, Reason, LanguageCode);

            if (status != "")
            {
                return Json(status);
            }
            return Json("");
        }

        public ActionResult GetConfigFieldCannotEditInPortal()
        {

            string status = string.Empty;
            var keyConfig = AppConfig.HRM_HRE_CONFIG_FIELDCANNOTEDITINPORTAL.ToString();
            var service = new Hre_RequestInfoServices();
            var config = service.GetData<Sys_AllSettingEntity>(keyConfig, ConstantSql.hrm_sys_sp_get_AllSettingByKey, UserLogin, ref status).FirstOrDefault();
            if (config != null && !string.IsNullOrEmpty(config.Value1))
            {
                return Json(config.Value1);
            }

            return Json("");
        }
        [HttpPost]
        public ActionResult GetTravelRequestList([DataSourceRequest] DataSourceRequest request, FIN_TravelRequestSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), string.Format("{0},{1}", EnumDropDown.TravelRequestType.FIN_TravelRequest_Domestic, EnumDropDown.TravelRequestType.FIN_TravelRequest_External));
            string status = string.Empty;
            var result = new List<FIN_TravelRequestModel>();
            var actionservice = new ActionService(UserLogin);
            #region MyRegion
            var listobj = new List<object>();
            listobj = Common.AddRange(13);
            listobj[0] = model.DateRequest;
            listobj[1] = model.TravelRequestName;
            listobj[2] = model.UserCreateID;
            listobj[3] = model.UserApproveID;
            listobj[4] = model.ClaimCode;
            listobj[5] = model.ClaimName;
            listobj[6] = model.IsCreateTemplate;
            listobj[7] = model.IsCreateTemplateForDynamicGrid;
            listobj[8] = model.ExportId;
            listobj[9] = model.ExportType;
            #endregion
            foreach (var item in lst.Chunk(100))
            {

                listobj[10] = string.Join(",", item);
                var ListData = actionservice.GetData<FIN_TravelRequestEntity>(listobj, ConstantSql.hrm_hr_sp_get_TravelRequest, ref status);
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    result.AddRange(ListData.Translate<FIN_TravelRequestModel>());
                }
            }

            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CheckAllowRemoveFinTravelRequest(string id)
        {
            FIN_ApproverECLAIMService service = new FIN_ApproverECLAIMService();
            var isAllowRemoved = service.CheckAllowRemoveFinTravelRequest(id);
            return Json(isAllowRemoved, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CheckAllowRemoveCashAdvance(string id)
        {
            FIN_ApproverECLAIMService service = new FIN_ApproverECLAIMService();
            var isAllowRemoved = service.CheckAllowRemoveCashAdvance(id);
            return Json(isAllowRemoved, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult CheckAllowRemoveClaim(string id)
        {
            FIN_ApproverECLAIMService service = new FIN_ApproverECLAIMService();
            var isAllowRemoved = service.CheckAllowRemoveClaim(id);
            return Json(isAllowRemoved, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ExportTravelRequestByTemplate([DataSourceRequest] DataSourceRequest request, FIN_TravelRequestSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var lst = new List<Guid>();
            if (!model.IsCreateTemplate)
            {
                //Lấy dánh sách nhân viên được user đăng nhập duyệt
                lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), string.Format("{0},{1}",
                EnumDropDown.TravelRequestType.FIN_TravelRequest_Domestic.ToString(),
                EnumDropDown.TravelRequestType.FIN_TravelRequest_External.ToString()));
            }

            string status = string.Empty;
            var isDataTable = false;
            object obj = new FIN_TravelRequestItemModel();
            var lstModel = new List<FIN_TravelRequestItemModel>();
            var travelResult = new List<FIN_TravelRequestModel>();
            var actionService = new ActionService(UserLogin);
            var listobj = new List<object>();
            listobj = Common.AddRange(13);
            listobj[0] = model.DateRequest;
            listobj[1] = model.TravelRequestName;
            listobj[2] = model.UserCreateID;
            listobj[3] = model.UserApproveID;
            listobj[4] = model.ClaimCode;
            listobj[5] = model.ClaimName;
            listobj[6] = model.IsCreateTemplate;
            listobj[7] = model.IsCreateTemplateForDynamicGrid;
            listobj[8] = model.ExportId;
            listobj[9] = model.ExportType;
            foreach (var item in lst.Chunk(100))
            {
                listobj[10] = string.Join(",", item);
                var ListData = new List<FIN_TravelRequestEntity>();
                if (!string.IsNullOrEmpty(model.ValueFields))
                {
                    ListData = actionService.GetData<FIN_TravelRequestEntity>(model.ValueFields, ConstantSql.hrm_hr_sp_get_TravelRequestByIds, ref status);
                }
                else
                {
                    ListData = actionService.GetData<FIN_TravelRequestEntity>(listobj, ConstantSql.hrm_hr_sp_get_TravelRequest, ref status);
                }
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    var lstIds = ListData.Select(s => s.ID).ToList();
                    travelResult.AddRange(ListData.Translate<FIN_TravelRequestModel>());
                    foreach (var _item in lstIds.Chunk(100))
                    {
                        string ItemID = string.Join(",", _item);
                        lstModel.AddRange(actionService.GetData<FIN_TravelRequestItemModel>(ItemID, ConstantSql.hrm_hr_sp_get_TravelRequestItemByTravelRequestIDs, ref status));
                    }
                }
            }
            #region  lấy người duyệt cuối
            if (lstModel != null && lstModel.Count > 0)
            {
                var LastUserapprover1 = finser.ListLastApprover(Guid.Parse(UserID), EnumDropDown.TravelRequestType.FIN_TravelRequest_Domestic.ToString());
                var LastUserapprover2 = finser.ListLastApprover(Guid.Parse(UserID), EnumDropDown.TravelRequestType.FIN_TravelRequest_External.ToString());
                //Chỉ lấy những recore sẻ hiện thị trên lưới.
                foreach (var item in lstModel)
                {
                    if (!string.IsNullOrEmpty(item.StatusLast))
                    {
                        var app = new FIN_LastApproverECLAIMEntity();
                        if (item.TypeNew == EnumDropDown.TravelRequestType.FIN_TravelRequest_Domestic.ToString())
                        {
                            app = LastUserapprover1.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                        }
                        else
                        {
                            if (item.TypeNew == EnumDropDown.TravelRequestType.FIN_TravelRequest_External.ToString())
                            {
                                app = LastUserapprover2.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                            }
                            else
                            {
                                app = null;
                            }
                        }

                        if (app != null)
                        {
                            try
                            {
                                //Nếu status là người duyệt cuối cùng duyệt thì lấy
                                var array = item.StatusLast.Split('_');
                                if (Convert.ToInt32(array[array.Length - 1]) == app.OrderNo)
                                {
                                    item.LastApproverName = app.LastApproverName;
                                    item.DateLastApproved = item.DateUpdate;
                                }
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
            }
            #endregion

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = lstModel;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "FIN_TravelRequestItemModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, lstModel, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(travelResult.ToDataSourceResult(request));
        }

        public ActionResult GetTravelRequestItemByTravelRequestID([DataSourceRequest] DataSourceRequest request, Guid? TravelRequestID)
        {
            if (TravelRequestID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(Common.DotNetToOracle(TravelRequestID.ToString()));
                var result = actionService.GetData<FIN_TravelRequestItemModel>(objs, ConstantSql.hrm_hr_sp_get_TravelRequestItemByTravelRequestID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        public ActionResult GetClaimItemByClaimID([DataSourceRequest] DataSourceRequest request, Guid? ClaimID)
        {
            if (ClaimID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(Common.DotNetToOracle(ClaimID.ToString()));
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<FIN_ClaimItemModel>(objs, ConstantSql.hrm_hr_sp_get_ClaimItemByClaimID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        public ActionResult GetCashAdvanceItemByCashAdvanceID([DataSourceRequest] DataSourceRequest request, Guid? CashAdvanceID)
        {
            if (CashAdvanceID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(Common.DotNetToOracle(CashAdvanceID.ToString()));
                var result = actionService.GetData<FIN_CashAdvanceItemModel>(objs, ConstantSql.hrm_hr_sp_get_CashAdvanceItemByCashAdvanceID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            return null;
        }

        [HttpPost]
        public ActionResult GetApprovedPurchaseRequestList([DataSourceRequest] DataSourceRequest request, Fin_ApprovedPurchaseRequestSearchModel model)
        {
            return GetListDataAndReturn<Fin_PurchaseRequestModel, FIN_PurchaseRequestEntity, Fin_ApprovedPurchaseRequestSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ApprovedPurchaseRequest);
        }

        [HttpPost]
        public ActionResult GetClaimByTravelRequestID([DataSourceRequest] DataSourceRequest request, Guid TravelRequestID)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.DotNetToOracle(TravelRequestID.ToString()));
            var result = actionService.GetData<FIN_ClaimModel>(objs, ConstantSql.hrm_hr_sp_get_ClaimByTravelRequestID, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public JsonResult GetMultiTravelRequest(string text)
        {
            return GetDataForControl<FIN_TravelRequestMultiModel, FIN_TravelRequestMultiEntity>(text, ConstantSql.hrm_hr_sp_get_TravelRequest_Multi);
        }

        public JsonResult GetMultiTravelRequestV2(string text)
        {
            return GetDataForControl<FIN_TravelRequestMultiModel, FIN_TravelRequestMultiEntity>(text, ConstantSql.hrm_hr_sp_get_TravelRequest_MultiV2);
        }

        [HttpPost]
        public JsonResult GetMultiCashAdvance(string text)
        {
            return GetDataForControl<FIN_CashAdvanceMultiModel, FIN_CashAdvanceMultiEntity>(text, ConstantSql.hrm_hr_sp_get_CashAdvance_Multi);
        }

        public JsonResult GetMultiCashAdvanceV2(string text)
        {
            return GetDataForControl<FIN_CashAdvanceMultiModel, FIN_CashAdvanceMultiEntity>(text, ConstantSql.hrm_hr_sp_get_CashAdvance_MultiV2);
        }

        [HttpPost]
        public ActionResult GetApprovedFIN_ClaimList([DataSourceRequest] DataSourceRequest request, FIN_ApprovedClaimSearchModel model)
        {
            return GetListDataAndReturn<FIN_ClaimModel, FIN_ClaimEntity, FIN_ApprovedClaimSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ApprovedClaim);
        }

        [HttpPost]
        public ActionResult GetApprovedFIN_TravelRequestList([DataSourceRequest] DataSourceRequest request, FIN_ApprovedTravelRequestSearchModel model)
        {
            return GetListDataAndReturn<FIN_TravelRequestModel, FIN_TravelRequestEntity, FIN_ApprovedTravelRequestSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ApprovedFIN_TravelRequest);
        }

        [HttpPost]
        public ActionResult GetProfileIDByTravelRequests(Guid TravelRequestID)
        {
            var service = new FIN_TravelRequestService();
            return Json(service.GetProfileIDByTravelRequests(TravelRequestID), JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public ActionResult GetClaimList([DataSourceRequest] DataSourceRequest request, FIN_ClaimSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var result = new List<FIN_ClaimModel>();
            var lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), string.Format("{0},{1}", FinApproverType.FIN_Claim_Manufacture.ToString(), FinApproverType.FIN_Claim_Profile.ToString()));
            string status = string.Empty;
            var actionservice = new ActionService(UserLogin);
            #region MyRegion
            var listobj = new List<object>();
            listobj = Common.AddRange(13);
            listobj[0] = model.DateRequest;
            listobj[1] = model.ClaimName;
            listobj[2] = model.UserCreateID;
            listobj[3] = model.UserApproveID;
            listobj[4] = model.TravelRequestCode;
            listobj[5] = model.TravelRequestName;
            listobj[6] = model.IsCreateTemplate;
            listobj[7] = model.IsCreateTemplateForDynamicGrid;
            listobj[8] = model.ExportId;
            listobj[9] = model.ExportType;

            #endregion
            foreach (var item in lst.Chunk(100))
            {
                listobj[10] = string.Join(",", item);
                var ListData = actionservice.GetData<FIN_ClaimEntity>(listobj, ConstantSql.hrm_hr_sp_get_ClaimV2, ref status);
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    result.AddRange(ListData.Translate<FIN_ClaimModel>());
                }
            }

            return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            //return GetListDataAndReturn<FIN_ClaimModel, FIN_ClaimEntity, FIN_ClaimSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Claim);
        }

        public ActionResult ExportClaimByTemplate([DataSourceRequest] DataSourceRequest request, FIN_ClaimSearchModel model)
        {
            FIN_ApproverECLAIMService finser = new FIN_ApproverECLAIMService();
            var result = new List<FIN_ClaimModel>();
            var lst = new List<Guid>();
            if (!model.IsCreateTemplate)
            {
                lst = finser.GetListUserWereApprovedUserLogin(Guid.Parse(UserID), string.Format("{0},{1}", FinApproverType.FIN_Claim_Manufacture.ToString(), FinApproverType.FIN_Claim_Profile.ToString()));
            }
            string status = string.Empty;
            var actionService = new ActionService(UserLogin, LanguageCode);
            var isDataTable = false;
            object obj = new FIN_ClaimItemModel();
            var lstModel = new List<FIN_ClaimItemModel>();
            #region MyRegion
            var listobj = new List<object>();
            listobj = Common.AddRange(13);
            listobj[0] = model.DateRequest;
            listobj[1] = model.ClaimName;
            listobj[2] = model.UserCreateID;
            listobj[3] = model.UserApproveID;
            listobj[4] = model.TravelRequestCode;
            listobj[5] = model.TravelRequestName;
            listobj[6] = model.IsCreateTemplate;
            listobj[7] = model.IsCreateTemplateForDynamicGrid;
            listobj[8] = model.ExportId;
            listobj[9] = model.ExportType;
            #endregion
            foreach (var item in lst.Chunk(100))
            {
                listobj[10] = string.Join(",", item);
                var ListData = new List<FIN_ClaimEntity>();
                if (!string.IsNullOrEmpty(model.ValueFields))
                {
                    ListData = actionService.GetData<FIN_ClaimEntity>(model.ValueFields, ConstantSql.hrm_hr_sp_get_ClaimV2ByIDs, ref status);
                }
                else
                {
                    ListData = actionService.GetData<FIN_ClaimEntity>(listobj, ConstantSql.hrm_hr_sp_get_ClaimV2, ref status);
                }
                var lstIds = ListData.Select(s => s.ID).ToList();
                if (!Common.CheckListNullOrEmty(ListData))
                {
                    result.AddRange(ListData.Translate<FIN_ClaimModel>());
                    foreach (var _item in lstIds.Chunk(100))
                    {
                        string ItemID = string.Join(",", _item);
                        lstModel.AddRange(actionService.GetData<FIN_ClaimItemModel>(ItemID, ConstantSql.hrm_hr_sp_get_ClaimItemByClaimIDs, ref status));
                    }
                }
            }

            #region  lấy người duyệt cuối
            if (lstModel != null && lstModel.Count > 0)
            {
                var LastUserapprover1 = finser.ListLastApprover(Guid.Parse(UserID), string.Format("{0}", FinApproverType.FIN_Claim_Manufacture.ToString()));
                var LastUserapprover2 = finser.ListLastApprover(Guid.Parse(UserID), string.Format("{0}", FinApproverType.FIN_Claim_Profile.ToString()));
                //Chỉ lấy những recore sẻ hiện thị trên lưới.
                foreach (var item in lstModel)
                {
                    if (!string.IsNullOrEmpty(item.StatusLast))
                    {
                        var app = new FIN_LastApproverECLAIMEntity();
                        if (item.TypeNew == FinApproverType.FIN_Claim_Manufacture.ToString())
                        {
                            app = LastUserapprover1.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                        }
                        else
                        {
                            if (item.TypeNew == FinApproverType.FIN_Claim_Profile.ToString())
                            {
                                app = LastUserapprover2.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                            }
                            else
                            {
                                app = null;
                            }
                        }
                        if (app != null)
                        {
                            try
                            {
                                //Nếu status là người duyệt cuối cùng duyệt thì lấy
                                var array = item.StatusLast.Split('_');
                                if (Convert.ToInt32(array[array.Length - 1]) == app.OrderNo)
                                {
                                    item.LastApproverName = app.LastApproverName;
                                    item.DateLastApproved = item.DateUpdate;
                                }
                            }
                            catch
                            {
                                continue;
                            }
                        }
                    }
                }
            }
            #endregion

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = lstModel;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {

                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "FIN_ClaimItemModel",
                    OutPutPath = path,
                    //HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, lstModel, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult GetClaimCostPaymentApproveList([DataSourceRequest] DataSourceRequest request, FIN_ClaimCostPaymentApproveSearchModel model)
        {
            return GetListDataAndReturn<FIN_ClaimCostPaymentApproveModel, FIN_ClaimCostPaymentApproveEntity, FIN_ClaimCostPaymentApproveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Claim);
        }

        [HttpPost]
        public ActionResult GetPurchaseRequestList([DataSourceRequest] DataSourceRequest request, Fin_PurchaseRequestSearchModel model)
        {
            return GetListDataAndReturn<Fin_PurchaseRequestModel, FIN_PurchaseRequestEntity, Fin_PurchaseRequestSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PurchaseRequest);
        }

        public ActionResult ExportAllPurchaseRequestList([DataSourceRequest] DataSourceRequest request, Fin_PurchaseRequestSearchModel model)
        {
            return ExportAllAndReturn<FIN_PurchaseRequestEntity, Fin_PurchaseRequestModel, Fin_PurchaseRequestSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PurchaseRequest);
        }

        public ActionResult ExportPurchaseRequestelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<FIN_PurchaseRequestEntity, Fin_PurchaseRequestModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_PurchaseRequestByIds);
        }

        public ActionResult ExportPurchaseRequest(string purchaseID, Guid? exportID, bool isCreateTemplate, bool isCreateTemplateForDynamicGrid)
        {

            string status = string.Empty;
            var baseService = new BaseService();
            ExportFileType exportFileType = ExportFileType.Excel;
            var actionServices = new ActionService(UserLogin);
            var objs = new List<object>();
            objs.Add(Common.ConvertToGuid(purchaseID));
            var entityPR = actionServices.GetByIdUseStore<Fin_PurchaseRequestModel>(Common.ConvertToGuid(purchaseID), ConstantSql.hrm_hr_sp_get_PurchaseRequestById, ref status);
            var lstPRItem = actionServices.GetData<Fin_PurchaseRequestItemModel>(objs, ConstantSql.hrm_cat_sp_get_PRItemByPRID, ref status);
            DataTable table = new DataTable("Fin_PurchaseRequestModel");
            if (entityPR != null && lstPRItem != null)
            {

                table.Columns.Add("FunctionName");
                table.Columns.Add("BudgetOwnerName");
                table.Columns.Add("ChannelName");
                table.Columns.Add("BudgetChargedIn");
                table.Columns.Add("From");
                table.Columns.Add("To");
                table.Columns.Add("SupplierName");
                table.Columns.Add("Description");
                table.Columns.Add("Code");
                table.Columns.Add("CateCodeType");
                table.Columns.Add("Name");
                table.Columns.Add("ProjectName");
                table.Columns.Add("PurchaseItemName");
                table.Columns.Add("PurchaseItemCost");
                table.Columns.Add("Quantity", typeof(double));
                table.Columns.Add("UnitPrice", typeof(double));
                table.Columns.Add("Amount", typeof(double));

                foreach (var item in lstPRItem)
                {
                    DataRow dr = table.NewRow();

                    dr["FunctionName"] = entityPR.FunctionName;
                    dr["BudgetOwnerName"] = entityPR.BudgetOwnerName;
                    dr["ChannelName"] = entityPR.ChannelName;
                    dr["BudgetChargedIn"] = entityPR.BudgetChargedIn == null ? string.Empty : entityPR.BudgetChargedIn.Value.ToShortDateString();
                    dr["From"] = entityPR.From == null ? string.Empty : entityPR.From.Value.ToShortDateString();
                    dr["To"] = entityPR.To == null ? string.Empty : entityPR.To.Value.ToShortDateString();
                    dr["SupplierName"] = entityPR.SupplierName;
                    dr["Description"] = entityPR.Description;

                    dr["Code"] = item.Code == null ? string.Empty : item.Code;
                    dr["CateCodeType"] = item.CateCodeType == null ? string.Empty : item.CateCodeType;
                    dr["Name"] = item.Name == null ? string.Empty : item.Name;
                    dr["ProjectName"] = item.ProjectName == null ? string.Empty : item.ProjectName;
                    dr["PurchaseItemName"] = item.PurchaseItemName == null ? string.Empty : item.PurchaseItemName;
                    dr["PurchaseItemCost"] = item.PurchaseItemCost == null ? string.Empty : item.PurchaseItemCost;
                    dr["Quantity"] = item.Quantity == null ? 0 : item.Quantity.Value;
                    dr["UnitPrice"] = item.UnitPrice == null ? 0 : item.UnitPrice.Value;
                    dr["Amount"] = item.Amount == null ? 0 : item.Amount.Value;
                    table.Rows.Add(dr);
                }
                var result = table;

                object obj = new Fin_PurchaseRequestModel();
                var isDataTable = false;

                if (isCreateTemplateForDynamicGrid)
                {
                    obj = result;
                    isDataTable = true;
                }
                if (isCreateTemplate)
                {
                    var path = Common.GetPath("Templates");
                    ExportService exportService = new ExportService();
                    ConfigExport cfgExport = new ConfigExport()
                    {
                        Object = obj,
                        FileName = "Fin_PurchaseRequestModel",
                        OutPutPath = path,
                        DownloadPath = Hrm_Main_Web + "Templates",
                        IsDataTable = isDataTable
                    };
                    var str = exportService.CreateTemplate(cfgExport);
                    return Json(str);
                }

            }
            if (exportID != null)
            {
                var fullPath = ExportService.Export((Guid)exportID, table, UserGuidID, exportFileType);
                return Json(fullPath);
            }

            return null;
        }

        public ActionResult ActionSubmitTravelRequestItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_TravelRequestService();
            services.ActionSubmit(selectedIds, status, userId);
            return Json("");
        }

        public ActionResult ActionApprovedTravelRequestItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_TravelRequestService();
            services.ActionApproved(selectedIds, status, userId);
            return Json("");

        }

        public ActionResult ActionSendMailTravelRequest(List<Guid> selectedIds, Guid userId, string host)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_TravelRequestService();
            var status = services.ProcessSendMailForFirstApprove(host, userId, selectedIds[0], UserLogin);
            return Json("");
        }

        public ActionResult ActionSendMailClaim(List<Guid> selectedIds, Guid userId, string host)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_ClaimService();
            var status = services.ProcessSendMailForFirstApprove(host, userId, selectedIds[0], UserLogin);
            return Json("");
        }

        public ActionResult ActionSendMailCashAdvance(List<Guid> selectedIds, Guid userId, string host)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_CashAdvanceService();
            var status = services.ProcessSendMailForFirstApprove(host, userId, selectedIds[0], UserLogin);
            return Json("");
        }

        public ActionResult ActionApprovedTravelRequestItemAll(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_TravelRequestService();
            services.ActionApprovedAll(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionApprovedClaimItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_ClaimItemService();
            services.ActionApproved(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionApprovedClaimItemAll(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_ClaimItemService();
            services.ActionApprovedAll(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionSubmitClaimItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_ClaimItemService();
            services.ActionSubmit(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionApprovedCashAdvanceItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_CashAdvanceService();
            services.ActionApproved(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionApprovedCashAdvanceItemAll(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_CashAdvanceService();
            services.ActionApprovedAll(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult ActionSubmitCashAdvanceItem(List<Guid> selectedIds, string status, Guid userId)
        {
            //List<Guid> lstHoldSalaryIDs = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
            var services = new FIN_CashAdvanceService();
            services.ActionSubmit(selectedIds, status, userId, UserLogin);
            return Json("");
        }

        public ActionResult GetApproverOfProfileList([DataSourceRequest] DataSourceRequest request, FIN_ApproverECLAIMSearchModel model)
        {
            //chỉ load những dữ liệu theo profileId
            if (model != null)
            {
                model.ProfileID = Common.DotNetToOracle(model.ProfileID);
            }
            if (model != null && model.ProfileID == null)
            {
                model.ProfileID = Common.DotNetToOracle(Guid.Empty.ToString());
            }
            return GetListDataAndReturn<FIN_ApproverECLAIMModel, FIN_ApproverECLAIMEntity, FIN_ApproverECLAIMSearchModel>(request, model, ConstantSql.hrm_fin_sp_get_ApproverECLAIM);
        }

        [HttpPost]
        public ActionResult ExportAllFIN_ApproverECLAIMList([DataSourceRequest] DataSourceRequest request, FIN_ApproverECLAIMSearchModel model)
        {

            if (model != null)
            {
                model.ProfileID = Common.DotNetToOracle(model.ProfileID);
            }

            //#region lay ds approver hiển thị trên 1 dòng ứng với profile

            var actionService = new ActionService(UserLogin);
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = int.MaxValue - 1,//request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var status = string.Empty;
            var urlDowLoad = string.Empty;
            var listEntity = actionService.GetData<FIN_ApproverECLAIMEntity>(lstModel, ConstantSql.hrm_fin_sp_get_ApproverECLAIM, ref status).ToList();
            if (model.OrderNo.HasValue)
            {
                listEntity = listEntity.Where(s => s.OrderNo != null && s.OrderNo.Value == model.OrderNo.Value).ToList();
            }
            if (listEntity != null)
            {
                // request.Page = 1;
                //var listModel = listEntity.Translate<FIN_ApproverECLAIMModel>();
                var listModel = listEntity;
                var profileIds = listModel.GroupBy(p => new { p.ProfileID, p.ApprovedType }).ToList();
                var approverReturn = new List<FIN_ApproverECLAIMModel>();
                var approverNames = string.Empty;
                foreach (var profileId in profileIds)
                {
                    var approvers = listModel.Where(p => p.ProfileID == profileId.Key.ProfileID && p.ApprovedType == profileId.Key.ApprovedType).OrderBy(p => p.OrderNo).ToList();
                    var approver = approvers.FirstOrDefault();
                    approverNames = string.Empty;
                    foreach (var finApproverModel in approvers)
                    {
                        approverNames += finApproverModel.OrderNo + " - " + finApproverModel.ApprovedName + " , ";
                    }
                    var fin = new FIN_ApproverECLAIMModel();
                    if (approver != null)
                    {
                        fin.ID = approver.ID;
                        fin.ProfileName = approver.ProfileName;
                        fin.ApprovedType = approver.ApprovedType;
                        fin.ApprovedTypeView = approver.ApprovedTypeView;
                        fin.ProfileID = profileId.Key.ProfileID;
                    }
                    fin.ApprovedName = approverNames.Substring(0, approverNames.Length - 2);
                    approverReturn.Add(fin);
                }


                var dataSourceResult = approverReturn.ToDataSourceResult(request);
                dataSourceResult.Total = approverReturn.Count();
                urlDowLoad = ExportService.Export(approverReturn, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
                return Json(urlDowLoad, JsonRequestBehavior.AllowGet);
            }

            return Json(string.Empty, JsonRequestBehavior.AllowGet);
            //return ExportAllAndReturn<FIN_ApproverECLAIMEntity, FIN_ApproverECLAIMModel, FIN_ApproverECLAIMSearchModel>(request, model, ConstantSql.hrm_fin_sp_get_ApproverECLAIM);
        }

        public ActionResult GetApproverList([DataSourceRequest] DataSourceRequest request, FIN_ApproverECLAIMSearchModel model)
        {
            if (model != null)
            {
                model.ProfileID = Common.DotNetToOracle(model.ProfileID);
            }

            //#region lay ds approver hiển thị trên 1 dòng ứng với profile

            var actionService = new ActionService(UserLogin);
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = int.MaxValue - 1,//request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var status = string.Empty;
            var listEntity = actionService.GetData<FIN_ApproverECLAIMEntity>(lstModel, ConstantSql.hrm_fin_sp_get_ApproverECLAIM, ref status).ToList();
            if (model.OrderNo.HasValue)
            {
                listEntity = listEntity.Where(s => s.OrderNo != null && s.OrderNo.Value == model.OrderNo.Value).ToList();
            }
            if (listEntity != null)
            {
                // request.Page = 1;
                //var listModel = listEntity.Translate<FIN_ApproverECLAIMModel>();
                var listModel = listEntity;
                var profileIds = listModel.GroupBy(p => new { p.ProfileID, p.ApprovedType }).ToList();
                var approverReturn = new List<FIN_ApproverECLAIMModel>();
                var approverNames = string.Empty;
                foreach (var profileId in profileIds)
                {
                    var approvers = listModel.Where(p => p.ProfileID == profileId.Key.ProfileID && p.ApprovedType == profileId.Key.ApprovedType).OrderBy(p => p.OrderNo).ToList();
                    var approver = approvers.FirstOrDefault();
                    approverNames = string.Empty;
                    foreach (var finApproverModel in approvers)
                    {
                        approverNames += finApproverModel.OrderNo + " - " + finApproverModel.ApprovedName + " , ";
                    }
                    var fin = new FIN_ApproverECLAIMModel();
                    if (approver != null)
                    {
                        fin.ID = approver.ID;
                        fin.ProfileName = approver.ProfileName;
                        fin.ApprovedType = approver.ApprovedType;
                        fin.ApprovedTypeView = approver.ApprovedTypeView.TranslateString(); //[03/11/2015][Phuc.Nguyen][Bug][0059482] Dịch enum
                        fin.ProfileID = profileId.Key.ProfileID;
                    }
                    fin.ApprovedName = approverNames.Substring(0, approverNames.Length - 2);
                    approverReturn.Add(fin);
                }


                var dataSourceResult = approverReturn.ToDataSourceResult(request);
                dataSourceResult.Total = approverReturn.Count();
                return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
            }
            var listModelNull = new List<FIN_ApproverECLAIMModel>();
            ModelState.AddModelError("Id", status);
            return Json(listModelNull.ToDataSourceResult(request, ModelState));
        }

        [HttpPost]
        public ActionResult DeleteApproverByProfile(string id)
        {
            var service1 = new FIN_ApproverECLAIMService();
            var result = service1.DeleteListApprover(id);
            var result1 = result.CopyData<FIN_ApproverECLAIMModel>();
            return Json(result1);
        }
        #endregion

        #region Hre_PotentialPosition
        [HttpPost]
        public ActionResult ExportPotentialPositionByTemplate([DataSourceRequest] DataSourceRequest request, Hre_PotentialPositionSearchListModel model)
        {
            {
                string status = string.Empty;
                var isDataTable = false;
                var service = new BaseService();
                object obj = new Hre_PotentialPositionModel();
                ListQueryModel lstModel = new ListQueryModel
                {
                    PageSize = int.MaxValue - 1,
                    PageIndex = 1,
                    Filters = ExtractFilterAttributes(request),
                    Sorts = ExtractSortAttributes(request),
                    AdvanceFilters = ExtractAdvanceFilterAttributes(model)
                };
                var result = new List<Hre_PotentialPositionModel>();
                if (model != null && !model.IsCreateTemplate)
                {
                    result = GetListData<Hre_PotentialPositionModel, Hre_PotentialPositionEntity, Hre_PotentialPositionSearchListModel>(request, model, ConstantSql.hrm_hr_sp_get_PotentialPosition, ref status);
                }

                if (model.IsCreateTemplateForDynamicGrid)
                {
                    obj = result;
                    isDataTable = false;
                }
                if (model != null && model.IsCreateTemplate)
                {
                    var path = Common.GetPath("Templates");
                    ExportService exportService = new ExportService();
                    ConfigExport cfgExport = new ConfigExport()
                    {
                        Object = obj,
                        FileName = "Hre_PotentialPositionModel",
                        OutPutPath = path,
                        DownloadPath = Hrm_Main_Web + "Templates",
                        IsDataTable = isDataTable
                    };
                    var str = exportService.CreateTemplate(cfgExport);
                    return Json(str);
                }

                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }
                return Json(result.ToDataSourceResult(request));
            }
        }

        [HttpPost]
        public ActionResult CreateHreReward(Hre_RewardModel model)
        {
            Hre_ProfileServices _ser = new Hre_ProfileServices();
            var ActionStatus = _ser.CreateHreReward(model.ProfileIDs, model.RewardedTypeID, model.MonthOfEffect.Value, model.Reason, model.Description);
            return Json(ActionStatus, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult GetRewardPlanningList([DataSourceRequest] DataSourceRequest request, Hre_RewardPlanningSearchModel model)
        {
            Hre_ProfileServices _ser = new Hre_ProfileServices();
            var dt = _ser.GetRewardPlanningList(model.OrgStructureID, model.YearExperienceFrom, model.YearExperienceTo, model.PositionIDs, model.RewardTypeID, model.MajorIDs,
                model.SubMajorIDs, model.EducationLevelIDs, model.SkillIDs, model.LevelFrom, model.LevelTo, model.CourseIDs, model.ScoreFrom, model.ScoreTo, model.PerformancePlanIDs, model.TotalMarkFrom, model.TotalMarkTo, model.MonthOfEffect);
            return Json(dt.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetSuccessionPlanningList([DataSourceRequest] DataSourceRequest request, Hre_SuccessionPlanningSearchModel model)
        {
            // return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_SuccessionPlanningSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileSuccessionPlanning);
            Hre_ProfileServices _ser = new Hre_ProfileServices();
            var dt = _ser.GetSuccessionPlanningList(model.PositionID, model.OrgStructureID, model.Gender, model.AgeFrom, model.AgeTo, model.YearExperienceFrom, model.YearExperienceTo, model.PositionIDs,
                model.RewardTypeID, model.MajorIDs, model.SubMajorIDs, model.EducationLevelIDs, model.SkillIDs, model.LevelFrom, model.LevelTo, model.CourseIDs, model.ScoreFrom, model.ScoreTo);
            return Json(dt.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult CheckDataSuccessionPlanningList(Hre_SuccessionPlanningSearchModel model)
        {
            Hre_ProfileServices _ser = new Hre_ProfileServices();
            var dt = _ser.CheckDataSuccessionPlanningList(model.PositionID, model.OrgStructureID, model.Gender, model.AgeFrom, model.AgeTo, model.YearExperienceFrom, model.YearExperienceTo, model.PositionIDs,
                model.RewardTypeID, model.MajorIDs, model.SubMajorIDs, model.EducationLevelIDs, model.SkillIDs, model.LevelFrom, model.LevelTo, model.CourseIDs, model.ScoreFrom, model.ScoreTo, model.ProfileIds.FirstOrDefault());
            return Json(dt, JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public ActionResult AssignToPotentialPosition(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.AssignToPotentialPosition(selectedIds);
            return Json(message);
        }

        [HttpPost]
        public ActionResult AddSuccessionPlanningReward([Bind]Hre_RewardModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstIDs = new List<Guid>();
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }
            var lstRewardAdd = new List<Hre_RewardEntity>();
            var rewardServices = new Hre_RewardServices();
            foreach (var profileID in lstIDs)
            {
                var rewardEntity = new Hre_RewardEntity();
                rewardEntity.ProfileID = profileID;
                rewardEntity.DateOfIssuance = model.DateOfIssuance;
                rewardEntity.DateOfEffective = model.DateOfEffective;
                rewardEntity.RewardedTypeID = model.RewardedTypeID;
                rewardEntity.RewardValue = model.RewardValue;
                rewardEntity.NoOfReward = model.NoOfReward;
                rewardEntity.RequesterID = model.RequesterID;
                rewardEntity.UserApproveID = model.UserApproveID;
                rewardEntity.Reason = model.Reason;
                rewardEntity.Description = model.Description;
                message = rewardServices.Add(rewardEntity);

            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public string ValidateSuccessionPlanningReward([DataSourceRequest] DataSourceRequest request, Hre_RewardModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_RewardModel>(LanguageCode, model, "Hre_Reward_SuccessionPlanning", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        public string ValidateSuccessionPlanningPosition([DataSourceRequest] DataSourceRequest request, Hre_PotentialPositionModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_PotentialPositionModel>(LanguageCode, model, "Hre_SuccessionPlanningPosition", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult AddSuccessionPlanningPosition([Bind]Hre_PotentialPositionModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstIDs = new List<Guid>();
            if (model.selectedIds1 != null && model.selectedIds1.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds1.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds1);
                lstIDs.Add(convertProfileID);
            }
            var lstRewardAdd = new List<Hre_RewardEntity>();
            var profileServices = new Hre_ProfileServices();
            foreach (var profileID in lstIDs)
            {
                var profileData = profileServices.GetProfileDataByID(profileID);
                if (profileData != null)
                {
                    var profilePotential = new Hre_PotentialPositionEntity();
                    profilePotential.ProfileID = profileID;
                    profilePotential.OrganizationStructureID = profileData.OrgStructureID;
                    profilePotential.DateEffective = profileData.DateOfEffect;
                    profilePotential.CostCentreID = profileData.CostCentreID;
                    profilePotential.EmployeeTypeID = profileData.EmpTypeID;
                    profilePotential.PayrollGroupID = profileData.PayrollGroupID;
                    profilePotential.JobDescription = profileData.JobDescription;
                    profilePotential.Permission = profileData.Permission;
                    profilePotential.TaskShortTerm = profileData.TaskShortTerm;
                    profilePotential.TaskLongTerm = profileData.TaskLongTerm;
                    profilePotential.JobTitleID = model.JobTitleID;
                    profilePotential.PositionID = model.PositionID;
                    profilePotential.RequirCondit = model.RequirCondit;
                    profilePotential.Description = model.Description;
                    message = profileServices.Add(profilePotential);
                }

            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetPotentialPositionList([DataSourceRequest] DataSourceRequest request, Hre_PotentialPositionSearchListModel model)
        {
            return GetListDataAndReturn<Hre_PotentialPositionEntity, Hre_PotentialPositionModel, Hre_PotentialPositionSearchListModel>(request, model, ConstantSql.hrm_hr_sp_get_PotentialPosition);
        }

        public string ValidateUpdatePotentialPosition([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_WorkHistoryModel>(LanguageCode, model, "Hre_UpdatePotentialPosition", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult UpdatePotentialPosition([Bind]Hre_WorkHistoryModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var lstIDs = new List<Guid>();
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }
            var workhistoryServices = new Hre_WorkHistoryServices();
            message = workhistoryServices.UpdatePotentialPosition(lstIDs,
                model.DateEffective,
                model.TypeOfTransferID,
                model.OrganizationStructureID.Value,
                model.JobTitleID,
                model.Description);
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Hre_ActualSkill
        [HttpPost]
        public ActionResult GetDateEndActualSkillFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSTOPWORKINGFROM = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEXPIRYCOMPETENCEFROM);
            if (_DAYSTOPWORKINGFROM >= 0)
            {
                DateFrom = DateTo.AddDays(-_DAYSTOPWORKINGFROM);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateEndActualSkillToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _DAYSTOPWORKINGTO = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEXPIRYCOMPETENCETO);
            if (_DAYSTOPWORKINGTO >= 0)
            {
                DateFrom = DateTo.AddDays(_DAYSTOPWORKINGTO);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetActualSkillList([DataSourceRequest] DataSourceRequest request, Hre_ActualSkillSearchModel model)
        {
            return GetListDataAndReturn<Hre_ActualSkillModel, Hre_ActualSkillEntity, Hre_ActualSkillSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ActualSkill);
        }

        [HttpPost]
        public ActionResult ExportActualSkillList([DataSourceRequest] DataSourceRequest request, Hre_ActualSkillSearchModel model)
        {
            return ExportAllAndReturn<Hre_ActualSkillEntity, Hre_ActualSkillModel, Hre_ActualSkillSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ActualSkill);
        }
        #endregion

        #region Hre_ReqDocument
        [HttpPost]
        public ActionResult CheckDuplicateReqdocument(Guid? relativeId)
        {
            if (relativeId != null)
            {
                var actionService = new ActionService(UserLogin);
                var result = new List<object>();
                string status = string.Empty;
                var relativeEntity = actionService.GetData<Cat_RelativeTypeEntity>(relativeId, ConstantSql.hrm_cat_sp_get_RelativesTypeById, ref status).FirstOrDefault();
                var objRequirment = new List<object>();
                objRequirment.AddRange(new object[4]);
                objRequirment[2] = 1;
                objRequirment[3] = int.MaxValue - 1;
                var lstRequirment = actionService.GetData<Cat_ReqDocumentEntity>(objRequirment, ConstantSql.hrm_cat_sp_get_ReqDocument, ref status);
                var lstData = new List<string>();
                if (relativeEntity != null)
                {
                    if (!string.IsNullOrEmpty(relativeEntity.ReqDocumnetIDs))
                    {
                        string[] lstIds = null;
                        lstIds = relativeEntity.ReqDocumnetIDs.Split(',').Select(s => s).ToArray();
                        if (lstIds != null)
                        {
                            lstRequirment = lstRequirment.Where(s => lstIds.Contains(s.Code)).ToList();
                            lstData = lstRequirment.Select(s => s.Code).ToList();
                        }
                    }
                }
                return Json(lstData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult CheckDuplicateReqdocumentInfo(string reqDocumentType)
        {
            if (!string.IsNullOrEmpty(reqDocumentType))
            {
                var actionService = new ActionService(UserLogin, LanguageCode);
                var result = new List<object>();
                string status = string.Empty;
                var objRequirment = new List<object>();
                objRequirment.AddRange(new object[3]);
                objRequirment[0] = reqDocumentType;
                objRequirment[1] = 1;
                objRequirment[2] = int.MaxValue - 1;
                var reqdocumentEntity = actionService.GetData<Cat_ReqDocumentEntity>(objRequirment, ConstantSql.hrm_cat_sp_get_ReqDocumentList, ref status);
                if (reqdocumentEntity != null)
                {
                    return Json(reqdocumentEntity);
                }
            }
            return null;
        }

        public ActionResult GetHre_ReqDocumentByProfileID([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(profileID);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_ReqDocumentEntity>(objs, ConstantSql.hrm_hre_sp_get_ReqDocumentByProfileID, ref status);
                var objRequirment = new List<object>();
                objRequirment.AddRange(new object[4]);
                objRequirment[2] = 1;
                objRequirment[3] = int.MaxValue - 1;
                var lstRequirment = actionService.GetData<Cat_ReqDocumentEntity>(objRequirment, ConstantSql.hrm_cat_sp_get_ReqDocument, ref status);
                var lstData = new List<string>();
                var lstResult = new List<Hre_ReqDocumentEntity>();
                if (result != null)
                {
                    foreach (var entity in result)
                    {
                        if (!string.IsNullOrEmpty(entity.ReqDocumentCode))
                        {
                            string[] listid = null;
                            listid = entity.ReqDocumentCode.Split(',').Select(s => s).ToArray();
                            if (listid != null)
                            {
                                var lstRequirmentName = lstRequirment.Where(s => listid.Contains(s.Code)).Select(s => s.ReqDocumentName).ToList();
                                entity.ReqDocumentName = string.Join(",", lstRequirmentName);
                            }

                        }
                        lstResult.Add(entity);
                    }
                }
                return Json(lstResult.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        public JsonResult GetStoreDocumentByCode(string codeDocument)
        {
            if (codeDocument != "")
            {
                codeDocument = codeDocument.Replace(" ", "");
            }
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var result = actionService.GetData<Cat_ReqDocumentEntity>(codeDocument, ConstantSql.hrm_cat_sp_get_StoreDocumentByCode, ref status);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        // Son.Vo - 20151201
        [HttpPost]
        public ActionResult GetReqDocumentForEditByProfile([DataSourceRequest] DataSourceRequest request, Guid? profileID)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(profileID);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_ReqDocumentEntity>(objs, ConstantSql.hrm_hre_sp_get_ReqDocumentByProfileID, ref status);
                var objRequirment = new List<object>();
                objRequirment.AddRange(new object[4]);
                objRequirment[2] = 1;
                objRequirment[3] = int.MaxValue - 1;
                var lstRequirment = actionService.GetData<Cat_ReqDocumentEntity>(objRequirment, ConstantSql.hrm_cat_sp_get_ReqDocument, ref status);
                var lstData = new List<string>();
                var lstResult = new List<Hre_ReqDocumentEntity>();
                if (result != null)
                {
                    var lstReqCodeOfProfile = new List<string>();
                    foreach (var entity in result)
                    {
                        if (!string.IsNullOrEmpty(entity.ReqDocumentCode))
                        {
                            List<string> listCode = null;
                            listCode = entity.ReqDocumentCode.Split(',').Select(s => s).ToList();
                            lstReqCodeOfProfile.AddRange(listCode);
                            if (listCode != null)
                            {
                                var lstRequirmentName = lstRequirment.Where(s => listCode.Contains(s.Code)).Select(s => s.ReqDocumentName).ToList();
                                entity.ReqDocumentName = string.Join(",", lstRequirmentName);
                            }

                        }
                        lstResult.Add(entity);
                    }

                    var listReqCodeNotInProfile = lstRequirment.Where(s => !lstReqCodeOfProfile.Contains(s.Code)).ToList();
                    foreach (var item in listReqCodeNotInProfile)
                    {
                        var ReqDocumentEntity = new Hre_ReqDocumentEntity();
                        ReqDocumentEntity.ReqDocumentCode = item.Code;
                        ReqDocumentEntity.ReqDocumentName = item.ReqDocumentName;
                        ReqDocumentEntity.CodeEmp = item.Code;
                        ReqDocumentEntity.ProfileID = profileID;
                        lstResult.Add(ReqDocumentEntity);
                    }
                }
                if (lstResult == null)
                {
                    lstResult = new List<Hre_ReqDocumentEntity>();
                }
                var dataSourceResult = lstResult.ToDataSourceResult(request);
                var serializer = new JavaScriptSerializer();
                var returnresult = new ContentResult();
                serializer.MaxJsonLength = Int32.MaxValue;
                returnresult.Content = serializer.Serialize(dataSourceResult);
                returnresult.ContentType = "application/json";
                return returnresult;
            }
            return null;
        }
        #endregion

        #region Hre_PlanHeadCount
        //Quyen.Quach Kiểm tra định biên NV
        #region Quyen.Quach 03/08/2017 - 0084005 - Kiểm tra định biên NV
        public string GetConfigTypePlanHeadCount()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            string status = string.Empty;
            var _CheckTypehead = Sys_Services.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_MANAGEHEADCOUNTCONFIG);
            if (_CheckTypehead != null)
            {
                return _CheckTypehead;
            }
            return null;
        }

        public ActionResult GetSelectedProfileIDByOrgStucture([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryModel model, string listprofile)
        {
            string status = string.Empty;
            var lstProfileID = new List<Guid>();
            var actionService = new ActionService(UserLogin);
            #region Xử lý khi chọn nhân viên or phòng ban
            if (!string.IsNullOrEmpty(model.ProfileIds) && model.OrgStructureIDs == null)
            {
                var lstProfileIds = model.ProfileIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfileID.AddRange(lstProfileIds);
            }
            if (!string.IsNullOrEmpty(model.OrgStructureIDs))
            {
                var listGuid = new List<Guid>();
                if (model.ProfileIds != null)
                {
                    var listStr = model.ProfileIds.Split(',');

                    if (listStr[0] != "")
                    {
                        foreach (var item in listStr)
                        {
                            listGuid.Add(Guid.Parse(item));
                        }
                    }
                }
                var listObj = new List<object>();
                listObj.Add(model.OrgStructureIDs);
                listObj.Add(string.Empty);
                listObj.Add(string.Empty);
                var lstProfileids = actionService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgStructure, ref status).Select(s => s.ID).ToList();
                if (listGuid != null)
                {
                    lstProfileids = lstProfileids.Where(s => !listGuid.Contains(s)).ToList();
                    lstProfileID.AddRange(lstProfileids);
                }
            }
            //return Json(lstProfileID.ToDataSourceResult(request));
            listprofile = string.Join(",", lstProfileID);
            #endregion
            return CheckValidateHeadCount(listprofile, model.DateEffective, model.OrganizationStructureID, model.PositionID, model.SalaryClassID, model.JobTitleID, model.EmployeeTypeID, model.WorkPlaceID, model.CostCentreID, model.RegionID);
        }

        public ActionResult CheckValidateHeadCount(string selectedid, DateTime? dateeffect, Guid? OrganizationStructureID, Guid? PositionID, Guid? SalaryClassID,
            Guid? JobTitleID, Guid? EmployeeTypeID, Guid? WorkPlaceID, Guid? CostCentreID, Guid? RegionID)
        {
            var _PlanHeadCountServices = new Hre_PlanHeadCountServices();
            Boolean ischeck = _PlanHeadCountServices.CheckValidateHeadCount(selectedid, dateeffect, OrganizationStructureID, PositionID, SalaryClassID, JobTitleID, EmployeeTypeID, WorkPlaceID, CostCentreID, RegionID);
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public bool IsAlertForTypeIfNumberOfEmpExceedPlan()
        {
            bool status = false;
            var _Hre_PlanHeadCountServices = new Hre_PlanHeadCountServices();
            var _lstplanheadcount = _Hre_PlanHeadCountServices.getLstPlanheadCount();
            if (_lstplanheadcount != null)
            {
                var lstcheckeplexible = _lstplanheadcount.Where(s => s.Type == HeadType.E_FLEXIBLE.ToString()).ToList();
                if (lstcheckeplexible.Count > 0)
                {
                    status = true;
                    return status;
                }
            }
            return status;
        }
        #endregion
        public ActionResult SavePlanHeadCount([Bind(Prefix = "Model")] Hre_PlanHeadCountModel model, [Bind(Prefix = "Modeldetail")] List<Hre_PlanHeadCountModel> modeldetail)
        {
            string message = string.Empty;
            if (modeldetail == null)
            {
                message = ConstantDisplay.HRM_Common_Eva_NoData.TranslateString();
                return Json(message);
            }
            var result = new List<Hre_PlanHeadCountEntity>();
            var entity = model.Copy<Hre_PlanHeadCountEntity>();
            var headcountServices = new Hre_PlanHeadCountServices();
            if (modeldetail != null && modeldetail.Count > 0)
            {
                message = headcountServices.SavePlanHeadCountAndHistory(entity, modeldetail.Translate<Hre_PlanHeadCountEntity>());
                #region
                //var lstHeadcount = new List<Hre_PlanHeadCountEntity>();
                //var lstHeadcountHistory = new List<Hre_PlanHeadCountHistoryEntity>();
                //foreach (var PlanHeadCount in modeldetail)
                //{
                //    //var PlanHeadCountEntity = new Hre_PlanHeadCountEntity();
                //    //PlanHeadCountEntity.ID = Guid.NewGuid();
                //    //PlanHeadCountEntity.Year = PlanHeadCount.Year;
                //    //PlanHeadCountEntity.DateEffective = PlanHeadCount.DateEffective;
                //    //PlanHeadCountEntity.OrgStructureID = PlanHeadCount.OrgStructureID;
                //    //PlanHeadCountEntity.PostionID = PlanHeadCount.PostionID;
                //    //PlanHeadCountEntity.SalaryClassID = PlanHeadCount.SalaryClassID;
                //    //PlanHeadCountEntity.HrPlanHC1 = PlanHeadCount.HrPlanHC1;
                //    //PlanHeadCountEntity.HrPlanHC2 = PlanHeadCount.HrPlanHC2;
                //    //PlanHeadCountEntity.HrPlanHC3 = PlanHeadCount.HrPlanHC3;
                //    //PlanHeadCountEntity.HrPlanHC4 = PlanHeadCount.HrPlanHC4;
                //    //PlanHeadCountEntity.HrPlanHC5 = PlanHeadCount.HrPlanHC5;
                //    //PlanHeadCountEntity.HrPlanHC6 = PlanHeadCount.HrPlanHC6;
                //    //PlanHeadCountEntity.HrPlanHC7 = PlanHeadCount.HrPlanHC7;
                //    //PlanHeadCountEntity.HrPlanHC8 = PlanHeadCount.HrPlanHC8;
                //    //PlanHeadCountEntity.HrPlanHC9 = PlanHeadCount.HrPlanHC9;
                //    //PlanHeadCountEntity.HrPlanHC10 = PlanHeadCount.HrPlanHC10;
                //    //PlanHeadCountEntity.HrPlanHC11 = PlanHeadCount.HrPlanHC11;
                //    //PlanHeadCountEntity.HrPlanHC12 = PlanHeadCount.HrPlanHC12;
                //    //lstHeadcount.Add(PlanHeadCountEntity);
                //    //// tao lich su dinh bien
                //    ////var _salarybasic = new Cat_SalaryClassMultiEntity();
                //    //var PlanHeadCountHistoryEntity = new Hre_PlanHeadCountHistoryEntity();
                //    //PlanHeadCountHistoryEntity.PlanHeadCountID = PlanHeadCountEntity.ID;
                //    //PlanHeadCountHistoryEntity.Year = PlanHeadCount.Year;
                //    //PlanHeadCountHistoryEntity.DateEffective = PlanHeadCount.DateEffective;
                //    //PlanHeadCountHistoryEntity.OrgStructureID = PlanHeadCount.OrgStructureID;
                //    //PlanHeadCountHistoryEntity.PostionID = PlanHeadCount.PostionID;
                //    ////PlanHeadCountHistoryEntity.SalaryClassID = _salarybasic.ID;
                //    //PlanHeadCountHistoryEntity.SalaryClassID = PlanHeadCount.SalaryClassID;
                //    //PlanHeadCountHistoryEntity.HrPlanHC1 = PlanHeadCount.HrPlanHC1;
                //    //PlanHeadCountHistoryEntity.HrPlanHC2 = PlanHeadCount.HrPlanHC2;
                //    //PlanHeadCountHistoryEntity.HrPlanHC3 = PlanHeadCount.HrPlanHC3;
                //    //PlanHeadCountHistoryEntity.HrPlanHC4 = PlanHeadCount.HrPlanHC4;
                //    //PlanHeadCountHistoryEntity.HrPlanHC5 = PlanHeadCount.HrPlanHC5;
                //    //PlanHeadCountHistoryEntity.HrPlanHC6 = PlanHeadCount.HrPlanHC6;
                //    //PlanHeadCountHistoryEntity.HrPlanHC7 = PlanHeadCount.HrPlanHC7;
                //    //PlanHeadCountHistoryEntity.HrPlanHC8 = PlanHeadCount.HrPlanHC8;
                //    //PlanHeadCountHistoryEntity.HrPlanHC9 = PlanHeadCount.HrPlanHC9;
                //    //PlanHeadCountHistoryEntity.HrPlanHC10 = PlanHeadCount.HrPlanHC10;
                //    //PlanHeadCountHistoryEntity.HrPlanHC11 = PlanHeadCount.HrPlanHC11;
                //    //PlanHeadCountHistoryEntity.HrPlanHC12 = PlanHeadCount.HrPlanHC12;
                //    //lstHeadcountHistory.Add(PlanHeadCountHistoryEntity);
                //}
                //message = headcountServices.Add(lstHeadcount.ToArray());
                //message = headcountServices.Add(lstHeadcountHistory.ToArray());
                #endregion
            }
            return Json(message);
        }

        public ActionResult CheckDuplicatePlanHeadCount([Bind(Prefix = "Model")] Hre_PlanHeadCountModel model, [Bind(Prefix = "Modeldetail")] List<Hre_PlanHeadCountModel> modeldetail)
        {
            string message = string.Empty;
            var _PlanHeadCountServices = new Hre_PlanHeadCountServices();
            if (model.Year == null || model.Year == 0)
            {
                message = ConstantDisplay.HRM_HR_YearNotNull.TranslateString();
                return Json(message);
            }
            if (model.DateEffective == null)
            {
                message = ConstantDisplay.HRM_HR_PositionNotNull.TranslateString();
                return Json(message);
            }
            var lstPosition = new List<Guid>();
            if (model.PostionID != null)
            {
                lstPosition.Add(model.PostionID.Value);
            }
            if (modeldetail != null)
            {
                var lstHeadCountByYear = modeldetail.Where(s => s.Year == model.Year && s.SalaryClassID == model.SalaryClassID
                    && s.OrgStructureID == model.OrgStructureID
                    && (
                    (s.PostionID != null && s.PostionID == model.PostionID)
                    || (s.PostionID == null && model.PostionID == null)
                    )
                     && (
                    (s.JobTitleID != null && s.JobTitleID == model.JobTitleID)
                    || (s.JobTitleID == null && model.JobTitleID == null)
                    )
                     && (
                    (s.EmployeeTypeID != null && s.EmployeeTypeID == model.EmployeeTypeID)
                    || (s.EmployeeTypeID == null && model.EmployeeTypeID == null)
                    )
                     && (
                    (s.WorkPlaceID != null && s.WorkPlaceID == model.WorkPlaceID)
                    || (s.WorkPlaceID == null && model.WorkPlaceID == null)
                    )
                     && (
                    (s.CostCentreID != null && s.CostCentreID == model.CostCentreID)
                    || (s.CostCentreID == null && model.CostCentreID == null)
                    )
                      && (
                    (s.RegionID != null && s.RegionID == model.RegionID)
                    || (s.RegionID == null && model.RegionID == null)
                    )
                    ).ToList();
                if (lstHeadCountByYear.Count > 0)
                {
                    message = ConstantDisplay.HRM_HR_DupPlanheadcount.TranslateString();
                    return Json(message);
                }

                var entity = model.CopyData<Hre_PlanHeadCountEntity>();
                message = _PlanHeadCountServices.CheckDuplicateHeadCount(entity, lstPosition);
                return Json(message);
            }
            else
            {
                var entity = model.CopyData<Hre_PlanHeadCountEntity>();
                message = _PlanHeadCountServices.CheckDuplicateHeadCount(entity, lstPosition);
                return Json(message);
            }
        }

        public ActionResult CheckDuplicatePlanHeadCountV2(int? year, DateTime? dateEffective)
        {
            string message = string.Empty;
            var _PlanHeadCountServices = new Hre_PlanHeadCountServices();
            if (year == null || year == 0)
            {
                message = ConstantDisplay.HRM_HR_YearNotNull.TranslateString();
                return Json(message);
            }
            if (dateEffective == null)
            {
                message = ConstantDisplay.HRM_HR_PositionNotNull.TranslateString();
                return Json(message);
            }
            else
            {
                return Json(message);
            }
        }

        public ActionResult AnalysisPlanHeadCountV2List([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountModel model)
        {
            string message = string.Empty;
            var _PlanHeadCountServices = new Hre_PlanHeadCountServices();
            if (model.Year == null || model.Year == 0)
            {
                message = ConstantDisplay.HRM_HR_YearNotNull.TranslateString();
                return Json(message);
            }
            if (model.DateEffective == null)
            {
                message = ConstantDisplay.HRM_HR_PositionNotNull.TranslateString();
                return Json(message);
            }
            var result = _PlanHeadCountServices.AnalysisPlanHeadCountV2List(model.CopyData<Hre_PlanHeadCountEntity>());
            var dataSourceResult = result.ToDataSourceResult(request);
            if (result.Count >= 0)
            {
                dataSourceResult.Total = result.Count() <= 0 ? 0 : (int)result.Count;
            }
            return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
        }

        //Son.Vo - 20160525 - 0067732
        public string GetStrdayEndFinance(int? year)
        {
            string strdayEndFinance = string.Empty;
            if (year != null)
            {
                var _Services = new Sys_AttOvertimePermitConfigServices();
                var dayEndFinance = _Services.GetConfigValue<DateTime?>(AppConfig.HRM_EVA_CONFIG_DAYENDYEARFINANCE);
                if (dayEndFinance != null)
                {
                    dayEndFinance = new DateTime(year.Value, dayEndFinance.Value.Month, dayEndFinance.Value.Day);
                    strdayEndFinance = dayEndFinance.Value.AddDays(1).ToString("dd/MM/yyyy") + " - " + dayEndFinance.Value.AddYears(1).ToString("dd/MM/yyyy");
                }
                else
                {
                    dayEndFinance = new DateTime(year.Value, 1, 1);
                    DateTime dayEndFinance2 = new DateTime(year.Value, 12, DateTime.DaysInMonth(year.Value, 12));
                    strdayEndFinance = dayEndFinance.Value.ToString("dd/MM/yyyy") + " - " + dayEndFinance2.ToString("dd/MM/yyyy");
                }
            }
            return strdayEndFinance;
        }

        public JsonResult GetMultiPlanHeadCount(string text)
        {
            return GetDataForControl<Hre_PlanHeadCountMultiModel, Hre_PlanHeadCountMultiEntity>(text, ConstantSql.hrm_hr_sp_get_PlanHeadCount_Multi);
        }

        public ActionResult GetPlanHeadCountList([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountSearchEXModel model)
        {
            var services = new ActionService(UserLogin, LanguageCode);
            var result = new List<Hre_PlanHeadCountEntity>();
            string status = string.Empty;
            #region Tao mau xuat bao cao
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_PlanHeadCountEntity(),
                    FileName = "Hre_PlanHeadCountEntity",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            if (model.ExportId != null && model.ExportId != Guid.Empty)
            {
                request.Page = 1;
                request.PageSize = int.MaxValue - 1;
            }
            var objt = new List<object>();
            objt.AddRange(new object[9]);
            objt[0] = model.PlanName;
            objt[1] = model.OrgStructureID;
            objt[2] = model.PositionIDs;
            objt[3] = model.DateFromStart;
            objt[4] = model.DateFromEnd;
            objt[5] = model.DateToStart;
            objt[6] = model.DateToEnd;
            objt[7] = request.Page;
            objt[8] = request.PageSize;
            result = services.GetData<Hre_PlanHeadCountEntity>(objt, ConstantSql.hrm_hr_sp_get_PlanHeadCount, ref status);
            if (result != null)
            {
                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }

                request.Page = 1;
                var dataSourceResult = result.ToDataSourceResult(request);
                if (result.FirstOrDefault().GetPropertyValue("TotalRow") != null)
                {
                    dataSourceResult.Total = (int)result.FirstOrDefault().GetPropertyValue("TotalRow") == 0 ? result.Count : (int)result.FirstOrDefault().GetPropertyValue("TotalRow");
                }
                return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
            }
            return Json(result);
            //return GetListDataAndReturn<Hre_PlanHeadCountModel, Hre_PlanHeadCountEntity, Hre_PlanHeadCountSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PlanHeadCount);
        }
        public ActionResult ExportReportPlanHeadCountSelected([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountSearchEXModel model)
        {
            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);
            var services = new BaseService();
            var result = service.GetData<Hre_PlanHeadCountEntity>(model.PlanHeadCountID, ConstantSql.hrm_hr_sp_get_PlanHeadCountByIds, ref status);
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        public ActionResult ExportPlanHeadCountList([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountSearchModel model)
        {
            return ExportAllAndReturn<Hre_PlanHeadCountEntity, Hre_PlanHeadCountModel, Hre_PlanHeadCountSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PlanHeadCount);
        }
        public ActionResult ExportPlanHeadCountSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_PlanHeadCountEntity, Hre_PlanHeadCountModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_PlanHeadCountByIds);
        }

        [HttpPost]
        public ActionResult GetLstHrPlanHCByOrgStructureID(Guid orgID, string HrPlanHCFilter)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var lstObjPlanHC = new List<object>();
            lstObjPlanHC.Add(null);
            lstObjPlanHC.Add(1);
            lstObjPlanHC.Add(int.MaxValue - 1);
            var lstAllPlanHC = actionService.GetData<Hre_PlanHeadCountEntity>(lstObjPlanHC, ConstantSql.hrm_hr_sp_get_PlanHeadCount, ref status).ToList();
            if (orgID != Guid.Empty)
            {
                if (lstAllPlanHC != null)
                {
                    var lstAlljobtitleByOrg = lstAllPlanHC.Where(s => s.OrgStructureID == orgID).ToList();
                    return Json(lstAlljobtitleByOrg, JsonRequestBehavior.AllowGet);
                }
            }
            return null;
        }
        public ActionResult ExportPlanHeadCountHistorySelectedByTemplates([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountHistorySearchEXModel model)
        {
            string status = string.Empty;
            var service = new ActionService(UserLogin, LanguageCode);
            var services = new BaseService();
            var result = service.GetData<Hre_PlanHeadCountHistoryEntity>(model.PlanHeadCountHisID, ConstantSql.hrm_hr_sp_get_PlanHeadCountHistoryByIds, ref status);
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        public ActionResult ExportPlanHeadCountHistoryByTemplates([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountHistorySearchEXModel model)
        {
            var services = new ActionService(UserLogin, LanguageCode);
            var result = new List<Hre_PlanHeadCountHistoryEntity>();
            string status = string.Empty;
            #region Tao mau xuat bao cao
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_PlanHeadCountHistoryEntity(),
                    FileName = "Hre_PlanHeadCountHistoryEntity",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            if (model.ExportId != null && model.ExportId != Guid.Empty)
            {
                request.Page = 1;
                request.PageSize = int.MaxValue - 1;
            }
            var objt = new List<object>();
            objt.AddRange(new object[9]);
            objt[0] = model.PlanName;
            objt[1] = model.OrgStructureID;
            objt[2] = model.PositionIDs;
            objt[3] = model.DateFromStart;
            objt[4] = model.DateFromEnd;
            objt[5] = model.DateToStart;
            objt[6] = model.DateToEnd;
            objt[7] = request.Page;
            objt[8] = request.PageSize;
            result = services.GetData<Hre_PlanHeadCountHistoryEntity>(objt, ConstantSql.hrm_hr_sp_get_PlanHeadCountHistory, ref status);
            if (result != null)
            {
                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }

                request.Page = 1;
                var dataSourceResult = result.ToDataSourceResult(request);
                if (result.FirstOrDefault().GetPropertyValue("TotalRow") != null)
                {
                    dataSourceResult.Total = (int)result.FirstOrDefault().GetPropertyValue("TotalRow") == 0 ? result.Count : (int)result.FirstOrDefault().GetPropertyValue("TotalRow");
                }
                return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
            }
            return Json(result);

        }
        public ActionResult GetPlanHeadCountHistoryList([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_PlanHeadCountHistoryModel, Hre_PlanHeadCountHistoryEntity, Hre_PlanHeadCountHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PlanHeadCountHistory);
        }
        public ActionResult ExportPlanHeadCountHistoryList([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_PlanHeadCountHistoryEntity, Hre_PlanHeadCountHistoryModel, Hre_PlanHeadCountHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_PlanHeadCountHistory);
        }
        public ActionResult ExportPlanHeadCountHistorySelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_PlanHeadCountHistoryEntity, Hre_PlanHeadCountHistoryModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_PlanHeadCountHistoryByIds);
        }
        public ActionResult GetPlanHeadCountV2List([DataSourceRequest] DataSourceRequest request, Hre_PlanHeadCountV2SearchModel model)
        {
            var _PlanHeadCountServices = new Hre_PlanHeadCountServices();
            var result = _PlanHeadCountServices.GetlstPlanHeadCountV2(model.Year, model.OrgStructureID, model.PositionID, model.SalaryClassID, model.JobTitleID, model.EmployeeTypeID, model.WorkPlaceID, model.CostCentreID, model.RegionID);
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.Count();
            dataSourceResult.Total = total;
            return Json(dataSourceResult);
        }

        #endregion

        #region LoginProcess

        [HttpPost]
        public LoginModel LoginProcess(LoginModel user)
        {
            user.FileLog.WriteLog(string.Empty, "Start_Login_HomeController_LoginValidate_Post", string.Empty);
            DateTime timeStart = DateTime.Now;

            var service = new Sys_UserServices();
            var model = new LoginModel();
            var status = string.Empty;
            var userInfo = service.Login(user.UserName, user.Password, user.GoogleMail, user.GoogleProfileName, user.IsGoogleSign, user.IsLdapSignIn, user.Language, null, user.FileLog);

            if (userInfo != null)
            {
                user.FileLog.WriteLog(string.Empty, "Start_Login_HomeController_LoginValidate_Post_ProcessGetData", string.Empty);
                DateTime timeStart2 = DateTime.Now;

                if (userInfo.ProfileID == null)
                {
                    userInfo.ProfileID = Guid.Empty;
                }

                #region lấy thông tin nhân viên (tên nhân viên)
                //[20/11/2015][Anh.Le][Modify]
                //lấy dữ liệu thông tin nhan viên bằng store
                /********************************************/
                //var profileInfo = service.GetData<Hre_ProfileEntity>(userInfo.ProfileID, ConstantSql.hrm_hr_sp_get_ProfileById, UserLogin, ref status).FirstOrDefault();
                //var profileInfo = service.GetProfileName(userInfo.ProfileID.Value);
                var listprofile = service.GetData<Hre_ProfileIdEntity>(userInfo.ProfileID, ConstantSql.hrm_sys_sp_get_profilebyid, UserLogin, ref status);
                var profileInfo = new Hre_ProfileIdEntity();
                if (!Common.CheckListNullOrEmty(listprofile))
                {
                    profileInfo = listprofile.FirstOrDefault();
                }
                #endregion

                model = new LoginModel
                {
                    UserName = userInfo.UserLogin,
                    Password = userInfo.Password,
                    HasMasterDataGroup = userInfo.HasMasterDataGroup,
                    FullName = profileInfo != null ? profileInfo.ProfileName : userInfo.UserInfoName,
                    UserInfoName = userInfo.UserInfoName,
                    IsActive = userInfo.IsActivate,
                    ProfileID = userInfo.ProfileID,
                    ID = userInfo.ID,
                    IsRunScriptNew = userInfo.IsRunScriptNew,
                    VesionLastName = userInfo.VesionLastName,
                    IsRunStoreNew = userInfo.IsRunStoreNew,
                    Language = userInfo.LanguageCode,
                    IsWrongPasswordOrUserLogin = userInfo.IsWrongPasswordOrUserLogin,
                    IsPortal = userInfo.IsPortal
                };
                Sys_GetDataController ser = new Sys_GetDataController();
                var _firstlogin = ser.GetConfigChangPassWorkFirst();
                if (userInfo.DateChangePasssword == null && _firstlogin == true)
                {
                    model.IsFirstLogin = true;
                }

                user.FileLog.WriteLog(string.Empty, "End_Login_HomeController_LoginValidate_Post_ProcessGetData", Common.ComputeTime(timeStart2, DateTime.Now));
                user.FileLog.WriteLog(string.Empty, "End_Login_HomeController_LoginValidate_Post", Common.ComputeTime(timeStart, DateTime.Now));
                return model;
            }

            user.FileLog.WriteLog(string.Empty, "End_Login_HomeController_LoginValidate_Post", Common.ComputeTime(timeStart, DateTime.Now));
            return null;
        }

        #endregion

        #region ArchivesTable
        public ActionResult GetArchivesTableList([DataSourceRequest] DataSourceRequest request, Hre_ArchivesTableSearchModel model)
        {
            string status = string.Empty;
            var ListObj = new List<object>();
            ListObj = Common.AddRange(16);
            #region Arrive/Receive date
            ListObj[0] = model.DateArriveFrom;
            ListObj[1] = model.DateArriveTo;
            ListObj[2] = model.DateReceiveFrom;
            ListObj[3] = model.DateReceiveTo;
            #endregion
            ListObj[4] = model.ArchivesName;
            ListObj[5] = model.Type;
            ListObj[6] = model.ArrivePlace;
            ListObj[7] = model.ReceivePlace;
            ListObj[8] = model.Status;
            ListObj[9] = model.ProfileSignID;
            ListObj[10] = model.ProfileSignMainID;
            ListObj[11] = model.IsArrive;
            ListObj[12] = model.FolderID;
            ListObj[13] = model.Screen;
            ActionService ser = new ActionService(UserLogin, LanguageCode);
            var result = ser.GetData<Hre_ArchivesTableModel>(ListObj, ConstantSql.hrm_hr_sp_get_archivestable, ref status);
            if (result != null)
            {
                return Json(result.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);

            }
            return null;
        }

        public JsonResult ApprovedArchives(string SelectedIds)
        {
            string _mes = string.Empty;
            if (!string.IsNullOrEmpty(SelectedIds))
            {
                Hre_ArchivesTableService _ser = new Hre_ArchivesTableService();
                _mes = _ser.ApprovedArchives(SelectedIds);
            }
            return Json(_mes, JsonRequestBehavior.AllowGet);
        }

        public JsonResult CancelArchives(string SelectedIds)
        {
            string _mes = string.Empty;
            if (!string.IsNullOrEmpty(SelectedIds))
            {
                Hre_ArchivesTableService _ser = new Hre_ArchivesTableService();
                _mes = _ser.CancelArchives(SelectedIds);
            }
            return Json(_mes, JsonRequestBehavior.AllowGet);

        }

        public JsonResult RejectedArchives(string SelectedIds)
        {
            string _mes = string.Empty;
            if (!string.IsNullOrEmpty(SelectedIds))
            {
                Hre_ArchivesTableService _ser = new Hre_ArchivesTableService();
                _mes = _ser.RejectedArchives(SelectedIds, string.Empty, string.Empty);
            }
            return Json(_mes, JsonRequestBehavior.AllowGet);

        }


        public JsonResult SubmitToWaittingArchives(string SelectedIds)
        {
            string _mes = string.Empty;
            if (!string.IsNullOrEmpty(SelectedIds))
            {
                Hre_ArchivesTableService _ser = new Hre_ArchivesTableService();
                _mes = _ser.SubmitToWaittingArchives(SelectedIds);
            }
            return Json(_mes, JsonRequestBehavior.AllowGet);
        }

        public JsonResult DeleteArchives(string SelectedIds)
        {
            string _mes = string.Empty;
            if (!string.IsNullOrEmpty(SelectedIds))
            {
                Hre_ArchivesTableService _ser = new Hre_ArchivesTableService();
                _mes = _ser.DeleteArchives(SelectedIds);
            }
            return Json(_mes, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Hre_Task
        public ActionResult GetTaskList([DataSourceRequest] DataSourceRequest request, Hre_TaskSearchModel model)
        {
            return GetListDataAndReturn<Hre_TaskModel, Hre_TaskEntity, Hre_TaskSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Task);
        }
        #endregion

        #region Profile Duplicate
        public ActionResult SaveProfileRoot(List<Guid> _listProfileID, Guid _profileRoot)
        {
            Hre_ProfileServices _profileServices = new Hre_ProfileServices();
            return Json(_profileServices.SaveProfileRoot(_listProfileID, _profileRoot));
        }

        public ActionResult LoadProfileRootMultiple(string _text, Guid? _profileID)
        {
            if (!_profileID.HasValue)
            {
                return Json(string.Empty);
            }
            Hre_ProfileServices _profileServices = new Hre_ProfileServices();
            return Json(_profileServices.LoadProfileRootMultiple(_text, _profileID));
        }
        #endregion

        #region Hre_ProfileNotCard
        public string ValidateCreateProfileNotCard([DataSourceRequest] DataSourceRequest request, Hre_ProfileCardModel model)
        {
            if (!string.IsNullOrEmpty(model.ProfileIds))
            {
                model.ProfileID = Guid.Parse(model.ProfileIds.Split(',').FirstOrDefault());
            }
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ProfileCardModel>(LanguageCode, model, "Hre_ProfileCard", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                return null;
            }
        }

        public ActionResult CreateProfileNotCard(Hre_ProfileCardModel model)
        {
            string message = string.Empty;
            string status = string.Empty;
            var lstProfileID = new List<Guid>();
            var actionService = new ActionService(UserLogin);
            var _ProfileCardServices = new Hre_ProfileCardServices();
            #region Xử lý khi chọn nhân viên or phòng ban
            if (!string.IsNullOrEmpty(model.ProfileIds))
            {
                var lstProfileIds = model.ProfileIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfileID.AddRange(lstProfileIds);
            }
            #endregion
            if (lstProfileID.Count > 0)
            {
                foreach (var profileID in lstProfileID)
                {
                    var ProfileCardEntity = new Hre_ProfileCardEntity();
                    ProfileCardEntity.ProfileID = profileID;
                    ProfileCardEntity.CardTypeID = model.CardTypeID;
                    ProfileCardEntity.Status = model.Status;
                    ProfileCardEntity.IssueDate = model.IssueDate;
                    ProfileCardEntity.ReturnDate = model.ReturnDate;
                    ProfileCardEntity.Notes = model.Notes;
                    message = _ProfileCardServices.Add(ProfileCardEntity);
                }
            }
            else
            {
                message = ConstantMessages.HRM_OrgStrure_Not_Have_Profile.TranslateString();
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetProfileNotCardList([DataSourceRequest] DataSourceRequest request, Hre_ProfileNotCardSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileModel, Hre_ProfileEntity, Hre_ProfileNotCardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileNotCard);
        }

        public ActionResult ExportAllProfileNotCardList([DataSourceRequest] DataSourceRequest request, Hre_ProfileNotCardSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileEntity, Hre_ProfileModel, Hre_ProfileNotCardSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileNotCard);
        }

        #endregion

        #region Hre_ProfileCard
        [HttpPost]
        public ActionResult GetProfileCardList([DataSourceRequest] DataSourceRequest request, Hre_ProfileCardSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileCardModel, Hre_ProfileCardEntity, Hre_ProfileCardSearchModel>(request, model, ConstantSql.hrm_cat_sp_get_ProfileCard);
        }

        public ActionResult ExportAllProfileCardList([DataSourceRequest] DataSourceRequest request, Hre_ProfileCardSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileCardEntity, Hre_ProfileCardModel, Hre_ProfileCardSearchModel>(request, model, ConstantSql.hrm_cat_sp_get_ProfileCard);
        }

        #region [Tin.Nguyen - 20160906] Hàm xuất nhìu dữ liệu trên 1 file word

        #region Code Mới
        public ActionResult ExportWordProfileCardByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            string messages = string.Empty;
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            var exportService = new Cat_ExportServices();
            var _ProfileCardServices = new Hre_ProfileCardServices();
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstProfileCard = baseService.GetData<Hre_ProfileCardEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ProfileCardByListId, UserLogin, ref status);
            if (lstProfileCard == null)
                return null;

            var ilProfileIds = lstProfileCard.Where(s => s.ProfileID != null).Select(s => s.ProfileID.Value).Distinct().ToList();
            var PregnancyServices = new Att_PregnancyServices();
            var ilPregnancySmall = PregnancyServices.LoadByProfileIds(ilProfileIds);


            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileCard" + suffix;

            folferPath = dirpath;

            var fileDoc = string.Empty;
            DataSet ds = new DataSet();
            string outputPath1 = string.Empty;

            string templatepath1 = Common.GetPath(Common.TemplateURL + template.TemplateFile);
            outputPath1 = folferPath + "/" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".doc";
            var fileDoc1 = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".doc";
            DataTable tb = new DataTable("ProfileCard");
            var ilProfileCard = new List<Hre_ProfileCardEntity>();

            foreach (var ProfileCard in lstProfileCard)
            {


                i++;

                if (ProfileCard.CountExport == null)
                {
                    ProfileCard.CountExport = 1;
                }
                else
                {
                    ProfileCard.CountExport++;
                }

                var Pregnancy = ilPregnancySmall.Where(s => s.ProfileID == ProfileCard.ProfileID).FirstOrDefault();
                if (Pregnancy != null)
                {
                    if (Pregnancy.DateStart != null)
                    {
                        ProfileCard.PregnancyDateStart = Pregnancy.DateStart.Value;

                    }
                    if (Pregnancy.DateEnd != null)
                    {
                        ProfileCard.PregnancyDateEnd = Pregnancy.DateEnd.Value;

                    }
                }

                _ProfileCardServices.Edit(ProfileCard);
                string outputPath = string.Empty;
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, ProfileCard.ProfileID != null ? (Guid)ProfileCard.ProfileID : Guid.Empty, i);
                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                ilProfileCard.Add(ProfileCard);
            }
            tb = ilProfileCard.Translate();
            tb.TableName = "ProfileCard";
            ds.Tables.Add(tb);
            ExportService.ExportEmployeeCardOnceImageCustorm(templatepath1, outputPath1, ds);
            return Json(fileDoc1);
        }
        #endregion


        //#region Code Cũ
        //public ActionResult ExportWordProfileCardByTemplate(List<Guid> selectedIds, string valueFields)
        //{
        //    string[] valueFieldsExportID = valueFields.Split(',');
        //    var actionService = new ActionService(UserLogin);
        //    valueFields = valueFieldsExportID[0];
        //    string messages = string.Empty;
        //    string status = string.Empty;
        //    DateTime DateStart = DateTime.Now;
        //    Cat_ExportEntity template = null;
        //    var exportService = new Cat_ExportServices();
        //    var _ProfileCardServices = new Hre_ProfileCardServices();
        //    if (!string.IsNullOrEmpty(valueFields))
        //    {
        //        template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
        //    }
        //    if (template == null)
        //    {
        //        messages = "Error";
        //        return Json(messages, JsonRequestBehavior.AllowGet);
        //    }
        //    string dirpath = Common.GetPath(Common.DownloadURL); ;
        //    if (!Directory.Exists(dirpath))
        //        Directory.CreateDirectory(dirpath);
        //    var baseService = new BaseService();
        //    var objs = new List<object>();
        //    string strIDs = string.Empty;
        //    foreach (var item in selectedIds)
        //    {
        //        strIDs += Common.DotNetToOracle(item.ToString()) + ",";
        //    }
        //    if (strIDs.IndexOf(",") > 0)
        //        strIDs = strIDs.Substring(0, strIDs.Length - 1);
        //    var lstProfileCard = baseService.GetData<Hre_ProfileCardEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ProfileCardByListId, UserLogin, ref status);
        //    if (lstProfileCard == null)
        //        return null;
        //    int i = 0;
        //    String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
        //    string folferPath = string.Empty;
        //    string folderName = "ExportHre_ProfileCard" + suffix;
        //    if (lstProfileCard != null && lstProfileCard.Count > 1)
        //    {
        //        folferPath = dirpath + "/" + folderName;
        //        Directory.CreateDirectory(folferPath);
        //    }
        //    else
        //    {
        //        folferPath = dirpath;
        //    }
        //    var fileDoc = string.Empty;
        //    foreach (var ProfileCard in lstProfileCard)
        //    {
        //        i++;

        //        if (ProfileCard.CountExport == null)
        //        {
        //            ProfileCard.CountExport = 1;
        //        }
        //        else
        //        {
        //            ProfileCard.CountExport++;
        //        }

        //        _ProfileCardServices.Edit(ProfileCard);
        //        string outputPath = string.Empty;
        //        string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);

        //        //[07/06/2016][HienNguyen][68425]
        //        string genneralNameExport = ExportService.GenneralFileNameExport(template, ProfileCard.ProfileID != null ? (Guid)ProfileCard.ProfileID : Guid.Empty, i);

        //        outputPath = folferPath + "/" + genneralNameExport;
        //        fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
        //        var ilProfileCard = new List<Hre_ProfileCardEntity>();
        //        ilProfileCard.Add(ProfileCard);
        //        ExportService.ExportWord(outputPath, templatepath, ilProfileCard);
        //    }
        //    if (lstProfileCard != null && lstProfileCard.Count > 1)
        //    {
        //        var fileZip = Common.MultiExport("", true, folderName);
        //        return Json(fileZip);
        //    }
        //    return Json(fileDoc);
        //}
        //#endregion

        #endregion


        #endregion

        #region UpdateProfileDepartmentTransfer
        public string ValidateUpdateProfileDepartmentTransfer([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_WorkHistoryModel>(LanguageCode, model, "Hre_ProfileDepartmentTransfer", ref message);
            if (!checkValidate)
            {
                return message;
            }
            else
            {
                //Son.Vo - 20170706 - 84988 - validate nếu nhân viên có ngày nghỉ việc < ngày hiệu tại - ngày cấu hình trong cấu hình chung
                var isCheckOrg = false;
                string status = string.Empty;
                var lstProfileID = new List<Guid>();
                var actionService = new ActionService(UserLogin);
                #region Xử lý khi chọn nhân viên or phòng ban
                if (!string.IsNullOrEmpty(model.ProfileIds) && model.OrgStructureIDs == null)
                {
                    var lstProfileIds = model.ProfileIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                    lstProfileID.AddRange(lstProfileIds);
                }
                if (!string.IsNullOrEmpty(model.OrgStructureIDs))
                {
                    isCheckOrg = true;
                    var listGuid = new List<Guid>();
                    if (model.ProfileIds != null)
                    {
                        var listStr = model.ProfileIds.Split(',');

                        if (listStr[0] != "")
                        {
                            foreach (var item in listStr)
                            {
                                listGuid.Add(Guid.Parse(item));
                            }
                        }
                    }
                    var listObj = new List<object>();
                    listObj.Add(model.OrgStructureIDs);
                    listObj.Add(string.Empty);
                    listObj.Add(string.Empty);
                    var lstProfileids = actionService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgStructure, ref status).Select(s => s.ID).ToList();
                    if (listGuid != null)
                    {
                        lstProfileids = lstProfileids.Where(s => !listGuid.Contains(s)).ToList();
                        lstProfileID.AddRange(lstProfileids);
                    }
                }
                #endregion
                if (lstProfileID.Count > 0)
                {
                    var _WorkHistoryServices = new Hre_WorkHistoryServices();
                    var configServices = new Sys_AttOvertimePermitConfigServices();
                    var baseService = new BaseService();
                    var _lsobj = new List<object>();
                    var OrgOrderNumbers = model.OrgStructureIDs.Split(",").Select(s => int.Parse(s)).ToList();
                    var objOrg = Common.AddRange(10);
                    var lstAllOrg = baseService.GetData<Cat_OrgStructureEntity>(objOrg, ConstantSql.hrm_cat_sp_get_AllOrgStructureList, null, ref status);
                    var lstOrg = lstAllOrg.Where(s => OrgOrderNumbers.Contains(s.OrderNumber)).ToList();

                    var _SHOWPROFILECONFIG = configServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_SHOWPROFILECONFIG);
                    if (_SHOWPROFILECONFIG != null)
                    {
                        var profileServices = new Hre_ProfileServices();
                        var lstProfile = profileServices.GetListProfileForValidateTransfer(lstProfileID);
                        var lstInvalid = lstProfile.Where(s => s.DateQuit != null && s.DateQuit.Value.Date < DateTime.Now.AddDays(-(double)_SHOWPROFILECONFIG.Value).Date).ToList();
                        if (lstInvalid.Count > 0)
                        {
                            string strProfileName = string.Empty;
                            foreach (var item in lstInvalid)
                            {
                                strProfileName += item.ProfileName;
                            }
                            return strProfileName + ConstantDisplay.HRM_ValidateTransferEmp.TranslateString();
                        }
                        else
                        {
                            if (isCheckOrg == false)
                            {
                                string strProfileName = _WorkHistoryServices.CheckDuplicateDepartmentTransfer(lstProfileID, model.DateEffective);
                                if (!string.IsNullOrEmpty(strProfileName))
                                {
                                    return ConstantDisplay.HRM_DuplicateWorkhistoryData.TranslateString() + " : " + strProfileName;
                                }
                                else
                                {
                                    return null;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (isCheckOrg == false)
                        {
                            string strProfileName = _WorkHistoryServices.CheckDuplicateDepartmentTransfer(lstProfileID, model.DateEffective);
                            if (!string.IsNullOrEmpty(strProfileName))
                            {
                                return ConstantDisplay.HRM_DuplicateWorkhistoryData.TranslateString() + " : " + strProfileName;
                            }
                            else
                            {
                                return null;
                            }
                        }
                    }
                }
                else
                {
                    return null;
                }
                return null;
            }
        }

        //[To.Le][12/04/2016][New Func][0063113]-	Bổ sung chức năng điều chuyển NV nhân viên cùng lúc
        public ActionResult UpdateProfileDepartmentTransfer(Hre_WorkHistoryModel model)
        {
            var _WorkingServices = new Hre_WorkHistoryServices();
            string message = string.Empty;
            string status = string.Empty;
            DateTime dt = DateTime.Now.Date;
            var lstProfileID = new List<Guid>();
            var actionService = new ActionService(UserLogin);
            #region Xử lý khi chọn nhân viên or phòng ban
            if (!string.IsNullOrEmpty(model.ProfileIds) && model.OrgStructureIDs == null)
            {
                var lstProfileIds = model.ProfileIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfileID.AddRange(lstProfileIds);
            }
            if (!string.IsNullOrEmpty(model.OrgStructureIDs))
            {
                var listGuid = new List<Guid>();
                if (model.ProfileIds != null)
                {
                    var listStr = model.ProfileIds.Split(',');

                    if (listStr[0] != "")
                    {
                        foreach (var item in listStr)
                        {
                            listGuid.Add(Guid.Parse(item));
                        }
                    }
                }
                var listObj = new List<object>();
                listObj.Add(model.OrgStructureIDs);
                listObj.Add(string.Empty);
                listObj.Add(string.Empty);
                var lstProfileids = actionService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgStructure, ref status).Select(s => s.ID).ToList();
                if (listGuid != null)
                {
                    lstProfileids = lstProfileids.Where(s => !listGuid.Contains(s)).ToList();
                    lstProfileID.AddRange(lstProfileids);
                }
            }
            #endregion
            var lstWorkHistory = _WorkingServices.GetListWorkingDataByLstProfileIDs(lstProfileID);
            var profileServices = new Hre_ProfileServices();
            var lstProfile = profileServices.GetListProfileForValidateTransfer(lstProfileID);
            if (lstWorkHistory.Count > 0)
            {
                var configServices = new Sys_AttOvertimePermitConfigServices();
                bool _ISALLOWINPUTPASTDAYWHENTRANSFER = configServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISALLOWINPUTPASTDAYWHENTRANSFER);
                var _SHOWPROFILECONFIG = configServices.GetConfigValue<int?>(AppConfig.HRM_HRE_PROFILE_SHOWPROFILECONFIG);
                //Son.Vo - 20161026 - 0074729
                if (_ISALLOWINPUTPASTDAYWHENTRANSFER == true)
                {
                    var lstProfileInvalid = lstProfile.Where(s => model.DateEffective <= s.DateOfEffect).ToList();
                    if (lstProfileInvalid.Count > 0)
                    {
                        return Json(ConstantMessages.ErrorTransferPastData.TranslateString(), JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var lstProfileIDs = lstWorkHistory.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();

                        if (model.WorkHistoryID != null)
                        {
                            var lstWorkHistoryIDs = model.WorkHistoryID.Split(",").ToList();
                            foreach (var workID in lstWorkHistoryIDs)
                            {
                                var editWorkHistory = lstWorkHistory.Where(s => s.ID == Guid.Parse(workID)).FirstOrDefault();
                                if (editWorkHistory != null)
                                {
                                    var workHistoryEntity = new Hre_WorkHistoryEntity();
                                    workHistoryEntity = editWorkHistory.CopyData<Hre_WorkHistoryEntity>();
                                    workHistoryEntity.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                                    if (model.OrganizationStructureID != null)
                                    {
                                        workHistoryEntity.OrganizationStructureID = model.OrganizationStructureID;
                                    }
                                    if (model.PositionID != null)
                                    {
                                        workHistoryEntity.PositionID = model.PositionID;
                                    }
                                    if (model.JobTitleID != null)
                                    {
                                        workHistoryEntity.JobTitleID = model.JobTitleID;
                                    }
                                    if (model.TypeOfTransferID != null)
                                    {
                                        workHistoryEntity.TypeOfTransferID = model.TypeOfTransferID;
                                    }
                                    if (model.DateEffective != null)
                                    {
                                        workHistoryEntity.DateEffective = model.DateEffective;
                                    }
                                    if (model.DecisionNo != null)
                                    {
                                        workHistoryEntity.DecisionNo = model.DecisionNo;
                                    }
                                    if (model.DecisionDate != null)
                                    {
                                        workHistoryEntity.DecisionDate = model.DecisionDate;
                                    }
                                    if (model.Description != null) //Nguyen.Le - 21/21/2017 - 0091573
                                    {
                                        workHistoryEntity.Description = model.Description;
                                    }

                                    //Son.Vo - 20180107 - 0091975
                                    if (model.AbilityTileID != null)
                                    {
                                        workHistoryEntity.AbilityTileID = model.AbilityTileID;
                                    }
                                    if (model.PayrollGroupID != null)
                                    {
                                        workHistoryEntity.PayrollGroupID = model.PayrollGroupID;
                                    }
                                    if (model.PayrollCategoryID != null)
                                    {
                                        workHistoryEntity.PayrollCategoryID = model.PayrollCategoryID;
                                    }
                                    if (model.EmployeeGroupID != null)
                                    {
                                        workHistoryEntity.EmployeeGroupID = model.EmployeeGroupID;
                                    }
                                    if (model.LaborType != null)
                                    {
                                        workHistoryEntity.LaborType = model.LaborType;
                                    }
                                    if (model.EmployeeTypeID != null)
                                    {
                                        workHistoryEntity.EmployeeTypeID = model.EmployeeTypeID;
                                    }
                                    if (model.WorkPlaceID != null)
                                    {
                                        workHistoryEntity.WorkPlaceID = model.WorkPlaceID;
                                    }
                                    if (model.SalaryClassID != null)
                                    {
                                        workHistoryEntity.SalaryClassID = model.SalaryClassID;
                                    }
                                    if (model.CostCentreID != null)
                                    {
                                        workHistoryEntity.CostCentreID = model.CostCentreID;
                                    }
                                    if (model.CostActivityID != null)
                                    {
                                        workHistoryEntity.CostActivityID = model.CostActivityID;
                                    }
                                    if (model.CompanyID != null)
                                    {
                                        workHistoryEntity.CompanyID = model.CompanyID;
                                    }


                                    message = _WorkingServices.Edit(workHistoryEntity);
                                }
                            }
                            message = message + "," + model.WorkHistoryID;
                        }
                        else
                        {
                            var lsCreate = new List<Guid>();
                            foreach (var item in lstProfileIDs)
                            {
                                //Son.Vo - 20170706 - 84988
                                if (_SHOWPROFILECONFIG != null)
                                {
                                    var profile = lstProfile.Where(s => s.ID == item).FirstOrDefault();
                                    if (profile.DateQuit != null && profile.DateQuit.Value.Date < DateTime.Now.AddDays(-(double)_SHOWPROFILECONFIG.Value).Date)
                                    {
                                        continue;
                                    }
                                }

                                //Son.Vo - 20170108 - 0091975
                                if (lstWorkHistory.Where(s => s.DateEffective.Date == model.DateEffective.Date && s.ProfileID == item).FirstOrDefault() != null)
                                {
                                    continue;
                                }

                                var lastWorkHistoryByProfile = lstWorkHistory.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                                if (lastWorkHistoryByProfile != null)
                                {
                                    var workHistoryEntity = new Hre_WorkHistoryEntity();
                                    workHistoryEntity = lastWorkHistoryByProfile.CopyData<Hre_WorkHistoryEntity>();
                                    workHistoryEntity.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                                    if (model.OrganizationStructureID != null)
                                    {
                                        workHistoryEntity.OrganizationStructureID = model.OrganizationStructureID;
                                    }
                                    if (model.PositionID != null)
                                    {
                                        workHistoryEntity.PositionID = model.PositionID;
                                    }
                                    if (model.JobTitleID != null)
                                    {
                                        workHistoryEntity.JobTitleID = model.JobTitleID;
                                    }
                                    if (model.TypeOfTransferID != null)
                                    {
                                        workHistoryEntity.TypeOfTransferID = model.TypeOfTransferID;
                                    }
                                    if (model.DateEffective != null)
                                    {
                                        workHistoryEntity.DateEffective = model.DateEffective;
                                    }
                                    if (model.DecisionNo != null)
                                    {
                                        workHistoryEntity.DecisionNo = model.DecisionNo;
                                    }
                                    if (model.DecisionDate != null)
                                    {
                                        workHistoryEntity.DecisionDate = model.DecisionDate;
                                    }
                                    if (model.Description != null) //Nguyen.Le - 21/21/2017 - 0091573
                                    {
                                        workHistoryEntity.Description = model.Description;
                                    }

                                    //Son.Vo - 20180107 - 0091975
                                    if (model.AbilityTileID != null)
                                    {
                                        workHistoryEntity.AbilityTileID = model.AbilityTileID;
                                    }
                                    if (model.PayrollGroupID != null)
                                    {
                                        workHistoryEntity.PayrollGroupID = model.PayrollGroupID;
                                    }
                                    if (model.PayrollCategoryID != null)
                                    {
                                        workHistoryEntity.PayrollCategoryID = model.PayrollCategoryID;
                                    }
                                    if (model.EmployeeGroupID != null)
                                    {
                                        workHistoryEntity.EmployeeGroupID = model.EmployeeGroupID;
                                    }
                                    if (model.LaborType != null)
                                    {
                                        workHistoryEntity.LaborType = model.LaborType;
                                    }
                                    if (model.EmployeeTypeID != null)
                                    {
                                        workHistoryEntity.EmployeeTypeID = model.EmployeeTypeID;
                                    }
                                    if (model.WorkPlaceID != null)
                                    {
                                        workHistoryEntity.WorkPlaceID = model.WorkPlaceID;
                                    }
                                    if (model.SalaryClassID != null)
                                    {
                                        workHistoryEntity.SalaryClassID = model.SalaryClassID;
                                    }
                                    if (model.CostCentreID != null)
                                    {
                                        workHistoryEntity.CostCentreID = model.CostCentreID;
                                    }
                                    if (model.CostActivityID != null)
                                    {
                                        workHistoryEntity.CostActivityID = model.CostActivityID;
                                    }
                                    if (model.CompanyID != null)
                                    {
                                        workHistoryEntity.CompanyID = model.CompanyID;
                                    }
                                    message = _WorkingServices.Add(workHistoryEntity);
                                    lsCreate.Add(item);
                                }
                            }
                            //Nguyen.Le - 21/12/2017 - 0091548 Trả lại ID cho nút Lưu
                            var lstWorkHistoryNew = _WorkingServices.GetListWorkingDataByLstProfileIDs(lsCreate);
                            var WorkHistoryNewIDs = new List<Guid>();
                            foreach (var item in lsCreate)
                            {
                                var lastWorkHistoryByProfileNew = lstWorkHistoryNew.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateCreate).FirstOrDefault();
                                if (lastWorkHistoryByProfileNew != null)
                                {
                                    WorkHistoryNewIDs.Add(lastWorkHistoryByProfileNew.ID);
                                }
                            }
                            if (WorkHistoryNewIDs != null && WorkHistoryNewIDs.Count() > 0)
                            {
                                message = message + "," + string.Join(",", WorkHistoryNewIDs);
                            }
                            else
                            {
                                message = ConstantMessages.Success.ToString();
                            }
                        }

                    }
                }
                else
                {
                    if (model.DateEffective.Date >= dt)
                    {

                        var lstProfileIDs = lstWorkHistory.Where(s => s.ProfileID != null).Select(s => s.ProfileID).Distinct().ToList();

                        if (model.WorkHistoryID != null)
                        {
                            var lstWorkHistoryIDs = model.WorkHistoryID.Split(",").ToList();

                            foreach (var workID in lstWorkHistoryIDs)
                            {
                                var editWorkHistory = lstWorkHistory.Where(s => s.ID == Guid.Parse(workID)).FirstOrDefault();
                                if (editWorkHistory != null)
                                {
                                    var workHistoryEntity = new Hre_WorkHistoryEntity();
                                    workHistoryEntity = editWorkHistory.CopyData<Hre_WorkHistoryEntity>();
                                    workHistoryEntity.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                                    if (model.OrganizationStructureID != null)
                                    {
                                        workHistoryEntity.OrganizationStructureID = model.OrganizationStructureID;
                                    }
                                    if (model.PositionID != null)
                                    {
                                        workHistoryEntity.PositionID = model.PositionID;
                                    }
                                    if (model.JobTitleID != null)
                                    {
                                        workHistoryEntity.JobTitleID = model.JobTitleID;
                                    }
                                    if (model.TypeOfTransferID != null)
                                    {
                                        workHistoryEntity.TypeOfTransferID = model.TypeOfTransferID;
                                    }
                                    if (model.DateEffective != null)
                                    {
                                        workHistoryEntity.DateEffective = model.DateEffective;
                                    }
                                    if (model.DecisionNo != null)
                                    {
                                        workHistoryEntity.DecisionNo = model.DecisionNo;
                                    }
                                    if (model.DecisionDate != null)
                                    {
                                        workHistoryEntity.DecisionDate = model.DecisionDate;
                                    }
                                    if (model.Description != null) //Nguyen.Le - 21/21/2017 - 0091573
                                    {
                                        workHistoryEntity.Description = model.Description;
                                    }

                                    //Son.Vo - 20180107 - 0091975
                                    if (model.AbilityTileID != null)
                                    {
                                        workHistoryEntity.AbilityTileID = model.AbilityTileID;
                                    }
                                    if (model.PayrollGroupID != null)
                                    {
                                        workHistoryEntity.PayrollGroupID = model.PayrollGroupID;
                                    }
                                    if (model.PayrollCategoryID != null)
                                    {
                                        workHistoryEntity.PayrollCategoryID = model.PayrollCategoryID;
                                    }
                                    if (model.EmployeeGroupID != null)
                                    {
                                        workHistoryEntity.EmployeeGroupID = model.EmployeeGroupID;
                                    }
                                    if (model.LaborType != null)
                                    {
                                        workHistoryEntity.LaborType = model.LaborType;
                                    }
                                    if (model.EmployeeTypeID != null)
                                    {
                                        workHistoryEntity.EmployeeTypeID = model.EmployeeTypeID;
                                    }
                                    if (model.WorkPlaceID != null)
                                    {
                                        workHistoryEntity.WorkPlaceID = model.WorkPlaceID;
                                    }
                                    if (model.SalaryClassID != null)
                                    {
                                        workHistoryEntity.SalaryClassID = model.SalaryClassID;
                                    }
                                    if (model.CostCentreID != null)
                                    {
                                        workHistoryEntity.CostCentreID = model.CostCentreID;
                                    }
                                    if (model.CostActivityID != null)
                                    {
                                        workHistoryEntity.CostActivityID = model.CostActivityID;
                                    }
                                    if (model.CompanyID != null)
                                    {
                                        workHistoryEntity.CompanyID = model.CompanyID;
                                    }

                                    message = _WorkingServices.Edit(workHistoryEntity);
                                }
                            }
                            message = message + "," + model.WorkHistoryID;
                        }
                        else
                        {
                            var lsCreate = new List<Guid>();
                            foreach (var item in lstProfileIDs)
                            {
                                //Son.Vo - 20170706 - 84988
                                if (_SHOWPROFILECONFIG != null)
                                {
                                    var profile = lstProfile.Where(s => s.ID == item).FirstOrDefault();
                                    if (profile.DateQuit != null && profile.DateQuit.Value.Date < DateTime.Now.AddDays(-(double)_SHOWPROFILECONFIG.Value).Date)
                                    {
                                        continue;
                                    }
                                }

                                //Son.Vo - 20170108 - 0091975
                                if (lstWorkHistory.Where(s => s.DateEffective.Date == model.DateEffective.Date && s.ProfileID == item).FirstOrDefault() != null)
                                {
                                    continue;
                                }

                                var lastWorkHistoryByProfile = lstWorkHistory.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                                if (lastWorkHistoryByProfile != null)
                                {
                                    var workHistoryEntity = new Hre_WorkHistoryEntity();
                                    workHistoryEntity = lastWorkHistoryByProfile.CopyData<Hre_WorkHistoryEntity>();
                                    workHistoryEntity.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                                    if (model.OrganizationStructureID != null)
                                    {
                                        workHistoryEntity.OrganizationStructureID = model.OrganizationStructureID;
                                    }
                                    if (model.PositionID != null)
                                    {
                                        workHistoryEntity.PositionID = model.PositionID;
                                    }
                                    if (model.JobTitleID != null)
                                    {
                                        workHistoryEntity.JobTitleID = model.JobTitleID;
                                    }
                                    if (model.TypeOfTransferID != null)
                                    {
                                        workHistoryEntity.TypeOfTransferID = model.TypeOfTransferID;
                                    }
                                    if (model.DateEffective != null)
                                    {
                                        workHistoryEntity.DateEffective = model.DateEffective;
                                    }
                                    if (model.DecisionNo != null)
                                    {
                                        workHistoryEntity.DecisionNo = model.DecisionNo;
                                    }
                                    if (model.DecisionDate != null)
                                    {
                                        workHistoryEntity.DecisionDate = model.DecisionDate;
                                    }
                                    if (model.Description != null) //Nguyen.Le - 21/21/2017 - 0091573
                                    {
                                        workHistoryEntity.Description = model.Description;
                                    }

                                    //Son.Vo - 20180107 - 0091975
                                    if (model.AbilityTileID != null)
                                    {
                                        workHistoryEntity.AbilityTileID = model.AbilityTileID;
                                    }
                                    if (model.PayrollGroupID != null)
                                    {
                                        workHistoryEntity.PayrollGroupID = model.PayrollGroupID;
                                    }
                                    if (model.PayrollCategoryID != null)
                                    {
                                        workHistoryEntity.PayrollCategoryID = model.PayrollCategoryID;
                                    }
                                    if (model.EmployeeGroupID != null)
                                    {
                                        workHistoryEntity.EmployeeGroupID = model.EmployeeGroupID;
                                    }
                                    if (model.LaborType != null)
                                    {
                                        workHistoryEntity.LaborType = model.LaborType;
                                    }
                                    if (model.EmployeeTypeID != null)
                                    {
                                        workHistoryEntity.EmployeeTypeID = model.EmployeeTypeID;
                                    }
                                    if (model.WorkPlaceID != null)
                                    {
                                        workHistoryEntity.WorkPlaceID = model.WorkPlaceID;
                                    }
                                    if (model.SalaryClassID != null)
                                    {
                                        workHistoryEntity.SalaryClassID = model.SalaryClassID;
                                    }
                                    if (model.CostCentreID != null)
                                    {
                                        workHistoryEntity.CostCentreID = model.CostCentreID;
                                    }
                                    if (model.CostActivityID != null)
                                    {
                                        workHistoryEntity.CostActivityID = model.CostActivityID;
                                    }
                                    if (model.CompanyID != null)
                                    {
                                        workHistoryEntity.CompanyID = model.CompanyID;
                                    }

                                    message = _WorkingServices.Add(workHistoryEntity);
                                    lsCreate.Add(item);
                                }
                            }
                            //Nguyen.Le - 21/12/2017 - 0091548 Trả lại ID cho nút Lưu
                            var lstWorkHistoryNew = _WorkingServices.GetListWorkingDataByLstProfileIDs(lsCreate);
                            var WorkHistoryNewIDs = new List<Guid>();
                            foreach (var item in lsCreate)
                            {
                                var lastWorkHistoryByProfileNew = lstWorkHistoryNew.Where(s => s.ProfileID == item).OrderByDescending(s => s.DateCreate).FirstOrDefault();
                                if (lastWorkHistoryByProfileNew != null)
                                {
                                    WorkHistoryNewIDs.Add(lastWorkHistoryByProfileNew.ID);
                                }
                            }
                            if (WorkHistoryNewIDs != null && WorkHistoryNewIDs.Count() > 0)
                            {
                                message = message + "," + string.Join(",", WorkHistoryNewIDs);
                            }
                            else
                            {
                                message = ConstantMessages.Success.ToString();
                            }
                        }

                    }
                    else
                    {
                        message = ConstantMessages.NotificationDateEffective.TranslateString();
                    }
                }
            }
            else
            {
                message = ConstantMessages.HRM_OrgStrure_Not_Have_Profile.TranslateString();
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Hre_ConCurrent
        //Son.Vo - 20160718 - 0074472
        [HttpPost]
        public ActionResult CancelConCurrent(string selectedIds)
        {
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var service = new Hre_ProfileServices();
                var message = service.ActionCancelConCurrent(selectedIds, Guid.Parse(UserID));
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }

        //Son.Vo - 20160718 - 0074472
        [HttpPost]
        public ActionResult ApproveConCurrent(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var userId = Guid.Empty;
            Guid.TryParse(UserID, out userId);
            var message = service.ActionApprovedConCurrent(selectedIds, UserLogin, userId);
            return Json(message);
        }

        public ActionResult GetUserApproveConCurrent(string userSubmit, string profileID)
        {
            if (!string.IsNullOrEmpty(userSubmit) || !string.IsNullOrEmpty(profileID))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _ContractServices = new Hre_WorkHistoryServices();
                var entity = _ContractServices.GetHighSuppervisorApproveConcurrent(profileID, userSubmit, UserID, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }

        [HttpPost]
        public ActionResult GetConCurrentList([DataSourceRequest] DataSourceRequest request, Hre_ConCurrentSearchModel model)
        {
            return GetListDataAndReturn<Hre_ConCurrentEntity, Hre_ConCurrentModel, Hre_ConCurrentSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ConCurrent);
        }

        [HttpPost]
        public ActionResult GetConCurrentWaitingList([DataSourceRequest] DataSourceRequest request, Hre_ConCurrentWaitingSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_ConCurrentEntity, Hre_ConCurrentModel, Hre_ConCurrentWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ConCurrentWaiting);
        }

        public ActionResult ExportConCurrentSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ConCurrentEntity, Hre_ConCurrentModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ConCurrentByIds);
        }

        public ActionResult ExportWordConCurrentByTemplate(List<Guid> selectedIds, string valueFields)
        {
            string[] valueFieldsExportID = valueFields.Split(',');
            var actionService = new ActionService(UserLogin);
            valueFields = valueFieldsExportID[0];
            Guid exportID;
            string messages = string.Empty;
            string status = string.Empty;
            DateTime DateStart = DateTime.Now;
            Cat_ExportEntity template = null;
            var exportService = new Cat_ExportServices();
            if (!string.IsNullOrEmpty(valueFields))
            {
                template = exportService.GetData<Cat_ExportEntity>(Guid.Parse(valueFields), ConstantSql.hrm_cat_sp_get_ExportById, UserLogin, ref status).FirstOrDefault();
            }
            if (template == null)
            {
                messages = "Error";
                return Json(messages, JsonRequestBehavior.AllowGet);
            }
            string dirpath = Common.GetPath(Common.DownloadURL); ;
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);

            var _ActionService = new ActionService(UserLogin, LanguageCode);
            var objs = new List<object>();
            string strIDs = string.Empty;
            foreach (var item in selectedIds)
            {
                strIDs += Common.DotNetToOracle(item.ToString()) + ",";
            }
            if (strIDs.IndexOf(",") > 0)
                strIDs = strIDs.Substring(0, strIDs.Length - 1);
            var lstWorkHistory = _ActionService.GetData<Hre_ConCurrentEntity>(strIDs, ConstantSql.hrm_hr_sp_get_ConCurrentByIds, ref status);

            if (lstWorkHistory == null)
                return null;

            int i = 0;
            String suffix = DateStart.ToString("_ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHre_ProfileProbation" + suffix;
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            foreach (var workHistory in lstWorkHistory)
            {
                string templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                i++;
                string outputPath = string.Empty;

                //[07/06/2016][HienNguyen][68425]
                string genneralNameExport = ExportService.GenneralFileNameExport(template, workHistory.ProfileID, i);

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var ilContract = new List<Hre_ConCurrentEntity>();
                ilContract.Add(workHistory);
                ExportService.ExportWord(outputPath, templatepath, ilContract);

            }
            if (lstWorkHistory != null && lstWorkHistory.Count > 1)
            {
                var fileZip = Common.MultiExport("", true, folderName);
                return Json(fileZip);
            }
            return Json(fileDoc);
        }

        [HttpPost]
        public ActionResult ExportConCurrentList([DataSourceRequest] DataSourceRequest request, Hre_ConCurrentSearchModel model)
        {
            return ExportAllAndReturn<Hre_ConCurrentEntity, Hre_ConCurrentModel, Hre_ConCurrentSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ConCurrent);
        }

        //Nguyen.Le - 2017/10/25 - 0088903
        [HttpPost]
        public ActionResult ExportConCurrentWaitingList([DataSourceRequest] DataSourceRequest request, Hre_ConCurrentWaitingSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserID = Guid.Parse(UserID);
            }
            return ExportAllAndReturn<Hre_ConCurrentEntity, Hre_ConCurrentModel, Hre_ConCurrentWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ConCurrentWaiting);
        }
        #endregion

        #region Hre_ResearcchTopic
        public ActionResult GetResearcchTopicList([DataSourceRequest] DataSourceRequest request, Hre_ResearcchTopicSearchModel model)
        {
            return GetListDataAndReturn<Hre_ResearcchTopicModel, Hre_ResearcchTopicEntity, Hre_ResearcchTopicSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ResearcchTopic);
        }

        [System.Web.Mvc.HttpPost]
        public ActionResult ExportAllResearcchTopicList([DataSourceRequest] DataSourceRequest request, Hre_ResearcchTopicSearchModel model)
        {
            return ExportAllAndReturn<Hre_ResearcchTopicEntity, Hre_ResearcchTopicModel, Hre_ResearcchTopicSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ResearcchTopic);
        }

        public ActionResult GetResearcchTopicByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_ResearcchTopicEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ResearcchTopicByProfileId, UserLogin, ref status);
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Hre_workhistorySal
        public ActionResult EditWorkhistorySalary(Hre_WorkHistorySalarySaveModel model)
        {
            var _ConfigServices = new Sys_AttOvertimePermitConfigServices();
            var WorkHistoryServices = new Hre_WorkHistoryServices();
            var _AbilityTileServices = new Cat_AbilityTileServices();
            #region Validate
            string message = string.Empty;
            var ContractServices = new Hre_ContractServices();
            Guid contractID = Guid.Empty;
            if (model.Tab_WorkHistory != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_WorkHistoryModel>(LanguageCode, model.Tab_WorkHistory, "Hre_WorkHistory", ref message);
                if (!checkValidate)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                #region Quyen.Quach 30/11/2017 0089729 cảnh báo định biên
                var _planheadcountservice = new Hre_PlanHeadCountServices();
                bool IscheckValidate = false;
                bool ischeck = _ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_ISALERTIFNUMBEROFEMPEXCEEDPLAN);
                if (ischeck == true)
                {
                    #region Quyen.Quach- 03/08/2017 - 0084005 Kiễm tra số số lượng định biên , hiển thị thông báo
                    var lstHeadCountentity4check = _planheadcountservice.getLstPlanheadCount().ToList();
                    var lstcheckeplexible = lstHeadCountentity4check.Where(s => s.Type == HeadType.E_FLEXIBLE.ToString()).ToList();
                    bool ischeckPlanheadcount = _planheadcountservice.CheckValidateHeadCount(model.ID.ToString(), model.Tab_WorkHistory.DateEffective, model.Tab_WorkHistory.OrganizationStructureID, model.Tab_WorkHistory.PositionID, model.Tab_WorkHistory.SalaryClassID, model.Tab_WorkHistory.JobTitleID, model.Tab_WorkHistory.EmployeeTypeID, model.Tab_WorkHistory.WorkPlaceID, model.Tab_WorkHistory.CostCentreID, model.Tab_WorkHistory.RegionID);
                    if (lstcheckeplexible != null && lstcheckeplexible.Count > 0)
                    {
                        IscheckValidate = true;
                    }
                    if (ischeckPlanheadcount == true && IscheckValidate == false)
                    {
                        model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_NumberOfEmpExceedPlan.TranslateString();
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    #endregion
                }
                #endregion
                // Nguyen.Le - 20170927 - 0087395
                var profileServices = new Hre_ProfileServices();
                var profile = profileServices.GetProfileDataByID(model.Tab_WorkHistory.ProfileID);
                profile.IsNotComputProductSalary = model.Tab_WorkHistory.IsNotComputProductSalary;
                profileServices.Edit(profile);
            }
            var SecurityService = new SecurityService();
            //Quyen.Quach 12/09/2017 0087571
            bool isloadBasicSalary = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_WorkHistorySalary_Index_TabBasicSalary.ToString());
            if (isloadBasicSalary == true && model.Tab_BasicSalary != null && model.Tab_BasicSalary.IsCreateBasicSalary == true)
            {
                var BasicSalaryModel = new Sal_BasicSalaryModel();
                if (model.Tab_WorkHistory != null)
                {
                    if (model.Tab_WorkHistory.BasicSalaryID != null)
                    {
                        BasicSalaryModel.ID = model.Tab_WorkHistory.BasicSalaryID.Value;
                    }
                    BasicSalaryModel.ProfileID = model.Tab_WorkHistory.ProfileID;
                    BasicSalaryModel.DateOfEffect = model.Tab_WorkHistory.DateEffective;
                }
                BasicSalaryModel.GrossAmount = model.Tab_BasicSalary.GrossAmountSalary;
                BasicSalaryModel.CurrencyID = model.Tab_BasicSalary.CurrencyIDSalary;
                BasicSalaryModel.InsuranceAmount = model.Tab_BasicSalary.InsuranceAmountSalary;
                BasicSalaryModel.Status = model.Tab_BasicSalary.StatusSalary;
                var checkValidatesalary = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Sal_BasicSalaryModel>(LanguageCode, BasicSalaryModel, "Sal_BasicSalary", ref message);
                if (!checkValidatesalary)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            bool isloadTabExtend = SecurityService.CheckPermission(Guid.Parse(UserID), VnResource.Helper.Security.PrivilegeType.Create, HRM.Infrastructure.Security.ConstantPermission.Hre_WorkHistorySalary_Index_TabContractExtend.ToString());
            if (model.Tab_ContractExtend != null && isloadTabExtend == true && model.Tab_ContractExtend.IsCreateContractExtend == true)
            {
                var ContractExtendModel = new Hre_ContractExtendModel();
                if (model.Tab_WorkHistory != null && model.Tab_WorkHistory.ContractExtendID != null)
                {
                    ContractExtendModel.ID = model.Tab_WorkHistory.ContractExtendID.Value;
                }
                ContractExtendModel.ContractID = Guid.NewGuid();
                ContractExtendModel.DateStart = model.Tab_ContractExtend.DateStartContractExtend;
                ContractExtendModel.AppendixContractTypeID = model.Tab_ContractExtend.AppendixContractTypeIDContractExtend;
                ContractExtendModel.DateSignedAppendixContract = model.Tab_ContractExtend.DateSignedAppendixContractContractExtend;
                ContractExtendModel.CurrencyIDSalary = model.Tab_ContractExtend.CurrencyIDSalaryContractExtend;
                var checkValidateContractExtend = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractExtendModel>(LanguageCode, ContractExtendModel, "Hre_ContractExtend", ref message);
                if (!checkValidateContractExtend)
                {
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }

            #endregion

            var modelSave = new Hre_WorkHistorySalaryModel();
            if (model.Tab_ContractExtend != null)
            {
                if (model.Tab_ContractExtend != null)
                {
                    foreach (var item in model.Tab_ContractExtend.GetType().GetProperties())
                    {
                        modelSave.SetPropertyValue(item.Name, model.Tab_ContractExtend.GetPropertyValue(item.Name));
                    }
                }
            }
            if (model.Tab_BasicSalary != null)
            {
                if (model.Tab_BasicSalary != null)
                {
                    foreach (var item in model.Tab_BasicSalary.GetType().GetProperties())
                    {
                        modelSave.SetPropertyValue(item.Name, model.Tab_BasicSalary.GetPropertyValue(item.Name));
                    }
                }
            }
            if (model.Tab_WorkHistory != null)
            {
                if (model.Tab_WorkHistory != null)
                {
                    foreach (var item in model.Tab_WorkHistory.GetType().GetProperties())
                    {
                        modelSave.SetPropertyValue(item.Name, model.Tab_WorkHistory.GetPropertyValue(item.Name));
                    }
                }
                if (model.Tab_WorkHistory.ProfileDetailOrganizationStructureID != null && model.Tab_WorkHistory.OrganizationStructureID == null)
                {
                    modelSave.OrganizationStructureID = model.Tab_WorkHistory.ProfileDetailOrganizationStructureID;
                }
                if (model.Tab_WorkHistory.ActionStatusWorkHistorySalary != null)
                {
                    modelSave.ActionStatus = model.Tab_WorkHistory.ActionStatusWorkHistorySalary;
                }
            }


            if (model.ActionStatus == "NotChangeWork")
            {
                return Json(model, JsonRequestBehavior.AllowGet);
            }

            if (model.Tab_WorkHistory != null)
            {
                var LstWorkhistoryByProfileID = WorkHistoryServices.GetWorkHistoryListByProfileID(model.Tab_WorkHistory.ProfileID).ToList();
                //Son.Vo - 20151113 - 0060102
                var profileServices = new Hre_ProfileServices();
                var profile = profileServices.GetProfileDataByID(model.Tab_WorkHistory.ProfileID);
                // Son.vo - Validate thêm theo task 0054444
                if (model.Tab_WorkHistory.Status == null)
                {
                    modelSave.Status = WorkHistoryStatus.E_WAITAPPROVE.ToString();
                }
                #region Son.Vo - 20160421 - 0066646
                if (model.ID == Guid.Empty && profile != null && profile.DateQuit <= model.Tab_WorkHistory.DateEffective)
                {
                    model.ActionStatus = ConstantDisplay.ProfileQuit.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
                #endregion
                // Son.Vo - 20150805 - theo task 0052969
                foreach (var history in LstWorkhistoryByProfileID)
                {
                    if (model.Tab_WorkHistory.ID == Guid.Empty && (history.Status != WorkHistoryStatus.E_REJECT.ToString() && history.Status != WorkHistoryStatus.E_CANCEL.ToString())
                        && model.Tab_WorkHistory.ProfileID == history.ProfileID && model.Tab_WorkHistory.DateEffective.Date == history.DateEffective.Date)
                    {
                        model.ActionStatus = ConstantDisplay.DuplicateWorkHistory.TranslateString();
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }

                var WorkHistoryOld = LstWorkhistoryByProfileID.OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (WorkHistoryOld != null)
                {
                    // Son.Vo - 20151028 - 0058916 - Lưu thông tin quá trình công tác cũ
                    modelSave.OrgStructureOldID = WorkHistoryOld.OrganizationStructureID;
                    modelSave.CostCentreOld = WorkHistoryOld.CostCentreName;
                    modelSave.SalaryClassNameOld = WorkHistoryOld.SalaryClassName;
                    modelSave.WorkLocationOld = WorkHistoryOld.WorkLocation;
                    modelSave.PositionOld = WorkHistoryOld.PositionName;
                    modelSave.JobTitleOld = WorkHistoryOld.JobTitleName;
                    modelSave.LaborTypeOld = WorkHistoryOld.LaborType;
                    modelSave.EmployeeTypeOld = WorkHistoryOld.EmployeeTypeName;
                    modelSave.PayrollGroupOld = WorkHistoryOld.PayrollGroupName;
                    modelSave.WorkPlaceOld = WorkHistoryOld.WorkPlaceName;
                }

                if (model.Tab_WorkHistory.SalaryClassID != null)
                {
                    var abilityTitleBySalaryClass = _AbilityTileServices.GetDataAbilityTileBySalaryClassID(model.Tab_WorkHistory.SalaryClassID.Value);
                    if (abilityTitleBySalaryClass != null)
                    {
                        modelSave.AbilityTileID = abilityTitleBySalaryClass.ID;
                    }
                }
                //Son.Vo - 20160314 - 0064632 - logic cập nhật lại nhân viên mới nhất
                #region Trường hợp tạo mới
                var lastWorkhistory = LstWorkhistoryByProfileID.FirstOrDefault();
                if (model.ID == Guid.Empty && model.ActionStatus != "1")
                {
                    if (lastWorkhistory != null)
                    {
                        if (model.Tab_WorkHistory.DateEffective > lastWorkhistory.DateEffective && model.Tab_WorkHistory.DateEffective <= DateTime.Now)
                        {
                            model.SetPropertyValue(Constant.ActionStatus, ConstantDisplay.HRM_HR_Profile_DoYouWantToCreateWH.ToString());
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (model.Tab_WorkHistory.ID == Guid.Empty)
                {
                    if (lastWorkhistory != null)
                    {
                        if (model.Tab_WorkHistory.DateEffective < lastWorkhistory.DateEffective)
                        {
                            model.SetPropertyValue(Constant.ActionStatus, ConstantDisplay.HRM_HR_Profile_DateEffectGreaterThanNow.ToString());
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (model.ID == Guid.Empty && model.ActionStatus == "1")
                {
                    //Son.Vo - 20170516 - 0082397
                    if (model.Tab_WorkHistory.Status == WorkHistoryStatus.E_APPROVED.ToString() &&
                        ((lastWorkhistory != null && lastWorkhistory.DateEffective.Date <= model.Tab_WorkHistory.DateEffective.Date && model.Tab_WorkHistory.DateEffective.Date <= DateTime.Now.Date)
                         || (lastWorkhistory == null && model.Tab_WorkHistory.DateEffective.Date <= DateTime.Now.Date)
                        )
                      )
                    {
                        profile.OrgStructureID = model.Tab_WorkHistory.OrganizationStructureID;
                        profile.JobTitleID = model.Tab_WorkHistory.JobTitleID;
                        profile.PositionID = model.Tab_WorkHistory.PositionID;
                        profile.DateOfEffect = model.Tab_WorkHistory.DateEffective;
                        profile.LaborType = model.Tab_WorkHistory.LaborType;
                        profile.CostCentreID = model.Tab_WorkHistory.CostCentreID;
                        profile.FormType = model.Tab_WorkHistory.FormType;
                        profile.EmpTypeID = model.Tab_WorkHistory.EmployeeTypeID;
                        profile.WorkingPlace = model.Tab_WorkHistory.WorkLocation;
                        profile.AbilityTileID = model.Tab_WorkHistory.AbilityTileID;
                        profile.UnitStructureID = model.Tab_WorkHistory.UnitStructureID;
                        //[To.Le][10/04/2017][Modify Func][0080142]2.263.8.2 Điều chỉnh logic khi cập nhật Thông tin quá Trình công tác sang Profile
                        profile.DateComeBack = model.Tab_WorkHistory.DateComeBack;
                        //Son.Vo - 20170516 - 0082397
                        profile.CompanyID = model.Tab_WorkHistory.CompanyID;
                        profile.EmployeeGroupID = model.Tab_WorkHistory.EmployeeGroupID;
                        profile.PayrollGroupID = model.Tab_WorkHistory.PayrollGroupID;
                        profile.PayrollCategoryID = model.Tab_WorkHistory.PayrollCategoryID;
                        profile.CostSourceID = model.Tab_WorkHistory.CostSourceID;
                        profile.CostActivityID = model.Tab_WorkHistory.CostActivityID;
                        profile.SalaryClassID = model.Tab_WorkHistory.SalaryClassID;
                        profile.WorkPlaceID = model.Tab_WorkHistory.WorkPlaceID;
                        profile.RegionID = model.Tab_WorkHistory.RegionID;
                        profile.TypeOfTransferID = model.Tab_WorkHistory.TypeOfTransferID;
                        profileServices.Edit(profile);
                    }
                }
                #endregion

                #region trường hợp edit
                if (model.ID != Guid.Empty)
                {
                    if (lastWorkhistory != null && model.ActionStatus != "1")
                    {
                        if (model.Tab_WorkHistory.DateEffective == lastWorkhistory.DateEffective && model.Tab_WorkHistory.ID != lastWorkhistory.ID)
                        {
                            model.SetPropertyValue(Constant.ActionStatus, ConstantDisplay.HRM_HR_Profile_DoYouWantToUpdateWH.ToString());
                            return Json(model, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (model.Tab_WorkHistory.ID != Guid.Empty && model.Tab_WorkHistory.ActionStatus == "1")
                {
                    //Son.Vo - 20170516 - 0082397
                    if (model.Tab_WorkHistory.Status == WorkHistoryStatus.E_APPROVED.ToString() &&
                        ((lastWorkhistory != null && lastWorkhistory.DateEffective.Date <= model.Tab_WorkHistory.DateEffective.Date && model.Tab_WorkHistory.DateEffective.Date <= DateTime.Now.Date)
                         || (lastWorkhistory == null && model.Tab_WorkHistory.DateEffective.Date <= DateTime.Now.Date)
                        )
                      )
                    {
                        profile.OrgStructureID = model.Tab_WorkHistory.OrganizationStructureID;
                        profile.JobTitleID = model.Tab_WorkHistory.JobTitleID;
                        profile.PositionID = model.Tab_WorkHistory.PositionID;
                        profile.DateOfEffect = model.Tab_WorkHistory.DateEffective;
                        profile.LaborType = model.Tab_WorkHistory.LaborType;
                        profile.CostCentreID = model.Tab_WorkHistory.CostCentreID;
                        profile.FormType = model.Tab_WorkHistory.FormType;
                        profile.EmpTypeID = model.Tab_WorkHistory.EmployeeTypeID;
                        profile.WorkingPlace = model.Tab_WorkHistory.WorkLocation;
                        profile.AbilityTileID = model.Tab_WorkHistory.AbilityTileID;
                        profile.UnitStructureID = model.Tab_WorkHistory.UnitStructureID;
                        //[To.Le][10/04/2017][Modify Func][0080142]2.263.8.2 Điều chỉnh logic khi cập nhật Thông tin quá Trình công tác sang Profile
                        profile.DateComeBack = model.Tab_WorkHistory.DateComeBack;
                        //Son.Vo - 20170516 - 0082397
                        profile.CompanyID = model.Tab_WorkHistory.CompanyID;
                        profile.EmployeeGroupID = model.Tab_WorkHistory.EmployeeGroupID;
                        profile.PayrollGroupID = model.Tab_WorkHistory.PayrollGroupID;
                        profile.PayrollCategoryID = model.Tab_WorkHistory.PayrollCategoryID;
                        profile.CostSourceID = model.Tab_WorkHistory.CostSourceID;
                        //Quyen.Quach - 17/08/2017 - 0086190
                        profile.ReplaceForReasonID = model.Tab_WorkHistory.ReplaceForReasonID;
                        profile.ReplaceForProfileID = model.Tab_WorkHistory.ReplaceForProfileID;
                        profile.CostActivityID = model.Tab_WorkHistory.CostActivityID;
                        profile.SalaryClassID = model.Tab_WorkHistory.SalaryClassID;
                        profile.WorkPlaceID = model.Tab_WorkHistory.WorkPlaceID;
                        profile.RegionID = model.Tab_WorkHistory.RegionID;
                        profile.TypeOfTransferID = model.Tab_WorkHistory.TypeOfTransferID;
                        #region Quyen.Quach- 18/08/2017- 0087003
                        if (model.Tab_WorkHistory.Supervisor != null)
                        {
                            var SupervisorID = WorkHistoryServices.getprofileNamebyCodeemp(model.Tab_WorkHistory.Supervisor.ToString());
                            if (SupervisorID != null)
                            {
                                profile.SupervisorID = SupervisorID.ID;
                            }
                        }
                        if (model.Tab_WorkHistory.MidSupervisor != null)
                        {
                            var MidSupervisorID = WorkHistoryServices.getprofileNamebyCodeemp(model.Tab_WorkHistory.MidSupervisor.ToString());
                            if (MidSupervisorID != null)
                            {
                                profile.MidSupervisorID = MidSupervisorID.ID;
                            }
                        }
                        if (model.Tab_WorkHistory.HighSupervisor != null)
                        {
                            var HighSupervisorID = WorkHistoryServices.getprofileNamebyCodeemp(model.Tab_WorkHistory.HighSupervisor.ToString());
                            if (HighSupervisorID != null)
                            {
                                profile.HighSupervisorID = HighSupervisorID.ID;
                            }
                        }
                        #endregion
                        profileServices.Edit(profile);
                    }
                }
                #endregion

                #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                if (model.ID == Guid.Empty && model.Tab_WorkHistory.Status == WorkHistoryStatus.E_APPROVED.ToString())
                {
                    string messageref = WorkHistoryServices.UpdateHeadProfile(model.Tab_WorkHistory.ProfileID, model.Tab_WorkHistory.PositionID);
                }
                #endregion

                //Son.Vo - 20170614 - 0084180
                if (lastWorkhistory != null)
                {
                    modelSave.CompanyOldID = lastWorkhistory.CompanyID;
                }
            }

            var service = new ActionService(UserLogin, LanguageCode);
            var modelReturn = service.UpdateOrCreate<Hre_WorkHistoryEntity, Hre_WorkHistorySalaryModel>(modelSave);
            var salaryservices = new Sal_BasicSalaryServices();

            #region Tạo lương CB
            if (isloadBasicSalary == true && model.Tab_BasicSalary != null && model.Tab_BasicSalary.IsCreateBasicSalary == true)
            {
                if (modelSave.GrossAmountSalary != null && modelSave.CurrencyIDSalary != null)
                {
                    if (modelSave.BasicSalaryID == Guid.Empty)
                    {
                        var salaryEntity = new Sal_BasicSalaryEntity();
                        salaryEntity.ProfileID = modelSave.ProfileID;
                        salaryEntity.JobLevel = modelSave.JobLevelSalary;
                        salaryEntity.SalAdjustmentCampaignID = modelSave.SalAdjustmentCampaignIDSalary;
                        salaryEntity.DecisionNo = modelSave.DecisionNoSalary;
                        salaryEntity.DateOfEffect = modelSave.DateEffective;
                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                        {
                            salaryEntity.E_GrossAmount = modelSave.GrossAmountSalary != null ? modelSave.GrossAmountSalary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_InsuranceAmount = modelSave.InsuranceAmountSalary != null ? modelSave.InsuranceAmountSalary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount1 = modelSave.AllowanceAmount1Salary != null ? modelSave.AllowanceAmount1Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount2 = modelSave.AllowanceAmount2Salary != null ? modelSave.AllowanceAmount2Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount3 = modelSave.AllowanceAmount3Salary != null ? modelSave.AllowanceAmount3Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount4 = modelSave.AllowanceAmount4Salary != null ? modelSave.AllowanceAmount4Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount5 = modelSave.AllowanceAmount5Salary != null ? modelSave.AllowanceAmount5Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount6 = modelSave.AllowanceAmount6Salary != null ? modelSave.AllowanceAmount6Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount7 = modelSave.AllowanceAmount7Salary != null ? modelSave.AllowanceAmount7Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount8 = modelSave.AllowanceAmount8Salary != null ? modelSave.AllowanceAmount8Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount9 = modelSave.AllowanceAmount9Salary != null ? modelSave.AllowanceAmount9Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount10 = modelSave.AllowanceAmount10Salary != null ? modelSave.AllowanceAmount10Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount11 = modelSave.AllowanceAmount11Salary != null ? modelSave.AllowanceAmount11Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount12 = modelSave.AllowanceAmount12Salary != null ? modelSave.AllowanceAmount12Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount13 = modelSave.AllowanceAmount13Salary != null ? modelSave.AllowanceAmount13Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount14 = modelSave.AllowanceAmount14Salary != null ? modelSave.AllowanceAmount14Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount15 = modelSave.AllowanceAmount15Salary != null ? modelSave.AllowanceAmount15Salary.ToString().Encrypt() : string.Empty;
                        }
                        else
                        {
                            salaryEntity.GrossAmount = modelSave.GrossAmountSalary;
                            salaryEntity.InsuranceAmount = modelSave.InsuranceAmountSalary;
                            salaryEntity.E_GrossAmount = modelSave.GrossAmountSalary != null ? modelSave.GrossAmountSalary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_InsuranceAmount = modelSave.InsuranceAmountSalary != null ? modelSave.InsuranceAmountSalary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount1 = modelSave.AllowanceAmount1Salary != null ? modelSave.AllowanceAmount1Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount2 = modelSave.AllowanceAmount2Salary != null ? modelSave.AllowanceAmount2Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount3 = modelSave.AllowanceAmount3Salary != null ? modelSave.AllowanceAmount3Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount4 = modelSave.AllowanceAmount4Salary != null ? modelSave.AllowanceAmount4Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount5 = modelSave.AllowanceAmount5Salary != null ? modelSave.AllowanceAmount5Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount6 = modelSave.AllowanceAmount6Salary != null ? modelSave.AllowanceAmount6Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount7 = modelSave.AllowanceAmount7Salary != null ? modelSave.AllowanceAmount7Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount8 = modelSave.AllowanceAmount8Salary != null ? modelSave.AllowanceAmount8Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount9 = modelSave.AllowanceAmount9Salary != null ? modelSave.AllowanceAmount9Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount10 = modelSave.AllowanceAmount10Salary != null ? modelSave.AllowanceAmount10Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount11 = modelSave.AllowanceAmount11Salary != null ? modelSave.AllowanceAmount11Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount12 = modelSave.AllowanceAmount12Salary != null ? modelSave.AllowanceAmount12Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount13 = modelSave.AllowanceAmount13Salary != null ? modelSave.AllowanceAmount13Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount14 = modelSave.AllowanceAmount14Salary != null ? modelSave.AllowanceAmount14Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.E_AllowanceAmount15 = modelSave.AllowanceAmount15Salary != null ? modelSave.AllowanceAmount15Salary.ToString().Encrypt() : string.Empty;
                            salaryEntity.AllowanceAmount2 = modelSave.AllowanceAmount2Salary;
                            salaryEntity.AllowanceAmount1 = modelSave.AllowanceAmount1Salary;
                            salaryEntity.AllowanceAmount3 = modelSave.AllowanceAmount3Salary;
                            salaryEntity.AllowanceAmount4 = modelSave.AllowanceAmount4Salary;
                            salaryEntity.AllowanceAmount5 = modelSave.AllowanceAmount5Salary;
                            salaryEntity.AllowanceAmount6 = modelSave.AllowanceAmount6Salary;
                            salaryEntity.AllowanceAmount7 = modelSave.AllowanceAmount7Salary;
                            salaryEntity.AllowanceAmount8 = modelSave.AllowanceAmount8Salary;
                            salaryEntity.AllowanceAmount9 = modelSave.AllowanceAmount9Salary;
                            salaryEntity.AllowanceAmount10 = modelSave.AllowanceAmount10Salary;
                            salaryEntity.AllowanceAmount11 = modelSave.AllowanceAmount11Salary;
                            salaryEntity.AllowanceAmount12 = modelSave.AllowanceAmount12Salary;
                            salaryEntity.AllowanceAmount13 = modelSave.AllowanceAmount13Salary;
                            salaryEntity.AllowanceAmount14 = modelSave.AllowanceAmount14Salary;
                            salaryEntity.AllowanceAmount15 = modelSave.AllowanceAmount15Salary;
                        }
                        salaryEntity.CurrencyID = modelSave.CurrencyIDSalary;
                        salaryEntity.CurrencyInsID = modelSave.CurrencyInsID;
                        salaryEntity.Status = modelSave.Status; // Son.Vo - 20161022 - 0074678
                        salaryEntity.Note = modelSave.NoteSalary;

                        salaryEntity.ClassRateID = modelSave.ClassRateIDSalary;
                        salaryEntity.RankRateID = modelSave.RankRateIDSalary;
                        salaryEntity.PriceTypeID = modelSave.PriceTypeIDSalary;
                        salaryEntity.PersonalRate = modelSave.PersonalRateSalary;
                        salaryEntity.AllowanceType1ID = modelSave.AllowanceType1IDSalary;
                        salaryEntity.CurrencyID1 = modelSave.CurrencyID1Salary;

                        salaryEntity.AllowanceType2ID = modelSave.AllowanceType2IDSalary;
                        salaryEntity.CurrencyID2 = modelSave.CurrencyID2Salary;

                        salaryEntity.AllowanceType3ID = modelSave.AllowanceType3IDSalary;
                        salaryEntity.CurrencyID3 = modelSave.CurrencyID3Salary;

                        salaryEntity.AllowanceType4ID = modelSave.AllowanceType4IDSalary;
                        salaryEntity.CurrencyID4 = modelSave.CurrencyID4Salary;

                        salaryEntity.AllowanceTypeID5 = modelSave.AllowanceTypeID5Salary;
                        salaryEntity.CurrencyID5 = modelSave.CurrencyID5Salary;

                        salaryEntity.AllowanceTypeID6 = modelSave.AllowanceTypeID6Salary;
                        salaryEntity.CurrencyID6 = modelSave.CurrencyID6Salary;

                        salaryEntity.AllowanceTypeID7 = modelSave.AllowanceTypeID7Salary;
                        salaryEntity.CurrencyID7 = modelSave.CurrencyID7Salary;

                        salaryEntity.AllowanceTypeID8 = modelSave.AllowanceTypeID8Salary;
                        salaryEntity.CurrencyID8 = modelSave.CurrencyID8Salary;

                        salaryEntity.AllowanceTypeID9 = modelSave.AllowanceTypeID9Salary;
                        salaryEntity.CurrencyID9 = modelSave.CurrencyID9Salary;

                        salaryEntity.AllowanceTypeID10 = modelSave.AllowanceTypeID10Salary;
                        salaryEntity.CurrencyID10 = modelSave.CurrencyID10Salary;

                        salaryEntity.AllowanceTypeID11 = modelSave.AllowanceTypeID11Salary;
                        salaryEntity.CurrencyID11 = modelSave.CurrencyID11Salary;

                        salaryEntity.AllowanceTypeID12 = modelSave.AllowanceTypeID12Salary;
                        salaryEntity.CurrencyID12 = modelSave.CurrencyID12Salary;

                        salaryEntity.AllowanceTypeID13 = modelSave.AllowanceTypeID13Salary;
                        salaryEntity.CurrencyID13 = modelSave.CurrencyID13Salary;

                        salaryEntity.AllowanceTypeID14 = modelSave.AllowanceTypeID14Salary;
                        salaryEntity.CurrencyID14 = modelSave.CurrencyID14Salary;

                        salaryEntity.AllowanceTypeID15 = modelSave.AllowanceTypeID15Salary;
                        salaryEntity.CurrencyID15 = modelSave.CurrencyID15Salary;
                        salaryEntity.FormCompSalary = modelSave.FormCompSalary;
                        salaryEntity.WorkHistoryID = modelReturn.ID;
                        message = WorkHistoryServices.Add(salaryEntity);
                    }
                    else
                    {
                        var basicSalaryEntitty = salaryservices.GetBasicSalaryByID(modelSave.BasicSalaryID.Value);
                        if (basicSalaryEntitty != null)
                        {
                            basicSalaryEntitty.JobLevel = modelSave.JobLevelSalary;
                            basicSalaryEntitty.SalAdjustmentCampaignID = modelSave.SalAdjustmentCampaignIDSalary;
                            basicSalaryEntitty.DecisionNo = modelSave.DecisionNoSalary;
                            basicSalaryEntitty.DateOfEffect = modelSave.DateEffective;

                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                basicSalaryEntitty.E_GrossAmount = modelSave.GrossAmountSalary != null ? modelSave.GrossAmountSalary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_InsuranceAmount = modelSave.InsuranceAmountSalary != null ? modelSave.InsuranceAmountSalary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount1 = modelSave.AllowanceAmount1Salary != null ? modelSave.AllowanceAmount1Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount2 = modelSave.AllowanceAmount2Salary != null ? modelSave.AllowanceAmount2Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount3 = modelSave.AllowanceAmount3Salary != null ? modelSave.AllowanceAmount3Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount4 = modelSave.AllowanceAmount4Salary != null ? modelSave.AllowanceAmount4Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount5 = modelSave.AllowanceAmount5Salary != null ? modelSave.AllowanceAmount5Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount6 = modelSave.AllowanceAmount6Salary != null ? modelSave.AllowanceAmount6Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount7 = modelSave.AllowanceAmount7Salary != null ? modelSave.AllowanceAmount7Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount8 = modelSave.AllowanceAmount8Salary != null ? modelSave.AllowanceAmount8Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount9 = modelSave.AllowanceAmount9Salary != null ? modelSave.AllowanceAmount9Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount10 = modelSave.AllowanceAmount10Salary != null ? modelSave.AllowanceAmount10Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount11 = modelSave.AllowanceAmount11Salary != null ? modelSave.AllowanceAmount11Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount12 = modelSave.AllowanceAmount12Salary != null ? modelSave.AllowanceAmount12Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount13 = modelSave.AllowanceAmount13Salary != null ? modelSave.AllowanceAmount13Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount14 = modelSave.AllowanceAmount14Salary != null ? modelSave.AllowanceAmount14Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount15 = modelSave.AllowanceAmount15Salary != null ? modelSave.AllowanceAmount15Salary.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                basicSalaryEntitty.GrossAmount = modelSave.GrossAmountSalary;
                                basicSalaryEntitty.InsuranceAmount = modelSave.InsuranceAmountSalary;
                                basicSalaryEntitty.E_GrossAmount = modelSave.GrossAmountSalary != null ? modelSave.GrossAmountSalary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_InsuranceAmount = modelSave.InsuranceAmountSalary != null ? modelSave.InsuranceAmountSalary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount1 = modelSave.AllowanceAmount1Salary != null ? modelSave.AllowanceAmount1Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount2 = modelSave.AllowanceAmount2Salary != null ? modelSave.AllowanceAmount2Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount3 = modelSave.AllowanceAmount3Salary != null ? modelSave.AllowanceAmount3Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount4 = modelSave.AllowanceAmount4Salary != null ? modelSave.AllowanceAmount4Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount5 = modelSave.AllowanceAmount5Salary != null ? modelSave.AllowanceAmount5Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount6 = modelSave.AllowanceAmount6Salary != null ? modelSave.AllowanceAmount6Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount7 = modelSave.AllowanceAmount7Salary != null ? modelSave.AllowanceAmount7Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount8 = modelSave.AllowanceAmount8Salary != null ? modelSave.AllowanceAmount8Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount9 = modelSave.AllowanceAmount9Salary != null ? modelSave.AllowanceAmount9Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount10 = modelSave.AllowanceAmount10Salary != null ? modelSave.AllowanceAmount10Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount11 = modelSave.AllowanceAmount11Salary != null ? modelSave.AllowanceAmount11Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount12 = modelSave.AllowanceAmount12Salary != null ? modelSave.AllowanceAmount12Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount13 = modelSave.AllowanceAmount13Salary != null ? modelSave.AllowanceAmount13Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount14 = modelSave.AllowanceAmount14Salary != null ? modelSave.AllowanceAmount14Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.E_AllowanceAmount15 = modelSave.AllowanceAmount15Salary != null ? modelSave.AllowanceAmount15Salary.ToString().Encrypt() : string.Empty;
                                basicSalaryEntitty.AllowanceAmount2 = modelSave.AllowanceAmount2Salary;
                                basicSalaryEntitty.AllowanceAmount1 = modelSave.AllowanceAmount1Salary;
                                basicSalaryEntitty.AllowanceAmount3 = modelSave.AllowanceAmount3Salary;
                                basicSalaryEntitty.AllowanceAmount4 = modelSave.AllowanceAmount4Salary;
                                basicSalaryEntitty.AllowanceAmount5 = modelSave.AllowanceAmount5Salary;
                                basicSalaryEntitty.AllowanceAmount6 = modelSave.AllowanceAmount6Salary;
                                basicSalaryEntitty.AllowanceAmount7 = modelSave.AllowanceAmount7Salary;
                                basicSalaryEntitty.AllowanceAmount8 = modelSave.AllowanceAmount8Salary;
                                basicSalaryEntitty.AllowanceAmount9 = modelSave.AllowanceAmount9Salary;
                                basicSalaryEntitty.AllowanceAmount10 = modelSave.AllowanceAmount10Salary;
                                basicSalaryEntitty.AllowanceAmount11 = modelSave.AllowanceAmount11Salary;
                                basicSalaryEntitty.AllowanceAmount12 = modelSave.AllowanceAmount12Salary;
                                basicSalaryEntitty.AllowanceAmount13 = modelSave.AllowanceAmount13Salary;
                                basicSalaryEntitty.AllowanceAmount14 = modelSave.AllowanceAmount14Salary;
                                basicSalaryEntitty.AllowanceAmount15 = modelSave.AllowanceAmount15Salary;
                            }
                            basicSalaryEntitty.CurrencyID = modelSave.CurrencyIDSalary;
                            //basicSalaryEntitty.AmountTotal = modelSave.AmountTotalSalary;
                            basicSalaryEntitty.Status = modelSave.StatusSalary;
                            basicSalaryEntitty.Note = modelSave.NoteSalary;
                            basicSalaryEntitty.ClassRateID = modelSave.ClassRateIDSalary;
                            basicSalaryEntitty.RankRateID = modelSave.RankRateIDSalary;
                            basicSalaryEntitty.PriceTypeID = modelSave.PriceTypeIDSalary;
                            basicSalaryEntitty.PersonalRate = modelSave.PersonalRateSalary;
                            basicSalaryEntitty.AllowanceType1ID = modelSave.AllowanceType1IDSalary;
                            basicSalaryEntitty.CurrencyID1 = modelSave.CurrencyID1Salary;
                            basicSalaryEntitty.AllowanceType2ID = modelSave.AllowanceType2IDSalary;
                            basicSalaryEntitty.CurrencyID2 = modelSave.CurrencyID2Salary;
                            basicSalaryEntitty.AllowanceType3ID = modelSave.AllowanceType3IDSalary;
                            basicSalaryEntitty.CurrencyID3 = modelSave.CurrencyID3Salary;
                            basicSalaryEntitty.AllowanceType4ID = modelSave.AllowanceType4IDSalary;
                            basicSalaryEntitty.CurrencyID4 = modelSave.CurrencyID4Salary;
                            basicSalaryEntitty.AllowanceTypeID5 = modelSave.AllowanceTypeID5Salary;
                            basicSalaryEntitty.CurrencyID5 = modelSave.CurrencyID5Salary;
                            basicSalaryEntitty.AllowanceTypeID6 = modelSave.AllowanceTypeID6Salary;
                            basicSalaryEntitty.CurrencyID6 = modelSave.CurrencyID6Salary;
                            basicSalaryEntitty.AllowanceTypeID7 = modelSave.AllowanceTypeID7Salary;
                            basicSalaryEntitty.CurrencyID7 = modelSave.CurrencyID7Salary;
                            basicSalaryEntitty.AllowanceTypeID8 = modelSave.AllowanceTypeID8Salary;
                            basicSalaryEntitty.CurrencyID8 = modelSave.CurrencyID8Salary;
                            basicSalaryEntitty.AllowanceTypeID9 = modelSave.AllowanceTypeID9Salary;
                            basicSalaryEntitty.CurrencyID9 = modelSave.CurrencyID9Salary;
                            basicSalaryEntitty.AllowanceTypeID10 = modelSave.AllowanceTypeID10Salary;
                            basicSalaryEntitty.CurrencyID10 = modelSave.CurrencyID10Salary;
                            basicSalaryEntitty.AllowanceTypeID11 = modelSave.AllowanceTypeID11Salary;
                            basicSalaryEntitty.CurrencyID11 = modelSave.CurrencyID11Salary;
                            basicSalaryEntitty.AllowanceTypeID12 = modelSave.AllowanceTypeID12Salary;
                            basicSalaryEntitty.CurrencyID12 = modelSave.CurrencyID12Salary;
                            basicSalaryEntitty.AllowanceTypeID13 = modelSave.AllowanceTypeID13Salary;
                            basicSalaryEntitty.CurrencyID13 = modelSave.CurrencyID13Salary;
                            basicSalaryEntitty.AllowanceTypeID14 = modelSave.AllowanceTypeID14Salary;
                            basicSalaryEntitty.CurrencyID14 = modelSave.CurrencyID14Salary;
                            basicSalaryEntitty.AllowanceTypeID15 = modelSave.AllowanceTypeID15Salary;
                            basicSalaryEntitty.CurrencyID15 = modelSave.CurrencyID15Salary;
                            basicSalaryEntitty.FormCompSalary = modelSave.FormCompSalary;
                            basicSalaryEntitty.WorkHistoryID = modelReturn.ID;
                            string messageRef = salaryservices.Edit(basicSalaryEntitty);
                        }
                    }
                }
            }
            #endregion

            #region Tạo PLHD
            if (model.Tab_ContractExtend != null && isloadTabExtend == true && model.Tab_ContractExtend.IsCreateContractExtend == true)
            {
                //Son.Vo - 20170109 - 0077580
                if (modelSave.ProfileID != null && modelSave.DateStartContractExtend != null)
                {
                    var contractservices = new Hre_ContractServices();
                    var _ContractExtendServices = new Hre_ContractExtendServices();
                    var lastContract = contractservices.GetLastContractByProfile(modelSave.ProfileID, modelSave.DateStartContractExtend.Value);
                    if (lastContract == null)
                    {
                        model.ActionStatus = ConstantDisplay.HRM_HR_NoContract.TranslateString();
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        if (modelSave.ContractExtendID == null)
                        {
                            var contractExtendEntity = new Hre_ContractExtendEntity();
                            //Quyen.Quach 28/11/2017 0090491
                            contractExtendEntity.ContractID = lastContract.ID;
                            contractExtendEntity.TypeAppendix = modelSave.TypeAppendixContractExtend;
                            contractExtendEntity.AnnexCode = modelSave.AnnexCodeContractExtend;
                            contractExtendEntity.DateStart = modelSave.DateStartContractExtend;
                            contractExtendEntity.DateEnd = modelSave.DateEndContractExtend;
                            contractExtendEntity.DateAuthorize = modelSave.DateAuthorizeContractExtend;
                            contractExtendEntity.ClassRateID = modelSave.ClassRateIDContractExtend;
                            contractExtendEntity.RankRateID = modelSave.RankRateIDContractExtend;
                            //Quyen.Quach 02/10/2017 0087467
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                contractExtendEntity.E_Salary = modelSave.SalaryContractExtend != null ? modelSave.SalaryContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_InsuranceAmount = modelSave.InsuranceAmountContractExtend != null ? modelSave.InsuranceAmountContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance1 = modelSave.Allowance1ContractExtend != null ? modelSave.Allowance1ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance2 = modelSave.Allowance2ContractExtend != null ? modelSave.Allowance2ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance3 = modelSave.Allowance3ContractExtend != null ? modelSave.Allowance3ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance4 = modelSave.Allowance4ContractExtend != null ? modelSave.Allowance4ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance5 = modelSave.Allowance5ContractExtend != null ? modelSave.Allowance5ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance6 = modelSave.Allowance6ContractExtend != null ? modelSave.Allowance6ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance7 = modelSave.Allowance7ContractExtend != null ? modelSave.Allowance7ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance8 = modelSave.Allowance8ContractExtend != null ? modelSave.Allowance8ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance9 = modelSave.Allowance9ContractExtend != null ? modelSave.Allowance9ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance10 = modelSave.Allowance10ContractExtend != null ? modelSave.Allowance10ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance11 = modelSave.Allowance11ContractExtend != null ? modelSave.Allowance11ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance12 = modelSave.Allowance12ContractExtend != null ? modelSave.Allowance12ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance13 = modelSave.Allowance13ContractExtend != null ? modelSave.Allowance13ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance14 = modelSave.Allowance14ContractExtend != null ? modelSave.Allowance14ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance15 = modelSave.Allowance15ContractExtend != null ? modelSave.Allowance15ContractExtend.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                //mã hóa lương + lbhxh
                                contractExtendEntity.Salary = modelSave.SalaryContractExtend;
                                contractExtendEntity.E_Salary = modelSave.SalaryContractExtend != null ? modelSave.SalaryContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.InsuranceAmount = modelSave.InsuranceAmountContractExtend;
                                contractExtendEntity.E_InsuranceAmount = modelSave.InsuranceAmountContractExtend != null ? modelSave.InsuranceAmountContractExtend.ToString().Encrypt() : string.Empty;
                                //mã hóa 15 loại phụ cấp
                                contractExtendEntity.E_Allowance1 = modelSave.Allowance1ContractExtend != null ? modelSave.Allowance1ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance2 = modelSave.Allowance2ContractExtend != null ? modelSave.Allowance2ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance3 = modelSave.Allowance3ContractExtend != null ? modelSave.Allowance3ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance4 = modelSave.Allowance4ContractExtend != null ? modelSave.Allowance4ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance5 = modelSave.Allowance5ContractExtend != null ? modelSave.Allowance5ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance6 = modelSave.Allowance6ContractExtend != null ? modelSave.Allowance6ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance7 = modelSave.Allowance7ContractExtend != null ? modelSave.Allowance7ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance8 = modelSave.Allowance8ContractExtend != null ? modelSave.Allowance8ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance9 = modelSave.Allowance9ContractExtend != null ? modelSave.Allowance9ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance10 = modelSave.Allowance10ContractExtend != null ? modelSave.Allowance10ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance11 = modelSave.Allowance11ContractExtend != null ? modelSave.Allowance11ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance12 = modelSave.Allowance12ContractExtend != null ? modelSave.Allowance12ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance13 = modelSave.Allowance13ContractExtend != null ? modelSave.Allowance13ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance14 = modelSave.Allowance14ContractExtend != null ? modelSave.Allowance14ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.E_Allowance15 = modelSave.Allowance15ContractExtend != null ? modelSave.Allowance15ContractExtend.ToString().Encrypt() : string.Empty;
                                contractExtendEntity.Allowance1 = modelSave.Allowance1ContractExtend;
                                contractExtendEntity.Allowance2 = modelSave.Allowance2ContractExtend;
                                contractExtendEntity.Allowance3 = modelSave.Allowance3ContractExtend;
                                contractExtendEntity.Allowance4 = modelSave.Allowance4ContractExtend;
                                contractExtendEntity.Allowance5 = modelSave.Allowance5ContractExtend;
                                contractExtendEntity.Allowance6 = modelSave.Allowance6ContractExtend;
                                contractExtendEntity.Allowance7 = modelSave.Allowance7ContractExtend;
                                contractExtendEntity.Allowance8 = modelSave.Allowance8ContractExtend;
                                contractExtendEntity.Allowance9 = modelSave.Allowance9ContractExtend;
                                contractExtendEntity.Allowance10 = modelSave.Allowance10ContractExtend;
                                contractExtendEntity.Allowance11 = modelSave.Allowance11ContractExtend;
                                contractExtendEntity.Allowance12 = modelSave.Allowance12ContractExtend;
                                contractExtendEntity.Allowance13 = modelSave.Allowance13ContractExtend;
                                contractExtendEntity.Allowance14 = modelSave.Allowance14ContractExtend;
                                contractExtendEntity.Allowance15 = modelSave.Allowance15ContractExtend;
                            }

                            contractExtendEntity.CurrencyIDSalary = modelSave.CurrencyIDSalaryContractExtend;
                            contractExtendEntity.CurrencyID = modelSave.CurrencyIDContractExtend;
                            contractExtendEntity.AppendixContractTypeID = modelSave.AppendixContractTypeIDContractExtend;
                            contractExtendEntity.PositionID = modelSave.PositionIDContractExtend;
                            contractExtendEntity.JobTitleID = modelSave.JobTitleIDContractExtend;
                            contractExtendEntity.EmployeeTypeID = modelSave.EmployeeTypeIDContractExtend;
                            contractExtendEntity.DateSignedAppendixContract = modelSave.DateSignedAppendixContractContractExtend;
                            contractExtendEntity.HourWorkInMonth = modelSave.HourWorkInMonthContractExtend;
                            contractExtendEntity.KPI = modelSave.KPIContractExtend;
                            contractExtendEntity.WorkPlaceID = modelSave.WorkPlaceIDContractExtend;
                            contractExtendEntity.ProfileSingID = modelSave.ProfileSingIDContractExtend;

                            contractExtendEntity.AllowanceID1 = modelSave.AllowanceID1ContractExtend;
                            contractExtendEntity.CurrencyID1 = modelSave.CurrencyID1ContractExtend;

                            contractExtendEntity.AllowanceID2 = modelSave.AllowanceID2ContractExtend;
                            contractExtendEntity.CurrencyID2 = modelSave.CurrencyID2ContractExtend;

                            contractExtendEntity.AllowanceID3 = modelSave.AllowanceID3ContractExtend;
                            contractExtendEntity.CurrencyID3 = modelSave.CurrencyID3ContractExtend;

                            contractExtendEntity.AllowanceID4 = modelSave.AllowanceID4ContractExtend;
                            contractExtendEntity.CurrencyID4 = modelSave.CurrencyID4ContractExtend;

                            contractExtendEntity.AllowanceID5 = modelSave.AllowanceID5ContractExtend;
                            contractExtendEntity.CurrencyID5 = modelSave.CurrencyID5ContractExtend;

                            contractExtendEntity.AllowanceID6 = modelSave.AllowanceID6ContractExtend;
                            contractExtendEntity.CurrencyID6 = modelSave.CurrencyID6ContractExtend;

                            contractExtendEntity.AllowanceID7 = modelSave.AllowanceID7ContractExtend;
                            contractExtendEntity.CurrencyID7 = modelSave.CurrencyID7ContractExtend;

                            contractExtendEntity.AllowanceID8 = modelSave.AllowanceID8ContractExtend;
                            contractExtendEntity.CurrencyID8 = modelSave.CurrencyID8ContractExtend;

                            contractExtendEntity.AllowanceID9 = modelSave.AllowanceID9ContractExtend;
                            contractExtendEntity.CurrencyID9 = modelSave.CurrencyID9ContractExtend;

                            contractExtendEntity.AllowanceID10 = modelSave.AllowanceID10ContractExtend;
                            contractExtendEntity.CurrencyID10 = modelSave.CurrencyID10ContractExtend;

                            contractExtendEntity.AllowanceID11 = modelSave.AllowanceID11ContractExtend;
                            contractExtendEntity.CurrencyID11 = modelSave.CurrencyID11ContractExtend;

                            contractExtendEntity.AllowanceID12 = modelSave.AllowanceID12ContractExtend;
                            contractExtendEntity.CurrencyID12 = modelSave.CurrencyID12ContractExtend;

                            contractExtendEntity.AllowanceID13 = modelSave.AllowanceID13ContractExtend;
                            contractExtendEntity.CurrencyID13 = modelSave.CurrencyID13ContractExtend;

                            contractExtendEntity.AllowanceID14 = modelSave.AllowanceID14ContractExtend;
                            contractExtendEntity.CurrencyID14 = modelSave.CurrencyID14ContractExtend;

                            contractExtendEntity.AllowanceID15 = modelSave.AllowanceID15ContractExtend;
                            contractExtendEntity.CurrencyID15 = modelSave.CurrencyID15ContractExtend;

                            contractExtendEntity.WorkHistoryID = modelReturn.ID;
                            contractExtendEntity.Note = modelSave.NoteContractExtend;
                            //Quyen.Quach 09/12/2017 Edit khôngcó dữ liệu
                            contractExtendEntity.IsCreateContractExtend = modelSave.IsCreateContractExtend;
                            message = WorkHistoryServices.Add(contractExtendEntity);
                            if (modelSave.AppendixCreateBasicSalaryContractExtend == true)
                            {
                                salaryservices.CreateBasicSalaryByContractExtend(contractExtendEntity);
                            }
                            if (modelSave.AppendixCreateInsuranceSalaryContractExtend == true)
                            {
                                salaryservices.CreateInsuranceSalaryByContractExtend(contractExtendEntity);
                            }
                        }
                        else
                        {
                            var contractExtendEntity = _ContractExtendServices.GetContractExtendByWorkhistoryID(modelSave.ContractExtendID.Value);
                            if (contractExtendEntity != null)
                            {
                                contractExtendEntity.ContractID = lastContract.ID;
                                contractExtendEntity.TypeAppendix = modelSave.TypeAppendixContractExtend;
                                contractExtendEntity.AnnexCode = modelSave.AnnexCodeContractExtend;
                                contractExtendEntity.DateStart = modelSave.DateStartContractExtend;
                                contractExtendEntity.DateEnd = modelSave.DateEndContractExtend;
                                contractExtendEntity.DateAuthorize = modelSave.DateAuthorizeContractExtend;
                                contractExtendEntity.ClassRateID = modelSave.ClassRateIDContractExtend;
                                contractExtendEntity.RankRateID = modelSave.RankRateIDContractExtend;

                                //Quyen.Quach 02/10/2017 0087467
                                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                {
                                    contractExtendEntity.E_Salary = modelSave.SalaryContractExtend != null ? modelSave.SalaryContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_InsuranceAmount = modelSave.InsuranceAmountContractExtend != null ? modelSave.InsuranceAmountContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance1 = modelSave.Allowance1ContractExtend != null ? modelSave.Allowance1ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance2 = modelSave.Allowance2ContractExtend != null ? modelSave.Allowance2ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance3 = modelSave.Allowance3ContractExtend != null ? modelSave.Allowance3ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance4 = modelSave.Allowance4ContractExtend != null ? modelSave.Allowance4ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance5 = modelSave.Allowance5ContractExtend != null ? modelSave.Allowance5ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance6 = modelSave.Allowance6ContractExtend != null ? modelSave.Allowance6ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance7 = modelSave.Allowance7ContractExtend != null ? modelSave.Allowance7ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance8 = modelSave.Allowance8ContractExtend != null ? modelSave.Allowance8ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance9 = modelSave.Allowance9ContractExtend != null ? modelSave.Allowance9ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance10 = modelSave.Allowance10ContractExtend != null ? modelSave.Allowance10ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance11 = modelSave.Allowance11ContractExtend != null ? modelSave.Allowance11ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance12 = modelSave.Allowance12ContractExtend != null ? modelSave.Allowance12ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance13 = modelSave.Allowance13ContractExtend != null ? modelSave.Allowance13ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance14 = modelSave.Allowance14ContractExtend != null ? modelSave.Allowance14ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance15 = modelSave.Allowance15ContractExtend != null ? modelSave.Allowance15ContractExtend.ToString().Encrypt() : string.Empty;
                                }
                                else
                                {
                                    //mã hóa lương + lbhxh
                                    contractExtendEntity.Salary = modelSave.SalaryContractExtend;
                                    contractExtendEntity.E_Salary = modelSave.SalaryContractExtend != null ? modelSave.SalaryContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.InsuranceAmount = modelSave.InsuranceAmountContractExtend;
                                    contractExtendEntity.E_InsuranceAmount = modelSave.InsuranceAmountContractExtend != null ? modelSave.InsuranceAmountContractExtend.ToString().Encrypt() : string.Empty;
                                    //mã hóa 15 loại phụ cấp
                                    contractExtendEntity.E_Allowance1 = modelSave.Allowance1ContractExtend != null ? modelSave.Allowance1ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance2 = modelSave.Allowance2ContractExtend != null ? modelSave.Allowance2ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance3 = modelSave.Allowance3ContractExtend != null ? modelSave.Allowance3ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance4 = modelSave.Allowance4ContractExtend != null ? modelSave.Allowance4ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance5 = modelSave.Allowance5ContractExtend != null ? modelSave.Allowance5ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance6 = modelSave.Allowance6ContractExtend != null ? modelSave.Allowance6ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance7 = modelSave.Allowance7ContractExtend != null ? modelSave.Allowance7ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance8 = modelSave.Allowance8ContractExtend != null ? modelSave.Allowance8ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance9 = modelSave.Allowance9ContractExtend != null ? modelSave.Allowance9ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance10 = modelSave.Allowance10ContractExtend != null ? modelSave.Allowance10ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance11 = modelSave.Allowance11ContractExtend != null ? modelSave.Allowance11ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance12 = modelSave.Allowance12ContractExtend != null ? modelSave.Allowance12ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance13 = modelSave.Allowance13ContractExtend != null ? modelSave.Allowance13ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance14 = modelSave.Allowance14ContractExtend != null ? modelSave.Allowance14ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.E_Allowance15 = modelSave.Allowance15ContractExtend != null ? modelSave.Allowance15ContractExtend.ToString().Encrypt() : string.Empty;
                                    contractExtendEntity.Allowance1 = modelSave.Allowance1ContractExtend;
                                    contractExtendEntity.Allowance2 = modelSave.Allowance2ContractExtend;
                                    contractExtendEntity.Allowance3 = modelSave.Allowance3ContractExtend;
                                    contractExtendEntity.Allowance4 = modelSave.Allowance4ContractExtend;
                                    contractExtendEntity.Allowance5 = modelSave.Allowance5ContractExtend;
                                    contractExtendEntity.Allowance6 = modelSave.Allowance6ContractExtend;
                                    contractExtendEntity.Allowance7 = modelSave.Allowance7ContractExtend;
                                    contractExtendEntity.Allowance8 = modelSave.Allowance8ContractExtend;
                                    contractExtendEntity.Allowance9 = modelSave.Allowance9ContractExtend;
                                    contractExtendEntity.Allowance10 = modelSave.Allowance10ContractExtend;
                                    contractExtendEntity.Allowance11 = modelSave.Allowance11ContractExtend;
                                    contractExtendEntity.Allowance12 = modelSave.Allowance12ContractExtend;
                                    contractExtendEntity.Allowance13 = modelSave.Allowance13ContractExtend;
                                    contractExtendEntity.Allowance14 = modelSave.Allowance14ContractExtend;
                                    contractExtendEntity.Allowance15 = modelSave.Allowance15ContractExtend;
                                }


                                contractExtendEntity.CurrencyIDSalary = modelSave.CurrencyIDSalaryContractExtend;
                                contractExtendEntity.CurrencyID = modelSave.CurrencyIDContractExtend;
                                contractExtendEntity.AppendixContractTypeID = modelSave.AppendixContractTypeIDContractExtend;
                                contractExtendEntity.PositionID = modelSave.PositionIDContractExtend;
                                contractExtendEntity.JobTitleID = modelSave.JobTitleIDContractExtend;
                                contractExtendEntity.EmployeeTypeID = modelSave.EmployeeTypeIDContractExtend;
                                contractExtendEntity.DateSignedAppendixContract = modelSave.DateSignedAppendixContractContractExtend;
                                contractExtendEntity.HourWorkInMonth = modelSave.HourWorkInMonthContractExtend;
                                contractExtendEntity.KPI = modelSave.KPIContractExtend;
                                contractExtendEntity.WorkPlaceID = modelSave.WorkPlaceIDContractExtend;
                                contractExtendEntity.ProfileSingID = modelSave.ProfileSingIDContractExtend;

                                contractExtendEntity.AllowanceID1 = modelSave.AllowanceID1ContractExtend;
                                contractExtendEntity.CurrencyID1 = modelSave.CurrencyID1ContractExtend;

                                contractExtendEntity.AllowanceID2 = modelSave.AllowanceID2ContractExtend;
                                contractExtendEntity.CurrencyID2 = modelSave.CurrencyID2ContractExtend;

                                contractExtendEntity.AllowanceID3 = modelSave.AllowanceID3ContractExtend;
                                contractExtendEntity.CurrencyID3 = modelSave.CurrencyID3ContractExtend;

                                contractExtendEntity.AllowanceID4 = modelSave.AllowanceID4ContractExtend;
                                contractExtendEntity.CurrencyID4 = modelSave.CurrencyID4ContractExtend;

                                contractExtendEntity.AllowanceID5 = modelSave.AllowanceID5ContractExtend;
                                contractExtendEntity.CurrencyID5 = modelSave.CurrencyID5ContractExtend;

                                contractExtendEntity.AllowanceID6 = modelSave.AllowanceID6ContractExtend;
                                contractExtendEntity.CurrencyID6 = modelSave.CurrencyID6ContractExtend;

                                contractExtendEntity.AllowanceID7 = modelSave.AllowanceID7ContractExtend;
                                contractExtendEntity.CurrencyID7 = modelSave.CurrencyID7ContractExtend;

                                contractExtendEntity.AllowanceID8 = modelSave.AllowanceID8ContractExtend;
                                contractExtendEntity.CurrencyID8 = modelSave.CurrencyID8ContractExtend;

                                contractExtendEntity.AllowanceID9 = modelSave.AllowanceID9ContractExtend;
                                contractExtendEntity.CurrencyID9 = modelSave.CurrencyID9ContractExtend;

                                contractExtendEntity.AllowanceID10 = modelSave.AllowanceID10ContractExtend;
                                contractExtendEntity.CurrencyID10 = modelSave.CurrencyID10ContractExtend;

                                contractExtendEntity.AllowanceID11 = modelSave.AllowanceID11ContractExtend;
                                contractExtendEntity.CurrencyID11 = modelSave.CurrencyID11ContractExtend;

                                contractExtendEntity.AllowanceID12 = modelSave.AllowanceID12ContractExtend;
                                contractExtendEntity.CurrencyID12 = modelSave.CurrencyID12ContractExtend;

                                contractExtendEntity.AllowanceID13 = modelSave.AllowanceID13ContractExtend;
                                contractExtendEntity.CurrencyID13 = modelSave.CurrencyID13ContractExtend;

                                contractExtendEntity.AllowanceID14 = modelSave.AllowanceID14ContractExtend;
                                contractExtendEntity.CurrencyID14 = modelSave.CurrencyID14ContractExtend;

                                contractExtendEntity.AllowanceID15 = modelSave.AllowanceID15ContractExtend;
                                contractExtendEntity.CurrencyID15 = modelSave.CurrencyID15ContractExtend;
                                //Quyen.Quach 09/12/2017 Edit khôngcó dữ liệu
                                contractExtendEntity.IsCreateContractExtend = modelSave.IsCreateContractExtend;
                                contractExtendEntity.WorkHistoryID = modelReturn.ID;
                                if (modelSave.AppendixCreateBasicSalaryContractExtend == true)
                                {
                                    salaryservices.CreateBasicSalaryByContractExtend(contractExtendEntity);
                                }
                                if (modelSave.AppendixCreateInsuranceSalaryContractExtend == true)
                                {
                                    salaryservices.CreateInsuranceSalaryByContractExtend(contractExtendEntity);
                                }
                                contractExtendEntity.Note = modelSave.NoteContractExtend;
                                string messageRef = salaryservices.Edit(contractExtendEntity);
                            }
                        }
                    }
                }
            }

            #endregion
            model.ActionStatus = modelReturn.ActionStatus;
            if (model.Tab_WorkHistory != null)
            {
                model.Tab_WorkHistory.ID = modelReturn.ID;
            }
            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetUserApproveWorkhistorySalary(string userSubmit, string profileID)
        {
            if (!string.IsNullOrEmpty(userSubmit) || !string.IsNullOrEmpty(profileID))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _ContractServices = new Hre_WorkHistoryServices();
                var entity = _ContractServices.GetHighSuppervisorApproveWorkhistorySalary(profileID, userSubmit, UserID, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }

        [HttpPost]
        public ActionResult RemoveSelectedWorkhistorySalary(string selectedIds)
        {
            string message = string.Empty;
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var service = new Hre_WorkHistoryServices();
                message = service.RemoveSelectedWorkhistorySalary(selectedIds);
                return Json(message);
            }
            else
            {
                return Json(message);
            }
        }

        [HttpPost]
        public ActionResult RemoveSelectedWorkhistory(string selectedIds)
        {
            string message = string.Empty;
            if (!string.IsNullOrEmpty(selectedIds))
            {
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var service = new Hre_WorkHistoryServices();
                message = service.DeleteWorkhistory(lstIds);
                return Json(message);
            }
            else
            {
                return Json(message);
            }
        }

        [HttpPost]
        public ActionResult ApprovedWorkHistorySalary(string selectedIds)
        {
            var service = new Hre_WorkHistoryServices();
            var userId = Guid.Empty;
            Guid.TryParse(UserID, out userId);
            var message = service.ActionApprovedWorkHistorySalary(selectedIds, UserLogin, userId);
            return Json(message);
        }

        [HttpPost]
        public ActionResult GetDateWorkHistorySalaryFrom()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var dateConfig = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEMPTRANSFROMOTHERCOMPANYFROM);
            if (dateConfig >= 0)
            {
                DateFrom = DateTo.AddDays(-dateConfig);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateWorkHistorySalaryTo()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var dateConfig = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEMPTRANSFROMOTHERCOMPANYTO);
            if (dateConfig >= 0)
            {
                DateFrom = DateTo.AddDays(dateConfig);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateWorkHistorySalaryOrgFrom()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var dateConfig = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEMPTRANSFROMOTHERORGFROM);
            if (dateConfig >= 0)
            {
                DateFrom = DateTo.AddDays(-dateConfig);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetDateWorkHistorySalaryOrgTo()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var dateConfig = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_PROFILE_ALERT_DAYSHOWEMPTRANSFROMOTHERORGTO);
            if (dateConfig >= 0)
            {
                DateFrom = DateTo.AddDays(dateConfig);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region AnalyzeProfile
        [HttpPost]
        public ActionResult AnalyzeProfile([DataSourceRequest] DataSourceRequest request, Hre_AnalyzeProfileSearchModel model)
        {
            var ActionService = new ActionService(UserLogin, LanguageCode);
            Hre_AnalyzeProfileService ser = new Hre_AnalyzeProfileService();
            var entiy = model.CopyData<Hre_AnalyzeProfileSearchEntity>();

            var result = ser.AnalyzeProfile(entiy);
            return Json(result.ToDataSourceResult(request));
        }
        #endregion

        #region Hre_ShopHistory

        [HttpPost]
        public ActionResult GetDataShopHistoryByProfileID(Guid? ProfileID)
        {
            if (ProfileID != null && ProfileID != Guid.Empty)
            {
                var _ProfileServices = new Hre_ProfileServices();
                var ShopHistory = _ProfileServices.GetDataShopHistoryByProfileID(ProfileID.Value);
                return Json(ShopHistory, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public ActionResult GetShopHistoryList([DataSourceRequest] DataSourceRequest request, Hre_ShopHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_ShopHistoryModel, Hre_ShopHistoryEntity, Hre_ShopHistorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ShopHistory);
        }

        public ActionResult ExportShopHistoryByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ShopHistorySearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ShopHistorySearchModel();
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            #region Create tempate
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ShopHistoryModel(),
                    FileName = "Hre_ShopHistory",
                    HeaderInfo = null,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            var result = actionService.GetData<Hre_ShopHistoryModel>(lstModel, ConstantSql.hrm_hr_sp_get_ShopHistory, ref status);
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult ApproveShopHistory(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.UpdateStatusShopHistory(selectedIds, WorkHistoryStatus.E_APPROVED.ToString());
            return Json(message);
        }

        [HttpPost]
        public ActionResult RejectShopHistory(string selectedIds)
        {
            var service = new Hre_ProfileServices();
            var message = service.UpdateStatusShopHistory(selectedIds, WorkHistoryStatus.E_REJECT.ToString());
            return Json(message);
        }

        #endregion

        #region SummaryHeadCountReport - Bao Cao HeadCount Tong Hop

        public bool ValidateSummaryHeadCountReportI(Hre_ReportSumaryHeadCountSearchModel model, ref string Status)
        {
            if (string.IsNullOrEmpty(model.TypeTime))
            {
                Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Hre_ReportSumaryHeadCount_TypeTime.TranslateString());
                return false;
            }
            if (model.DateSearch == new DateTime())
            {
                Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Hre_ReportSumaryHeadCount_DateSearch.TranslateString());
                return false;
            }
            if (model.OrgStructureID == null)
            {
                Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Att_Report_OrgName.TranslateString());
                return false;
            }
            if (model.GroupColumn == null)
            {
                Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Hre_ReportSumaryHeadCount_GroupColumn.TranslateString());
                return false;
            }
            if (model.GroupRow == null)
            {
                Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Hre_ReportSumaryHeadCount_GroupRow.TranslateString());
                return false;
            }
            return true;
        }


        public bool ValidateSummaryHeadCountReportII(Hre_ReportSumaryHeadCountSearchModel model, ref string Status)
        {
            if (model.GroupColumn == EnumDropDown.TypeSumaryHeadCount.E_OrgType.ToString() && model.GroupRow == EnumDropDown.TypeSumaryHeadCount.E_Gender.ToString())
            {
                if (model.OrgStructureTypeID == null)
                {
                    Status = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), ConstantDisplay.HRM_Category_OrgStructure_TypeID.TranslateString());
                    return false;
                }

            }
            return true;
        }
        [HttpPost]
        public ActionResult SummaryHeadCountReport([DataSourceRequest] DataSourceRequest request, Hre_ReportSumaryHeadCountSearchModel model)
        {
            #region Xu ly datefrom/dateto
            DateTime DateFrom = new DateTime();
            DateTime DateTo = new DateTime();
            if (model.TypeTime == EnumDropDown.TypeTime.E_DAY.ToString())
            {
                DateFrom = new DateTime(model.DateSearch.Year, model.DateSearch.Month, model.DateSearch.Day);
                DateTo = DateFrom.AddDays(1).AddMinutes(-1);
            }
            if (model.TypeTime == EnumDropDown.TypeTime.E_MONTH.ToString())
            {
                if (model.IsAllowCutOff)
                {
                    var cutOffSer = new Att_CutOffDurationServices();
                    var objCutOffDuration = cutOffSer.GetCutoffByMonth(model.DateSearch);
                    if (objCutOffDuration != null)
                    {
                        DateFrom = new DateTime(objCutOffDuration.DateStart.Year, objCutOffDuration.DateStart.Month, objCutOffDuration.DateStart.Day);
                        DateTo = new DateTime(objCutOffDuration.DateEnd.Year, objCutOffDuration.DateEnd.Month, objCutOffDuration.DateEnd.Day).AddDays(1).AddMinutes(-1);
                    }
                    else
                    {
                        var ls = new object[] { "Error", string.Format(ConstantDisplay.HRM_SomeObjectIsNotExits.TranslateString(), ConstantDisplay.HRM_Payroll_CutOffDurationID.TranslateString()) };
                        return Json(ls, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    DateFrom = new DateTime(model.DateSearch.Year, model.DateSearch.Month, 1);
                    DateTo = DateFrom.AddMonths(1).AddMinutes(-1);
                }

            }
            if (model.TypeTime == EnumDropDown.TypeTime.E_YEAR.ToString())
            {
                if (model.IsAllowCutOff)
                {
                    var cutOffSer = new Att_CutOffDurationServices();
                    var lstCutOffDuration = cutOffSer.GetCutoffByYear(model.DateSearch.Year);
                    if (!lstCutOffDuration.IsNullOrEmpty())
                    {
                        var objStart = lstCutOffDuration.OrderBy(s => s.MonthYear).FirstOrDefault();
                        if (objStart != null)
                        {
                            DateFrom = new DateTime(objStart.DateStart.Year, objStart.DateStart.Month, objStart.DateStart.Day);
                        }
                        var objEnd = lstCutOffDuration.OrderByDescending(s => s.MonthYear).FirstOrDefault();
                        if (objEnd != null)
                        {
                            DateTo = new DateTime(objEnd.DateEnd.Year, objEnd.DateEnd.Month, objEnd.DateEnd.Day).AddDays(1).AddMinutes(-1);
                        }
                    }
                    else
                    {
                        var ls = new object[] { "Error", string.Format(ConstantDisplay.HRM_SomeObjectIsNotExits.TranslateString(), ConstantDisplay.HRM_Payroll_CutOffDurationID.TranslateString()) };
                        return Json(ls, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    DateFrom = new DateTime(model.DateSearch.Year, 1, 1);
                    DateTo = DateFrom.AddYears(1).AddMinutes(-1);
                }

            }
            #endregion

            #region Get cau hinh nhan ban nhan vien
            string status = string.Empty;
            var ActionServices = new ActionService(UserLogin, LanguageCode);
            var key = AppConfig.HRM_HRE_CONFIG_ISONLYCOUNTROOTPROFILE.ToString();
            var lstConfig = ActionServices.GetData<Sys_AllSettingEntity>(key, ConstantSql.hrm_sys_sp_get_AllSettingByKey, ref status);
            bool _confiDulPro = false;
            if (!Common.CheckListNullOrEmty(lstConfig))
            {
                if (lstConfig.FirstOrDefault() != null)
                {
                    bool.TryParse(lstConfig.FirstOrDefault().Value1, out _confiDulPro);
                }
            }
            #endregion

            if (!ValidateSummaryHeadCountReportI(model, ref status))
            {
                if (model.IsCreateTemplate)
                {
                    return Json(status, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var ls = new object[] { "Error", status };
                    return Json(ls, JsonRequestBehavior.AllowGet);
                }
            }

            var heaSer = new Hre_ReportHeadCountServices();
            if (model.GroupColumn == EnumDropDown.TypeSumaryHeadCount.E_OrgType.ToString())
            {
                #region Gioi Tinh
                if (model.GroupRow == EnumDropDown.TypeSumaryHeadCount.E_Gender.ToString())
                {
                    var Check = ValidateSummaryHeadCountReportII(model, ref status);
                    if (!Check)
                    {
                        if (model.IsCreateTemplate)
                        {
                            return Json(status, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var ls = new object[] { "Error", status };
                            return Json(ls, JsonRequestBehavior.AllowGet);
                        }

                    }
                    var lisGender = new List<string>();
                    if (!string.IsNullOrEmpty(model.Gender))
                    {
                        lisGender.Add(model.Gender);
                    }
                    else
                    {
                        lisGender.Add("E_FEMALE");
                        lisGender.Add("E_MALE");
                        lisGender.Add("E_OTHER");
                    }

                    var DicHeadCountGender = heaSer.GetReportHeadCountGender(model.TypeTime, DateFrom, DateTo, model.OrgStructureID.Value, model.OrgStructureTypeID.Value, lisGender, model.ExportId, model.IsCreateTemplate, _confiDulPro);




                    var objDatatable = DicHeadCountGender["DataTable"];
                    var objConfig = DicHeadCountGender["Config"];
                    var datatable = objDatatable as DataTable;
                    var ConfigTable = objConfig as Dictionary<string, Dictionary<string, object>>;

                    #region Creat template
                    if (model != null && model.IsCreateTemplate)
                    {
                        var path = Common.GetPath("Templates");
                        ExportService exportService = new ExportService();
                        ConfigExport cfgExport = new ConfigExport()
                        {
                            Object = datatable,
                            FileName = "Hre_ReportSumaryHeadCount",
                            OutPutPath = path,
                            HeaderInfo = null,
                            DownloadPath = Hrm_Main_Web + "Templates",
                            IsDataTable = true
                        };
                        var str = exportService.CreateTemplate(cfgExport);
                        return Json(str);
                    }
                    #endregion

                    #region MyRegion
                    if (model.ExportId != Guid.Empty)
                    {
                        var fullPath = ExportService.Export(model.ExportId, datatable, null, UserGuidID, ExportFileType.Excel);
                        return Json(fullPath);
                    }
                    #endregion

                    return Json(datatable.ConfigTable(ConfigTable).ToDataSourceResult(request));
                }
                #endregion

                #region Tham Nien
                if (model.GroupRow == EnumDropDown.TypeSumaryHeadCount.E_Seniority.ToString())
                {
                    var Check = ValidateSummaryHeadCountReportII(model, ref status);
                    if (!Check)
                    {
                        if (model.IsCreateTemplate)
                        {
                            return Json(status, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var ls = new object[] { "Error", status };
                            return Json(ls, JsonRequestBehavior.AllowGet);
                        }

                    }
                    var lisGender = new List<string>();
                    if (!string.IsNullOrEmpty(model.Gender))
                    {
                        lisGender.Add(model.Gender);
                    }
                    else
                    {
                        lisGender.Add("E_FEMALE");
                        lisGender.Add("E_MALE");
                        lisGender.Add("E_OTHER");
                    }

                    var DicHeadCountGender = heaSer.GetReportHeadCountGender(model.TypeTime, DateFrom, DateTo, model.OrgStructureID.Value, model.OrgStructureTypeID.Value, lisGender, model.ExportId, model.IsCreateTemplate, _confiDulPro);




                    var objDatatable = DicHeadCountGender["DataTable"];
                    var objConfig = DicHeadCountGender["Config"];
                    var datatable = objDatatable as DataTable;
                    var ConfigTable = objConfig as Dictionary<string, Dictionary<string, object>>;

                    #region Creat template
                    if (model != null && model.IsCreateTemplate)
                    {
                        var path = Common.GetPath("Templates");
                        ExportService exportService = new ExportService();
                        ConfigExport cfgExport = new ConfigExport()
                        {
                            Object = datatable,
                            FileName = "Hre_ReportSumaryHeadCount",
                            OutPutPath = path,
                            HeaderInfo = null,
                            DownloadPath = Hrm_Main_Web + "Templates",
                            IsDataTable = true
                        };
                        var str = exportService.CreateTemplate(cfgExport);
                        return Json(str);
                    }
                    #endregion

                    #region MyRegion
                    if (model.ExportId != Guid.Empty)
                    {
                        var fullPath = ExportService.Export(model.ExportId, datatable, null, UserGuidID, ExportFileType.Excel);
                        return Json(fullPath);
                    }
                    #endregion

                    return Json(datatable.ConfigTable(ConfigTable).ToDataSourceResult(request));
                }
                #endregion
            }

            return null;

        }
        #endregion

        #region FacilityInventory
        public ActionResult GetFacilityInventoryList([DataSourceRequest] DataSourceRequest request, Hre_FacilityInventorySearchModel model)
        {
            return GetListDataAndReturn<Hre_FacilityInventoryModel, Hre_FacilityInventoryEntity, Hre_FacilityInventorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_FacilityInventory);
        }

        [HttpPost]
        public ActionResult ExportFacilityInventoryList([DataSourceRequest] DataSourceRequest request, Hre_FacilityInventorySearchModel model)
        {
            return ExportAllAndReturn<Hre_FacilityInventoryModel, Hre_FacilityInventoryModel, Hre_FacilityInventorySearchModel>(request, model, ConstantSql.hrm_hr_sp_get_FacilityInventory);
        }

        [HttpPost]
        public ActionResult ExportFacilityInventorySelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_FacilityInventoryModel, Hre_FacilityInventoryModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_FacilityInventoryByIds);
        }
        #endregion

        #region danh gia trong chi tiet nhan vien
        public ActionResult GetProfileNameByID(Guid ID)
        {
            string profileName = string.Empty;
            if (ID != Guid.Empty)
            {
                var _ser = new Hre_ProfileServices();
                profileName = _ser.GetProfileNameByID(ID);
            }
            return Json(profileName, JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult GetWAHByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            string status = string.Empty;
            var baseService = new BaseService();
            var lstObj = new List<object>();
            lstObj.Add(profileID);
            lstObj.Add(1);
            lstObj.Add(int.MaxValue - 1);
            var result = baseService.GetData<FIN_TravelRequestItemEntity>(lstObj, ConstantSql.hrm_hr_sp_get_TravelRequestItemByProfileId, UserLogin, ref status);
            return Json(result.ToDataSourceResult(request));
        }

        #region BC enum cấu hình
        //public string ExportEnumConfig()
        //{
        //    var datatable = new DataTable();
        //    var dr = datatable.NewRow();
        //    datatable.Columns.Add("EnumName");
        //    datatable.Columns.Add("Description");
        //    datatable.Rows.Add(dr);
        //    var ContractConfigModel = new Hre_ContractConfigModel();
        //    DataRow row = datatable.NewRow();
        //    row["EnumName"] = ContractConfigModel.ContactType.ToString();
        //    row["Description"] = "Loại của loại HĐ";
        //    datatable.Rows.Add(row);

        //    DataRow row1 = datatable.NewRow();
        //    row1["EnumName"] = ContractConfigModel.CodeEmp.ToString();
        //    row1["Description"] = "Mã NV";
        //    datatable.Rows.Add(row1);
        //    string status = string.Empty;
        //    var valueField = new List<string>() { "EnumName", "Description" };
        //    var ExportService1 = new ExportService();
        //    status = ExportService1.ExportAll(datatable, valueField);
        //    return status;
        //}
        #endregion

        public ActionResult LookupProfilePortal([DataSourceRequest] DataSourceRequest request, Hre_ProfileSearchModelPortal model)
        {

            string status = string.Empty;
            var baseService = new BaseService();
            var lstObj = Common.AddRange(10);
            lstObj[0] = model.ProfileName;
            lstObj[1] = model.CodeEmp;
            lstObj[2] = model.OrgStructureID;
            lstObj[3] = model.PositionID;
            lstObj[4] = model.JobTitleID;
            lstObj[5] = model.StatusSyn;
            lstObj[6] = model.Cellphone;
            lstObj[7] = model.Email;
            #region Phan trang
            if (!model.IsExport)
            {
                lstObj[8] = request.Page;
                lstObj[9] = request.PageSize;
            }
            #endregion


            var result = baseService.GetData<Hre_ProfileEntity>(lstObj, ConstantSql.hrm_hr_sp_get_LookupProfilePortal, UserLogin, ref status);

            #region xuất ra lưới.
            var _datasource = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            _datasource.Total = total;
            _datasource.Data = result;
            return Json(_datasource, JsonRequestBehavior.AllowGet);
            #endregion
        }

        public ActionResult GetCandidateInternalActualSkillByProfileID([DataSourceRequest] DataSourceRequest request, Guid profileID)
        {
            try
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var objs = new List<object>();
                objs.Add(profileID);
                var result = actionServices.GetData<Hre_ActualSkillEntity>(Common.DotNetToOracle(profileID.ToString()), ConstantSql.hrm_hr_sp_get_ActualSkillByProfileID, ref status);
                return Json(result.ToDataSourceResult(request));
            }
            catch
            {
                return Json(string.Empty);
            }
        }
        public JsonResult GetMultiContract(string text, Guid? ProfileID)
        {
            Hre_ContractServices services = new Hre_ContractServices();
            var lstResult = services.GetMultiContractByProfileId(text, ProfileID);
            return Json(lstResult, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetMultiContractExtend(string text, Guid? ContractID, Guid? ProfileID)
        {
            Hre_ContractExtendServices services = new Hre_ContractExtendServices();
            var lstResult = services.GetMultiContractExtendByContractId(text, ContractID, ProfileID);
            return Json(lstResult, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetReportActualSkillList([DataSourceRequest] DataSourceRequest request, Hre_ActualSkillModel model)
        {
            var services = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            var isDataTable = false;
            var result = new List<Hre_ActualSkillEntity>();
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ActualSkillEntity(),
                    FileName = "Tra_TraineeCertificateModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != null)
            {
                request.Page = 1;
                request.PageSize = int.MaxValue - 1;
            }
            var lstPara = new List<object>();
            lstPara.AddRange(new object[7]);
            lstPara[1] = model.SkillIDs;
            lstPara[2] = model.OrgStructureID;
            lstPara[3] = model.PositionID;
            lstPara[4] = model.JobTitleID;

            lstPara[5] = request.Page;
            lstPara[6] = request.PageSize;
            result = services.GetData<Hre_ActualSkillEntity>(lstPara, ConstantSql.hrm_hr_sp_get_ActualSkill, ref status);
            if (result != null)
            {
                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                    return Json(fullPath);
                }
                return Json(result.ToDataSourceResult(request));
            }

            if (result != null)
            {
                request.Page = 1;
                var _datasource = result.ToDataSourceResult(request);
                int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
                _datasource.Total = total;
                _datasource.Data = result;
                return Json(_datasource, JsonRequestBehavior.AllowGet);
            }
            return Json(result);
        }
        public ActionResult CreateInCellActualSkill([Bind(Prefix = "models")] List<Hre_ActualSkillModel> model)
        {
            var service = new BaseService();
            var status = string.Empty;
            if (model != null)
            {
                foreach (var i in model)
                {
                    if (i.ID != Guid.Empty)
                    {
                        status = service.Edit<Hre_ActualSkillEntity>(i.CopyData<Hre_ActualSkillEntity>());
                    }
                    else
                    {
                        status = service.Add<Hre_ActualSkillEntity>(i.CopyData<Hre_ActualSkillEntity>());
                    }
                }
            }
            return Json(status);
        }
        public ActionResult GetProfileReplacementList([DataSourceRequest] DataSourceRequest request, Hre_ProfileReplacementSeachModel model)
        {
            var actionServices = new ActionService(UserLogin, LanguageCode);
            string status = string.Empty;
            var result = new List<Hre_ProfileReplacementEntity>();
            var objRep = new List<object>();
            objRep.AddRange(new object[6]);
            objRep[0] = model.CodeEmp;
            objRep[1] = model.ProfileName;
            objRep[2] = model.Type;
            objRep[3] = model.IsDone;
            objRep[4] = request.Page;
            objRep[5] = request.PageSize;
            result = actionServices.GetData<Hre_ProfileReplacementEntity>(objRep, ConstantSql.hrm_hr_sp_get_ProfileReplacement, ref status);
            if (result != null)
            {
                foreach (var item in result)
                {
                    if (!string.IsNullOrEmpty(item.Type))
                    {
                        var lsttemp = new List<string>();
                        var listtype = item.Type.Split(',').ToList();
                        foreach (var type in listtype)
                        {
                            lsttemp.Add(type.ToString().TranslateString());
                        }
                        item.ListTypeView = string.Join(",", lsttemp);
                    }
                }
                request.Page = 1;
                var _datasource = result.ToDataSourceResult(request);
                int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
                _datasource.Total = total;
                _datasource.Data = result;
                return Json(_datasource, JsonRequestBehavior.AllowGet);
            }
            return Json(result);
            //return GetListDataAndReturn<Hre_ProfileReplacementModel, Hre_ProfileReplacementEntity, Hre_ProfileReplacementSeachModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileReplacement);
        }
        public ActionResult ExportProfileReplacementList([DataSourceRequest] DataSourceRequest request, Hre_ProfileReplacementSeachModel model)
        {
            return ExportAllAndReturn<Hre_ProfileReplacementEntity, Hre_ProfileReplacementModel, Hre_ProfileReplacementSeachModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileReplacement);
        }
        public ActionResult ExportProfileReplacementSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileReplacementEntity, Hre_ProfileReplacementModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileReplacementByIds);
        }

        public ActionResult GetFieldRequired(string tableName)
        {
            var xmlFileSpec = Common.GetPath(@"Settings\FIELD_INFO_SPEC.XML");
            var xmlFile = Common.GetPath(@"Settings\FIELD_INFO.XML");
            List<HRM.Infrastructure.Security.DataFieldInfo> listInfo = null;
            bool checkSpect = true;
            if (!System.IO.File.Exists(xmlFileSpec))
            {
                checkSpect = false;
            }
            if (checkSpect)
            {
                //Load file XML
                List<HRM.Infrastructure.Security.DataFieldInfo> listAllFieldInfoSpec = Common.GetDataFromXml<HRM.Infrastructure.Security.DataFieldInfo>(xmlFileSpec, "Field");
                listInfo = listAllFieldInfoSpec.Where(d => d.TableName == tableName).ToList();
            }
            if (System.IO.File.Exists(xmlFile) && (listInfo == null || listInfo.Count == 0))
            {
                List<HRM.Infrastructure.Security.DataFieldInfo> listAllFieldInfo = Common.GetDataFromXml<HRM.Infrastructure.Security.DataFieldInfo>(xmlFile, "Field");
                //Lọc theo table cần validate
                listInfo = listAllFieldInfo.Where(d => d.TableName == tableName).ToList();
            }
            if (listInfo != null && listInfo.Count > 0)
            {
                return Json(listInfo, JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        #region Hre_Visainfo
        [HttpPost]
        public ActionResult GetVisaInfoList([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoListSearchModel model)
        {
            return GetListDataAndReturn<Hre_VisaInfoModel, Hre_VisaInfoEntity, Hre_VisaInfoListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_VisaInfo);
        }

        [HttpPost]
        public ActionResult ExportVisaInfoList([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoListSearchModel model)
        {
            var service = new ActionService(UserLogin);
            var listObj = new List<object>();
            listObj.Add(model.ProfileName);
            listObj.Add(model.CodeEmp);
            listObj.Add(model.PositionID);
            listObj.Add(model.JobTitleID);
            listObj.Add(model.OrgStructureID);
            listObj.Add(model.DateStartFrom);
            listObj.Add(model.DateStartTo);
            listObj.Add(model.DateEndFrom);
            listObj.Add(model.DateEndTo);
            listObj.Add(model.IsLastVisa);
            listObj.Add(model.strVisaInfoID);
            listObj.Add(null);
            listObj.Add(null);
            listObj.Add(null);
            listObj.Add(null);
            listObj.Add(1);
            listObj.Add(int.MaxValue - 1);
            string status = string.Empty;
            var result = new List<Hre_VisaInfoModel>();
            if (!model.IsCreateTemplate)
            {
                result = service.GetData<Hre_VisaInfoEntity>(listObj, ConstantSql.hrm_hr_sp_get_VisaInfo, ref status).ToList().Translate<Hre_VisaInfoModel>();
            }
            var headerInfo1 = new HeaderInfo() { Name = "DateStartFrom", Value = model.DateStartFrom ?? DateTime.Now };
            var headerInfo2 = new HeaderInfo() { Name = "DateStartTo", Value = model.DateStartTo ?? DateTime.Now };
            var headerInfo3 = new HeaderInfo() { Name = "DateEndFrom", Value = model.DateEndFrom ?? DateTime.Now };
            var headerInfo4 = new HeaderInfo() { Name = "DateEndTo", Value = model.DateEndTo ?? DateTime.Now };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_VisaInfoModel(),
                    FileName = "Hre_VisaInfoModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportSelectedVisaInfoByTemplate([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoListSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_VisaInfoModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_VisaInfoModel>(model.strVisaInfoID, ConstantSql.hrm_hr_sp_get_VisaInfoByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_VisaInfoModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportVisaInfoSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_VisaInfoEntity, Hre_VisaInfoModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_VisaInfoByIds);
        }

        [HttpPost]
        public ActionResult ExportVisaInfoAllList([DataSourceRequest] DataSourceRequest request, Hre_VisaInfoListSearchModel model)
        {
            return ExportAllAndReturn<Hre_VisaInfoEntity, Hre_VisaInfoModel, Hre_VisaInfoListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_VisaInfo);
        }
        #endregion

        #region Hre_ProfileComputingLevel
        [HttpPost]
        public ActionResult GetProfileComputingLevelList([DataSourceRequest] DataSourceRequest request, Hre_ProfileComputingLevelSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileComputingLevelModel, Hre_ProfileComputingLevelEntity, Hre_ProfileComputingLevelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileComputingLevel);
        }

        public ActionResult ExportSelectedProfileComputingLevelByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileComputingLevelSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_WorkPermitModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ProfileComputingLevelModel>(model.strProfileComputingID, ConstantSql.hrm_hr_sp_get_ProfileComputingLevelByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileComputingLevelModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }


        public ActionResult ExportProfileComputingLevelByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileComputingLevelSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileComputingLevelModel(),
                    FileName = "Hre_ProfileComputingLevelModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ProfileComputingLevelModel>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportID != Guid.Empty)
            {
                result = actionService.GetData<Hre_ProfileComputingLevelModel>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileComputingLevel, ref status);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }


        public ActionResult ExportProfileComputingLevelSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileComputingLevelEntity, Hre_ProfileComputingLevelModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileComputingLevelByIds);
        }

        public ActionResult ExportAllProfileComputingLevelList([DataSourceRequest] DataSourceRequest request, Hre_ProfileComputingLevelSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileComputingLevelEntity, Hre_ProfileComputingLevelModel, Hre_ProfileComputingLevelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileComputingLevel);
        }

        #endregion

        #region Hre_ProfileLanguageLevel
        [HttpPost]
        public ActionResult GetProfileLanguageLevelList([DataSourceRequest] DataSourceRequest request, Hre_ProfileLanguageLevelSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileLanguageLevelModel, Hre_ProfileLanguageLevelEntity, Hre_ProfileLanguageLevelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileLanguageLevel);
        }

        public ActionResult ExportSelectedProfileLanguageLevelByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileLanguageLevelSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_WorkPermitModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_ProfileLanguageLevelModel>(model.strProfileLanguageID, ConstantSql.hrm_hr_sp_get_ProfileLanguageLevelByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileLanguageLevelModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportProfileLanguageLevelByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileLanguageLevelSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_ProfileLanguageLevelModel(),
                    FileName = "Hre_ProfileLanguageLevelModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_ProfileLanguageLevelModel>();
            //trường hợp Xuất BC
            if (!model.IsCreateTemplate && model.ExportID != Guid.Empty)
            {
                result = actionService.GetData<Hre_ProfileLanguageLevelModel>(lstModel, ConstantSql.hrm_hr_sp_get_ProfileLanguageLevel, ref status);
            }

            if (model.ExportID != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportID, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }


        public ActionResult ExportProfileLanguageLevelSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileLanguageLevelEntity, Hre_ProfileLanguageLevelModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileLanguageLevelByIds);
        }

        public ActionResult ExportAllProfileLanguageLevelList([DataSourceRequest] DataSourceRequest request, Hre_ProfileLanguageLevelSearchModel model)
        {
            return ExportAllAndReturn<Hre_ProfileLanguageLevelEntity, Hre_ProfileLanguageLevelModel, Hre_ProfileLanguageLevelSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileLanguageLevel);
        }

        #endregion

        #region Hre_HealthInsuranceCard
        [HttpPost]
        public ActionResult GetHre_HealthInsuranceCardList([DataSourceRequest] DataSourceRequest request, Hre_HealthInsuranceCardSearchModel model)
        {
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var profileServices = new Hre_ProfileServices();
            List<object> paramHealthInsCard = new List<object>();
            paramHealthInsCard.AddRange(new object[10]);
            paramHealthInsCard[0] = model.OrgStructureID;
            paramHealthInsCard[1] = model.CodeEmp;
            paramHealthInsCard[2] = model.ProfileName;
            paramHealthInsCard[3] = model.HealthInsIssueDateFrom;
            paramHealthInsCard[4] = model.HealthInsIssueDateTo;
            paramHealthInsCard[5] = model.IsChangeHealthTreatmentPlaceCode;
            // Nguyen.Le - 20170927 - 0088048
            paramHealthInsCard[6] = model.DateQuitFrom;
            paramHealthInsCard[7] = model.DateQuitTo;

            paramHealthInsCard[8] = 1;
            paramHealthInsCard[9] = int.MaxValue - 1;
            var status = string.Empty;
            var result = new List<Hre_RequestInfoEntity>();
            if (!model.IsCreateTemplate)
            {
                if (model.IsChangeHealthTreatmentPlaceCode)
                {
                    result = actionServices.GetData<Hre_RequestInfoEntity>(paramHealthInsCard, ConstantSql.hrm_Hre_sp_get_Hre_HealthInsuranceCard, ref status);
                    List<Guid> lstGuid = new List<Guid>();
                    if (result != null)
                    {
                        for (int i = 0; i < result.Count; i++)
                        {
                            var profileID = result[i].ProfileID;
                            var HealthTreatmentPlaceCode = result[i].HealthTreatmentPlaceCode;
                            var HealthInsIssueDate = result[i].HealthInsIssueDate;
                            bool resultIsChange = Business.Insurance.Domain.InsuranceDAOService.Instance.CheckIsChangeHealthTreatmentPlaceCode(profileID, HealthTreatmentPlaceCode, HealthInsIssueDate);
                            // resultIsChange = false thì có thay đổi nơi khám chữa bệnh.
                            if (!resultIsChange)
                            {
                                //result.RemoveAt(i);
                                lstGuid.Add(result[i].ID);
                            }
                        }
                        result.RemoveAll(r => lstGuid.Any(a => a == r.ID));
                    }

                }
                else
                {
                    result = actionServices.GetData<Hre_RequestInfoEntity>(paramHealthInsCard, ConstantSql.hrm_Hre_sp_get_Hre_HealthInsuranceCard, ref status);
                }
            }
            var isDataTable = false;
            object obj = new Hre_RequestInfoEntity();

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_HealthInsuranceCardSearchModel",
                    OutPutPath = path,
                    DownloadPath = "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath.ToString().Replace("Success,", "").ToString());
            }
            if (result != null)
            {
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        #endregion

        [HttpPost]
        // Son.Vo - 20160629 - 0069559
        public ActionResult IsRemovePersonalRequirement()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _REMOVEPERSONALREQUIREMENTFROMREQUIREMENT = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_TRA_CONFIG_TRAINEE_REMOVEPERSONALREQUIREMENTFROMREQUIREMENT);
            if (_REMOVEPERSONALREQUIREMENTFROMREQUIREMENT == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult RemovePersonalRequirementByConfig(string lstRequirementDetailID)
        {
            string message = string.Empty;
            if (!string.IsNullOrEmpty(lstRequirementDetailID))
            {
                var lisIDs = lstRequirementDetailID.Split(',').Select(x => Guid.Parse(x)).ToList();
                var _RequirementTrainDetailServices = new Tra_RequirementTrainDetailServices();
                message = _RequirementTrainDetailServices.RemovePersonalRequirementByConfig(lisIDs);
            }
            return Json(message);
        }

        public ActionResult GetInfomationProfileBySameCompanyProfileID(Guid? SameCompanyProfileID)
        {
            Hre_ProfileSameCompanyProfileEntity objProfileSameCompanyProfile = new Hre_ProfileSameCompanyProfileEntity();
            if (SameCompanyProfileID != null && SameCompanyProfileID != Guid.Empty)
            {
                Hre_ProfileServices hreProfileServices = new Hre_ProfileServices();
                objProfileSameCompanyProfile = hreProfileServices.GetInfomationProfileBySameCompanyProfileID(SameCompanyProfileID.Value);
            }
            return Json(objProfileSameCompanyProfile);

        }

        public ActionResult GetSimpleHreProfileById(string id)
        {
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Hre_ProfileGetNameEntity>(id, ConstantSql.hrm_sys_sp_get_SimpleProfileById, ref status).FirstOrDefault();
            return Json(result, JsonRequestBehavior.AllowGet);

        }


        #region Hre_DepartmentTranferTemp

        [HttpPost]
        public ActionResult GetDepartmentTranferTempList([DataSourceRequest] DataSourceRequest request, Hre_DepartmentTranferTempSearchModel model)
        {
            return GetListDataAndReturn<Hre_DepartmentTranferTempModel, Hre_DepartmentTranferTempEntity, Hre_DepartmentTranferTempSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DepartmentTranferTemp);
        }

        /// <summary>
        /// [Son.Vo] - Xuất danh sách dữ liệu cho CardHistory(Hre_CardHistory) theo điều kiện tìm kiếm
        /// </summary>
        /// <param name="request"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportDepartmentTranferTempList([DataSourceRequest] DataSourceRequest request, Hre_DepartmentTranferTempSearchModel model)
        {
            return ExportAllAndReturn<Hre_DepartmentTranferTempEntity, Hre_DepartmentTranferTempModel, Hre_DepartmentTranferTempSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DepartmentTranferTemp);
        }

        public ActionResult ExportExcelDepartmentTranferTempList([DataSourceRequest] DataSourceRequest request, Hre_DepartmentTranferTempSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateStart", Value = model.DateStart != null ? model.DateStart : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateEnd", Value = model.DateEnd != null ? model.DateEnd : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_DepartmentTranferTempModel(),
                    FileName = "Hre_DepartmentTranferTemp",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_DepartmentTranferTempModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_DepartmentTranferTempModel>(lstModel, ConstantSql.hrm_hr_sp_get_DepartmentTranferTemp, ref status);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }


        public ActionResult ExportDepartmentTranferTempSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_DepartmentTranferTempSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_ContractModel();
            var _ProfileServices = new Hre_ProfileServices();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_DepartmentTranferTempModel>(model.SelectedIDs, ConstantSql.hrm_hr_sp_get_DepartmentTranferTempByIDs, UserLogin, ref status);
            if (result == null)
                return null;

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_DepartmentTranferTempModel(),
                    FileName = "Hre_DepartmentTranferTempModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        /// <summary>
        /// [Son.Vo] - Xuất các dòng dữ liệu được chọn của CardHistory (Hre_CardHistory) ra file Excel
        /// </summary>
        /// <param name="selectedIds"></param>
        /// <param name="valueFields"></param>
        /// <returns></returns>
        public ActionResult ExportDepartmentTranferTempSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_DepartmentTranferTempEntity, Hre_DepartmentTranferTempModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_DepartmentTranferTempByIDs);
        }

        #endregion
        //Quyen.Quach 11/09/2017 0087819
        public ActionResult ExportAllOrganizationList([DataSourceRequest] DataSourceRequest request, Hre_ResearcchTopicSearchModel model)
        {
            return ExportAllAndReturn<Hre_ResearcchTopicModel, Hre_ResearcchTopicEntity, Hre_ResearcchTopicSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ResearcchTopic);
        }


        #region Rec_CandidateProfileBlack
        public ActionResult GetCandidateProfileInBlackList([DataSourceRequest] DataSourceRequest request, Rec_CandidateProfileInBlackSearchModel model)
        {
            var jobservice = new Rec_JobVacancyServices();
            var canproservce = new Rec_CandidateProfileServices();
            var service = new ActionService(UserLogin, LanguageCode);
            if (request.PageSize == 0) request.PageSize = 100;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var status = string.Empty;
            var listEntity = service.GetData<Rec_CandidateProfileEntity>(lstModel, ConstantSql.hrm_rec_sp_get_CandidateProfileBlack, ref status);
            var listModel = new List<Rec_CandidateProfileModel>();
            if (listEntity != null)
            {
                //Nguyen.Le - 08/12/2017 - 0090847
                var lsCanProID = listEntity.Select(s => s.ID).ToList();
                var lstCandidate = canproservce.getCandidateByCandidateProfileIDs(lsCanProID);
                var lsjobID = lstCandidate.Select(s => s.JobVacancyID.Value).Distinct().ToList();
                var lstJobVacan = jobservice.GetJobVacancyByIDs(lsjobID, Guid.Parse(UserID));

                foreach (var item in listEntity)
                {
                    var Candidates = lstCandidate.Where(s => s.CandidateProfileID == item.ID).ToList();
                    var lsID = Candidates.Select(s => s.JobVacancyID).Distinct().ToList();
                    var JobVacancy = lstJobVacan.Where(s => lsID.Contains(s.ID)).ToList();
                    if (JobVacancy != null && JobVacancy.Count > 0)
                    {
                        var lstJob = JobVacancy.Select(s => s.JobVacancyName).ToList();
                        item.JobVacancyName = string.Join(",", lstJob);
                    }
                }
                VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
                request.Page = 1;
                var dataSourceResult = listEntity.ToDataSourceResult(request);
                if (listEntity.FirstOrDefault().GetPropertyValue("TotalRow") != null)
                {
                    dataSourceResult.Total = listEntity.Count() <= 0 ? 0 : (int)listEntity.FirstOrDefault().GetPropertyValue("TotalRow");
                }

                var serializer = new JavaScriptSerializer();
                var result = new ContentResult();
                serializer.MaxJsonLength = Int32.MaxValue;
                result.Content = serializer.Serialize(dataSourceResult);
                result.ContentType = "application/json";

                return result;
            }
            var listModelNull = new List<Rec_CandidateProfileModel>();
            ModelState.AddModelError("Id", status);
            return Json(listModelNull.ToDataSourceResult(request, ModelState));
        }

        public ActionResult ExportCandidateProfileInBlackListByTemplate([DataSourceRequest] DataSourceRequest request, Rec_CandidateProfileInBlackSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Rec_CandidateProfileModel();
            var services = new BaseService();
            var jobservice = new Rec_JobVacancyServices();
            var canproservce = new Rec_CandidateProfileServices();
            var result = new List<Rec_CandidateProfileModel>();
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Rec_CandidateProfileModel, Rec_CandidateProfileEntity, Rec_CandidateProfileInBlackSearchModel>(request, model, ConstantSql.hrm_rec_sp_get_CandidateProfileBlack, ref status);
            }
            //Nguyen.Le - 08/12/2017 - 0090847
            if (result != null && result.Count > 0)
            {
                var lsCanProID = result.Select(s => s.ID).ToList();
                var lstCandidate = canproservce.getCandidateByCandidateProfileIDs(lsCanProID);
                var lsjobID = lstCandidate.Select(s => s.JobVacancyID.Value).Distinct().ToList();
                var lstJobVacan = jobservice.GetJobVacancyByIDs(lsjobID, Guid.Parse(UserID));

                foreach (var item in result)
                {
                    var Candidates = lstCandidate.Where(s => s.CandidateProfileID == item.ID).ToList();
                    var lsID = Candidates.Select(s => s.JobVacancyID).Distinct().ToList();
                    var JobVacancy = lstJobVacan.Where(s => lsID.Contains(s.ID)).ToList();
                    if (JobVacancy != null && JobVacancy.Count > 0)
                    {
                        var lstJob = JobVacancy.Select(s => s.JobVacancyName).ToList();
                        item.JobVacancyName = string.Join(",", lstJob);
                    }
                }
            }

            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = false;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Rec_CandidateProfileModel",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = false
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {

                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        #endregion

        // Son.Vo - 0058573
        [HttpPost]
        public ActionResult GetListProfileOutSide([DataSourceRequest] DataSourceRequest request, Hre_ProfileOutSideSearchModel model)
        {
            return GetListDataAndReturn<Hre_ProfileOutSideModel, Hre_ProfileOutSideEntity, Hre_ProfileOutSideSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileOutSide);
        }

        public ActionResult GetDataProfileOutSideCreate([DataSourceRequest] DataSourceRequest request, Hre_ProfileOutSideModel model)
        {
            string status = string.Empty;
            var _ser = new ActionService(UserLogin);
            var _lsobj = new List<object>();
            _lsobj.AddRange(new object[4]);
            _lsobj[0] = model.OrgStructureTypeID;
            _lsobj[1] = model.strOrgStructureID;
            _lsobj[2] = 1;
            _lsobj[3] = int.MaxValue - 1;
            var lstresultOrg = _ser.GetData<Cat_OrgStructureEntity>(_lsobj, ConstantSql.hrm_cat_sp_get_Org4CreateProfileOutSide, ref status).Translate<CatOrgStructureModel>();

            var lstProfileOutSide = new List<Hre_ProfileOutSideModel>();
            foreach (var org in lstresultOrg)
            {
                var ProfileOutSide = new Hre_ProfileOutSideModel();
                ProfileOutSide.OrgStructureID = org.ID;
                ProfileOutSide.OrgStructureName = org.OrgStructureName;
                ProfileOutSide.Date = model.Date;
                lstProfileOutSide.Add(ProfileOutSide);
            }

            var dataSourceResult = lstProfileOutSide.ToDataSourceResult(request);
            if (lstProfileOutSide.Count >= 0)
            {
                dataSourceResult.Total = lstProfileOutSide.Count() <= 0 ? 0 : (int)lstProfileOutSide.Count;
            }
            return Json(dataSourceResult, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveDataProfileOutSide([Bind(Prefix = "Modeldetail")] List<Hre_ProfileOutSideModel> modeldetail, string isUpdate)
        {
            string message = string.Empty;
            if (modeldetail.Count == 0)
            {
                message = ConstantDisplay.HRM_Common_Eva_NoData.TranslateString();
                return Json(message);
            }

            var headcountServices = new Hre_PlanHeadCountServices();
            var strValidate = string.Empty;
            if (isUpdate != "True")
            {
                strValidate = headcountServices.validateProfileOutSide(modeldetail.Translate<Hre_ProfileOutSideEntity>());
            }
            if (!string.IsNullOrEmpty(strValidate))
            {
                message = ConstantDisplay.HRM_Category_Import_Data.TranslateString() + strValidate + ConstantDisplay.HRM_ExistDataWantToUpdate.TranslateString();
                return Json(message);
            }
            if (modeldetail != null && modeldetail.Count > 0)
            {
                message = headcountServices.CreateOrUpdateProfileOutSide(modeldetail.Translate<Hre_ProfileOutSideEntity>().ToList());
            }
            return Json(message);
        }

        public ActionResult UpdateInlineProfileOutSide([Bind(Prefix = "models")] List<Hre_ProfileOutSideModel> model)
        {
            var headcountServices = new Hre_PlanHeadCountServices();
            string message = string.Empty;
            if (model != null && model.Count > 0)
            {
                message = headcountServices.Edit(model.Translate<Hre_ProfileOutSideEntity>().ToArray());
            }
            // Chua Thong Bao dươc khi edit tren luoi
            return Json(message);
        }

        //Quyen.Quach- 25/09/2017- 0087030 Lấy cấp độ duyệt màn hình DS khen thưởng cá nhân
        public ActionResult GetHighSuppervisorApproveReward(string userSubmit)
        {
            if (!string.IsNullOrEmpty(userSubmit))
            {
                var _rewardservices = new Hre_RewardServices();
                var entity = _rewardservices.GetHighSuppervisorApproveReward(userSubmit, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }
        public ActionResult IsConfigApproveReward()
        {
            var _rewardservices = new Hre_RewardServices();
            bool ischeck = _rewardservices.IsConfigApproveReward();
            if (ischeck == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }
        //Quyen.Quach 25/09/2017 0087030 Load DS khen thưởng cá nhân chờ duyệt
        public ActionResult GetRewardWaitingApprovedList([DataSourceRequest] DataSourceRequest request, Hre_RewardWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_RewardModel, Hre_RewardEntity, Hre_RewardWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RewardWaitingApprovedList);
        }
        //Quyen.Quach 25/09/2017 0087030 Chức năng Duyệt DS khen thưởng cá nhân chờ duyệt
        public ActionResult ApprovedReward(string selectedIds, string userID)
        {
            if (selectedIds != null)
            {
                var _Rewardservices = new Hre_RewardServices();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                string message = string.Empty;
                foreach (var item in lstIds)
                {
                    message = _Rewardservices.ProcessApprovedRewardList("Hrm_Main_Web", item, Guid.Parse(userID), Guid.Parse(userID), LanguageCode, UserLogin);
                }
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }
        //Quyen.Quach 25/09/2017 0087030 Chức năng Từ chối DS khen thưởng cá nhân chờ duyệt
        public ActionResult UpdateCancelReward(string selectedIds, string userID)
        {
            if (selectedIds != null)
            {
                var list = new List<Hre_RewardEntity>();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var _Rewardservices = new Hre_RewardServices();
                list = _Rewardservices.UpdateCancelReward(lstIds, Guid.Parse(UserID));
                return Json(list);
            }
            else
            {
                return Json(null);
            }
        }
        //Quyen.Quach 25/09/2017 0087030 Xuất word màn hình ds khen thưởng cá nhân chờ duyệt
        public ActionResult ExportProfileRewardWaitingApproveListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RewardWaitingApprovedSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_RewardSearchModel();
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            var lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            #region Create tempate
            var headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom == null ? DateTime.Now : model.DateFrom };
            var headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo == null ? DateTime.Now : model.DateTo };
            var headerInfo3 = new HeaderInfo() { Name = "DateFrom_DateOfIssuance", Value = model.DateFrom_DateOfIssuance == null ? DateTime.Now : model.DateFrom_DateOfIssuance };
            var headerInfo4 = new HeaderInfo() { Name = "DateTo_DateOfIssuance", Value = model.DateTo_DateOfIssuance == null ? DateTime.Now : model.DateTo_DateOfIssuance };
            var headerInfo5 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now };
            var headerInfo6 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo7 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3, headerInfo4, headerInfo5, headerInfo6, headerInfo7 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_RewardModel(),
                    FileName = "Hre_Reward",
                    HeaderInfo = listHeaderInfo,
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }

            #endregion
            var result = actionService.GetData<Hre_RewardModel>(lstModel, ConstantSql.hrm_hr_sp_get_RewardWaitingApprovedList, ref status);
            #region Logo
            var UserExport = string.Empty;
            var CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                var itemdefaul = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => new { s.UserLoginName, s.CompanyLogo }).FirstOrDefault();
                if (itemdefaul != null)
                {
                    UserExport = itemdefaul.UserLoginName;
                    CompanyLogo = itemdefaul.CompanyLogo;
                }
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //Quyen.Quach 25/09/2017 0087030 Xuất BC màn hình ds khen thưởng cá nhân chờ duyệt
        public ActionResult ExportRewardWaitingApproveList([DataSourceRequest] DataSourceRequest request, Hre_RewardWaitingApprovedSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            return ExportAllAndReturn<Hre_RewardEntity, Hre_RewardModel, Hre_RewardWaitingApprovedSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_RewardWaitingApprovedList);
        }

        #region Hre_HouseholdInfo
        //Tung.Tran Xuất Tìm kiếm + Xuất excel all + selected có template
        public ActionResult GetHre_HouseholdInfoList([DataSourceRequest] DataSourceRequest request, Hre_HouseholdInfoSearchModel model)
        {
            var status = string.Empty;
            object obj = new Hre_HouseholdInfoModel();
            var isDataTable = false;
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_HouseholdInfo",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable

                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Param của store
            List<object> lstParam = new List<object>();
            lstParam.AddRange(new object[11]);
            lstParam[0] = model.ProfileName;
            lstParam[1] = model.CodeEmp;
            lstParam[2] = model.OrgStructureID;
            lstParam[3] = model.JobTitleID;
            lstParam[4] = model.PositionID;
            lstParam[5] = model.HouseholdTypeID;
            lstParam[6] = model.AgeFrom;
            lstParam[7] = model.AgeTo;
            lstParam[8] = model.StatusSyn;
            lstParam[9] = request.Page;
            lstParam[10] = int.MaxValue - 1;

            #endregion
            var service = new ActionService(UserLogin, LanguageCode);
            var result = service.GetData<Hre_HouseholdInfoModel>(lstParam, ConstantSql.hrm_hre_sp_get_HouseholdInfo, ref status);
            #region Lọc Age
            if (model.AgeFrom != null && model.AgeTo == null)
            {
                result = result.Where(x => int.Parse(x.DateOfBirth) >= model.AgeFrom).ToList();
            }
            if (model.AgeFrom == null && model.AgeTo != null)
            {
                result = result.Where(x => int.Parse(x.DateOfBirth) <= model.AgeTo).ToList();
            }
            if (model.AgeFrom != null && model.AgeTo != null)
            {
                var yearNow = DateTime.Now.Year;
                result = result.Where(x => (yearNow - int.Parse(x.DateOfBirth)) >= model.AgeFrom && (yearNow - int.Parse(x.DateOfBirth)) <= model.AgeTo).ToList();
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                if (!string.IsNullOrEmpty(model.seletedIDs))
                {
                    var ListIDs = Common.StringToList(model.seletedIDs);
                    result = result.Where(x => ListIDs.Contains(x.ID)).ToList();
                }
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, ExportFileType.Excel);
                return Json(fullPath.ToString().Replace("Success,", "").ToString());
            }
            return Json(result.ToDataSourceResult(request));
        }

        //Tung.Tran Xuất Selected ko template
        public ActionResult ExportHouseholdInfoSelectedNoTemplate(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_HouseholdInfoEntity, Hre_HouseholdInfoModel>(selectedIds, valueFields, ConstantSql.hrm_hre_sp_get_HouseholdInfoByIds);
        }

        //Tung.Tran Xuất All ko template
        public ActionResult ExportHouseholdInfoAllNoTemplate([DataSourceRequest] DataSourceRequest request, Hre_HouseholdInfoSearchModel model)
        {
            var status = string.Empty;
            object obj = new Cat_InsuranceRecordTypeModel();
            #region Param của store
            List<object> lstParam = new List<object>();
            lstParam.AddRange(new object[11]);
            lstParam[0] = model.ProfileName;
            lstParam[1] = model.CodeEmp;
            lstParam[2] = model.OrgStructureID;
            lstParam[3] = model.JobTitleID;
            lstParam[4] = model.PositionID;
            lstParam[5] = model.HouseholdTypeID;
            lstParam[6] = model.AgeFrom;
            lstParam[7] = model.AgeTo;
            lstParam[8] = model.StatusSyn;
            lstParam[9] = request.Page;
            lstParam[10] = int.MaxValue - 1;

            #endregion
            var service = new ActionService(UserLogin, LanguageCode);
            var result = service.GetData<Hre_HouseholdInfoModel>(lstParam, ConstantSql.hrm_hre_sp_get_HouseholdInfo, ref status);

            #region Lọc Age
            if (model.AgeFrom != null && model.AgeTo == null)
            {
                result = result.Where(x => int.Parse(x.DateOfBirth) >= model.AgeFrom).ToList();
            }
            if (model.AgeFrom == null && model.AgeTo != null)
            {
                result = result.Where(x => int.Parse(x.DateOfBirth) <= model.AgeTo).ToList();
            }
            if (model.AgeFrom != null && model.AgeTo != null)
            {
                var yearNow = DateTime.Now.Year;
                result = result.Where(x => (yearNow - int.Parse(x.DateOfBirth)) >= model.AgeFrom && (yearNow - int.Parse(x.DateOfBirth)) <= model.AgeTo).ToList();
            }
            #endregion if (status == NotificationType.Success.ToString())
            {
                if (result != null)
                {
                    status = ExportService.ExportAll(result, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
                }
            }
            return Json(status);
        }
        #endregion

        //Quyen.Quach- 28/09/2017- 0088154  Lấy cấp độ duyệt màn hình ds kỷ luật
        public ActionResult GetHighSuppervisorApproveDiscipline(string userSubmit)
        {
            if (!string.IsNullOrEmpty(userSubmit))
            {
                var _Disciplineservices = new Hre_DisciplineServices();
                var entity = _Disciplineservices.GetHighSuppervisorApproveDiscipline(userSubmit, UserLogin);
                return Json(entity);
            }
            return Json(null);
        }
        //Quyen.Quach 28/09/2017 0088154 Chức năng Duyệt DS kỷ luật chờ duyệt
        public ActionResult ApprovedDiscipline(string selectedIds, string userID)
        {
            if (selectedIds != null)
            {
                var _Disciplineservices = new Hre_DisciplineServices();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                string message = string.Empty;
                foreach (var item in lstIds)
                {
                    message = _Disciplineservices.ProcessApprovedDisciplineList("Hrm_Main_Web", item, Guid.Parse(userID), Guid.Parse(userID), LanguageCode, UserLogin);
                }
                return Json(message);
            }
            else
            {
                return Json(null);
            }
        }
        //Quyen.Quach 28/09/2017 0088154 Chức năng Từ chối DS kỷ luật chờ duyệt
        public ActionResult UpdateCancelDiscipline(string selectedIds, string userID)
        {
            if (selectedIds != null)
            {
                var list = new List<Hre_DisciplineEntity>();
                var lstIds = selectedIds.Split(',').Select(x => Guid.Parse(x)).ToList();
                var _Disciplineservices = new Hre_DisciplineServices();
                list = _Disciplineservices.UpdateCancelDiscipline(lstIds, Guid.Parse(UserID));
                return Json(list);
            }
            else
            {
                return Json(null);
            }
        }
        //Quyen.Quach 28/09/2017 0088154 Chức năng Load DS kỷ luật chờ duyệt
        public ActionResult GetDisciplineWaitingApproveList([DataSourceRequest] DataSourceRequest request, Hre_DisciplineWaitingApproveSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            return GetListDataAndReturn<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_DisciplineWaitingApproveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DisciplineWaitingApprove);
        }
        //Quyen.Quach 25/09/2017 0087030 Xuất BC màn hình DS kỷ luật chờ duyệt
        public ActionResult ExportDisciplineWaitingApproveList([DataSourceRequest] DataSourceRequest request, Hre_DisciplineWaitingApproveSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            return ExportAllAndReturn<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_DisciplineWaitingApproveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DisciplineWaitingApprove);
        }
        //Quyen.Quach 25/09/2017 0087030 Xuất BC màn hình DS kỷ luật chờ duyệt

        public ActionResult ExportProfileDisciplineWaitingApproveListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_DisciplineWaitingApproveSearchModel model)
        {
            var ActionService = new ActionService(UserLogin);
            string status = string.Empty;
            var isDataTable = false;
            string CompanyLogo = string.Empty;
            var result = new List<Hre_DisciplineModel>();

            #region Create tempate
            #region Header
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };
            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1 };
            #endregion

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_DisciplineModel(),
                    FileName = "Hre_Discipline",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion
            if (!string.IsNullOrEmpty(UserID))
            {
                model.UserLoginID = Guid.Parse(UserID);
            }
            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_DisciplineModel, Hre_DisciplineEntity, Hre_DisciplineWaitingApproveSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_DisciplineWaitingApprove, ref status);
            }

            if (!Common.CheckListNullOrEmty(result))
            {
                #region Xu ly data
                #region task 0058018 lấy số lần ký HĐ
                var contractServices = new Hre_ContractServices();
                var lstProfileIDS = result.Select(s => s.ProfileID).Distinct().ToList();
                var lstContract = contractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
                #endregion
                foreach (var item in result)
                {
                    item.DisciplineCount = result.Where(s => s.ProfileID == item.ProfileID).Count();
                    item.ContractCount = lstContract.Where(s => s.ProfileID == item.ProfileID).Count();
                    var lstContractTypeName = lstContract.Where(s => s.ProfileID == item.ProfileID).OrderByDescending(s => s.DateSigned).FirstOrDefault();
                    if (lstContractTypeName != null)
                    {
                        if (lstContractTypeName.ContractTypeName != null)
                            item.ContractTypeName = lstContractTypeName.ContractTypeName;
                    }
                }
                #endregion

                #region Logo
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
                foreach (var item in listHeaderInfo)
                {
                    if (item.Name == "CompanyLogo")
                    {
                        item.Value = CompanyLogo;
                    }
                }
                #endregion
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        //Son.Vo - 20170929 - 0088220
        [HttpPost]
        public ActionResult GetProfileBasicGeneralList([DataSourceRequest] DataSourceRequest request, Hre_GeneralBasicProfileMultiSearchModel model)
        {
            if (model.OrgStructureID != null)
            {
                string status = string.Empty;
                var lstObjOrg = new List<object>();
                lstObjOrg.Add(null);
                lstObjOrg.Add(null);
                var actionService = new ActionService(UserLogin, LanguageCode);
                var listEntity = actionService.GetData<Cat_OrgStructureTreeViewEntity>(lstObjOrg, ConstantSql.hrm_cat_sp_get_OrgStructure_Data, ref status);
                var orgId = listEntity.Where(m => m.OrderNumber.ToString() == model.OrgStructureID).FirstOrDefault();
                if (orgId.ID != null)
                {
                    strOrderNumber = string.Empty;
                    GetChildOrgStructureID(listEntity, orgId.ID);
                    model.OrgStructureID = strOrderNumber + model.OrgStructureID;
                }
            }
            if (model.IsExcludeQuitEmp == false)
            {
                model.IsExcludeQuitEmp = null;
            }
            return GetListDataAndReturn<Hre_GeneralBasicProfileModel, Hre_GeneralBasicProfileModel, Hre_GeneralBasicProfileMultiSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Profile_BasicGeneralGrid);
        }

        //Quyen.Quach 02/10/2017 0087467 Tạo hàm riêng để update logic mã hóa lương
        public ActionResult SaveExtendContract([Bind]Hre_ContractExtendModel model)
        {
            var salaryservices = new Sal_BasicSalaryServices();
            #region Validate
            string message = string.Empty;
            string status = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractExtendModel>(LanguageCode, model, "Hre_ContractExtend", ref message);
            if (!checkValidate)
            {
                model.ActionStatus = message;
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            #region Son.Vo - 20160808 - 0071798: Bổ sung tính năng cảnh báo trùng khi tạo mới hợp đồng
            var ContractServices = new Hre_ContractServices();
            if (model.ID == Guid.Empty && model.ContractID != null && model.AppendixContractTypeID != null)
            {
                var isDuplicate = ContractServices.ValidateDuplicateContractExtend(model.ID, model.ContractID.Value, model.DateStart, model.DateEnd, model.AppendixContractTypeID.Value);
                if (isDuplicate == ConstantDisplay.HRM_Hr_Hre_DuplicateContractExtend.ToString())
                {
                    model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContractExtend.TranslateString();
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            #endregion

            if (model.AppendixCreateBasicSalary == true)
            {
                var _AppendixContractEntity = new Hre_ContractExtendEntity();
                model.CopyData(_AppendixContractEntity);
                if (string.IsNullOrEmpty(model.IsCreateSal))
                {
                    var isInvalid = salaryservices.ValidateCreateSalaryByContractExtend(_AppendixContractEntity, model.AppendixCreateBasicSalary, model.AppendixCreateInsuranceSalary);
                    if (isInvalid == true)
                    {
                        model.ActionStatus = "InvalidSalary";
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }
            }

            if (model.AppendixCreateInsuranceSalary == true)
            {
                var _AppendixContractEntity = new Hre_ContractExtendEntity();
                model.CopyData(_AppendixContractEntity);
                if (string.IsNullOrEmpty(model.IsCreateSal))
                {
                    var isInvalid = salaryservices.ValidateCreateSalaryByContractExtend(_AppendixContractEntity, model.AppendixCreateBasicSalary, model.AppendixCreateInsuranceSalary);
                    if (isInvalid == true)
                    {
                        model.ActionStatus = "InvalidSalary";
                        return Json(model, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            #endregion
            var service = new ActionService(UserLogin, LanguageCode);
            var contractExtendServices = new Hre_ContractExtendServices();
            #region Son.Vo - 20160525 - Nếu type = gia hạn thì update hre_contract.dateextend = dateend
            if (model.ContractID != null && model.TypeAppendix == EnumDropDown.TypeAppendix.E_EXTEND.ToString())
            {
                message = contractExtendServices.updateContractByContractExtend(model.ContractID.Value, model.DateEnd);
            }
            #endregion
            bool iscreate = false;
            if (model.ID == Guid.Empty)
            {
                iscreate = true;
            }

            //Son.Vo - 20170605 - 0082889
            if (model.ProfileID != null && model.GradeAttendanceID != null && model.DateStart != null)
            {
                string messageRef = ContractServices.CreateOrUpdateGradeAttendanceByContract(model.ProfileID.Value, model.GradeAttendanceID.Value, model.DateStart.Value);
            }
            //Quyen.Quach - 2017/07/07- 0085054 ràng buộc khi sửa ngày hiệu lực của PLHD
            var lstInvalid = contractExtendServices.GetlstContractExtendByContractID(model.ContractID.Value).Where(s =>
               s.ID != model.ID && ((s.ContractID == model.ContractID) && (s.AppendixContractTypeID == model.AppendixContractTypeID)) && ((s.DateEnd != null && s.DateEnd > model.DateStart) || (s.DateEnd == null && (s.DateStart > model.DateStart)))).ToList();
            if (lstInvalid.Count > 0)
            {
                model.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContractExtend.TranslateString();
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            var ContractExtendEntity = new Hre_ContractExtendEntity();
            model.CopyData(ContractExtendEntity);
            if (model.AppendixCreateBasicSalary == false)
            {
                //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                {
                    if (model.Salary != null)
                    {
                        ContractExtendEntity.E_Salary = model.Salary.ToString().Encrypt();
                    }
                    ContractExtendEntity.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }
                else
                {
                    if (model.Salary != null)
                    {
                        ContractExtendEntity.E_Salary = model.Salary.ToString().Encrypt();
                        ContractExtendEntity.Salary = model.Salary;
                    }
                    ContractExtendEntity.Allowance1 = model.Allowance1;
                    ContractExtendEntity.Allowance2 = model.Allowance2;
                    ContractExtendEntity.Allowance3 = model.Allowance3;
                    ContractExtendEntity.Allowance4 = model.Allowance4;
                    ContractExtendEntity.Allowance5 = model.Allowance5;
                    ContractExtendEntity.Allowance6 = model.Allowance6;
                    ContractExtendEntity.Allowance7 = model.Allowance7;
                    ContractExtendEntity.Allowance8 = model.Allowance8;
                    ContractExtendEntity.Allowance9 = model.Allowance9;
                    ContractExtendEntity.Allowance10 = model.Allowance10;
                    ContractExtendEntity.Allowance11 = model.Allowance11;
                    ContractExtendEntity.Allowance12 = model.Allowance12;
                    ContractExtendEntity.Allowance13 = model.Allowance13;
                    ContractExtendEntity.Allowance14 = model.Allowance14;
                    ContractExtendEntity.Allowance15 = model.Allowance15;
                    ContractExtendEntity.E_Allowance1 = model.Allowance1 != null ? model.Allowance1.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance2 = model.Allowance2 != null ? model.Allowance2.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance3 = model.Allowance3 != null ? model.Allowance3.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance4 = model.Allowance4 != null ? model.Allowance4.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance5 = model.Allowance5 != null ? model.Allowance5.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance6 = model.Allowance6 != null ? model.Allowance6.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance7 = model.Allowance7 != null ? model.Allowance7.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance8 = model.Allowance8 != null ? model.Allowance8.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance9 = model.Allowance9 != null ? model.Allowance9.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance10 = model.Allowance10 != null ? model.Allowance10.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance11 = model.Allowance11 != null ? model.Allowance11.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance12 = model.Allowance12 != null ? model.Allowance12.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance13 = model.Allowance13 != null ? model.Allowance13.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance14 = model.Allowance14 != null ? model.Allowance14.ToString().Encrypt() : string.Empty;
                    ContractExtendEntity.E_Allowance15 = model.Allowance15 != null ? model.Allowance15.ToString().Encrypt() : string.Empty;
                }
            }
            if (model.AppendixCreateInsuranceSalary == false)
            {
                if (ConstantPathWeb.Hrm_IsEncryptData == true)
                {
                    if (model.InsuranceAmount != null)
                    {
                        ContractExtendEntity.InsuranceAmount = null;
                        ContractExtendEntity.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                    }
                }
                else
                {
                    if (model.InsuranceAmount != null)
                    {
                        ContractExtendEntity.E_InsuranceAmount = model.InsuranceAmount.ToString().Encrypt();
                        ContractExtendEntity.InsuranceAmount = model.InsuranceAmount;
                    }
                }
            }
            if (model.ID != Guid.Empty)
            {
                ContractExtendEntity.ActionStatus = contractExtendServices.Edit(ContractExtendEntity);
            }
            else
            {
                ContractExtendEntity.ActionStatus = contractExtendServices.Add(ContractExtendEntity);
            }
            if (iscreate == true)
            {
                var extendEntity = ContractExtendEntity.CopyData<Hre_ContractExtendEntity>();
                contractExtendServices.SetValueContractExtendByWorkHistory(extendEntity);
            }

            if (model.AppendixCreateBasicSalary == true)
            {
                var _AppendixContractEntity = new Hre_ContractExtendEntity();
                ContractExtendEntity.CopyData(_AppendixContractEntity);
                salaryservices.CreateBasicSalaryByContractExtend(_AppendixContractEntity);
            }
            if (model.AppendixCreateInsuranceSalary == true)
            {
                var _AppendixContractEntity = new Hre_ContractExtendEntity();
                ContractExtendEntity.CopyData(_AppendixContractEntity);
                salaryservices.CreateInsuranceSalaryByContractExtend(_AppendixContractEntity);
            }
            return Json(ContractExtendEntity, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult GetReportResidenceCardToSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEAFTER = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWRESIDENCECARDTO);
            if (_VALUEAFTER >= 0)
            {
                DateFrom = DateTo.AddDays(_VALUEAFTER);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetReportResidenceCardFromSearch()
        {
            string status = string.Empty;
            DateTime DateFrom = DateTime.Now;
            DateTime DateTo = DateTime.Now;
            Sys_AttOvertimePermitConfigServices sysServices = new Sys_AttOvertimePermitConfigServices();
            var _VALUEBEFOR = sysServices.GetConfigValue<int>(AppConfig.HRM_HRE_CONFIGGENERAL_DAYSHOWRESIDENCECARDFROM);
            if (_VALUEBEFOR >= 0)
            {
                DateFrom = DateTo.AddDays(-_VALUEBEFOR);
            }
            return Json(DateFrom, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult GetKPIGroupList(string text)
        {
            return GetDataForControl<Hre_KPIGroupSearchModel, Hre_KPIGroupSearchEntity>(text, ConstantSql.hrm_hre_sp_get_KPIGroup);
        }

        public string ValidateKPI([DataSourceRequest] DataSourceRequest request, Hre_KPIModel model)
        {
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_KPIModel>(LanguageCode, model, "Hre_KPI", ref message);
            var kpiService = new Hre_KPIServices();
            var duplicateKPI = kpiService.CheckDuplicateKPI(model.ID, model.Code, model.KPIName);

            if (!checkValidate)
            {
                return message;
            }
            if (duplicateKPI != null)
            {
                message = ConstantDisplay.HRM_HR_KPIExit.TranslateString();
                return message;
            }
            else
            {
                return string.Empty;
            }
        }

        public ActionResult GetKPIList([DataSourceRequest] DataSourceRequest request, Hre_KPISearchModel model)
        {
            return GetListDataAndReturn<Hre_KPIModel, Hre_KPIEntity, Hre_KPISearchModel>(request, model, ConstantSql.hrm_hre_sp_get_KPI);
        }

        //public ActionResult ExportAllKPIList([DataSourceRequest] DataSourceRequest request, Hre_KPISearchModel model)
        //{
        //    return ExportAllAndReturn<Hre_KPIEntity, Hre_KPIModel, Hre_KPISearchModel>(request, model, ConstantSql.hrm_hre_sp_get_KPI);
        //}

        [HttpPost]
        public ActionResult ExportAllKPIList([DataSourceRequest] DataSourceRequest request, Hre_KPISearchModel model)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_KPI";
            var status = string.Empty;
            var lstModel = new ListQueryModel
            {
                PageIndex = 1,
                PageSize = Int32.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            _table = objBase.GetDataTable(lstModel, ConstantSql.hrm_hre_sp_get_KPI, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
            return Json(message);
        }

        public ActionResult ExportKPISelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_KPIEntity, Hre_KPIModel>(selectedIds, valueFields, ConstantSql.hrm_hre_sp_get_KPIByIds);
        }

        #region Lưới DS Cấp bậc của tiêu chí đánh giá hợp đồng
        [HttpPost]
        public ActionResult GetLstKPILevelByKPIID([DataSourceRequest] DataSourceRequest request, Guid? KPIID)
        {
            if (KPIID != null && KPIID != Guid.Empty)
            {
                string status = string.Empty;
                var _KPIServices = new Hre_KPIServices();
                var result = _KPIServices.GetLstLevelByKPIID(KPIID.Value);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult CreateInCellKPILevel([Bind(Prefix = "models")] List<Hre_LevelModel> model, Guid? KPIID)
        {

            if (KPIID == null || KPIID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveKPIFirst.TranslateString());
            }
            var _KPIServices = new Hre_KPIServices();

            if (model != null)
            {

                foreach (var level in model)
                {
                    string message = string.Empty;
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_LevelModel>(LanguageCode, level, "Hre_Level", ref message);
                    if (!checkValidate)
                    {
                        level.ActionStatus = message;
                        return Json(level);
                    }
                    var kpiService = new Hre_KPIServices();
                    //Quyen.Quach 18/10/2017 0088918
                    if (level.MaximumRating != null && level.MinimumRating != null)
                    {
                        //Quyen.Quach 21/12/2017 0091662 Modify Điều kiện
                        var duplicateLevel4maxmin = kpiService.CheckDuplicateLevelduplicateLevel4maxmin(level.ID, KPIID.Value, level.LevelName, level.MinimumRating.Value, level.MaximumRating.Value, level.PerformanceTemplateID);
                        if (duplicateLevel4maxmin != null)
                        {
                            level.ActionStatus = ConstantDisplay.HRM_HR_LevelExit.TranslateString();
                            return Json(level);
                        }
                    }
                    if (level.ID == Guid.Empty)
                    {
                        level.ID = Guid.NewGuid();
                        level.KPIID = KPIID.Value;
                        string messref = _KPIServices.Add(level.CopyData<Hre_LevelEntity>());
                    }
                    else
                    {
                        level.KPIID = KPIID.Value;
                        string messref = _KPIServices.Edit(level.CopyData<Hre_LevelEntity>());
                    }
                }
            }
            return Json("");
        }

        public ActionResult NotEditInCellKPILevel([Bind(Prefix = "models")] List<Hre_LevelModel> model, Guid? KPIID)
        {

            if (KPIID == null || KPIID == Guid.Empty)
            {
                return Json(ConstantDisplay.PleaseSaveKPIFirst.TranslateString());
            }
            var _KPIServices = new Hre_KPIServices();

            if (model != null)
            {

                foreach (var level in model)
                {
                    string message = string.Empty;
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_LevelModel>(LanguageCode, level, "Hre_Level", ref message);
                    if (!checkValidate)
                    {
                        level.ActionStatus = message;
                        return Json(level);
                    }
                    var kpiService = new Hre_KPIServices();
                    //Quyen.Quach 18/10/2017 0088918
                    if (level.MaximumRating != null && level.MinimumRating != null)
                    {
                        //Quyen.Quach 21/12/2017 0091662 Modify Điều kiện
                        var duplicateLevel4maxmin = kpiService.CheckDuplicateLevelduplicateLevel4maxmin(level.ID, KPIID.Value, level.LevelName, level.MinimumRating.Value, level.MaximumRating.Value, level.PerformanceTemplateID);
                        if (duplicateLevel4maxmin != null)
                        {
                            level.ActionStatus = ConstantDisplay.HRM_HR_LevelExit.TranslateString();
                            return Json(level);
                        }
                    }
                    if (level.ID == Guid.Empty)
                    {
                        level.ID = Guid.NewGuid();
                        level.KPIID = KPIID.Value;
                        string messref = _KPIServices.Add(level.CopyData<Hre_LevelEntity>());
                    }
                    else
                    {
                        message = ConstantDisplay.HRM_HR_CannotEdit.TranslateString();
                        level.ActionStatus = message;
                        return Json(level);
                    }
                }
            }
            return Json("");
        }
        #endregion


        #region Hre_KPIGroup
        //Quyen.Quach 12/10/2017 0088568 Get all ds nhóm tiêu chí
        public ActionResult GetListKPIGroup([DataSourceRequest] DataSourceRequest request, Hre_KPIGroupSearchModelV2 model)
        {
            return GetListDataAndReturn<Hre_KPIGroupModel, Hre_KPIGroupEntity, Hre_KPIGroupSearchModelV2>(request, model, ConstantSql.hrm_hre_sp_get_ListKPIGroup);
        }
        //Quyen.Quach 12/10/2017 0088568
        public JsonResult GetMultiKPI(string text)
        {
            return GetDataForControl<Hre_KPIModel, Hre_KPIEntity>(text, ConstantSql.hrm_hre_sp_get_KPI_Multi);
        }
        //Quyen.Quach 12/10/2017 0088568
        public ActionResult GetKPIListKPIGroupID([DataSourceRequest] DataSourceRequest request, Hre_KPIMultiModel model)
        {
            return GetListDataAndReturn<Hre_KPIModel, Hre_KPIEntity, Hre_KPIMultiModel>(request, model, ConstantSql.hrm_hre_sp_get_KPIListKPIGroupID);
        }
        //Quyen.Quach 12/10/2017 0088568
        public ActionResult ExportAllKPIGroupList([DataSourceRequest] DataSourceRequest request, Hre_KPIGroupSearchModelV2 model)
        {
            return ExportAllAndReturn<Hre_KPIGroupEntity, Hre_KPIGroupModel, Hre_KPIGroupSearchModelV2>(request, model, ConstantSql.hrm_hre_sp_get_ListKPIGroup);
        }
        [HttpPost]
        public ActionResult ExportKPIGroupSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_KPIGroupEntity, Hre_KPIGroupModel>(selectedIds, valueFields, ConstantSql.hrm_hre_sp_get_ListKPIGroupByIds);
        }
        //Quyen.Quach 12/10/2017 0088568
        public ActionResult SaveKPIGroupIDtolstKPI(string lstKPI, Guid? GroupKPIID)
        {
            Hre_KPIServices Services = new Hre_KPIServices();
            if (!string.IsNullOrEmpty(lstKPI) && GroupKPIID != Guid.Empty)
            {
                List<Guid> lstKPIs = lstKPI.Split(',').Select(s => Guid.Parse(s)).Distinct().ToList();
                bool result = Services.SaveKPIGroupIDtolstKPI(lstKPIs, GroupKPIID.Value);
                if (result)
                {
                    return Json(true);
                }
                else
                {
                    return Json(false);
                }
            }
            return Json(false);
        }
        #endregion
        //Quyen.Quach 12/10/2017 0088669
        public JsonResult Get_HouseHolder_Multi(string text)
        {
            return GetDataForControl<CatRelativeTypeModel, Cat_RelativeTypeEntity>(text, ConstantSql.hrm_hre_sp_get_HouseHolderRelative_Multi);
        }
        #region Hre_PerformanceTemplate
        //Quyen.Quach 13/10/2017 0088570
        [HttpPost]
        public ActionResult ExportTemplateSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_PerformanceTemplateEntity, Hre_PerformanceTemplateModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_Hre_PerformanceTemplateByIds);
        }
        [HttpPost]
        public ActionResult ExportTemplateList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceTemplateSearchModel model)
        {
            return ExportAllAndReturn<Hre_PerformanceTemplateEntity, Hre_PerformanceTemplateModel, Hre_PerformanceTemplateSearchModel>(request, model, ConstantSql.hrm_eva_sp_get_Hre_performanceTemplate);
        }
        //Quyen.Quach 13/10/2017 0088570 Ds danh mục bộ tiêu chí
        [HttpPost]
        public ActionResult GetTemplateList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceTemplateSearchModel model)
        {
            return GetListDataAndReturn<Hre_PerformanceTemplateModel, Hre_PerformanceTemplateEntity, Hre_PerformanceTemplateSearchModel>(request, model, ConstantSql.hrm_eva_sp_get_Hre_performanceTemplate);
        }
        //Quyen.Quach 13/10/2017 0088570 Get KPI group cho control
        public JsonResult GetMultiGroupKPI(string text)
        {
            return GetDataForControl<Hre_KPIGroupMultiModel, Hre_KPIGroupMultiModel>(text, ConstantSql.hrm_cat_sp_get_Hre_KPIGroup_Multi);
        }
        //Quyen.Quach 13/10/2017 0088570 Get KPI group cho control
        public JsonResult GetMultiKPIByKPIGroupId(string text, Guid? KPIGroupId)
        {
            Hre_KPIServices services = new Hre_KPIServices();
            var lstResult = services.GetMultiKPIByKPIGroupId(text, KPIGroupId);
            return Json(lstResult, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult EditPerformanceDetail(Hre_KPIModel model)
        {
            Hre_KPIServices service = new Hre_KPIServices();
            var entity = service.EditPerformanceDetail(model.PerformanceDetailID, model.KPIRate, model.OrderNumber, model.Value, model.MinimumRating, model.MaximumRating);
            var result = entity.CopyData<Hre_KPIModel>();
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult GetKPIByTemplateIDList([DataSourceRequest] DataSourceRequest request, Hre_KPISearchModelv2 model)
        {
            return GetListDataAndReturn<Hre_KPIModel, Hre_KPIEntity, Hre_KPISearchModelv2>(request, model, ConstantSql.hrm_cat_sp_get_Hre_KpiByTemplateID);
        }
        public JsonResult DeletePerformanceDetail(Guid PerformanceID, string strKPIID)
        {
            Hre_KPIServices service = new Hre_KPIServices();
            string status = string.Empty;
            List<Guid> arrKPIID = new List<Guid>();
            if (string.IsNullOrEmpty(strKPIID))
            {
                return Json(status, JsonRequestBehavior.AllowGet);
            }
            strKPIID = strKPIID.Substring(0, strKPIID.Length - 1);
            arrKPIID = strKPIID.Split(',').Select(s => Guid.Parse(s)).ToList();
            status = service.DeletePerformanceDetail(PerformanceID, arrKPIID.ToArray());
            return Json(status, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult AddPerformanceDetail(string KPIIDs, Guid PerformanceTemplateID)
        {
            Hre_KPIServices service = new Hre_KPIServices();
            // Thêm PerformanceDetail
            var isSuccess = service.AddPerformanceDetail(KPIIDs, PerformanceTemplateID);
            return Json(isSuccess, JsonRequestBehavior.AllowGet);
        }
        #endregion

        //Nguyen.Le - 20171013 - 0088586
        public ActionResult GetPerformanceList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceSearchModel model)
        {
            return GetListDataAndReturn<Hre_PerformanceModel, Hre_PerformanceEntity, Hre_PerformanceSearchModel>(request, model, ConstantSql.hrm_hre_sp_get_Performance);
        }
        public JsonResult GetPerformanceTemplateMulti(string text)
        {
            return GetDataForControl<Hre_PerformanceTemplateMultiModel, Hre_PerformanceTemplateEntity>(text, ConstantSql.hrm_hr_sp_get_PerformanceTemplate_multi);
        }
        public ActionResult GetKPIByPerformanceIDList([DataSourceRequest] DataSourceRequest request, Hre_KPIModel model)
        {
            var service = new ActionService(UserLogin);
            var lstObj = new List<object>();
            var status = string.Empty;
            lstObj.Add(model.PerformanceTemplateID);
            lstObj.Add(1);
            lstObj.Add(50);
            var listEntity = service.GetData<Hre_KPIEntity>(lstObj, ConstantSql.hrm_hre_sp_get_KpiByTemplateID, ref status);

            listEntity = listEntity.OrderBy(m => m.OrderNumber).ToList();
            return Json(listEntity.ToDataSourceResult(request, ModelState));
        }
        public ActionResult CreateInCellPerformanceForDetail([Bind(Prefix = "models")] List<Hre_KPIModel> model, Guid PerformanceID)
        {
            var _KPIServices = new Hre_KPIServices();
            var service = new ActionService(UserLogin, LanguageCode);

            if (model != null)
            {
                var performanceForDetailModel = new Hre_PerformanceForDetailModel();
                var lstperformanceForDetailModel = _KPIServices.GetPerformanceForDetailByPerformanceID(PerformanceID);
                if (lstperformanceForDetailModel == null || lstperformanceForDetailModel.Count == 0)
                {
                    foreach (var kpi in model)
                    {
                        performanceForDetailModel.ID = Guid.Empty;
                        performanceForDetailModel.PerformanceID = PerformanceID;
                        performanceForDetailModel.OrderKPI = kpi.OrderNumber;
                        performanceForDetailModel.KPIID = kpi.ID;
                        performanceForDetailModel.KPIName = kpi.KPIName;
                        performanceForDetailModel.DescriptionKPIFix = kpi.DescriptionKPIFix;
                        performanceForDetailModel.Rate = kpi.KPIRate;
                        var savePerformanceForDetail = service.UpdateOrCreate<Hre_PerformanceForDetailEntity, Hre_PerformanceForDetailModel>(performanceForDetailModel);
                    }
                }
                else
                {
                    var lstEdit = new List<Guid>();
                    var lstAdd = new List<Guid>();
                    foreach (var kpi in model)
                    {
                        foreach (var performance in lstperformanceForDetailModel)
                        {
                            if (kpi.ID == performance.KPIID)
                            {
                                lstEdit.Add(kpi.ID);
                            }
                        }
                    }
                    foreach (var kpiid in lstEdit)
                    {
                        var indexPerformance = lstperformanceForDetailModel.FindIndex(m => m.KPIID == kpiid);
                        var indexKpi = model.FindIndex(m => m.ID == kpiid);
                        lstperformanceForDetailModel[indexPerformance].OrderKPI = model[indexKpi].OrderNumber;
                        lstperformanceForDetailModel[indexPerformance].DescriptionKPIFix = model[indexKpi].DescriptionKPIFix;
                        lstperformanceForDetailModel[indexPerformance].Rate = model[indexKpi].KPIRate;

                        var savePerformanceForDetail = service.UpdateOrCreate<Hre_PerformanceForDetailEntity, Hre_PerformanceForDetailModel>(performanceForDetailModel);
                    }
                    foreach (var kpi in model)
                    {
                        if (!lstEdit.Contains(kpi.ID))
                        {
                            lstAdd.Add(kpi.ID);
                        }
                    }
                    foreach (var kpiid in lstAdd)
                    {
                        var indexKpi = model.FindIndex(m => m.ID == kpiid);
                        performanceForDetailModel.ID = Guid.Empty;
                        performanceForDetailModel.PerformanceID = PerformanceID;
                        performanceForDetailModel.OrderKPI = model[indexKpi].OrderNumber;
                        performanceForDetailModel.KPIID = model[indexKpi].ID;
                        performanceForDetailModel.KPIName = model[indexKpi].KPIName;
                        performanceForDetailModel.DescriptionKPIFix = model[indexKpi].DescriptionKPIFix;
                        performanceForDetailModel.Rate = model[indexKpi].KPIRate;
                        var savePerformanceForDetail = service.UpdateOrCreate<Hre_PerformanceForDetailEntity, Hre_PerformanceForDetailModel>(performanceForDetailModel);
                    }
                }
            }
            return Json("");
        }
        //Quyen.Quach 16/10/2017 0088857
        [HttpPost]
        public ActionResult ExportSelectProfileAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ProfileAllSelectedSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin, LanguageCode);
            var service = new BaseService();
            object obj = new Hre_ProfileModel();
            var _ContractServices = new Hre_ContractServices();
            var _DependantServices = new Hre_DependantServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var _InsuranceSalaryServices = new Sal_InsuranceSalaryServices();
            var _ProfileServices = new Hre_ProfileServices();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var _lstSalaryInfo = new List<Sal_SalaryInformation4ExportProfileEntity>();
            var _lstQualification = new List<Hre_ProfileQualificationEntity>();
            var result = actionService.GetData<Hre_ProfileForExportModel>(model.StrSelectedIds, ConstantSql.hr_sp_get_ProfileAllByIds, ref status);

            if (result != null)
            {
                var lstProfileIDS = result.Select(s => s.ID).Distinct().ToList();
                var _listbasicSalaryEntity = _BasicSalaryServices.GetBasicSalaryBylstProIDs(lstProfileIDS);
                var _lstInsuranceSalary = _InsuranceSalaryServices.GetLstInsuranceSalaryByProfileIDs(lstProfileIDS);
                #region xuất cho dự án khác
                #region Khai bao table va tao cot
                DataTable _table = new DataTable("Hre_ProfileModel");
                PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Hre_ProfileForExportModel));
                foreach (PropertyDescriptor prop in properties)
                    _table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                #region DataColumn
                _table.Columns.Add("UnitTime");
                _table.Columns.Add("ValueTime");
                _table.Columns.Add("BankCode");
                _table.Columns.Add("BankName2");
                _table.Columns.Add("BankCode2");
                _table.Columns.Add("AccountNo2");
                _table.Columns.Add("AccountName");
                _table.Columns.Add("AccountName2");
                _table.Columns.Add("TerminateDate", typeof(DateTime));
                //  _table.Columns.Add("DependantCount", typeof(int)); đã có trong Hre_ProfileForExportModel

                #endregion
                #endregion
                #region task 0055513
                var _lstContract = _ContractServices.GetContractDataByLstProfileIDs(lstProfileIDS);
                var lstContractIDS = _lstContract.Select(s => s.ID).ToList();
                var _lstAppendixContract = _ContractServices.GetLstAppendixContractByProfileIDs(lstContractIDS);
                var _lstDependant = _DependantServices.GetListDependantForcountCountDependantByProfile(lstProfileIDS);
                _lstSalaryInfo = _ProfileServices.GetLstSalaryInformation4ExportByProfileIDs(lstProfileIDS);
                _lstQualification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDS);
                #endregion

                var imageFields = new[] { new TemplateBase.ImageField("ImagePath", formatImagePath: Common.GetPath("Images") + "\\{0}") };
                ExportService.ExcelImageUtility.ResolveExcelImageCellType(_table, imageFields);

                foreach (var item in result)
                {
                    DataRow row = _table.NewRow();

                    #region Sal_BasicSalary
                    var _basicsalary = _listbasicSalaryEntity.Where(s => s.ProfileID == item.ID).ToList();
                    if (_basicsalary != null && _basicsalary.Count() > 0)
                    {
                        var fristbasicsalary = _basicsalary.OrderBy(s => s.DateOfEffect).FirstOrDefault();
                        item.FristGrossAmount = fristbasicsalary != null ? fristbasicsalary.GrossAmount : "";
                        var lastbasicsalary = _basicsalary.OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                        item.LastGrossAmount = lastbasicsalary != null ? lastbasicsalary.GrossAmount : "";
                        item.SalaryRankName = lastbasicsalary != null ? lastbasicsalary.SalaryRankName : "";
                    }

                    if (_lstInsuranceSalary != null)
                    {
                        //[To.Le][06/04/2016][]lấy lương bảo hiểm xuất trên excel
                        var InsuranceSalary = _lstInsuranceSalary.Where(s => s.ProfileID == item.ID && s.DateEffect <= item.DateQuit).OrderByDescending(s => s.DateEffect).FirstOrDefault();
                        if (InsuranceSalary != null)
                        {
                            item.InsuranceAmount = InsuranceSalary.InsuranceAmount;
                        }
                    }


                    #endregion

                    foreach (PropertyDescriptor prop in properties)
                    {
                        row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                    }

                    //Quyen.Quach 30/12/2017 Kiểm tra row rỗng
                    if (row["DateOfBirth"] != null && row["DateOfBirth"] != DBNull.Value)
                    {
                        DateTime dateofbirth = (DateTime)row["DateOfBirth"];
                        var dateofBirthLunar = Common.convertSolar2Lunar(dateofbirth.Day, dateofbirth.Month, dateofbirth.Year, 7);
                        if (dateofBirthLunar != null)
                        {
                            row["DateOfBirthLunar"] = dateofBirthLunar;
                            var strdateofBirthLunar = dateofBirthLunar.Split('/');
                            var lunarinfo = Common.CalculateLunarInfo(int.Parse(strdateofBirthLunar[0]), int.Parse(strdateofBirthLunar[1]), int.Parse(strdateofBirthLunar[2]));
                            if (lunarinfo != null && lunarinfo.Count > 2)
                            {
                                row["TuoiTheoConGiap"] = lunarinfo[0] + ' ' + lunarinfo[1];
                                row["Menh"] = lunarinfo[2];
                            }
                        }
                    }

                    #region Bank
                    var _salaryInfoEntity = _lstSalaryInfo.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateUpdate).FirstOrDefault();
                    if (_salaryInfoEntity != null)
                    {
                        row["BankName"] = _salaryInfoEntity.BankName;
                        row["BankCode"] = _salaryInfoEntity.BankCode;
                        row["AccountNo"] = _salaryInfoEntity.AccountNo;
                        row["BankName2"] = _salaryInfoEntity.BankName2;
                        row["BankCode2"] = _salaryInfoEntity.BankCode2;
                        row["AccountNo2"] = _salaryInfoEntity.AccountNo2;
                        row["AccountName"] = _salaryInfoEntity.AccountName;
                        row["AccountName2"] = _salaryInfoEntity.AccountName2;
                    }

                    #endregion

                    #region ConTract
                    var lsContract = _lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateStart).ToList();
                    if (lsContract != null && lsContract.Count() > 0)
                    {
                        var contractEntity = lsContract.FirstOrDefault();
                        row["TimesOfContract"] = lsContract.Count;
                        row["UnitTime"] = contractEntity.UnitTime;
                        row["ValueTime"] = contractEntity.ValueTime;
                        row["ContractNo"] = contractEntity.ContractNo;
                        row["ContractTypeName"] = contractEntity.ContractTypeName;
                        row["DateStartContract"] = contractEntity.DateStart;
                        if (contractEntity.DateEnd != null)
                        {
                            row["DateEndContract"] = contractEntity.DateEnd.Value;
                        }
                        if (contractEntity.TerminateDate != null)
                        {
                            row["TerminateDate"] = contractEntity.TerminateDate.Value;
                        }
                        if (contractEntity.DateSigned != null)
                        {
                            row["DateSigned"] = contractEntity.DateSigned.Value;
                        }
                        if (contractEntity.Salary != null)
                        {
                            row["Salary"] = contractEntity.Salary;
                        }
                        if (contractEntity.Allowance1 != null)
                        {
                            row["Allowance1"] = contractEntity.Allowance1;
                        }
                        if (contractEntity.Allowance2 != null)
                        {
                            row["Allowance2"] = contractEntity.Allowance2;
                        }
                        if (contractEntity.Allowance3 != null)
                        {
                            row["Allowance3"] = contractEntity.Allowance3;
                        }
                    }
                    #endregion

                    #region yêu cầu của task 0055513
                    var contractTypeEntity = _lstContract.Where(s => s.ProfileID == item.ID && s.Type == "E_OFFICIAL").OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (contractTypeEntity != null)
                    {
                        if (contractTypeEntity.DateSigned != null)
                        {
                            row["DateSigned"] = contractTypeEntity.DateSigned.Value;
                        }
                        row["Type"] = contractTypeEntity.Type;
                    }
                    var qualification = _lstQualification.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateUpdate).ToList();
                    if (qualification != null && qualification.Count > 0)
                    {
                        var qualificationEntity = qualification.FirstOrDefault();
                        if (qualificationEntity.DateFinish != null)
                            row["DateFinish"] = qualificationEntity.DateFinish.Value;

                        row["QualificationName"] = qualificationEntity.QualificationName;
                        row["CertificateName"] = qualificationEntity.CertificateName;
                        row["NameEntityName"] = qualificationEntity.NameEntityName;
                        row["TrainingPlace"] = qualificationEntity.TrainingPlace;
                        row["FieldOfTraining"] = qualificationEntity.FieldOfTraining;
                    }
                    //HD moi nhat
                    var lastestContract = _lstContract.Where(s => s.ProfileID == item.ID).OrderByDescending(s => s.DateEnd).ToList();
                    if (lastestContract != null && lastestContract.Count > 0)
                    {
                        var lastestContractID = lastestContract.FirstOrDefault().ID;
                        var lsAppendix = _lstAppendixContract.Where(s => s.ContractID == lastestContractID).ToList();
                        if (lsAppendix != null && lsAppendix.Count > 0)
                        {
                            var lsAppendixEntity = lsAppendix.FirstOrDefault();
                            row["Code"] = lsAppendixEntity.Code;
                            if (lsAppendixEntity.DateofEffect != null)
                            {
                                row["DateofEffectAppendix"] = lsAppendixEntity.DateofEffect.Value;
                            }
                            if (lsAppendixEntity.DateEndAppendixContract != null)
                            {
                                row["DateEndAppendixContract"] = lsAppendixEntity.DateEndAppendixContract.Value;
                            }
                        }
                    }
                    #endregion


                    //Quyen.Quach 16/10/2017 0088857
                    var qualificationMain = _lstQualification.Where(s => s.ProfileID == item.ID && s.IsQualificationMain == true).OrderByDescending(s => s.GraduationDate).FirstOrDefault();
                    if (qualificationMain != null)
                    {
                        row["SpecialLevelNameMain"] = qualificationMain.NameEntityName;
                        row["FieldOfTrainingMain"] = qualificationMain.FieldOfTraining;
                        row["TrainingPlaceMain"] = qualificationMain.TrainingPlace;
                    }

                    var _lstdependant = _lstDependant.Where(s => s.ProfileID == item.ID).ToList();
                    if (_lstdependant != null)
                    {
                        row["DependantCount"] = _lstdependant.Count();
                    }

                    ExportService.ExcelImageUtility.ResolveExcelImageCellValue(row, imageFields);
                    _table.Rows.Add(row);
                }
                #endregion

                if (model.ExportId != Guid.Empty)
                {
                    var fullPath = ExportService.Export(model.ExportId, null, null, _table, UserGuidID, model.ExportType, imageFields: imageFields);
                    return Json(fullPath);
                }
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }
        [HttpPost]

        public ActionResult GetDateEvabyPerformanceID(string PerformanceID)
        {
            if (!string.IsNullOrEmpty(PerformanceID))
            {
                var ContractServices = new Hre_ContractServices();
                var result = ContractServices.GetDateEvabyPerformanceID(Guid.Parse(PerformanceID));
                if (result != null)
                {
                    return Json(result.DateEva);
                }
                return null;
            }
            return null;
        }
        [HttpPost]
        public ActionResult EvaContractbyPerformanceID([Bind]Hre_ContractModel model)
        {
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string message = string.Empty;
            var checkValidate = ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, model, "EvaluationContractInfo", ref message);
            if (!checkValidate)
            {
                return Json(message);
            }
            var lstContractEidt = new List<Hre_ContractEntity>();
            var ContractExtendServices = new Hre_ContractExtendServices();
            List<Guid> lstIDs = new List<Guid>();
            var insuranceServices = new Sal_InsuranceSalaryServices();
            var contractServices = new Hre_ContractServices();
            var profileServices = new Hre_ProfileServices();
            if (model.selectedIds == null && model.contractIds != null)
            {
                model.selectedIds = model.contractIds;
            }
            if (model.selectedIds != null && model.selectedIds.IndexOf(',') > 1)
            {
                var lstID = model.selectedIds.Split(',');
                for (int i = 0; i < lstID.Length; i++)
                {
                    convertProfileID = Common.ConvertToGuid(lstID[i]);
                    lstIDs.Add(convertProfileID);
                }
            }
            else
            {
                convertProfileID = Common.ConvertToGuid(model.selectedIds);
                lstIDs.Add(convertProfileID);
            }
            var lstIds = model.selectedIds.Split(',').Select(s => Guid.Parse(s)).ToList();
            var actionService = new ActionService(UserLogin);
            var lstContract = new List<Hre_ContractEntity>();
            if (lstIDs != null)
            {
                lstContract = contractServices.GetContractDataByIDs(lstIDs);
            }

            #region Son.Vo - 20160712 - 0068451: điều chỉnh control load người ký hợp đồng theo cấu hình người duyệt
            var _Services = new Sys_AttOvertimePermitConfigServices();
            bool ischeck = _Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWPROFILESIGNBYUSERAPPROVED);
            if (model != null && model.NextUserProfileSingID != null && ischeck == true)
            {
                model.NextProfileSingID = model.NextUserProfileSingID;
            }
            #endregion
            //Son.Vo - 20161226 - 0077134
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            var _MAXCASUAL = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
            var _MAXPROBATION = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
            var _MAXOFFICIAL = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
            var _MAXAPPENDIX = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
            var _MAXAPPRENTICESHIP = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
            var _MAXDURATION = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
            var _MAXNODURATION = Sys_Services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
            var isbyCompany = Sys_Services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
            string strDataLoadFrom = Sys_Services.GetConfigValue<string>(AppConfig.HRM_HRE_CONFIG_LOADEVALUATIONDATAFROM);
            bool isloadFromBasic = false;
            bool isloadFromExtend = false;
            if (lstIDs.Count > 1 && strDataLoadFrom != null && strDataLoadFrom == LoadEvaluationDataFrom.E_BASICSALARY.ToString())
            {
                isloadFromBasic = true;
            }
            else if (lstIDs.Count > 1 && strDataLoadFrom != null && strDataLoadFrom == LoadEvaluationDataFrom.E_CONTRACTEXTEND.ToString())
            {
                isloadFromExtend = true;
            }
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = _BasicSalaryServices.GetLstBasicSalaryByContract(lstIDs).ToList();
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var lstContractExtend = _ContractExtendServices.GetLastContractExtend4UpdateEvaContract(lstIDs).ToList();
            bool isSendmailQuit = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_SENDEMAIL_QUIT);
            bool isSendmailSignNextContract = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSENDMAILSIGNNEXTCONTRACT);
            bool _IsShow = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISSHOWSALARYANDALLOWANCEWHENEVALUATECONTRACT);
            bool showSalary = false;
            if (_IsShow == true)
            {
                showSalary = true;
            }
            else
            {
                showSalary = false;
            }
            bool _ischeck = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIG_NOTUPDATERANKDETAILFORNEXTCONTRACT);
            bool NotUseRankDetail = false;
            if (_ischeck == true)
            {
                NotUseRankDetail = true;
            }
            else
            {
                NotUseRankDetail = false;
            }
            var lstIDsSendMail = new List<Guid>();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var workHistoryServices = new Hre_WorkHistoryServices();
            var lstWorkhistory = workHistoryServices.GetListWorkingDataByLstProfileIDs(lstProfileIDs);
            foreach (var item in lstContract)
            {
                if (item.DateExtend == null)
                {
                    item.DateExtend = item.DateEnd;
                }
                if (model.DateEndNextContract != null)
                {
                    item.DateEndNextContract = model.DateEndNextContract;
                }
                item.TypeOfStopID = model.TypeOfStopID;
                item.ContractResult = model.ContractResult;
                item.ContractEvaType = EnumDropDown.ContractEvaType.E_EXPIRED_APPRENTICE.ToString();
                item.DateOfContractEva = model.DateOfContractEva;
                item.EvaluationResult = model.EvaluationResult;
                item.Remark = model.Remark;
                item.TypeOfPass = model.TypeOfPass;
                item.NextContractTypeID = model.NextContractTypeID;
                item.AppendixTypeNextID = model.AppendixTypeNextID;
                item.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_WAITING.ToString();
                var contractEntity = new Hre_ContractEntity();
                contractEntity = item.CopyData<Hre_ContractEntity>();
                if (item.DateEnd != null)
                {
                    contractEntity.DateStart = item.DateEnd.Value.AddDays(1);
                }
                if (model.NextContractTypeID != null)
                {
                    SetNewDateEndNextContractByContractAndNextContractID(contractEntity, model.NextContractTypeID.Value);
                }
                item.DateEndNextContract = contractEntity.DateEndNextContract;
                //Son.Vo - 20160530 - 0068094 - nếu có nhập lương cb ở màn hình đánh giá thì Lưu tất cả các trường thông tin lương và phụ cấp kế tiếp khai báo ở trên giao diện
                //nếu không nhập thì lấy của hd hiện tại update vào
                if (model.NextSalary != null)
                {
                    #region Son.Vo - 20160409 - 0065837
                    //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        if (model.NextSalary != null)
                        {
                            item.E_NextSalary = model.NextSalary.ToString().Encrypt();
                        }
                        if (model.NextInsuranceAmount != null)
                        {
                            item.E_NextInsuranceAmount = model.NextInsuranceAmount.ToString().Encrypt();
                        }
                        item.E_Allowance1 = model.NextAllowance1 != null ? model.NextAllowance1.ToString().Encrypt() : string.Empty;
                        item.E_Allowance2 = model.NextAllowance2 != null ? model.NextAllowance2.ToString().Encrypt() : string.Empty;
                        item.E_Allowance3 = model.NextAllowance3 != null ? model.NextAllowance3.ToString().Encrypt() : string.Empty;
                        item.E_Allowance4 = model.NextAllowance4 != null ? model.NextAllowance4.ToString().Encrypt() : string.Empty;
                        item.E_Allowance5 = model.NextAllowance5 != null ? model.NextAllowance5.ToString().Encrypt() : string.Empty;
                        item.E_Allowance6 = model.NextAllowance6 != null ? model.NextAllowance6.ToString().Encrypt() : string.Empty;
                        item.E_Allowance7 = model.NextAllowance7 != null ? model.NextAllowance7.ToString().Encrypt() : string.Empty;
                        item.E_Allowance8 = model.NextAllowance8 != null ? model.NextAllowance8.ToString().Encrypt() : string.Empty;
                        item.E_Allowance9 = model.NextAllowance9 != null ? model.NextAllowance9.ToString().Encrypt() : string.Empty;
                        item.E_Allowance10 = model.NextAllowance10 != null ? model.NextAllowance10.ToString().Encrypt() : string.Empty;
                        item.E_Allowance11 = model.NextAllowance11 != null ? model.NextAllowance11.ToString().Encrypt() : string.Empty;
                        item.E_Allowance12 = model.NextAllowance12 != null ? model.NextAllowance12.ToString().Encrypt() : string.Empty;
                        item.E_Allowance13 = model.NextAllowance13 != null ? model.NextAllowance13.ToString().Encrypt() : string.Empty;
                        item.E_Allowance14 = model.NextAllowance14 != null ? model.NextAllowance14.ToString().Encrypt() : string.Empty;
                        item.E_Allowance15 = model.NextAllowance15 != null ? model.NextAllowance15.ToString().Encrypt() : string.Empty;
                    }
                    else
                    {
                        if (model.NextSalary != null)
                        {
                            item.NextSalary = model.NextSalary;
                            item.E_NextSalary = model.NextSalary.ToString().Encrypt();
                        }
                        if (model.NextInsuranceAmount != null)
                        {
                            item.NextInsuranceAmount = model.NextInsuranceAmount;
                            item.E_NextInsuranceAmount = model.NextInsuranceAmount.ToString().Encrypt();
                        }
                        if (model.NextAllowance1 != null)
                        {
                            item.NextAllowance1 = model.NextAllowance1;
                        }
                        if (model.NextAllowance2 != null)
                        {
                            item.NextAllowance2 = model.NextAllowance2;
                        }
                        if (model.NextAllowance3 != null)
                        {
                            item.NextAllowance3 = model.NextAllowance3;
                        }
                        if (model.NextAllowance4 != null)
                        {
                            item.NextAllowance4 = model.NextAllowance4;
                        }
                        if (model.NextAllowance5 != null)
                        {
                            item.NextAllowance5 = model.NextAllowance5;
                        }
                        if (model.NextAllowance8 != null)
                        {
                            item.NextAllowance8 = model.NextAllowance8;
                        }
                        if (model.NextAllowance9 != null)
                        {
                            item.NextAllowance9 = model.NextAllowance9;
                        }
                        if (model.NextAllowance10 != null)
                        {
                            item.NextAllowance10 = model.NextAllowance10;
                        }
                        if (model.NextAllowance11 != null)
                        {
                            item.NextAllowance11 = model.NextAllowance11;
                        }
                        if (model.NextAllowance12 != null)
                        {
                            item.NextAllowance12 = model.NextAllowance12;
                        }
                        if (model.NextAllowance13 != null)
                        {
                            item.NextAllowance13 = model.NextAllowance13;
                        }
                        if (model.NextAllowance14 != null)
                        {
                            item.NextAllowance14 = model.NextAllowance14;
                        }
                        if (model.NextAllowance15 != null)
                        {
                            item.NextAllowance15 = model.NextAllowance15;
                        }
                        item.E_Allowance1 = model.NextAllowance1 != null ? model.NextAllowance1.ToString().Encrypt() : string.Empty;
                        item.E_Allowance2 = model.NextAllowance2 != null ? model.NextAllowance2.ToString().Encrypt() : string.Empty;
                        item.E_Allowance3 = model.NextAllowance3 != null ? model.NextAllowance3.ToString().Encrypt() : string.Empty;
                        item.E_Allowance4 = model.NextAllowance4 != null ? model.NextAllowance4.ToString().Encrypt() : string.Empty;
                        item.E_Allowance5 = model.NextAllowance5 != null ? model.NextAllowance5.ToString().Encrypt() : string.Empty;
                        item.E_Allowance6 = model.NextAllowance6 != null ? model.NextAllowance6.ToString().Encrypt() : string.Empty;
                        item.E_Allowance7 = model.NextAllowance7 != null ? model.NextAllowance7.ToString().Encrypt() : string.Empty;
                        item.E_Allowance8 = model.NextAllowance8 != null ? model.NextAllowance8.ToString().Encrypt() : string.Empty;
                        item.E_Allowance9 = model.NextAllowance9 != null ? model.NextAllowance9.ToString().Encrypt() : string.Empty;
                        item.E_Allowance10 = model.NextAllowance10 != null ? model.NextAllowance10.ToString().Encrypt() : string.Empty;
                        item.E_Allowance11 = model.NextAllowance11 != null ? model.NextAllowance11.ToString().Encrypt() : string.Empty;
                        item.E_Allowance12 = model.NextAllowance12 != null ? model.NextAllowance12.ToString().Encrypt() : string.Empty;
                        item.E_Allowance13 = model.NextAllowance13 != null ? model.NextAllowance13.ToString().Encrypt() : string.Empty;
                        item.E_Allowance14 = model.NextAllowance14 != null ? model.NextAllowance14.ToString().Encrypt() : string.Empty;
                        item.E_Allowance15 = model.NextAllowance15 != null ? model.NextAllowance15.ToString().Encrypt() : string.Empty;
                    }

                    if (model.NextCurrencyID != null)
                    {
                        item.NextCurrencyID = model.NextCurrencyID;
                    }

                    if (model.NextAllowanceID1 != null)
                    {
                        item.NextAllowanceID1 = model.NextAllowanceID1;
                    }

                    if (model.NextCurenncyID1 != null)
                    {
                        item.NextCurenncyID1 = model.NextCurenncyID1;
                    }

                    if (model.NextAllowanceID2 != null)
                    {
                        item.NextAllowanceID2 = model.NextAllowanceID2;
                    }

                    if (model.NextCurenncyID2 != null)
                    {
                        item.NextCurenncyID2 = model.NextCurenncyID2;
                    }

                    if (model.NextAllowanceID3 != null)
                    {
                        item.NextAllowanceID3 = model.NextAllowanceID3;
                    }

                    if (model.NextCurenncyID3 != null)
                    {
                        item.NextCurenncyID3 = model.NextCurenncyID3;
                    }

                    if (model.NextAllowanceID4 != null)
                    {
                        item.NextAllowanceID4 = model.NextAllowanceID4;
                    }

                    if (model.NextCurenncyID4 != null)
                    {
                        item.NextCurenncyID4 = model.NextCurenncyID4;
                    }

                    if (model.NextAllowanceID5 != null)
                    {
                        item.NextAllowanceID5 = model.NextAllowanceID5;
                    }

                    if (model.NextCurenncyID5 != null)
                    {
                        item.NextCurenncyID5 = model.NextCurenncyID5;
                    }

                    if (model.NextAllowanceID6 != null)
                    {
                        item.NextAllowanceID6 = model.NextAllowanceID6;
                    }
                    if (model.NextAllowance6 != null)
                    {
                        item.NextAllowance6 = model.NextAllowance6;
                    }
                    if (model.NextCurenncyID6 != null)
                    {
                        item.NextCurenncyID6 = model.NextCurenncyID6;
                    }

                    if (model.NextAllowanceID7 != null)
                    {
                        item.NextAllowanceID7 = model.NextAllowanceID7;
                    }
                    if (model.NextAllowance7 != null)
                    {
                        item.NextAllowance7 = model.NextAllowance7;
                    }
                    if (model.NextCurenncyID7 != null)
                    {
                        item.NextCurenncyID7 = model.NextCurenncyID7;
                    }

                    if (model.NextAllowanceID8 != null)
                    {
                        item.NextAllowanceID8 = model.NextAllowanceID8;
                    }

                    if (model.NextCurenncyID8 != null)
                    {
                        item.NextCurenncyID8 = model.NextCurenncyID8;
                    }

                    if (model.NextAllowanceID9 != null)
                    {
                        item.NextAllowanceID9 = model.NextAllowanceID9;
                    }

                    if (model.NextCurenncyID9 != null)
                    {
                        item.NextCurenncyID9 = model.NextCurenncyID9;
                    }

                    if (model.NextAllowanceID10 != null)
                    {
                        item.NextAllowanceID10 = model.NextAllowanceID10;
                    }

                    if (model.NextCurenncyID10 != null)
                    {
                        item.NextCurenncyID10 = model.NextCurenncyID10;
                    }

                    if (model.NextAllowanceID11 != null)
                    {
                        item.NextAllowanceID11 = model.NextAllowanceID11;
                    }

                    if (model.NextCurenncyID11 != null)
                    {
                        item.NextCurenncyID11 = model.NextCurenncyID11;
                    }
                    if (model.NextAllowanceID12 != null)
                    {
                        item.NextAllowanceID12 = model.NextAllowanceID12;
                    }

                    if (model.NextCurenncyID12 != null)
                    {
                        item.NextCurenncyID12 = model.NextCurenncyID12;
                    }

                    if (model.NextAllowanceID13 != null)
                    {
                        item.NextAllowanceID13 = model.NextAllowanceID13;
                    }

                    if (model.NextCurenncyID13 != null)
                    {
                        item.NextCurenncyID13 = model.NextCurenncyID13;
                    }

                    if (model.NextAllowanceID14 != null)
                    {
                        item.NextAllowanceID14 = model.NextAllowanceID14;
                    }

                    if (model.NextCurenncyID14 != null)
                    {
                        item.NextCurenncyID14 = model.NextCurenncyID14;
                    }

                    if (model.NextAllowanceID15 != null)
                    {
                        item.NextAllowanceID15 = model.NextAllowanceID15;
                    }

                    if (model.NextCurenncyID15 != null)
                    {
                        item.NextCurenncyID15 = model.NextCurenncyID15;
                    }
                    //Son.Vo - 20160506 - 0066590
                    //item.NextInsuranceAmount = model.NextInsuranceAmount;
                    item.NextCurrencyIDInsurance = model.NextCurrencyIDInsurance;
                    #endregion
                }
                else
                {
                    if (isloadFromBasic == true)
                    {
                        #region Nếu cấu hình load từ lương cb
                        var lastSalary = lstBasicSalary.Where(s => s.ProfileID == item.ProfileID).FirstOrDefault();
                        if (lastSalary != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lastSalary.GrossAmount != null)
                                {
                                    item.E_NextSalary = lastSalary.GrossAmount.ToString().Encrypt();
                                }
                                if (lastSalary.InsuranceAmount != null)
                                {
                                    item.E_NextInsuranceAmount = lastSalary.InsuranceAmount.ToString().Encrypt();
                                }
                                item.E_Allowance1 = lastSalary.AllowanceAmount1 != null ? lastSalary.AllowanceAmount1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastSalary.AllowanceAmount2 != null ? lastSalary.AllowanceAmount2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastSalary.AllowanceAmount3 != null ? lastSalary.AllowanceAmount3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastSalary.AllowanceAmount4 != null ? lastSalary.AllowanceAmount4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastSalary.AllowanceAmount5 != null ? lastSalary.AllowanceAmount5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastSalary.AllowanceAmount6 != null ? lastSalary.AllowanceAmount6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastSalary.AllowanceAmount7 != null ? lastSalary.AllowanceAmount7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastSalary.AllowanceAmount8 != null ? lastSalary.AllowanceAmount8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastSalary.AllowanceAmount9 != null ? lastSalary.AllowanceAmount9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastSalary.AllowanceAmount10 != null ? lastSalary.AllowanceAmount10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastSalary.AllowanceAmount11 != null ? lastSalary.AllowanceAmount11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastSalary.AllowanceAmount12 != null ? lastSalary.AllowanceAmount12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastSalary.AllowanceAmount13 != null ? lastSalary.AllowanceAmount13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastSalary.AllowanceAmount14 != null ? lastSalary.AllowanceAmount14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastSalary.AllowanceAmount15 != null ? lastSalary.AllowanceAmount15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                if (lastSalary.GrossAmount != null)
                                {
                                    item.NextSalary = lastSalary.GrossAmount != null ? lastSalary.GrossAmount.ToDouble() : null;
                                    item.E_NextSalary = lastSalary.GrossAmount.ToString().Encrypt();
                                }
                                if (lastSalary.InsuranceAmount != null)
                                {
                                    item.NextInsuranceAmount = lastSalary.InsuranceAmount;
                                    item.E_NextInsuranceAmount = lastSalary.InsuranceAmount.ToString().Encrypt();
                                }
                                item.NextAllowance1 = lastSalary.AllowanceAmount1;
                                item.NextAllowance2 = lastSalary.AllowanceAmount2;
                                item.NextAllowance3 = lastSalary.AllowanceAmount3;
                                item.NextAllowance4 = lastSalary.AllowanceAmount4;
                                item.NextAllowance5 = lastSalary.AllowanceAmount5;
                                item.NextAllowance6 = lastSalary.AllowanceAmount6;
                                item.NextAllowance7 = lastSalary.AllowanceAmount7;
                                item.NextAllowance8 = lastSalary.AllowanceAmount8;
                                item.NextAllowance9 = lastSalary.AllowanceAmount9;
                                item.NextAllowance10 = lastSalary.AllowanceAmount10;
                                item.NextAllowance11 = lastSalary.AllowanceAmount11;
                                item.NextAllowance12 = lastSalary.AllowanceAmount12;
                                item.NextAllowance13 = lastSalary.AllowanceAmount13;
                                item.NextAllowance14 = lastSalary.AllowanceAmount14;
                                item.NextAllowance15 = lastSalary.AllowanceAmount15;
                                //Mã hóa 15 loại phụ cấp
                                item.E_Allowance1 = lastSalary.AllowanceAmount1 != null ? lastSalary.AllowanceAmount1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastSalary.AllowanceAmount2 != null ? lastSalary.AllowanceAmount2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastSalary.AllowanceAmount3 != null ? lastSalary.AllowanceAmount3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastSalary.AllowanceAmount4 != null ? lastSalary.AllowanceAmount4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastSalary.AllowanceAmount5 != null ? lastSalary.AllowanceAmount5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastSalary.AllowanceAmount6 != null ? lastSalary.AllowanceAmount6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastSalary.AllowanceAmount7 != null ? lastSalary.AllowanceAmount7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastSalary.AllowanceAmount8 != null ? lastSalary.AllowanceAmount8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastSalary.AllowanceAmount9 != null ? lastSalary.AllowanceAmount9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastSalary.AllowanceAmount10 != null ? lastSalary.AllowanceAmount10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastSalary.AllowanceAmount11 != null ? lastSalary.AllowanceAmount11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastSalary.AllowanceAmount12 != null ? lastSalary.AllowanceAmount12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastSalary.AllowanceAmount13 != null ? lastSalary.AllowanceAmount13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastSalary.AllowanceAmount14 != null ? lastSalary.AllowanceAmount14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastSalary.AllowanceAmount15 != null ? lastSalary.AllowanceAmount15.ToString().Encrypt() : string.Empty;
                            }
                            item.NextCurrencyID = lastSalary.CurrencyID;
                            item.NextCurrencyIDInsurance = lastSalary.CurrencyID;

                            item.NextAllowanceID1 = lastSalary.AllowanceType1ID;
                            item.NextCurenncyID1 = lastSalary.CurrencyID1;

                            item.NextAllowanceID2 = lastSalary.AllowanceType2ID;
                            item.NextCurenncyID2 = lastSalary.CurrencyID2;

                            item.NextAllowanceID3 = lastSalary.AllowanceType3ID;
                            item.NextCurenncyID3 = lastSalary.CurrencyID3;

                            item.NextAllowanceID4 = lastSalary.AllowanceType4ID;
                            item.NextCurenncyID4 = lastSalary.CurrencyID4;

                            item.NextAllowanceID5 = lastSalary.AllowanceTypeID5;
                            item.NextCurenncyID5 = lastSalary.CurrencyID5;

                            item.NextAllowanceID6 = lastSalary.AllowanceTypeID6;
                            item.NextCurenncyID6 = lastSalary.CurrencyID6;

                            item.NextAllowanceID7 = lastSalary.AllowanceTypeID7;
                            item.NextCurenncyID7 = lastSalary.CurrencyID7;

                            item.NextAllowanceID8 = lastSalary.AllowanceTypeID8;
                            item.NextCurenncyID8 = lastSalary.CurrencyID8;

                            item.NextAllowanceID9 = lastSalary.AllowanceTypeID9;
                            item.NextCurenncyID9 = lastSalary.CurrencyID9;

                            item.NextAllowanceID10 = lastSalary.AllowanceTypeID10;
                            item.NextCurenncyID10 = lastSalary.CurrencyID10;

                            item.NextAllowanceID11 = lastSalary.AllowanceTypeID11;
                            item.NextCurenncyID11 = lastSalary.CurrencyID11;

                            item.NextAllowanceID12 = lastSalary.AllowanceTypeID12;
                            item.NextCurenncyID12 = lastSalary.CurrencyID12;

                            item.NextAllowanceID13 = lastSalary.AllowanceTypeID13;
                            item.NextCurenncyID13 = lastSalary.CurrencyID13;

                            item.NextAllowanceID14 = lastSalary.AllowanceTypeID14;
                            item.NextCurenncyID14 = lastSalary.CurrencyID14;

                            item.NextAllowanceID15 = lastSalary.AllowanceTypeID15;
                            item.NextCurenncyID15 = lastSalary.CurrencyID15;

                            item.RankForNextContract = lastSalary.ClassRateID;
                            item.RankDetailForNextContract = lastSalary.RankRateID;
                        }
                        #endregion
                    }
                    //Son.Vo - 20170508 - Đánh giá hợp đồng: cập nhật thông tin lương cơ bản, lương BHXH, phụ cấp khi đánh giá hợp đồng
                    else if (isloadFromExtend == true)
                    {
                        #region Nếu cấu hình load từ PLHĐ
                        var lastContractExtend = lstContractExtend.Where(s => s.ContractID == item.ID && s.DateStart > item.DateStart).OrderByDescending(s => s.DateStart).FirstOrDefault();
                        if (lastContractExtend != null)
                        {
                            //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    item.E_NextSalary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    item.E_NextInsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                item.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            else
                            {
                                if (lastContractExtend.Salary != null)
                                {
                                    item.NextSalary = lastContractExtend.Salary;
                                    item.E_NextSalary = lastContractExtend.Salary.ToString().Encrypt();
                                }
                                if (lastContractExtend.InsuranceAmount != null)
                                {
                                    item.NextInsuranceAmount = lastContractExtend.InsuranceAmount;
                                    item.E_NextInsuranceAmount = lastContractExtend.InsuranceAmount.ToString().Encrypt();
                                }
                                item.NextAllowance1 = lastContractExtend.Allowance1;
                                item.NextAllowance2 = lastContractExtend.Allowance2;
                                item.NextAllowance3 = lastContractExtend.Allowance3;
                                item.NextAllowance4 = lastContractExtend.Allowance4;
                                item.NextAllowance5 = lastContractExtend.Allowance5;
                                item.NextAllowance6 = lastContractExtend.Allowance6;
                                item.NextAllowance7 = lastContractExtend.Allowance7;
                                item.NextAllowance8 = lastContractExtend.Allowance8;
                                item.NextAllowance9 = lastContractExtend.Allowance9;
                                item.NextAllowance10 = lastContractExtend.Allowance10;
                                item.NextAllowance11 = lastContractExtend.Allowance11;
                                item.NextAllowance12 = lastContractExtend.Allowance12;
                                item.NextAllowance13 = lastContractExtend.Allowance13;
                                item.NextAllowance14 = lastContractExtend.Allowance14;
                                item.NextAllowance15 = lastContractExtend.Allowance15;

                                item.E_Allowance1 = lastContractExtend.Allowance1 != null ? lastContractExtend.Allowance1.ToString().Encrypt() : string.Empty;
                                item.E_Allowance2 = lastContractExtend.Allowance2 != null ? lastContractExtend.Allowance2.ToString().Encrypt() : string.Empty;
                                item.E_Allowance3 = lastContractExtend.Allowance3 != null ? lastContractExtend.Allowance3.ToString().Encrypt() : string.Empty;
                                item.E_Allowance4 = lastContractExtend.Allowance4 != null ? lastContractExtend.Allowance4.ToString().Encrypt() : string.Empty;
                                item.E_Allowance5 = lastContractExtend.Allowance5 != null ? lastContractExtend.Allowance5.ToString().Encrypt() : string.Empty;
                                item.E_Allowance6 = lastContractExtend.Allowance6 != null ? lastContractExtend.Allowance6.ToString().Encrypt() : string.Empty;
                                item.E_Allowance7 = lastContractExtend.Allowance7 != null ? lastContractExtend.Allowance7.ToString().Encrypt() : string.Empty;
                                item.E_Allowance8 = lastContractExtend.Allowance8 != null ? lastContractExtend.Allowance8.ToString().Encrypt() : string.Empty;
                                item.E_Allowance9 = lastContractExtend.Allowance9 != null ? lastContractExtend.Allowance9.ToString().Encrypt() : string.Empty;
                                item.E_Allowance10 = lastContractExtend.Allowance10 != null ? lastContractExtend.Allowance10.ToString().Encrypt() : string.Empty;
                                item.E_Allowance11 = lastContractExtend.Allowance11 != null ? lastContractExtend.Allowance11.ToString().Encrypt() : string.Empty;
                                item.E_Allowance12 = lastContractExtend.Allowance12 != null ? lastContractExtend.Allowance12.ToString().Encrypt() : string.Empty;
                                item.E_Allowance13 = lastContractExtend.Allowance13 != null ? lastContractExtend.Allowance13.ToString().Encrypt() : string.Empty;
                                item.E_Allowance14 = lastContractExtend.Allowance14 != null ? lastContractExtend.Allowance14.ToString().Encrypt() : string.Empty;
                                item.E_Allowance15 = lastContractExtend.Allowance15 != null ? lastContractExtend.Allowance15.ToString().Encrypt() : string.Empty;
                            }
                            item.NextCurrencyID = lastContractExtend.CurrencyIDSalary;

                            item.NextCurrencyIDInsurance = lastContractExtend.CurrencyID;

                            item.NextAllowanceID1 = lastContractExtend.AllowanceID1;
                            item.NextCurenncyID1 = lastContractExtend.CurrencyID1;

                            item.NextAllowanceID2 = lastContractExtend.AllowanceID2;
                            item.NextCurenncyID2 = lastContractExtend.CurrencyID2;

                            item.NextAllowanceID3 = lastContractExtend.AllowanceID3;
                            item.NextCurenncyID3 = lastContractExtend.CurrencyID3;

                            item.NextAllowanceID4 = lastContractExtend.AllowanceID4;
                            item.NextCurenncyID4 = lastContractExtend.CurrencyID4;

                            item.NextAllowanceID5 = lastContractExtend.AllowanceID5;
                            item.NextCurenncyID5 = lastContractExtend.CurrencyID5;

                            item.NextAllowanceID6 = lastContractExtend.AllowanceID6;
                            item.NextCurenncyID6 = lastContractExtend.CurrencyID6;

                            item.NextAllowanceID7 = lastContractExtend.AllowanceID7;
                            item.NextCurenncyID7 = lastContractExtend.CurrencyID7;

                            item.NextAllowanceID8 = lastContractExtend.AllowanceID8;
                            item.NextCurenncyID8 = lastContractExtend.CurrencyID8;

                            item.NextAllowanceID9 = lastContractExtend.AllowanceID9;
                            item.NextCurenncyID9 = lastContractExtend.CurrencyID9;

                            item.NextAllowanceID10 = lastContractExtend.AllowanceID10;
                            item.NextCurenncyID10 = lastContractExtend.CurrencyID10;

                            item.NextAllowanceID11 = lastContractExtend.AllowanceID11;
                            item.NextCurenncyID11 = lastContractExtend.CurrencyID11;

                            item.NextAllowanceID12 = lastContractExtend.AllowanceID12;
                            item.NextCurenncyID12 = lastContractExtend.CurrencyID12;

                            item.NextAllowanceID13 = lastContractExtend.AllowanceID13;
                            item.NextCurenncyID13 = lastContractExtend.CurrencyID13;

                            item.NextAllowanceID14 = lastContractExtend.AllowanceID14;
                            item.NextCurenncyID14 = lastContractExtend.CurrencyID14;

                            item.NextAllowanceID15 = lastContractExtend.AllowanceID15;
                            item.NextCurenncyID15 = lastContractExtend.CurrencyID15;

                            item.RankForNextContract = lastContractExtend.ClassRateID;
                            item.RankDetailForNextContract = lastContractExtend.RankRateID;
                        }
                        #endregion
                    }
                    else
                    {
                        //Quyen.Quach - 02/10/2017 - 0087467 Update logic mã hóa lương 
                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                        {
                            if (item.Salary != null)
                            {
                                item.E_NextSalary = item.Salary.ToString().Encrypt();
                            }
                            if (item.InsuranceAmount != null)
                            {
                                item.E_NextInsuranceAmount = item.InsuranceAmount.ToString().Encrypt();
                            }
                            item.E_Allowance1 = item.Allowance1 != null ? item.Allowance1.ToString().Encrypt() : string.Empty;
                            item.E_Allowance2 = item.Allowance2 != null ? item.Allowance2.ToString().Encrypt() : string.Empty;
                            item.E_Allowance3 = item.Allowance3 != null ? item.Allowance3.ToString().Encrypt() : string.Empty;
                            item.E_Allowance4 = item.Allowance4 != null ? item.Allowance4.ToString().Encrypt() : string.Empty;
                            item.E_Allowance5 = item.Allowance5 != null ? item.Allowance5.ToString().Encrypt() : string.Empty;
                            item.E_Allowance6 = item.Allowance6 != null ? item.Allowance6.ToString().Encrypt() : string.Empty;
                            item.E_Allowance7 = item.Allowance7 != null ? item.Allowance7.ToString().Encrypt() : string.Empty;
                            item.E_Allowance8 = item.Allowance8 != null ? item.Allowance8.ToString().Encrypt() : string.Empty;
                            item.E_Allowance9 = item.Allowance9 != null ? item.Allowance9.ToString().Encrypt() : string.Empty;
                            item.E_Allowance10 = item.Allowance10 != null ? item.Allowance10.ToString().Encrypt() : string.Empty;
                            item.E_Allowance11 = item.Allowance11 != null ? item.Allowance11.ToString().Encrypt() : string.Empty;
                            item.E_Allowance12 = item.Allowance12 != null ? item.Allowance12.ToString().Encrypt() : string.Empty;
                            item.E_Allowance13 = item.Allowance13 != null ? item.Allowance13.ToString().Encrypt() : string.Empty;
                            item.E_Allowance14 = item.Allowance14 != null ? item.Allowance14.ToString().Encrypt() : string.Empty;
                            item.E_Allowance15 = item.Allowance15 != null ? item.Allowance15.ToString().Encrypt() : string.Empty;
                        }
                        else
                        {
                            if (item.Salary != null)
                            {
                                item.E_NextSalary = item.Salary.ToString().Encrypt();
                                item.NextSalary = item.Salary;
                            }
                            if (item.InsuranceAmount != null)
                            {
                                item.NextInsuranceAmount = item.InsuranceAmount;
                                item.E_NextInsuranceAmount = item.InsuranceAmount.ToString().Encrypt();
                            }
                            item.NextAllowance1 = item.Allowance1;
                            item.NextAllowance2 = item.Allowance2;
                            item.NextAllowance3 = item.Allowance3;
                            item.NextAllowance4 = item.Allowance4;
                            item.NextAllowance5 = item.Allowance5;
                            item.NextAllowance6 = item.Allowance6;
                            item.NextAllowance7 = item.Allowance7;
                            item.NextAllowance8 = item.Allowance8;
                            item.NextAllowance9 = item.Allowance9;
                            item.NextAllowance10 = item.Allowance10;
                            item.NextAllowance11 = item.Allowance11;
                            item.NextAllowance12 = item.Allowance12;
                            item.NextAllowance13 = item.Allowance13;
                            item.NextAllowance14 = item.Allowance14;
                            item.NextAllowance15 = item.Allowance15;
                            item.E_Allowance1 = item.Allowance1 != null ? item.Allowance1.ToString().Encrypt() : string.Empty;
                            item.E_Allowance2 = item.Allowance2 != null ? item.Allowance2.ToString().Encrypt() : string.Empty;
                            item.E_Allowance3 = item.Allowance3 != null ? item.Allowance3.ToString().Encrypt() : string.Empty;
                            item.E_Allowance4 = item.Allowance4 != null ? item.Allowance4.ToString().Encrypt() : string.Empty;
                            item.E_Allowance5 = item.Allowance5 != null ? item.Allowance5.ToString().Encrypt() : string.Empty;
                            item.E_Allowance6 = item.Allowance6 != null ? item.Allowance6.ToString().Encrypt() : string.Empty;
                            item.E_Allowance7 = item.Allowance7 != null ? item.Allowance7.ToString().Encrypt() : string.Empty;
                            item.E_Allowance8 = item.Allowance8 != null ? item.Allowance8.ToString().Encrypt() : string.Empty;
                            item.E_Allowance9 = item.Allowance9 != null ? item.Allowance9.ToString().Encrypt() : string.Empty;
                            item.E_Allowance10 = item.Allowance10 != null ? item.Allowance10.ToString().Encrypt() : string.Empty;
                            item.E_Allowance11 = item.Allowance11 != null ? item.Allowance11.ToString().Encrypt() : string.Empty;
                            item.E_Allowance12 = item.Allowance12 != null ? item.Allowance12.ToString().Encrypt() : string.Empty;
                            item.E_Allowance13 = item.Allowance13 != null ? item.Allowance13.ToString().Encrypt() : string.Empty;
                            item.E_Allowance14 = item.Allowance14 != null ? item.Allowance14.ToString().Encrypt() : string.Empty;
                            item.E_Allowance15 = item.Allowance15 != null ? item.Allowance15.ToString().Encrypt() : string.Empty;

                        }
                        item.NextCurrencyID = item.CurenncyIDSalary;

                        item.NextAllowanceID1 = item.AllowanceID1;
                        item.NextCurenncyID1 = item.CurenncyID1;

                        item.NextAllowanceID2 = item.AllowanceID2;
                        item.NextCurenncyID2 = item.CurenncyID2;

                        item.NextAllowanceID3 = item.AllowanceID3;
                        item.NextCurenncyID3 = item.CurenncyID3;

                        item.NextAllowanceID4 = item.AllowanceID4;
                        item.NextCurenncyID4 = item.CurenncyID4;

                        item.NextAllowanceID5 = item.AllowanceID5;
                        item.NextCurenncyID5 = item.CurenncyID5;

                        item.NextAllowanceID6 = item.AllowanceID6;
                        item.NextCurenncyID6 = item.CurenncyID6;

                        item.NextAllowanceID7 = item.AllowanceID7;
                        item.NextCurenncyID7 = item.CurenncyID7;

                        item.NextAllowanceID8 = item.AllowanceID8;
                        item.NextCurenncyID8 = item.CurenncyID8;

                        item.NextAllowanceID9 = item.AllowanceID9;
                        item.NextCurenncyID9 = item.CurenncyID9;

                        item.NextAllowanceID10 = item.AllowanceID10;
                        item.NextCurenncyID10 = item.CurenncyID10;

                        item.NextAllowanceID11 = item.AllowanceID11;
                        item.NextCurenncyID11 = item.CurenncyID11;

                        item.NextAllowanceID12 = item.AllowanceID12;
                        item.NextCurenncyID12 = item.CurenncyID12;

                        item.NextAllowanceID13 = item.AllowanceID13;
                        item.NextCurenncyID13 = item.CurenncyID13;

                        item.NextAllowanceID14 = item.AllowanceID14;
                        item.NextCurenncyID14 = item.CurenncyID14;

                        item.NextAllowanceID15 = item.AllowanceID15;
                        item.NextCurenncyID15 = item.CurenncyID15;

                        //Son.Vo - 20160506 - 0066590
                        item.NextCurrencyIDInsurance = item.CurenncyID;
                        //Son.Vo - 20160427 - 0066373
                    }
                }
                //Son.Vo - 20160801 - 0071624
                item.FileAttachmentNext = model.FileAttachmentNext;
                if (model.UserApproveIDEva != null)
                {
                    item.UserApproveIDEva = model.UserApproveIDEva;
                }
                if (model.UserApproveIDEva2 != null)
                {
                    item.UserApproveIDEva2 = model.UserApproveIDEva2;
                }
                if (model.UserApproveIDEva3 != null)
                {
                    item.UserApproveIDEva3 = model.UserApproveIDEva3;
                }
                if (model.UserApproveIDEva4 != null)
                {
                    item.UserApproveIDEva4 = model.UserApproveIDEva4;
                }
                item.UserSubmitEva = model.UserSubmitEva;
                item.ReasonChangeSalaryID2 = model.ReasonChangeSalaryID2;
                if (model.NextProfileSingID != null)
                {
                    item.NextProfileSingID = model.NextProfileSingID;
                }
                //Son.Vo - 20170424 - 0081376
                item.Behaviour = model.Behaviour;
                item.Competence = model.Competence;
                item.TypeEvaContract = model.TypeEvaContract;
                item.NextDelegateCompanyID = model.NextDelegateCompanyID;
                //Son.Vo - 20170626 - 0080357
                item.DateStartNextContract = model.DateStartNextContract;
                string messageref = contractServices.CreateEvaluationContractHistory(item);
                if (item.ContractResult == HRM.Infrastructure.Utilities.EnumDropDown.ResultContract.PASS.ToString())
                {
                    if (item.TypeOfPass == HRM.Infrastructure.Utilities.EnumDropDown.TypeOfPass.E_SIGNED_NEXTCONTRACT.ToString())
                    {
                        if (item.DateEnd == null)
                        {
                            message = ConstantDisplay.HRM_HR_Profile_DateEndRequiredInformation.TranslateString();
                            return Json(message);
                        }
                        if (item.DateEndNextContract == null && item.TypeNextContract != HRM.Infrastructure.Utilities.EnumDropDown.TypeContract.E_NODURATION.ToString())
                        {
                            message = ConstantDisplay.HRM_HR_Profile_LackOfRequiredInformation.TranslateString();
                            return Json(message);
                        }
                        if (item.NextContractTypeID == null)
                        {
                            message = ConstantMessages.WarningContractHaveNotNextContract.TranslateString();
                            return Json(message);
                        }

                        #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                        if (item.NextContractTypeID != null)
                        {
                            string messagerefcontract = contractServices.ValidateMaxTimeSignContract(item.ProfileID, item.NextContractTypeID.Value, _MAXCASUAL,
                                                  _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, item.CompanyID);
                            if (messagerefcontract != null && messagerefcontract == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                            {
                                message = ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.TranslateString();
                                return Json(message);
                            }
                        }
                        #endregion

                        lstIDsSendMail.Add(item.ID);
                        contractServices.ApprovedEvaContractByLevel(item.ID, Guid.Parse(UserID));
                        message = profileServices.SaveContractAndNextSalaryApprovedEvaluation(item, NotUseRankDetail, showSalary,
                            model.IsCreateBasicSalary != null ? model.IsCreateBasicSalary.Value : false,
                            model.IsCreateInsuranceSalary != null ? model.IsCreateInsuranceSalary.Value : false, lstWorkhistory);
                    }
                    else if (item.TypeOfPass == HRM.Infrastructure.Utilities.EnumDropDown.TypeOfPass.E_SIGNED_APPENDIXCONTRACT.ToString())
                    {
                        var entity = new Hre_ContractExtendEntity();
                        entity.ContractID = item.ID;
                        if (item.DateExtend != null)
                        {
                            entity.DateStart = item.DateExtend.Value.AddDays(1);
                        }
                        else
                        {
                            entity.DateStart = item.DateEnd != null ? item.DateEnd.Value.AddDays(1) : DateTime.Now;
                        }
                        entity.DateEnd = item.DateEndNextContract;
                        entity.AppendixTypeNextID = item.AppendixTypeNextID;
                        //Son.Vo - 20160516 - 0067271
                        entity.TypeAppendix = EnumDropDown.TypeAppendix.E_EXTEND.ToString();
                        ContractExtendServices.Add(entity);
                        // Son.Vo - theo task 0058429
                        item.StatusEvaluation = null;
                        //contract.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString();
                        item.DateExtend = item.DateEndNextContract;
                        lstIDsSendMail.Add(item.ID);
                        message = contractServices.Edit(item);
                    }
                }
                else
                {
                    #region Son.Vo - 20160726 - 0069714 fix trường hợp double click nút ok
                    if (item.StatusEvaluation == HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString())
                    {
                        continue;
                    }
                    #endregion
                    // Son.Vo - 20150630 - 0049458
                    profileServices.SaveStopWorkingOfContract(item);
                    item.StatusEvaluation = HRM.Infrastructure.Utilities.EnumDropDown.Status.E_APPROVED.ToString();
                    //Son.Vo - 20170717 - cập nhật theo task 0085219
                    item.TerminateDate = item.DateExtend != null ? item.DateExtend : item.DateEnd;
                    message = contractServices.Edit(item);
                }
                #region Son.Vo - 20160725 - 0070952: Update trưởng chức vụ
                if (item.PositionID != null)
                {
                    string messagerefcontract = contractServices.UpdateHeadUserWhenApprovedContract(item.ProfileID, item.PositionID.Value);
                }
                #endregion
            }

            if (isSendmailQuit)
            {
                Task task = Task.Run(() => contractServices.ProcessSendmailApprovedContract(lstIds, LanguageCode));
            }
            if (isSendmailSignNextContract == true && lstIDsSendMail.Count > 0)
            {
                var ispass = contractServices.SendMailWhenSignNextContract(lstIDsSendMail, LanguageCode);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ExportPerformanceAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_PerformanceSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;

            #region Create Tempate
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_PerformanceModel(),
                    FileName = "Hre_Performance",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_PerformanceModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_PerformanceModel>(lstModel, ConstantSql.hrm_hre_sp_get_Performance, ref status);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public ActionResult ExportPerformanceSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_PerformanceSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_PerformanceModel>(model.SelectedIDs, ConstantSql.hrm_hr_sp_get_PerformanceByIds, UserLogin, ref status);
            if (result == null)
                return null;
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_PerformanceModel(),
                    FileName = "Hre_PerformanceModel",
                    OutPutPath = path,
                    HeaderInfo = null,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        public JsonResult SaveEvaAndEvaDetail(string strUserApprovedIDs, Guid PerformanceID)
        {
            var service = new ActionService(UserLogin, LanguageCode);

            #region Save New Eva
            var _KPIServices = new Hre_KPIServices();

            var evaModel = new Hre_PerformanceEvaModel();
            var evas = strUserApprovedIDs.Split(",");
            var lsGuid = new List<Guid>();
            var lsGuidDetail = new List<Guid>();
            var lstperformanceEvaModel = _KPIServices.GetPerformanceEvaByPerformanceID(PerformanceID);
            if (lstperformanceEvaModel != null && lstperformanceEvaModel.Count > 0)
            {
                foreach (var eva in lstperformanceEvaModel)
                {
                    var lstEvaDetailModel = _KPIServices.GetPerformanceEvaDetailByPerformanceEvaID(eva.ID);
                    foreach (var evaDetail in lstEvaDetailModel)
                    {
                        lsGuidDetail.Add(evaDetail.ID);
                    }
                    lsGuid.Add(eva.ID);
                }
                var lsDelEva = "Remove," + string.Join(",", lsGuid);
                var lsDelEvaDetail = "Remove," + string.Join(",", lsGuidDetail);

                var resultcDelEvaDetail = service.DeleteOrRemove<Hre_PerformanceEvaDetailEntity, Hre_PerformanceEvaDetailModel>(lsDelEvaDetail);
                var resultcDelEva = service.DeleteOrRemove<Hre_PerformanceEvaEntity, Hre_PerformanceEvaModel>(lsDelEva);
            }

            foreach (var eva in evas)
            {
                var indexeva = evas.FindIndex(m => m == eva);
                evaModel.ID = Guid.Empty;
                evaModel.PerformanceID = PerformanceID;
                evaModel.OrderEva = indexeva + 1;
                evaModel.EvaluatorID = Guid.Parse(eva);
                var saveEva = service.UpdateOrCreate<Hre_PerformanceEvaEntity, Hre_PerformanceEvaModel>(evaModel);

                #region Save New EvaDetail
                var evadetailModel = new Hre_PerformanceEvaDetailModel();
                var lstperformanceForDetailModel = _KPIServices.GetPerformanceForDetailByPerformanceID(PerformanceID);
                foreach (var performance in lstperformanceForDetailModel)
                {
                    evadetailModel.ID = Guid.Empty;
                    evadetailModel.PerformanceID = performance.PerformanceID;
                    evadetailModel.PerformanceEvaID = saveEva.ID;
                    evadetailModel.PerfomanceDetailID = performance.ID;
                    evadetailModel.KPIName = performance.KPIName;

                    var saveEvadetail = service.UpdateOrCreate<Hre_PerformanceEvaDetailEntity, Hre_PerformanceEvaDetailModel>(evadetailModel);
                }
                #endregion
            }
            #endregion
            return Json("");
        }
        //Quyen.Quach 24/10/2017 0089183 Xuất excel đã chọn màn hình DS NV nghỉ việc
        public ActionResult ExportSelectProfileQuit(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileModel, Hre_ProfileEntity>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileQuitByIds);
        }

        public JsonResult GetProfileIDByContractNo(string text)
        {
            return GetDataForControl<Hre_ContractViewEntity, Hre_ContractViewEntity>(text, ConstantSql.hrm_hr_sp_get_ProfileByContractNo);
        }

        //Nguyen.Le - 28/10/2017 - 0088954
        public ActionResult ExportContractMLCAllByTemplate([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            var _actionService = new ActionService(UserLogin);
            string messages = string.Empty;
            DateTime DateStart = DateTime.Now;
            string dirpath = Common.GetPath(Common.DownloadURL);
            if (!Directory.Exists(dirpath))
                Directory.CreateDirectory(dirpath);
            string status = string.Empty;
            var contractServices = new Hre_ContractServices();
            var currencyServices = new Cat_CurrencyServices();
            var _ProfileServices = new Hre_ProfileServices();
            var actionServices = new ActionService(UserLogin);
            //string folderStore = DateTime.Now.ToString("ddMMyyyyHHmmss");            
            if (model.WorkPlaceID != null)
            {
                model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
            }
            if (model.ClassRateID != null)
            {
                model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
            }
            request.PageSize = int.MaxValue - 1;

            var lstContract = GetListData<Hre_ContractEntity, Hre_ContractEntity, Hre_ContractListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractMLCListForExportAll, ref status);

            if (lstContract == null || lstContract.Count == 0)
                return null;

            int i = 0;
            var lstCurrency = currencyServices.getListCurrency();
            var lstUsualAllowance = currencyServices.getListUsualAllowance();

            #region xuất báo cáo cho KVP
            var _CandidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstProfileIDs = lstContract.Select(s => s.ProfileID).Distinct().ToList();
            var lstCandidateGeneral = _CandidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            #endregion

            //[to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
            var _lsthrequalification = _ProfileServices.GetLstProfileQualificationByProfileIDs(lstProfileIDs);
            var lstSalaryInformation = _ProfileServices.GetLstSalaryInformationByProfileIDs(lstProfileIDs);
            String suffix = DateStart.ToString("ddMMyyyyHHmmss");
            string folferPath = string.Empty;
            string folderName = "ExportHreContract" + suffix;
            if (lstContract.Count > 1)
            {
                folferPath = dirpath + "/" + folderName;
                Directory.CreateDirectory(folferPath);
            }
            else
            {
                folferPath = dirpath;
            }
            var fileDoc = string.Empty;
            var candidateGeneralServices = new Hre_CandidateGeneralServices();
            var lstcandidateGeneralByProfileIDs = candidateGeneralServices.GetLstCandidateGeneralEntityByLstProfileIDs(lstProfileIDs);
            var ext = string.Empty;
            var templatepath = string.Empty;
            //Son.Vo - 20161202 - 0076200 - lấy thông tin workpermit
            var lstWorkPermitNo = _ProfileServices.GetLstWorkPermitByProfileIDs(lstProfileIDs);
            var workhistoryServices = new Hre_WorkHistoryServices();
            var lstProfileSingIDs = lstContract.Where(s => s.ProfileSingID != null).Select(s => s.ProfileSingID.Value).Distinct().ToList();
            var lstWorkhistoryByProsing = workhistoryServices.GetPositionWorkHisDataBylstProfileSignID(lstProfileSingIDs);

            var salaryServices = new Sal_BasicSalaryServices();
            var lstBasicSalary = salaryServices.GetBasicSalary4ExportProfileBylstProIDs(lstProfileIDs);

            #region Son.Vo - 20171005 - 0088530 - export theo thứ tự cấu hình
            var lstExportID = lstContract.Where(s => s.ExportID != null).Select(s => s.ExportID.Value).Distinct().ToList();
            var exportServices = new Cat_ExportServices();
            var lstExportall = exportServices.GetListExport(lstExportID);
            var ExportToCheckOrder = lstExportall.FirstOrDefault();
            if (ExportToCheckOrder != null && ExportToCheckOrder.OrderNumber != null)
            {
                var entityCheck = new Hre_ContractEntity();
                if (entityCheck.HasProperty(ExportToCheckOrder.OrderNumber))
                {
                    lstContract = lstContract.OrderBy(s => s.GetPropertyValue(ExportToCheckOrder.OrderNumber)).ToList();
                }
            }
            #endregion

            var lstFileOrder = new List<string>();
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            var lstExportallcontemp = exportServices.GetListExportAll();
            foreach (var contract in lstContract)
            {
                var service = new ActionService(UserLogin, LanguageCode);
                Cat_ExportEntity template = null;
                Cat_ContractTemplateEntity contractTemplate = null;
                string outputPath = string.Empty;
                if (contract.ExportID.HasValue)
                    template = lstExportall.Where(s => s.ID == contract.ExportID).FirstOrDefault();
                //Nguyen.Le - 20170928 - 00887411
                if (template == null)
                {
                    //Nguyen.Le - 08/11/2017 - 0089769
                    contractTemplate = contractServices.GetContractTemplate(lstcontractTemplate, contract.ContractTypeID, contract.PositionID, contract.EmployeeTypeID, contract.CompanyID);

                    //Nguyen.Le - 23/11/2017 - 0090180
                    if (contractTemplate != null)
                    {
                        template = lstExportallcontemp.Where(s => s.ID == contractTemplate.ExportID).FirstOrDefault();
                        if (template == null)
                        {
                            messages = "Error";
                            return Json(messages, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        messages = "Error";
                        return Json(messages, JsonRequestBehavior.AllowGet);
                    }

                }
                templatepath = Common.GetPath(Common.TemplateURL + template.TemplateFile);
                ext = template.TemplateFile.Split('.').LastOrDefault();

                if (!System.IO.File.Exists(templatepath))
                {
                    messages = "NotTemplate";
                    return Json(messages, JsonRequestBehavior.AllowGet);
                }

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển currency thành lấy theo code ko lấy theo store
                if (lstCurrency != null)
                {
                    var CurenncyIDSalary = lstCurrency.Where(s => s.ID == contract.CurenncyIDSalary).FirstOrDefault();
                    if (CurenncyIDSalary != null)
                    {
                        contract.CurrencySalName = CurenncyIDSalary.CurrencyName;
                        contract.CurrencySalCode = CurenncyIDSalary.Code;
                    }
                    var CurenncyID = lstCurrency.Where(s => s.ID == contract.CurenncyID).FirstOrDefault();
                    if (CurenncyID != null)
                    {
                        contract.CurenncyInsName = CurenncyID.CurrencyName;
                        contract.CurrencyInsCode = CurenncyID.Code;
                    }
                    var CurenncyID1 = lstCurrency.Where(s => s.ID == contract.CurenncyID1).FirstOrDefault();
                    if (CurenncyID1 != null)
                    {
                        contract.CurenncyAllowance1Name = CurenncyID1.CurrencyName;
                        contract.CurrencyAllowance1Code = CurenncyID1.Code;
                    }
                    var CurenncyID2 = lstCurrency.Where(s => s.ID == contract.CurenncyID2).FirstOrDefault();
                    if (CurenncyID2 != null)
                    {
                        contract.CurenncyAllowance2Name = CurenncyID2.CurrencyName;
                        contract.CurrencyAllowance2Code = CurenncyID2.Code;
                    }
                    var CurenncyID3 = lstCurrency.Where(s => s.ID == contract.CurenncyID3).FirstOrDefault();
                    if (CurenncyID3 != null)
                    {
                        contract.CurenncyAllowance3Name = CurenncyID3.CurrencyName;
                        contract.CurrencyAllowance3Code = CurenncyID3.Code;
                    }
                    var CurenncyID4 = lstCurrency.Where(s => s.ID == contract.CurenncyID4).FirstOrDefault();
                    if (CurenncyID4 != null)
                    {
                        contract.CurenncyAllowance4Name = CurenncyID4.CurrencyName;
                        contract.CurrencyAllowance4Code = CurenncyID4.Code;
                    }
                    var CurenncyID5 = lstCurrency.Where(s => s.ID == contract.CurenncyID5).FirstOrDefault();
                    if (CurenncyID5 != null)
                    {
                        contract.CurenncyAllowance5Name = CurenncyID5.CurrencyName;
                        contract.CurrencyAllowance5Code = CurenncyID5.Code;
                    }
                    var CurenncyID6 = lstCurrency.Where(s => s.ID == contract.CurenncyID6).FirstOrDefault();
                    if (CurenncyID6 != null)
                    {
                        contract.CurenncyID6Name = CurenncyID6.CurrencyName;
                        contract.CurrencyAllowance6Code = CurenncyID6.Code;
                    }
                    var CurenncyID7 = lstCurrency.Where(s => s.ID == contract.CurenncyID7).FirstOrDefault();
                    if (CurenncyID7 != null)
                    {
                        contract.CurenncyID7Name = CurenncyID7.CurrencyName;
                        contract.CurrencyAllowance7Code = CurenncyID7.Code;
                    }
                    var CurenncyID8 = lstCurrency.Where(s => s.ID == contract.CurenncyID8).FirstOrDefault();
                    if (CurenncyID8 != null)
                    {
                        contract.CurenncyID8Name = CurenncyID8.CurrencyName;
                        contract.CurrencyAllowance8Code = CurenncyID8.Code;
                    }
                    var CurenncyID9 = lstCurrency.Where(s => s.ID == contract.CurenncyID9).FirstOrDefault();
                    if (CurenncyID9 != null)
                    {
                        contract.CurenncyID9Name = CurenncyID9.CurrencyName;
                        contract.CurrencyAllowance9Code = CurenncyID9.Code;
                    }
                    var CurenncyID10 = lstCurrency.Where(s => s.ID == contract.CurenncyID10).FirstOrDefault();
                    if (CurenncyID10 != null)
                    {
                        contract.CurenncyID10Name = CurenncyID10.CurrencyName;
                        contract.CurrencyAllowance10Code = CurenncyID10.Code;
                    }
                    var CurenncyID11 = lstCurrency.Where(s => s.ID == contract.CurenncyID11).FirstOrDefault();
                    if (CurenncyID11 != null)
                    {
                        contract.CurenncyID11Name = CurenncyID11.CurrencyName;
                        contract.CurrencyAllowance11Code = CurenncyID11.Code;
                    }
                    var CurenncyID12 = lstCurrency.Where(s => s.ID == contract.CurenncyID12).FirstOrDefault();
                    if (CurenncyID12 != null)
                    {
                        contract.CurenncyID12Name = CurenncyID12.CurrencyName;
                        contract.CurrencyAllowance12Code = CurenncyID12.Code;
                    }
                    var CurenncyID13 = lstCurrency.Where(s => s.ID == contract.CurenncyID13).FirstOrDefault();
                    if (CurenncyID13 != null)
                    {
                        contract.CurenncyID13Name = CurenncyID13.CurrencyName;
                        contract.CurrencyAllowance13Code = CurenncyID13.Code;
                    }
                    var CurenncyID14 = lstCurrency.Where(s => s.ID == contract.CurenncyID14).FirstOrDefault();
                    if (CurenncyID14 != null)
                    {
                        contract.CurenncyID14Name = CurenncyID14.CurrencyName;
                        contract.CurrencyAllowance14Code = CurenncyID14.Code;
                    }
                    var CurenncyID15 = lstCurrency.Where(s => s.ID == contract.CurenncyID15).FirstOrDefault();
                    if (CurenncyID15 != null)
                    {
                        contract.CurenncyID15Name = CurenncyID15.CurrencyName;
                        contract.CurrencyAllowance15Code = CurenncyID15.Code;
                    }
                }

                #endregion

                #region Son.Vo - store left join nhìu quá bị end of life nên chuyển allowance thành lấy theo code ko lấy theo store

                //[To.Le][12/04/2012][New][0066128]2.72 Yêu cầu bổ sung enum xuất word hợp đồng
                if (lstUsualAllowance != null)
                {
                    var AllowanceID1 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID1).FirstOrDefault();
                    if (AllowanceID1 != null)
                    {
                        if (AllowanceID1.IsInsurrance == null)
                        {
                            contract.AllowanceID1Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID1Name = AllowanceID1.UsualAllowanceName;
                        }
                    }

                    var AllowanceID2 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID2).FirstOrDefault();
                    if (AllowanceID2 != null)
                    {
                        if (AllowanceID2.IsInsurrance == null)
                        {
                            contract.AllowanceID2Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID2Name = AllowanceID2.UsualAllowanceName;
                        }
                    }

                    var AllowanceID3 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID3).FirstOrDefault();
                    if (AllowanceID3 != null)
                    {
                        if (AllowanceID3.IsInsurrance == null)
                        {
                            contract.AllowanceID3Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID3Name = AllowanceID3.UsualAllowanceName;
                        }
                    }

                    var AllowanceID4 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID4).FirstOrDefault();
                    if (AllowanceID4 != null)
                    {
                        if (AllowanceID4.IsInsurrance == null)
                        {
                            contract.AllowanceID4Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID4Name = AllowanceID4.UsualAllowanceName;
                        }
                    }

                    var AllowanceID5 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID5).FirstOrDefault();
                    if (AllowanceID5 != null)
                    {
                        if (AllowanceID5.IsInsurrance == null)
                        {
                            contract.AllowanceID5Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID5Name = AllowanceID5.UsualAllowanceName;
                        }
                    }

                    var AllowanceID6 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID6).FirstOrDefault();
                    if (AllowanceID6 != null)
                    {
                        if (AllowanceID6.IsInsurrance == null)
                        {
                            contract.AllowanceID6Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID6Name = AllowanceID6.UsualAllowanceName;
                        }
                    }

                    var AllowanceID7 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID7).FirstOrDefault();
                    if (AllowanceID7 != null)
                    {
                        if (AllowanceID7.IsInsurrance == null)
                        {
                            contract.AllowanceID7Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID7Name = AllowanceID7.UsualAllowanceName;
                        }
                    }

                    var AllowanceID8 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID8).FirstOrDefault();
                    if (AllowanceID8 != null)
                    {
                        if (AllowanceID8.IsInsurrance == null)
                        {
                            contract.AllowanceID8Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID8Name = AllowanceID8.UsualAllowanceName;
                        }
                    }

                    var AllowanceID9 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID9).FirstOrDefault();
                    if (AllowanceID9 != null)
                    {
                        if (AllowanceID9.IsInsurrance == null)
                        {
                            contract.AllowanceID9Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID9Name = AllowanceID9.UsualAllowanceName;
                        }
                    }

                    var AllowanceID10 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID10).FirstOrDefault();
                    if (AllowanceID10 != null)
                    {
                        if (AllowanceID10.IsInsurrance == null)
                        {
                            contract.AllowanceID10Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID10Name = AllowanceID10.UsualAllowanceName;
                        }
                    }

                    var AllowanceID11 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID11).FirstOrDefault();
                    if (AllowanceID11 != null)
                    {
                        if (AllowanceID11.IsInsurrance == null)
                        {
                            contract.AllowanceID11Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID11Name = AllowanceID11.UsualAllowanceName;
                        }
                    }

                    var AllowanceID12 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID12).FirstOrDefault();
                    if (AllowanceID12 != null)
                    {
                        if (AllowanceID12.IsInsurrance == null)
                        {
                            contract.AllowanceID12Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID12Name = AllowanceID12.UsualAllowanceName;
                        }
                    }

                    var AllowanceID13 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID13).FirstOrDefault();
                    if (AllowanceID13 != null)
                    {
                        if (AllowanceID13.IsInsurrance == null)
                        {
                            contract.AllowanceID13Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID13Name = AllowanceID13.UsualAllowanceName;
                        }
                    }

                    var AllowanceID14 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID14).FirstOrDefault();
                    if (AllowanceID14 != null)
                    {
                        if (AllowanceID14.IsInsurrance == null)
                        {
                            contract.AllowanceID14Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID14Name = AllowanceID14.UsualAllowanceName;
                        }
                    }

                    var AllowanceID15 = lstUsualAllowance.Where(s => s.ID == contract.AllowanceID15).FirstOrDefault();
                    if (AllowanceID15 != null)
                    {
                        if (AllowanceID15.IsInsurrance == null)
                        {
                            contract.AllowanceID15Name = string.Empty;
                        }
                        else
                        {
                            contract.AllowanceID15Name = AllowanceID15.UsualAllowanceName;
                        }
                    }
                }
                #endregion

                #region [24/12/2015][To.Le][New Func][0061420] xuất báo cáo cho KVP phân biệt loại HĐ thử việc
                var _lstCandidateGeneral = lstCandidateGeneral.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_lstCandidateGeneral != null && _lstCandidateGeneral.RateProbation != null)
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = (contract.Salary * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = (contract.Allowance * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = (contract.Allowance1 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = (contract.Allowance2 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = (contract.Allowance3 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = (contract.Allowance4 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = (contract.Allowance5 * Math.Round(_lstCandidateGeneral.RateProbation.Value, 2));
                    }
                }
                else
                {
                    if (contract.Salary != null)
                    {
                        contract.SalaryTV = contract.Salary;
                    }
                    if (contract.Allowance != null)
                    {
                        contract.AllowanceTV = contract.Allowance;
                    }
                    if (contract.Allowance1 != null)
                    {
                        contract.AllowanceTV1 = contract.Allowance1;
                    }
                    if (contract.Allowance2 != null)
                    {
                        contract.AllowanceTV2 = contract.Allowance2;
                    }
                    if (contract.Allowance3 != null)
                    {
                        contract.AllowanceTV3 = contract.Allowance3;
                    }
                    if (contract.Allowance4 != null)
                    {
                        contract.AllowanceTV4 = contract.Allowance4;
                    }
                    if (contract.Allowance5 != null)
                    {
                        contract.AllowanceTV5 = contract.Allowance5;
                    }
                    if (contract.Allowance6 != null)
                    {
                        contract.AllowanceTV6 = contract.Allowance6;
                    }
                }

                #endregion

                #region Tổng lương hợp đồng
                Double _sum1 = 0;
                _sum1 += contract.Salary ?? 0;
                _sum1 += contract.Allowance ?? 0;
                _sum1 += contract.Allowance2 ?? 0;
                _sum1 += contract.Allowance3 ?? 0;
                _sum1 += contract.Allowance4 ?? 0;
                _sum1 += contract.Allowance5 ?? 0;
                contract.SumSalaryContract = _sum1;
                #endregion

                #region Tổng lương hợp đồng thử việc
                Double _sum2 = 0;
                _sum2 += contract.SalaryTV ?? 0;
                _sum2 += contract.AllowanceTV ?? 0;
                _sum2 += contract.AllowanceTV2 ?? 0;
                _sum2 += contract.AllowanceTV3 ?? 0;
                _sum2 += contract.AllowanceTV4 ?? 0;
                _sum2 += contract.AllowanceTV5 ?? 0;
                contract.SumSalaryProbationContract = _sum2;
                #endregion

                #region [to.le][05/03/2016][0064405]Lấy trình độ chuyên môn từ bảng Hre_ProfileQualification
                var _hrequaliquication = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (_hrequaliquication != null)
                {
                    contract.HreProfileQualificationName = _hrequaliquication.QualificationName;
                    contract.TrainingPlace = _hrequaliquication.TrainingPlace;
                    contract.FieldOfTraining = _hrequaliquication.FieldOfTraining;
                }
                #endregion

                #region Son.Vo - 20160617 - 0068893 - lấy trình độ chuyên môn chính (main = true)
                var qualificationMain = _lsthrequalification.Where(s => s.ProfileID == contract.ProfileID && s.IsQualificationMain == true).FirstOrDefault();
                if (qualificationMain != null)
                {
                    contract.QualificationNameMain = qualificationMain.QualificationName;
                    contract.FieldOfTrainingMain = qualificationMain.FieldOfTraining;
                    contract.TrainingPlaceMain = qualificationMain.TrainingPlace;
                    contract.CertificateNameMain = qualificationMain.CertificateName;
                    contract.GraduationDate = qualificationMain.GraduationDate;
                }
                #endregion

                if (contract.NoPrint == null)
                {
                    contract.NoPrint = 1;
                }
                else
                {
                    contract.NoPrint++;
                }
                #region xữ lý datetime
                if (contract.IDDateOfIssueSing != null)
                {
                    contract.IDDateOfIssueSingFormat = contract.IDDateOfIssueSing.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateQuit.HasValue)
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(contract.DateQuit.Value.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                else
                {
                    if (contract.DateHire.HasValue)
                    {
                        contract.MonthWorking = Math.Floor(DateTime.Now.Subtract(contract.DateHire.Value).TotalDays / 30);
                        contract.YearWorking = Math.Floor(contract.MonthWorking.Value / 12);
                        if (contract.YearWorking > 0)
                        {
                            contract.MonthWorking = contract.MonthWorking - (contract.YearWorking * 12);
                        }
                    }
                }
                if (contract.SocialInsIssueDate.HasValue)
                {
                    contract.SocialInsIssueDateFormat = contract.SocialInsIssueDate.Value.ToString("dd/MM/yyyy");
                    contract.SocialInsDateRegFormat_E = contract.SocialInsIssueDate.Value.ToString("dd-MM-yyyy");
                }

                if (contract.PassportDateOfIssue.HasValue)
                {
                    contract.PassportDateOfIssueFormatEN = contract.PassportDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.PassportDateOfExpiry.HasValue)
                {
                    contract.PassportDateOfExpiryFormatEN = contract.PassportDateOfExpiry.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormatEN = contract.TerminateDate.Value.ToString("dd-MMM-yyyy");
                }

                contract.DateNow = DateTime.Now.ToString("dd/MM/yyyy");
                contract.DateNow_Day = DateTime.Now.Day.ToString();
                contract.DateNow_Month = DateTime.Now.Month.ToString();
                contract.DateNow_Year = DateTime.Now.Year.ToString();
                if (contract.IDDateOfIssue.HasValue)
                {
                    contract.IDDateOfIssueFormat = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd/MM/yyyy") : null;
                    contract.IDDateOfIssueFormat_E = contract.IDDateOfIssue.HasValue ? contract.IDDateOfIssue.Value.ToString("dd-MM-yyyy") : null;
                }
                if (contract.DateStart != null)
                {
                    contract.DateStartSub1 = contract.DateStart.AddDays(-1).ToString("dd/MM/yyyy");
                    contract.DateStartFormat = contract.DateStart.ToString("dd/MM/yyyy");
                    contract.DateStart_Day = contract.DateStart.Day.ToString();
                    contract.DateStart_Month = contract.DateStart.Month.ToString();
                    contract.DateStart_Year = contract.DateStart.Year.ToString();
                    contract.DateStartFormatEN = contract.DateStart.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEnd.HasValue)
                {
                    contract.DateEndFormat = contract.DateEnd.Value.ToString("dd/MM/yyyy");
                    contract.DateEnd_Day = contract.DateEnd.Value.Day.ToString();
                    contract.DateEnd_Month = contract.DateEnd.Value.Month.ToString();
                    contract.DateEnd_Year = contract.DateEnd.Value.Year.ToString();
                    contract.DateEndFormatEN = contract.DateEnd.Value.ToString("dd-MMM-yyyy");
                }

                if (contract.DateSigned.HasValue)
                {
                    contract.DateSignedFormat = contract.DateSigned.Value.ToString("dd/MM/yyyy");
                    contract.DateSigned_Day = contract.DateSigned.Value.Day.ToString();
                    contract.DateSigned_Month = contract.DateSigned.Value.Month.ToString();
                    contract.DateSigned_Year = contract.DateSigned.Value.Year.ToString();
                    contract.DateSignedFormatEN = contract.DateSigned.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                    contract.DateEndProbation_Day = contract.DateEndProbation.Value.Day.ToString();
                    contract.DateEndProbation_Month = contract.DateEndProbation.Value.Month.ToString();
                    contract.DateEndProbation_Year = contract.DateEndProbation.Value.Year.ToString();
                    contract.DateEndProbationFormatEN = contract.DateEndProbation.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateOfBirth.HasValue)
                {
                    contract.DateOfBirthFormat = contract.DateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.DateOfBirth_Day = contract.DateOfBirth.Value.Day.ToString();
                    contract.DateOfBirth_Month = contract.DateOfBirth.Value.Month.ToString();
                    contract.DateOfBirth_Year = contract.DateOfBirth.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                //[15/12/2015][to.le][Bug][0061783]
                //Nếu ngày sinh null và chỉ có YearofBirth thì xuất ra cái năm sinh.
                if (contract.DateOfBirth == null && contract.YearOfBirth != null)
                {
                    contract.DateOfBirthFormat = contract.YearOfBirth.ToString();
                }
                if (contract.ProfileSingIDDateOfIssue.HasValue)
                {
                    contract.ProfileSingIDDateOfIssueFormat = contract.ProfileSingIDDateOfIssue.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingIDDateOfIssue_Day = contract.ProfileSingIDDateOfIssue.Value.Day.ToString();
                    contract.ProfileSingIDDateOfIssue_Month = contract.ProfileSingIDDateOfIssue.Value.Month.ToString();
                    contract.ProfileSingIDDateOfIssue_Year = contract.ProfileSingIDDateOfIssue.Value.Year.ToString();
                    contract.ProfileSingIDDateOfIssueFormatEN = contract.ProfileSingIDDateOfIssue.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.ProfileSingDateOfBirth.HasValue)
                {
                    contract.ProfileSingDateOfBirthFormat = contract.ProfileSingDateOfBirth.Value.ToString("dd/MM/yyyy");
                    contract.ProfileSingDateOfBirth_Day = contract.ProfileSingDateOfBirth.Value.Day.ToString();
                    contract.ProfileSingDateOfBirth_Month = contract.ProfileSingDateOfBirth.Value.Month.ToString();
                    contract.ProfileSingDateOfBirth_Year = contract.ProfileSingDateOfBirth.Value.Year.ToString();
                    contract.ProfileSingDateOfBirthFormatEN = contract.ProfileSingDateOfBirth.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.TerminateDate.HasValue)
                {
                    contract.TerminateDateFormat = contract.TerminateDate.Value.ToString("dd/MM/yyyy");
                }
                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                if (contract.DateHire.HasValue)
                {
                    contract.DateHireFormat = contract.DateHire.Value.ToString("dd/MM/yyyy");
                    contract.DateHire_Day = contract.DateHire.Value.Day.ToString();
                    contract.DateHire_Month = contract.DateHire.Value.Month.ToString();
                    contract.DateHire_Year = contract.DateHire.Value.Year.ToString();
                    contract.DateOfBirthFormatEN = contract.DateHire.Value.ToString("dd-MMM-yyyy");
                }
                if (contract.DateEndProbation.HasValue)
                {
                    contract.DateEndProbationFormat = contract.DateEndProbation.Value.ToString("dd/MM/yyyy");
                }
                if (contract.DateOfEffect.HasValue)
                {
                    contract.DateOfEffectFormat = contract.DateOfEffect.Value.ToString("dd/MM/yyyy");
                    contract.DateOfEffectFormatEng = contract.DateOfEffect.Value.ToString("MMM dd,yyyy");

                    contract.DateOfEffectMoreTwoMonthFormat = contract.DateOfEffect.Value.AddMonths(+2).ToString("dd MMM yyyy");
                }
                #endregion

                #region [07/11/2015][Phuc.Nguyen][Modify Func][0059661] Các màn hình Xuất Word: Cần thêm các enum GraveName1 Anh/Chị Mr/Ms
                if (contract.Gender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.GenderEN = "Female"; // Son.Vo - 20161105 - 0075085
                    contract.GraveName = "Ms.";
                    contract.NameByGerder = "Chị ";
                    contract.GraveNames = "Bà";
                    contract.GraveNameEN = "Mrs.";

                }
                else if (contract.Gender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.GraveName = "Mr.";
                    contract.GenderEN = "Male "; // Son.Vo - 20161105 - 0075085
                    contract.NameByGerder = "Anh ";
                    contract.GraveNames = "Ông";
                    contract.GraveNameEN = "Mr.";
                }
                else if (contract.Gender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.GraveName = "Mr/Mrs ";
                    contract.NameByGerder = "Anh/Chị";
                    contract.GraveNames = "Ông/Bà";
                    contract.GraveNameEN = "Mr/Mrs";
                }
                if (contract.ProfileSignGender == "E_FEMALE")
                {
                    contract.ProfileSignGraveName = "Bà";
                    contract.ProfileSignGraveNameEN = "Mrs ";
                    contract.ProfileSignGraveName1 = "Chị ";
                    contract.ProfileSignGraveNameEN1 = "Ms ";
                }
                else
                {
                    contract.ProfileSignGraveName = "Ông";
                    contract.ProfileSignGraveNameEN = "Mr ";
                    contract.ProfileSignGraveName1 = "Anh ";
                    contract.ProfileSignGraveNameEN1 = "Mr ";
                }
                #endregion

                #region [14/12/2015][to.le][Modify Func][0061400] Lấy giới tính từ bảng Cat_Company
                if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Chị ";
                    contract.ChairmanGraveNameEN1 = "Ms.";
                    contract.ChairmanGraveName = "Bà";
                    contract.ChairmanGraveNameEN = "Mrs.";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.ChairmanGraveName1 = "Anh ";
                    contract.ChairmanGraveNameEN1 = "Mr.";
                    contract.ChairmanGraveName = "Ông";
                    contract.ChairmanGraveNameEN = "Mr.";
                }
                #endregion
                //Quyen.Quach Bổ sung Enum xuất màn hình DS Hợp đồng
                #region Quyen.Quach-17062017-Task 0083786 - lấy giới tính companygravename
                if (contract.ChairmanGender == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Mr ";
                    contract.CompanyGraveNameVN = "Ông";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.CompanyGraveNameEN = "Ms ";
                    contract.CompanyGraveNameVN = "Bà";
                }
                else if (contract.ChairmanGender == EnumDropDown.Gender.E_OTHER.ToString())
                {
                    contract.CompanyGraveNameEN = "Other ";
                    contract.CompanyGraveNameVN = "Khác ";
                }
                #endregion

                double total = 0;
                #region 15 loại pc
                //Nguyen.Le - 26/01/2018 - 0092732
                if (!string.IsNullOrEmpty(contract.E_Allowance))
                {
                    total += contract.E_Allowance.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance1))
                {
                    total += contract.E_Allowance1.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance2))
                {
                    total += contract.E_Allowance2.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance3))
                {
                    total += contract.E_Allowance3.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance4))
                {
                    total += contract.E_Allowance4.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance5))
                {
                    total += contract.E_Allowance5.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance6))
                {
                    total += contract.E_Allowance6.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance7))
                {
                    total += contract.E_Allowance7.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance8))
                {
                    total += contract.E_Allowance8.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance9))
                {
                    total += contract.E_Allowance9.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance10))
                {
                    total += contract.E_Allowance10.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance11))
                {
                    total += contract.E_Allowance11.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance12))
                {
                    total += contract.E_Allowance12.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance13))
                {
                    total += contract.E_Allowance13.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance14))
                {
                    total += contract.E_Allowance14.DecryptValue().Value;
                }
                if (!string.IsNullOrEmpty(contract.E_Allowance15))
                {
                    total += contract.E_Allowance15.DecryptValue().Value;
                }

                if (total == 0 || total == null)
                {
                    if (contract.Allowance != null)
                    {
                        total += contract.Allowance.Value;
                    }
                    if (contract.Allowance1 != null)
                    {
                        total += contract.Allowance1.Value;
                    }
                    if (contract.Allowance2 != null)
                    {
                        total += contract.Allowance2.Value;
                    }
                    if (contract.Allowance3 != null)
                    {
                        total += contract.Allowance3.Value;
                    }
                    if (contract.Allowance4 != null)
                    {
                        total += contract.Allowance4.Value;
                    }
                    if (contract.Allowance5 != null)
                    {
                        total += contract.Allowance5.Value;
                    }
                    if (contract.Allowance6 != null)
                    {
                        total += contract.Allowance6.Value;
                    }
                    if (contract.Allowance7 != null)
                    {
                        total += contract.Allowance7.Value;
                    }
                    if (contract.Allowance8 != null)
                    {
                        total += contract.Allowance8.Value;
                    }
                    if (contract.Allowance9 != null)
                    {
                        total += contract.Allowance9.Value;
                    }
                    if (contract.Allowance10 != null)
                    {
                        total += contract.Allowance10.Value;
                    }
                    if (contract.Allowance11 != null)
                    {
                        total += contract.Allowance11.Value;
                    }
                    if (contract.Allowance12 != null)
                    {
                        total += contract.Allowance12.Value;
                    }
                    if (contract.Allowance13 != null)
                    {
                        total += contract.Allowance13.Value;
                    }
                    if (contract.Allowance14 != null)
                    {
                        total += contract.Allowance14.Value;
                    }
                    if (contract.Allowance15 != null)
                    {
                        total += contract.Allowance15.Value;
                    }
                }


                #region tổng PC
                if (total >= 0)
                {
                    contract.TotalAllowance = total;
                    if (contract.TotalAllowance != null)
                    {
                        var objsTotalAllowance = new List<object>();
                        objsTotalAllowance.AddRange(new object[1]);
                        objsTotalAllowance[0] = contract.TotalAllowance;
                        var totalAllowanceTranslate = service.GetData<Hre_EntityTranslate>(objsTotalAllowance, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                        if (totalAllowanceTranslate != null && totalAllowanceTranslate.FirstOrDefault() != null)
                        {
                            contract.TotalAllowanceVN = totalAllowanceTranslate.FirstOrDefault().AmountVN;
                            contract.TotalAllowanceEN = totalAllowanceTranslate.FirstOrDefault().AmountEN;
                        }
                    }
                }
                #endregion
                #endregion
                var candidateGeneralByContract = lstcandidateGeneralByProfileIDs.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                double totalSalarytv = 0;

                if (!string.IsNullOrEmpty(contract.E_Salary))
                {
                    total += contract.E_Salary.DecryptValue().Value;
                }
                else
                {
                    //Quyen.Quach 08/02/2018 0093179
                    total += contract != null && contract.Salary != null ? contract.Salary.Value : 0;
                }
                double totalSalary = total;
                if (candidateGeneralByContract != null && candidateGeneralByContract.RateProbation != null)
                {
                    totalSalarytv = total * candidateGeneralByContract.RateProbation.Value;
                }
                else
                {
                    totalSalarytv = total;
                }
                if (totalSalary != null && totalSalary > 0)
                {
                    contract.TotalSalary = String.Format("{0:0,0}", totalSalary);
                }
                if (totalSalarytv != null && totalSalarytv > 0)
                {
                    contract.TotalSalaryTV = String.Format("{0:0,0}", totalSalarytv);
                }

                #region Son.Vo - 20160805 - 0071751 Dịch tổng pc + tổng lương
                #region Tổng lương
                var objstotalSalary = new List<object>();
                objstotalSalary.AddRange(new object[1]);
                objstotalSalary[0] = totalSalary;
                var totalSalaryTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalary, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTranslate != null && totalSalaryTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryVN = totalSalaryTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryEN = totalSalaryTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion

                #region Tổng lương thử việc
                var objstotalSalaryTV = new List<object>();
                objstotalSalaryTV.AddRange(new object[1]);
                objstotalSalaryTV[0] = Math.Floor(totalSalarytv);
                var totalSalaryTVTranslate = service.GetData<Hre_EntityTranslate>(objstotalSalaryTV, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                if (totalSalaryTVTranslate != null && totalSalaryTVTranslate.FirstOrDefault() != null)
                {
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountVN))
                    {
                        contract.TotalSalaryTVVN = totalSalaryTVTranslate.FirstOrDefault().AmountVN.Replace("  ", " ").Trim();
                    }
                    if (!string.IsNullOrEmpty(totalSalaryTVTranslate.FirstOrDefault().AmountEN))
                    {
                        contract.TotalSalaryTVEN = totalSalaryTVTranslate.FirstOrDefault().AmountEN.Replace("  ", " ").Trim();
                    }
                }
                #endregion
                #endregion

                contract.SalaryFormat = String.Format("{0:0,0}", contract.Salary);
                #region Son.Vo - 20170222 - 0079071 tổng lương thử việc + Phụ cấp
                var totalSalarytv2 = total;
                if (contract.Salary != null)
                {
                    totalSalarytv2 = totalSalarytv2 - contract.Salary.Value;
                }
                if (contract.ProbationSalary != null)
                {
                    totalSalarytv2 = totalSalarytv2 + contract.ProbationSalary.Value;
                }
                contract.TotalSalaryTV2 = String.Format("{0:0,0}", totalSalarytv2);
                #endregion
                //Son.Vo - 20160615 - 0068977
                var SalaryInformationByProfile = lstSalaryInformation.Where(s => s.ProfileID == contract.ProfileID).FirstOrDefault();
                if (SalaryInformationByProfile != null)
                {
                    contract.AccountNo = SalaryInformationByProfile.AccountNo;
                    contract.AccountName = SalaryInformationByProfile.AccountName;
                    contract.BranchName = SalaryInformationByProfile.BranchName;
                    contract.BankName = SalaryInformationByProfile.BankName;
                    contract.BankBrandName = SalaryInformationByProfile.BankBrandName;
                }
                //Son.Vo - 20161018 - 0074557
                if (contract.Salary != null)
                {
                    //Son.Vo - 20170607 - 0082755
                    var objsSalaryTranslate = new List<object>();
                    objsSalaryTranslate.AddRange(new object[1]);
                    objsSalaryTranslate[0] = contract.Salary;
                    var SalaryTranslate = service.GetData<Hre_EntityTranslate>(objsSalaryTranslate, ConstantSql.hrm_hrm_sys_docsothanhchu, ref status);
                    if (SalaryTranslate != null && SalaryTranslate.FirstOrDefault() != null)
                    {
                        contract.SalaryVN = SalaryTranslate.FirstOrDefault().AmountVN;
                        contract.SalaryEN = SalaryTranslate.FirstOrDefault().AmountEN;
                    }
                }
                if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_FEMALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Bà";

                }
                else if (contract.DelegateCompanyGraveNames == EnumDropDown.Gender.E_MALE.ToString())
                {
                    contract.DelegateCompanyGraveNames = "Ông";
                }
                contractServices.Edit(contract);

                #region Son.Vo - 20170725 - 0085484
                if (contract.FormCompSalary != null)
                {
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_TIMESALARY.ToString()))
                    {
                        contract.E_TimeSalary = "x";
                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PRODUCTSALARY.ToString()))
                    {
                        contract.E_ProductSalary = "x";

                    }
                    if (contract.FormCompSalary.Contains(EnumDropDown.FormCompSalary.E_PIECEWORKSALARY.ToString()))
                    {
                        contract.E_PieceworkSalary = "x";
                    }
                }
                #endregion

                if (contract.TAddress != null)
                {
                    contract.TAddressEN = RemoveSign4VietnameseString(contract.TAddress);
                }
                if (contract.PAddress != null)
                {
                    contract.PAddressEN = RemoveSign4VietnameseString(contract.PAddress);
                }
                i++;
                //Son.Vo - 20161221 - 0077027
                var workPermitByContract = lstWorkPermitNo.Where(s => s.ProfileID == contract.ProfileID && contract.DateStart <= s.WorkPermitExpiredDate && s.WorkPermitExpiredDate <= contract.DateEnd).OrderBy(s => s.WorkPermitInsDate).FirstOrDefault();
                if (workPermitByContract != null)
                {
                    contract.WorkPermitNo = workPermitByContract.WorkPermitNo;
                    contract.WorkPermitType = workPermitByContract.WorkPermitType;
                    contract.WorkPermitInsDate = workPermitByContract.WorkPermitInsDate;
                    contract.WorkPermitExpiredDate = workPermitByContract.WorkPermitExpiredDate;
                    contract.WorkPermitAddress = workPermitByContract.WorkPermitAddress;
                }
                var workhistoryByProsing = lstWorkhistoryByProsing.Where(s => s.ProfileID == contract.ProfileSingID && s.DateEffective <= contract.DateStart).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (workhistoryByProsing != null)
                {
                    contract.ProfileSingPositionName = workhistoryByProsing.PositionName;
                    contract.ProfileSingPositionEngName = workhistoryByProsing.PositionEngName;
                }
                //hau.le-87891-20170919
                contract.IDPlaceOfIssueEN = contract.IDPlaceOfIssueEN == null ? "" : HRM.Infrastructure.Utilities.Common.RemoveSign4VietnameseString(contract.IDPlaceOfIssueEN);
                #region Son.Vo - 20170516 - 0082489: :Thêm enum xuất word màn hình Danh sách hợp đồng (lấy Dữ liệu lương cơ bản)
                var basicSalaryByProfile = lstBasicSalary.Where(s => s.ProfileID == contract.ProfileID && s.DateOfEffect <= contract.DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (basicSalaryByProfile != null)
                {
                    contract.GrossAmount = basicSalaryByProfile.E_GrossAmount != null ? basicSalaryByProfile.E_GrossAmount.DecryptValue() : null;
                }
                #endregion

                //[07/06/2016][HienNguyen][68425]
                //Nguyen.Le - 20170928 - 00887411
                string genneralNameExport = ExportService.GenneralFileNameExport(template, contract.ProfileID, i, contract); //Nguyen.Le - 19/12/2017 - 0091348

                outputPath = folferPath + "/" + genneralNameExport;
                fileDoc = NotificationType.Success.ToString() + "," + Common.DownloadURL + "/" + genneralNameExport;
                var lstcontract = new List<Hre_ContractForExportModel>();
                var contractExport = contract.CopyData<Hre_ContractForExportModel>();
                lstcontract.Add(contractExport);
                lstFileOrder.Add(genneralNameExport);
                ExportService.ExportWord(outputPath, templatepath, lstcontract);
            }
            if (lstContract.Count > 1)
            {
                if (model.IsRar)
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    return Json(fileZip);
                }
                else
                {
                    var fileZip = Common.MultiExport("", true, folderName);
                    string dirpathDownload = Common.GetPath(Common.DownloadURL + folderName) + ".zip";
                    //[Tin.Nguyen - 20161020]Kết xuất nhiu file thành 1 file
                    var messageReturn = string.Empty;
                    var urlOutPath = Common.GetPath(Common.TemplateURL);
                    var fileZipSplit = fileZip.Split(',');
                    if (fileZipSplit.Count() > 0)
                    {
                        var urlReturn = ExportService.ExportAllWordToOneFileByTemplate(dirpathDownload, urlOutPath, ext, lstFileOrder);
                        messageReturn = NotificationType.Success.ToString() + "," + urlReturn;
                        return Json(messageReturn);
                    }
                    return Json(fileZip);
                }

            }
            return Json(fileDoc);
        }

        //Nguyen.Le - 28/10/2017 - 0088952
        public ActionResult ExportExcelContractMLCList([DataSourceRequest] DataSourceRequest request, Hre_ContractMLCSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var action = new ActionService(UserLogin);
            var _ProfileServices = new Hre_ProfileServices();
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            var result = new List<Hre_ContractModel>();
            var lstProfileIDs = new List<Guid>();

            if (!model.IsCreateTemplate)
            {
                if (model.WorkPlaceID != null)
                {
                    model.WorkPlaceID = Common.DotNetToOracle(model.WorkPlaceID);
                }
                if (model.ClassRateID != null)
                {
                    model.ClassRateID = Common.DotNetToOracle(model.ClassRateID);
                }
                //return ExportAllAndReturn<Hre_ContractEntity, Hre_ContractModel, Hre_ContractMLCSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractMLCList);
                result = GetListData<Hre_ContractModel, Hre_ContractEntity, Hre_ContractMLCSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ContractMLCList, ref status);
                var lstRegionIDs = result.Where(s => s.RegionID != null).Select(s => s.RegionID.Value).Distinct().ToList();
                var listRegionDetail = _ProfileServices.GetLstRegionDetailByRegionIDs(lstRegionIDs);
                var lstContractIDs = result.Select(s => s.ID).ToList();
                var _ContractExtendServices = new Hre_ContractExtendServices();
                var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
                foreach (var item in result)
                {
                    //[To.Le][04/07/2016][New Func][0069723]	Ngày bắt đầu ngày kết thúc phụ lục: Lấy lên ngày bắt đầu phụ lục loại gia hạn của hợp đồng TypeAppendix= ‘E_EXTEND’
                    var contractExtend = lstContractExtend.Where(s => s.ContractID == item.ID && s.TypeAppendix == EnumDropDown.TypeAppendix.E_EXTEND.ToString()).FirstOrDefault();
                    if (contractExtend != null)
                    {
                        if (contractExtend.DateStart != null)
                        {
                            item.DateExtendFrom = contractExtend.DateStart;
                        }
                        if (contractExtend.DateEnd != null)
                        {
                            item.DateExtendTo = contractExtend.DateEnd;
                        }
                    }
                    //Lương vùng đóng BH thấp nhất , cao nhất
                    var regionDetail = listRegionDetail.Where(m => m.RegionID == item.RegionID).FirstOrDefault();
                    if (regionDetail.HasValue() && regionDetail.MinSalary.HasValue)
                    {
                        item.MinSalary = regionDetail.MinSalary;
                    }
                    if (regionDetail.HasValue() && regionDetail.MaxSalary.HasValue)
                    {
                        item.MaxSalary = regionDetail.MaxSalary;
                    }
                }
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;
            string Companylogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                Companylogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }
            var HeaderInfo1 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };
            var headerInfo2 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var lstHeaderInfo = new List<HeaderInfo>() { HeaderInfo1, headerInfo2 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_ContractModel(),
                    FileName = "Hre_ContractModel",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);

        }

        //Quyen.Quach 31/10/2017 0088587
        public ActionResult GetPerformanceHreWaitEvaList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceWaitingEvaSearchModel model)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                string status = string.Empty;
                var _ProfileServices = new Hre_ProfileServices();
                model.UserLogin = Guid.Parse(UserID);
                ActionService service = new ActionService(UserLogin, LanguageCode);
                var userEntity = service.GetByIdUseStore<Sys_UserInfoEntity>(model.UserLogin.Value, ConstantSql.hrm_sys_sp_get_UserbyId, ref status);
                if (userEntity != null)
                {
                    var lstresult = _ProfileServices.GetlstEvaluatorByPerformancePortal(userEntity.ProfileID.Value);
                    if (lstresult != null)
                    {
                        var lststring = new List<string>();
                        if (model.PositionID != null)
                        {
                            lstresult = lstresult.Where(s => s.PositionID != null && s.PositionID == model.PositionID).ToList();
                        }
                        //Nguyen.Le - 15/11/2017 - 0090020
                        if (model.JobTitleID != null)
                        {
                            lstresult = lstresult.Where(s => s.JobTitleID != null && s.JobTitleID == model.JobTitleID).ToList();
                        }
                        if (model.OrgStructureID != null)
                        {
                            var lstOrgNo = model.OrgStructureID.Split(",");
                            lstresult = lstresult.Where(s => s.OrderNumber != null && lstOrgNo.Contains(s.OrderNumber)).ToList();
                        }
                        if (model.ProfileName != null)
                        {
                            lststring.Add(model.ProfileName);
                            lstresult = lstresult.Where(s => lststring.Contains(s.ProfileName)).ToList();
                        }
                        if (model.ContractNo != null)
                        {
                            lststring.Add(model.ContractNo);
                            lstresult = lstresult.Where(s => lststring.Contains(s.ContractNo)).ToList();
                        }
                        if (model.CodeEmp != null)
                        {
                            lststring.Add(model.CodeEmp);
                            lstresult = lstresult.Where(s => lststring.Contains(s.CodeEmp)).ToList();
                        }
                        if (model.IsExport != null)
                        {
                            if ((bool)model.IsExport)
                            {
                                string message = ExportService.Export(Guid.Empty, lstresult, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','), null);
                                return Json(message);
                            }
                        }
                        else
                        {
                            return Json(lstresult.ToDataSourceResult(request));
                        }
                    }
                }
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }

        //Nguyen.Le 01/11/2017 - 0089528
        public ActionResult ValidateContractAndKPI([Bind(Prefix = "ContractModel")] Hre_ContractModel ContractModel, [Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel PerformanceModel, [Bind(Prefix = "listKPI")] List<Hre_PerformanceDetailModel> listKPI)
        {
            string message = string.Empty;
            string status = string.Empty;
            Guid convertProfileID = Guid.Empty;
            string validate = null;
            var lstProfileID = new List<Guid>();
            var insuranceServices = new Sal_InsuranceSalaryServices();
            var ContractServices = new Hre_ContractServices();
            var hrService = new Hre_ProfileServices();
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var actionService = new ActionService(UserLogin);
            var workHistoryServices = new Hre_WorkHistoryServices();
            if (ContractModel != null)
            {
                if (ContractModel.ID == Guid.Empty)
                {
                    if (ContractModel.ProfileIDs == null && ContractModel.ProfileID == Guid.Empty && ContractModel.OrgStructureIDs == null)
                    {
                        var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "Hre_Contract", ref message);
                        if (!checkValidate)
                        {
                            ContractModel.ActionStatus = message;
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (ContractModel.ProfileIDs != null && ContractModel.ProfileIDs.IndexOf(',') > 1)
                {
                    var lstID = ContractModel.ProfileIDs.Split(',');
                    for (int i = 0; i < lstID.Length; i++)
                    {
                        convertProfileID = Common.ConvertToGuid(lstID[i]);
                        lstProfileID.Add(convertProfileID);
                    }
                }
                else
                {
                    convertProfileID = Common.ConvertToGuid(ContractModel.ProfileIDs);
                    lstProfileID.Add(convertProfileID);
                }
                // Son.Vo - theo task 0057642 - quy trình ký hđ
                validate = ContractServices.checkValidateContract(lstProfileID, ContractModel.DateStart, ContractModel.IsMLC);
                if (validate != null)
                {
                    ContractModel.ActionStatus = validate;
                    return Json(validate, JsonRequestBehavior.AllowGet);
                }
                var lstProfile = new List<Hre_ProfileEntity>();
                if (ContractModel.ProfileIDs != null)
                {
                    var lstProfileIds = ContractModel.ProfileIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                    lstProfile = hrService.GetLstProfileEntityByLstProfileIDs(lstProfileIds);
                    #region Validate
                    if (lstProfile.Count > 0 && lstProfile.FirstOrDefault() != null)
                    {
                        ContractModel.ProfileID = lstProfile.FirstOrDefault().ID;
                    }

                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "Hre_Contract", ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                    if (ContractModel.ContractEvaType == "E_ANNUAL_EVALUATION")
                    {
                        checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "EvaContractinfo", "Hre_Contract", false, ref message);
                        if (!checkValidate)
                        {
                            ContractModel.ActionStatus = message;
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }

                    #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                    if (ContractModel.ContractTypeID != null && ContractModel.ContractTypeID != Guid.Empty)
                    {
                        var contractTypeServices = new Cat_ContractTypeServices();
                        var contractType = contractTypeServices.GetDataContractTypeByID(ContractModel.ContractTypeID);
                        if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && ContractModel.DateEnd == null)
                        {
                            message = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                            ContractModel.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }
                    #endregion
                    #endregion
                }
                if (!string.IsNullOrEmpty(ContractModel.OrgStructureIDs))
                {
                    var listGuid = new List<Guid>();
                    if (ContractModel.ProfileIDs != null)
                    {
                        var listStr = ContractModel.ProfileIDs.Split(',');
                        if (listStr[0] != "")
                        {
                            foreach (var item in listStr)
                            {
                                listGuid.Add(Guid.Parse(item));
                            }
                        }
                    }
                    string strIDs = string.Empty;
                    var listObj = new List<object>();
                    listObj.Add(ContractModel.OrgStructureIDs);
                    listObj.Add(UserLogin);
                    listObj.Add(string.Empty);
                    var lstProfileids = actionService.GetData<Hre_ProfileIdEntity>(listObj, ConstantSql.hrm_hr_sp_get_ProfileIdsByOrgSelect, ref status).Select(s => s.ID).ToList();
                    if (listGuid != null)
                    {
                        lstProfileids = lstProfileids.Where(s => !listGuid.Contains(s)).ToList();
                        var lstProfileadd = hrService.GetLstProfileEntityByLstProfileIDs(lstProfileids);
                        if (lstProfileadd.Count > 0)
                        {
                            lstProfile.AddRange(lstProfileadd);
                        }
                    }
                    if (lstProfileids.Count == 0 && ContractModel.ProfileID == Guid.Empty)
                    {
                        ContractModel.ActionStatus = ConstantMessages.HRM_OrgStrure_Not_Have_Profile.TranslateString();
                        return Json(ContractModel.ActionStatus, JsonRequestBehavior.AllowGet);
                    }

                    // Son.Vo - theo task 0057642 - quy trình ký hđ
                    validate = ContractServices.checkValidateContract(lstProfileID, ContractModel.DateStart, ContractModel.IsMLC);
                    if (validate != null)
                    {
                        ContractModel.ActionStatus = validate;
                        return Json(validate, JsonRequestBehavior.AllowGet);
                    }

                    #region Validate
                    if (lstProfile.Count > 0 && lstProfile.FirstOrDefault() != null)
                    {
                        ContractModel.ProfileID = lstProfile.FirstOrDefault().ID;
                    }

                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "Hre_Contract", ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                    if (ContractModel.ContractEvaType == "E_ANNUAL_EVALUATION")
                    {
                        checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "EvaContractinfo", "Hre_Contract", false, ref message);
                        if (!checkValidate)
                        {
                            ContractModel.ActionStatus = message;
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }

                    #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                    if (ContractModel.ContractTypeID != null && ContractModel.ContractTypeID != Guid.Empty)
                    {
                        var contractTypeServices = new Cat_ContractTypeServices();
                        var contractType = contractTypeServices.GetDataContractTypeByID(ContractModel.ContractTypeID);
                        if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && ContractModel.DateEnd == null)
                        {
                            message = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                            ContractModel.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }
                    #endregion
                    #endregion
                }
            }
            if (PerformanceModel != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_PerformanceModel>(LanguageCode, PerformanceModel, "Hre_Performance_TabContract", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }
            }
            if (listKPI == null)
            {
                message = ConstantDisplay.ErrorKPI.TranslateString();
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ValidateEditContractAndKPI([Bind(Prefix = "ContractModel")] Hre_ContractSaveModel ContractModel, [Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel PerformanceModel, [Bind(Prefix = "listKPI")] List<Hre_PerformanceDetailModel> listKPI)
        {
            string message = string.Empty;
            var ContractServices = new Hre_ContractServices();
            if (ContractModel != null)
            {
                #region Validate
                Guid contractID = Guid.Empty;
                string typeContractType = string.Empty;
                if (ContractModel.Tab_ContractBasic != null)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_ContractBasicModel>(LanguageCode, ContractModel.Tab_ContractBasic, "Hre_Contract", ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                    #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                    if (ContractModel.Tab_ContractBasic.ContractTypeID != null && ContractModel.Tab_ContractBasic.ContractTypeID != Guid.Empty)
                    {
                        var contractTypeServices = new Cat_ContractTypeServices();
                        var contractType = contractTypeServices.GetDataContractTypeByID(ContractModel.Tab_ContractBasic.ContractTypeID);
                        typeContractType = contractType != null ? contractType.Type : null;
                        if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && ContractModel.Tab_ContractBasic.DateEnd == null)
                        {
                            ContractModel.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                            message = ContractModel.ActionStatus;
                            return Json(message, JsonRequestBehavior.AllowGet);
                        }
                    }
                    #endregion
                    #region Son.Vo - 20160808 - 0071798: Bổ sung tính năng cảnh báo trùng khi tạo mới hợp đồng
                    bool isDuplicate = ContractServices.ValidateDuplicateContract(ContractModel.ID, ContractModel.Tab_ContractBasic.ProfileID, ContractModel.Tab_ContractBasic.DateStart, ContractModel.Tab_ContractBasic.DateEnd, ContractModel.Tab_ContractBasic.IsMLC);
                    if (isDuplicate == true)
                    {
                        ContractModel.ActionStatus = ConstantDisplay.HRM_Hr_Hre_DuplicateContract.TranslateString();
                        message = ContractModel.ActionStatus;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                    #endregion
                }
                if (ContractModel.Tab_EvaContract != null)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_EvaContractModel>(LanguageCode, ContractModel.Tab_EvaContract, "Hre_Contract", ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                }
                if (ContractModel.Tab_RegisterPlace != null)
                {
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Tab_RegisterPlaceModel>(LanguageCode, ContractModel.Tab_RegisterPlace, "Hre_Contract", ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion
            }
            if (PerformanceModel != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_PerformanceModel>(LanguageCode, PerformanceModel, "Hre_Performance_TabContract", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }
            }
            if (listKPI == null)
            {
                message = ConstantDisplay.ErrorKPI.TranslateString();
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ValidateCreateContractAndKPI([Bind(Prefix = "ContractModel")] Hre_ContractModel ContractModel, [Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel PerformanceModel, [Bind(Prefix = "listKPI")] List<Hre_PerformanceDetailModel> listKPI)
        {
            string message = string.Empty;
            var ContractServices = new Hre_ContractServices();
            if (ContractModel != null)
            {
                #region Validate
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "Hre_Contract", ref message);
                if (!checkValidate)
                {
                    ContractModel.ActionStatus = message;
                    return Json(message, JsonRequestBehavior.AllowGet);
                }
                if (ContractModel.ContractEvaType == "E_ANNUAL_EVALUATION")
                {
                    checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ContractModel>(LanguageCode, ContractModel, "EvaContractinfo", "Hre_Contract", false, ref message);
                    if (!checkValidate)
                    {
                        ContractModel.ActionStatus = message;
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                }

                #region Son.Vo - 20160530 - 0068293 - do khi sổ ra nhiều dòng ở multi rồi chọn thì vẫn luôn lấy loại của dòng đầu tiên
                var contractTypeServices = new Cat_ContractTypeServices();
                var contractType = contractTypeServices.GetDataContractTypeByID(ContractModel.ContractTypeID);
                string typeContractType = contractType != null ? contractType.Type : null;
                if (ContractModel.ContractTypeID != null && ContractModel.ContractTypeID != Guid.Empty)
                {
                    if (contractType.Type != EnumDropDown.TypeContract.E_NODURATION.ToString() && ContractModel.DateEnd == null)
                    {
                        ContractModel.ActionStatus = ConstantDisplay.WaringDateEndNotNull.TranslateString();
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                }
                #endregion

                #region Son.Vo - 20160722 - 0070980 validate số lần ký tối đa theo loại của loại HD
                if (ContractModel.ID == Guid.Empty)
                {
                    var _ContractServices = new Hre_ContractServices();
                    var services = new Sys_AttOvertimePermitConfigServices();
                    var _MAXCASUAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXCASUAL);
                    var _MAXPROBATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXPROBATION);
                    var _MAXOFFICIAL = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXOFFICIAL);
                    var _MAXAPPENDIX = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPENDIX);
                    var _MAXAPPRENTICESHIP = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXAPPRENTICESHIP);
                    var _MAXDURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXDURATION);
                    var _MAXNODURATION = services.GetConfigValue<int?>(AppConfig.HRM_HRE_CONFIG_MAXNODURATION);
                    var isbyCompany = services.GetConfigValue<bool?>(AppConfig.HRM_HRE_CONFIG_ISVALIDATEMAXTIMECONTRACTBYCOMPANY);
                    string messageref = _ContractServices.ValidateMaxTimeSignContract(ContractModel.ProfileID, ContractModel.ContractTypeID, _MAXCASUAL,
                                     _MAXPROBATION, _MAXOFFICIAL, _MAXAPPENDIX, _MAXAPPRENTICESHIP, _MAXDURATION, _MAXNODURATION, isbyCompany, ContractModel.CompanyID);
                    if (messageref != null && messageref == ConstantDisplay.HRM_Hr_Hre_MaxTimeContract.ToString())
                    {
                        ContractModel.ActionStatus = messageref.TranslateString();
                        return Json(message, JsonRequestBehavior.AllowGet);
                    }
                }

                #endregion
                #endregion
            }
            if (PerformanceModel != null)
            {
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_PerformanceModel>(LanguageCode, PerformanceModel, "Hre_Performance_TabContract", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }
            }
            if (listKPI == null)
            {
                message = ConstantDisplay.ErrorKPI.TranslateString();
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        //Nguyen.Le - 31/10/2017 - Sửa valid theo field đc chọn
        public ActionResult ValidateSelectedSumaryHeadCount(Hre_ReportSumaryHeadCountSearchModel model)
        {
            string message = string.Empty;
            var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_ReportSumaryHeadCountSearchModel>(LanguageCode, model, "Hre_ReportSumaryHeadCount_SelectedValid", ref message);

            var reportSumaryHeadCount = new Hre_ReportSumaryHeadCountSearchModel();
            var lstField = reportSumaryHeadCount.GetType().GetProperties();
            foreach (var item in lstField)
            {

                var checkString = string.Format(ConstantMessages.FieldNotAllowNull.TranslateString(), item.Name.TranslateString());

                if (message.Equals(checkString))
                {
                    var ls = new object[] { "error", message, item.Name };
                    return Json(ls, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }

        //Nguyen.Le 09/11/2017 0089030
        public string CheckSaveCandidateHistory([DataSourceRequest] DataSourceRequest request, Hre_CandidateHistoryModel model)
        {
            bool IsDuplicate = false;

            //Nguyen.Le - 16/11/2017 - 0090123
            if (model.ProfileID != null)
            {
                string status = string.Empty;
                var actionServices = new ActionService(UserLogin);
                var lstCandidateHistory = actionServices.GetData<Hre_CandidateHistoryViewProfileDetailModel>(Common.DotNetToOracle(model.ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_CandidateHistoryByProfileId, ref status);

                if (model.ID != null && model.ID != Guid.Empty)
                {
                    if (lstCandidateHistory != null)
                    {
                        if (lstCandidateHistory.Any())
                        {
                            lstCandidateHistory = lstCandidateHistory.Where(m => m.ID != model.ID).ToList();
                        }
                    }
                }

                foreach (var can in lstCandidateHistory)
                {
                    if (can.DateFinish >= model.DateStart && can.DateStart <= model.DateFinish)
                    {
                        IsDuplicate = true;
                    }
                }
            }
            if (!IsDuplicate)
            {
                return "AllowSave";
            }
            else
            {
                return null;
            }
        }

        //Nguyen.Le 09/11/2017 0088894
        public string CheckSaveProfileMP([DataSourceRequest] DataSourceRequest request, Hre_MPModel model)
        {
            bool IsDuplicate = false;

            string status = string.Empty;
            var baseService = new BaseService();
            var result = baseService.GetData<Hre_MPEntity>(Common.DotNetToOracle(model.ProfileID.ToString()), ConstantSql.hrm_hr_sp_get_MPByProfileId, UserLogin, ref status);
            var lstMP = result.Where(s => s.MPRank == model.MPRank);
            foreach (var pro in lstMP)
            {
                if (pro.FromDate <= model.ToDate && pro.ToDate >= model.FromDate && model.ID != pro.ID)
                {
                    IsDuplicate = true;
                }
            }
            if (!IsDuplicate)
            {
                return "AllowSave";
            }
            else
            {
                return null;
            }
        }
        #region Quyen.Quach 10/11/2017 Hre_WorkhistoryPlan Kế hoạch điều chuyển
        [HttpPost]
        public ActionResult GetWorkHistoryPlanList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            return GetListDataAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistorySearchModel>(request, model, ConstantSql.hr_sp_get_WorkHistoryPlanList);
        }
        public ActionResult ExportWorkHistoryPlanByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistoryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkHistoryModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_WorkHistoryModel>(lstModel, ConstantSql.hr_sp_get_WorkHistoryPlanList, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        [HttpPost]
        public ActionResult ExportWorkHistoryPlanList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistorySearchModel model)
        {
            return ExportAllAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistorySearchModel>(request, model, ConstantSql.hr_sp_get_WorkHistoryPlanList);
        }
        #endregion
        //Quyen.Quach 10/11/2017 Fix lỗi excel xuất tất cả Màn hình điều động bổ nhiệm chờ duyệt
        //Nguyen.Le - 15/11/2017 - 0089985
        public ActionResult ExportWorkHistoryWatitingList([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryWaitingSearchModel model)
        {
            return ExportAllAndReturn<Hre_WorkHistoryEntity, Hre_WorkHistoryModel, Hre_WorkHistoryWaitingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_WorkHistoryWaitingApprove);
        }
        //Quyen.Quach 10/11/2017 Fix lỗi xuất báo cáo Màn hình điều động bổ nhiệm chờ duyệt
        public ActionResult ExportWorkHistoryWatitingByListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_WorkHistoryWaitingSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_WorkHistoryModel(),
                    FileName = "Hre_WorkHistory",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_WorkHistoryModel>();
            if (!model.IsCreateTemplate)
            {
                //Nguyen.Le - 18/12/2017 - 0091502
                if (!string.IsNullOrEmpty(UserID))
                {
                    model.UserID = Guid.Parse(UserID);
                }
                result = actionService.GetData<Hre_WorkHistoryModel>(lstModel, ConstantSql.hrm_hr_sp_get_WorkHistoryWaitingApprove, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion

            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }

        //Nguyen.Le - 11/11/2017 - 0089725
        public ActionResult ExportStopWorkingPlanListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            string status = string.Empty;
            var actionService = new ActionService(UserLogin);
            var isDataTable = false;
            object obj = new Hre_ProfileModel();
            var contractServices = new Hre_ContractServices();
            var _CatContractTypeServices = new Cat_ContractTypeServices();

            #region Create Tempate
            HeaderInfo headerInfo1 = new HeaderInfo() { Name = "DateFrom", Value = model.DateFrom != null ? model.DateFrom : DateTime.Now };
            HeaderInfo headerInfo2 = new HeaderInfo() { Name = "DateTo", Value = model.DateTo != null ? model.DateTo : DateTime.Now };
            HeaderInfo headerInfo3 = new HeaderInfo() { Name = "CompanyLogo", Value = "" };

            List<HeaderInfo> listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = new Hre_StopWorkingModel(),
                    FileName = "Hre_StopWorking",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #endregion

            ListQueryModel lstModel = new ListQueryModel
            {
                PageSize = int.MaxValue - 1,
                PageIndex = 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var result = new List<Hre_StopWorkingModel>();
            if (!model.IsCreateTemplate)
            {
                result = actionService.GetData<Hre_StopWorkingModel>(lstModel, ConstantSql.hrm_hr_sp_get_StopWorkingPlan, ref status);
            }
            #region Logo
            string CompanyLogo = string.Empty;
            if (!Common.CheckListNullOrEmty(result))
            {
                CompanyLogo = result.Where(s => !string.IsNullOrEmpty(s.CompanyLogo)).Select(s => s.CompanyLogo).FirstOrDefault();
            }

            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "CompanyLogo")
                {
                    item.Value = CompanyLogo;
                }
            }
            #endregion
            var lstProfileIDs = result.Select(s => s.ProfileID.Value).Distinct().ToList();
            var lstContracts = contractServices.GetLstContractByProfileIDs(lstProfileIDs);
            foreach (var item in result)
            {
                var ContractByProfileID = lstContracts.Where(s => s.ProfileID == item.ID && s.Status == "E_APPROVED" && s.DateStart <= item.DateStop).OrderByDescending(s => s.DateStart).FirstOrDefault();
                if (ContractByProfileID != null)
                {
                    if (ContractByProfileID.ContractTypeID != null)
                        item.ContractTypeNames = _CatContractTypeServices.GetContractTypeNameByID(ContractByProfileID.ContractTypeID);
                }
            }
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }

            return Json(result.ToDataSourceResult(request));
        }

        //Nguyen.Le - 11/11/2017 - 0089725
        public ActionResult ExportStopWorkingPlanList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            return ExportAllAndReturn<Hre_StopWorkingEntity, Hre_StopWorkingModel, Hre_StopWorkingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorkingPlan);
        }
        //Nguyen.Le - 11/11/2017 - 0089725
        [HttpPost]
        public ActionResult GetStopWorkingPlanList([DataSourceRequest] DataSourceRequest request, Hre_StopWorkingSearchModel model)
        {
            return GetListDataAndReturn<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_StopWorkingSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_StopWorkingPlan);
        }
        //Nguyen.Le - 14/11/2017 - 0089883
        public ActionResult ExportRetirementSelectedByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RetirementSearchModel model)
        {
            var headerInfo1 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo2 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo3 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            var listHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };
            string status = string.Empty;
            var isDataTable = false;
            object obj = new Hre_StopWorkingModel();
            var baseService = new BaseService();
            var objs = new List<object>();
            string strIDs = string.Empty;
            var result = baseService.GetData<Hre_StopWorkingModel>(model.strRetirementIDs, ConstantSql.hrm_hr_sp_get_StopWorkingByListId, UserLogin, ref status);
            if (result == null)
                return null;
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();

                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_StopWorkingModel",
                    OutPutPath = path,
                    HeaderInfo = listHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in listHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, listHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(result.ToDataSourceResult(request));
        }
        //Nguyen.Le - 14/11/2017 - 0089883
        [HttpPost]
        public ActionResult ExportRetirementListByTemplate([DataSourceRequest] DataSourceRequest request, Hre_RetirementSearchModel model)
        {
            string status = string.Empty;
            var isDataTable = false;
            var action = new ActionService(UserLogin);
            if (model.ExportId != Guid.Empty)
            {
                request.PageSize = int.MaxValue - 1;
            }
            var result = new List<Hre_StopWorkingModel>();
            var lstProfileIDs = new List<Guid>();

            if (!model.IsCreateTemplate)
            {
                result = GetListData<Hre_StopWorkingModel, Hre_StopWorkingEntity, Hre_RetirementSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_Retirement, ref status);
            }
            var dataSourceResult = result.ToDataSourceResult(request);
            int total = result.FirstOrDefault().GetPropertyValue("TotalRow") != null ? (int)result.FirstOrDefault().GetPropertyValue("TotalRow") : 0;
            dataSourceResult.Total = total;

            var headerInfo1 = new HeaderInfo() { Name = "DateExport", Value = DateTime.Now.ToString("dd/MM/yyyy") };
            var headerInfo2 = new HeaderInfo() { Name = "UserExport", Value = string.Empty };
            var headerInfo3 = new HeaderInfo() { Name = "UserInfoExport", Value = string.Empty };
            var lstHeaderInfo = new List<HeaderInfo>() { headerInfo1, headerInfo2, headerInfo3 };

            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                var exportService = new ExportService();
                var cfgExport = new ConfigExport()
                {
                    Object = new Hre_StopWorkingModel(),
                    FileName = "Hre_StopWorkingModel",
                    OutPutPath = path,
                    HeaderInfo = lstHeaderInfo,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            #region Logo
            var sysService = new Sys_UserServices();
            var UserEntity = sysService.GetUserInfoByID(Guid.Parse(UserID));
            var UserExport = string.Empty;
            var UserInfoExport = string.Empty;
            if (UserEntity != null)
            {
                UserExport = UserEntity.UserLogin;
                UserInfoExport = UserEntity.UserInfoName;
            }
            foreach (var item in lstHeaderInfo)
            {
                if (item.Name == "UserExport")
                {
                    item.Value = UserExport;
                }
                if (item.Name == "UserInfoExport")
                {
                    item.Value = UserInfoExport;
                }
            }
            #endregion
            if (model.ExportId != Guid.Empty)
            {
                var fullPath = ExportService.Export(model.ExportId, result, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return Json(dataSourceResult);

        }
        //Nguyen.Le - 14/11/2017 - 0089883
        public ActionResult ExportRetirementSelected(string selectedIds, string valueFields)
        {
            var objBase = new BaseService();
            DataTable _table = new DataTable();
            _table.TableName = "Hre_StopWorking";
            var status = string.Empty;
            List<object> lstObj = new List<object>();
            lstObj.Add(selectedIds);
            _table = objBase.GetDataTable(lstObj, ConstantSql.hrm_hr_sp_get_StopWorkingByListId, UserLogin, ref status);
            string message = ExportService.ExportDataTable(Guid.Empty, _table, valueFields.Split(','), null);
            return Json(message);
        }

        public ActionResult GetUserEvaApproveWithType(string userSubmit, string profileID, string Type)
        {
            if (!string.IsNullOrEmpty(userSubmit) || (!string.IsNullOrEmpty(profileID) && profileID != Guid.Empty.ToString()))
            {
                if (profileID.IndexOf(',') > 1)
                {
                    var profileIDs = profileID.Split(',');
                    profileID = profileIDs[0];
                }
                var _ContractServices = new Hre_ContractServices();
                var entity = _ContractServices.GetApproveEvaContract(profileID, userSubmit, UserID, UserLogin, Type);
                return Json(entity);
            }
            var res = new List<Hre_ProfileMultiEntity>();
            return Json(res);
        }

        //Nguyen.Le - 23/11/2017 - 0090180
        public string UpdateFileAttach()
        {
            var contractServices = new Hre_ContractServices();
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var message = string.Empty;
            var lstcontractTemplate = contractServices.GetAllContractTemplate();
            foreach (var temp in lstcontractTemplate)
            {
                if (temp.FileAttachment != null)
                {
                    temp.FileAttachment = null;
                    var newTemp = temp.CopyData<Cat_ContractTemplateModel>();
                    var model = service.UpdateOrCreate<Cat_ContractTemplateEntity, Cat_ContractTemplateModel>(newTemp);
                    message = model.ActionStatus;
                }
            }
            return message;
        }

        //Nguyen.Le - 29/11/2017 - 0090507
        public ActionResult GetContractApprovedGrade()
        {
            var contractService = new Hre_ContractServices();

            var key = ApproveType.E_CONTRACTAPPROVE.ToString();
            string status = string.Empty;
            List<object> lstParam = new List<object>();
            lstParam.Add(null);
            lstParam.Add(key);
            var service = new ActionService(UserLogin);
            var get = service.GetData<Sys_UserInfoEntity>(lstParam, ConstantSql.hrm_sys_sp_get_userApproved_multi, ref status);

            var appgrade = contractService.GetContractApprovedGrade(get);
            return Json(appgrade);
        }

        //Nguyen.Le - 29/11/2017 - 0090507
        public ActionResult GetContractEvaApproved()
        {
            var contractService = new Hre_ContractServices();

            var key = ApproveType.E_CONTRACTEVALUATION.ToString();
            string status = string.Empty;
            List<object> lstParam = new List<object>();
            lstParam.Add(null);
            lstParam.Add(key);
            var service = new ActionService(UserLogin);
            var get = service.GetData<Sys_UserInfoEntity>(lstParam, ConstantSql.hrm_sys_sp_get_userApproved_multi, ref status);
            var lstUser = contractService.GetUserApprovedContractEva(get);

            return Json(lstUser);
        }

        //Nguyen.Le - 29/11/2017 - 0090507
        public ActionResult GetBasicSalaryForAppendixByProfileID(string ProfileID, DateTime DateStart)
        {
            string status = string.Empty;
            Guid profileID = Guid.Empty;
            string message = string.Empty;
            if (string.IsNullOrEmpty(ProfileID))
            {
                message = "Error";
                return Json(message);
            }
            profileID = Common.ConvertToGuid(ProfileID);
            var listID = new List<Guid>();
            listID.Add(profileID);
            var _BasicSalaryServices = new Sal_BasicSalaryServices();
            var basicSalaryByProfile = _BasicSalaryServices.GetBasicSalaryBylstProIDs(listID).Where(s => s.DateOfEffect <= DateStart).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
            if (basicSalaryByProfile == null)
            {
                message = "NoBasicSalary";
                return Json(message);
            }
            return Json(basicSalaryByProfile, JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 01/12/2017 0090425 Báo cáo công việc nhân viên nghỉ việc
        public ActionResult GetReportProfileQuitWorkList([DataSourceRequest] DataSourceRequest request, Hre_ReportProfileQuitWorkListSearchModel model)
        {
            var reportservices = new Hre_ReportServices();
            var isDataTable = true;
            var lstWorkList = new List<Cat_WorkList>();
            var actionService = new ActionService(UserLogin, LanguageCode);
            object obj = new Hre_ProfileWorkListModel();
            string status = string.Empty;
            var lstHre_ProfileWorkListEntity = new List<Hre_ProfileWorkListEntity>();
            if (!model.IsCreateTemplate)
            {
                var listModel = new List<object>();
                listModel.AddRange(new object[15]);
                listModel[0] = model.ProfileName;
                listModel[1] = model.CodeEmp;
                listModel[2] = model.OrganizationStructureID;
                listModel[3] = model.PositionID;
                listModel[4] = model.JobTitleID;
                listModel[5] = model.DateHireFrom;
                listModel[6] = model.DateHireTo;
                listModel[7] = model.DateStopFrom;
                listModel[8] = model.DateStopTo;
                listModel[13] = 1;
                listModel[14] = int.MaxValue - 1;
                lstHre_ProfileWorkListEntity = actionService.GetData<Hre_ProfileWorkListEntity>(listModel, ConstantSql.hrm_hr_sp_get_RptProfileQuitWorkList, ref status);
            }
            var result = reportservices.GetReportProfileQuitWorkList(lstHre_ProfileWorkListEntity, model.IsCreateTemplate);
            if (model.IsCreateTemplateForDynamicGrid)
            {
                obj = result;
                isDataTable = true;
            }
            if (model != null && model.IsCreateTemplate)
            {
                var path = Common.GetPath("Templates");
                ExportService exportService = new ExportService();
                ConfigExport cfgExport = new ConfigExport()
                {
                    Object = obj,
                    FileName = "Hre_ProfileWorkList",
                    OutPutPath = path,
                    DownloadPath = Hrm_Main_Web + "Templates",
                    IsDataTable = isDataTable
                };
                var str = exportService.CreateTemplate(cfgExport);
                return Json(str);
            }
            if (model.ExportId != Guid.Empty)
            {
                string[] valueField = null;
                if (model.ValueFields != null)
                {
                    valueField = model.ValueFields.Split(',');
                }
                var fullPath = ExportService.Export(model.ExportId, result, null, UserGuidID, ExportFileType.Excel);
                return Json(fullPath);
            }

            return new JsonResult() { Data = result.ToDataSourceResult(request), MaxJsonLength = Int32.MaxValue, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }
        //Quyen.Quach 05/12/2017 0090702
        public ActionResult IsLoadInsurancebySalaryContract()
        {
            var Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool _IsLoadInsurancebySalaryContract = Sys_Services.GetConfigValue<bool>(AppConfig.HRM_HRE_ISLOADINSURANCEBYSALARYCONTRACT);
            if (_IsLoadInsurancebySalaryContract == true)
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        #region Lưới DS Cấp bậc của tiêu chí trong màn hình DS bộ tiêu chí đánh giá hđ
        [HttpPost]
        //Quyen.Quach 08/12/2017 0090883
        public ActionResult GetLstKPILevelByPerformanceTemplateID([DataSourceRequest] DataSourceRequest request, Guid? PerformanceTemplateID)
        {
            if (PerformanceTemplateID != null && PerformanceTemplateID != Guid.Empty)
            {
                string status = string.Empty;
                var _KPIServices = new Hre_KPIServices();
                var result = _KPIServices.GetLstLevelByPerformanceTemplateID(PerformanceTemplateID.Value);
                return Json(result.ToDataSourceResult(request));
            }
            else
            {
                return Json(null);
            }
        }

        public ActionResult CreateInCellKPIPerformanceTemplateLevel([Bind(Prefix = "models")] List<Hre_LevelModel> model, Guid? PerformanceTemplateID)
        {
            if (PerformanceTemplateID == null || PerformanceTemplateID == Guid.Empty)
            {
                return Json(ConstantDisplay.HRM_Hre_Performance_PleaseSaveFirst.TranslateString());
            }
            var _KPIServices = new Hre_KPIServices();
            if (model != null)
            {
                foreach (var level in model)
                {
                    string message = string.Empty;
                    var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_LevelModel>(LanguageCode, level, "Hre_Level", ref message);
                    if (!checkValidate)
                    {
                        level.ActionStatus = message;
                        return Json(level);
                    }
                    if (level.MaximumRating != null && level.MinimumRating != null)
                    {
                        var duplicateLevel = _KPIServices.CheckDuplicateLevelPerTemplate(level.ID, PerformanceTemplateID.Value, level.LevelName, level.MaximumRating.Value, level.MinimumRating.Value);
                        if (duplicateLevel != null)
                        {
                            level.ActionStatus = ConstantDisplay.HRM_HR_LevelExit.TranslateString();
                            return Json(level);
                        }
                    }
                    var kpiService = new Hre_KPIServices();
                    if (level.ID == Guid.Empty)
                    {
                        level.ID = Guid.NewGuid();
                        level.PerformanceTemplateID = PerformanceTemplateID.Value;
                        string messref = _KPIServices.Add(level.CopyData<Hre_LevelEntity>());
                    }
                    else
                    {
                        level.PerformanceTemplateID = PerformanceTemplateID.Value;
                        string messref = _KPIServices.Edit(level.CopyData<Hre_LevelEntity>());
                    }
                }
            }
            return Json("");
        }
        #endregion

        #region Đánh giá bộ tiêu chí ở các hợp đồng
        //Quyen.Quach 12/12/2017 0089701
        public ActionResult GetKPIListbyKPIGroupID(string text, string strKPIGroupID)
        {
            string status = string.Empty;
            var baseService = new BaseService();
            if (strKPIGroupID == "")
            {
                strKPIGroupID = null;
            }
            var result = baseService.GetData<Hre_KPIModel>(strKPIGroupID, ConstantSql.hrm_hre_sp_get_KPIListbyKPIGroupID, UserLogin, ref status);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveHreKPIDetailAddMore([Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel PerformanceModel, [Bind(Prefix = "listKPI")] List<Hre_PerformanceDetailModel> listKPI)
        {
            //Quyen.Quach 12/12/2017 Tách hàm xài cho Hre_Performance không xài chung được với Hre_Contract
            string message = string.Empty;
            if (PerformanceModel != null && PerformanceModel.ContractID != null && listKPI != null)
            {

                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Hre_PerformanceModel>(LanguageCode, PerformanceModel, "Hre_Performance_TabContract", ref message);
                if (!checkValidate)
                {
                    return Json(message, JsonRequestBehavior.AllowGet);
                }

                var profileService = new Hre_ProfileServices();
                message = profileService.SavePerformanceTemplate(Guid.Parse(PerformanceModel.ContractID),
                    PerformanceModel.CopyData<Hre_PerformanceEntity>(),
                    listKPI.Translate<Hre_PerformanceDetailEntity>().ToList());
            }

            return Json(message, JsonRequestBehavior.AllowGet);
        }
        public ActionResult SaveHreKPIDetailForAddMore([Bind(Prefix = "PerformanceModel")] Hre_PerformanceModel model)
        {
            string message = string.Empty;
            var profileservices = new Hre_ProfileServices();
            if (!string.IsNullOrEmpty(model.KPIIDs) && model.ID != null && model.ID != Guid.Empty)
            {
                var lstPerformanceForDetail = new List<Hre_PerformanceDetailEntity>();
                var lstKPIEntity = new List<Hre_KPIEntity>();
                var lstKPIDs = model.KPIIDs.Split(',').Select(s => Guid.Parse(s)).ToList();
                var lstcheckDuplicate = profileservices.RemovelstDuplicateKPI(model.ID, lstKPIDs);
                lstKPIEntity = profileservices.GetListKpi(lstKPIDs);
                if (lstKPIEntity != null)
                {
                    foreach (var item in lstKPIEntity)
                    {
                        var performance = lstcheckDuplicate.Where(s => s.KPIID == item.ID).FirstOrDefault();
                        var PerformanceForDetail = new Hre_PerformanceDetailEntity();
                        if (performance != null)
                        {
                            PerformanceForDetail.ID = performance.ID;
                        }
                        else
                        {
                            PerformanceForDetail.ID = Guid.Empty;
                        }
                        PerformanceForDetail.Formula = item.Formula;
                        PerformanceForDetail.OrderNumber = item.OrderNumber;
                        PerformanceForDetail.KPIID = item.ID;
                        PerformanceForDetail.KPIName = item.KPIName;
                        PerformanceForDetail.DescriptionKPIFix = item.DescriptionKPIFix;
                        PerformanceForDetail.KPIRate = item.KPIRate;
                        PerformanceForDetail.MaximumRating = item.MaximumRating;
                        PerformanceForDetail.MinimumRating = item.MinimumRating;
                        lstPerformanceForDetail.Add(PerformanceForDetail);
                    }
                }
                if (model.ContractID != null && lstPerformanceForDetail != null)
                {
                    var lstEvaluator = profileservices.GetUserApprovedGroupOrderEva(model.ID);
                    if (lstEvaluator != null)
                    {
                        lstEvaluator = lstEvaluator.OrderBy(s => s.OrderEva).ToList();
                        model.strUserApprovedIDs = string.Join(",", lstEvaluator.Select(d => d.EvaluatorID));
                    }
                    message = profileservices.SavePerformanceTemplate(Guid.Parse(model.ContractID), model.CopyData<Hre_PerformanceEntity>(), lstPerformanceForDetail.Translate<Hre_PerformanceDetailEntity>().ToList());
                    model.ActionStatus = message;
                    return Json(model, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                model.ActionStatus = ConstantDisplay.HRM_PleaseInputKPI.TranslateString();
                return Json(model, JsonRequestBehavior.AllowGet);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }
        #endregion

        //Quyen.Quach 28/12/2017 0091829: Thêm chức năng giữ lương tại màn hình DS NV chưa hoàn thành công việc	
        public ActionResult HoldSalary(Sal_HoldSalaryModel model)
        {
            if (!string.IsNullOrEmpty(model.ProfileIDs))
            {
                string status = string.Empty;
                string profileName = string.Empty;
                #region Validate
                string message = string.Empty;
                var _ser = new Hre_ProfileServices();
                var _ActionService = new ActionService(UserLogin, UserLogin);
                var lstProfileIds = model.ProfileIDs.Split(',').Select(s => Guid.Parse(s)).ToList();
                var checkValidate = HRM.Business.Main.Domain.ValidatorService.OnValidateData<Sal_HoldSalaryModel>(LanguageCode, model, "Sal_HoldSalaryInfo", ref message);
                if (!checkValidate)
                {
                    model.ActionStatus = message;
                    return Json(model);
                }
                #endregion
                var SysLockServices = new Sys_LockObjectServices();
                List<object> listObj = new List<object>();
                listObj.Add(model.ProfileIDs);
                listObj.Add(model.MonthSalary);
                var lstEntity = _ActionService.GetData<Sal_PayrollTableEntity>(listObj, ConstantSql.hr_sp_get_Sal_PayrollTablebyID, ref status);
                if (lstEntity != null && lstEntity.Count > 0)
                {
                    foreach (var item in lstEntity)
                    {
                        //Quyen.Quach 04/01/2018 0091967
                        if (item.MonthYear >= model.MonthSalary && item.IsPaid == true)
                        {
                            profileName = _ser.GetProfileNameByID(item.ProfileID) + ',';
                            continue;
                        }
                    }
                    if (!string.IsNullOrEmpty(profileName))
                    {
                        model.ActionStatus = profileName + ConstantDisplay.HRM_HR_Profile_SalaryHold_LockObject.TranslateString();
                        return Json(model);
                    }
                }
                var lstSal_HoldSalary = new List<Sal_HoldSalaryEntity>();
                var lstPayrollTable = new List<Sal_PayrollTableEntity>();
                var lstSalCheck = _ser.CheckExistHoldSalary(lstProfileIds, model.MonthSalary);
                foreach (var item in lstProfileIds)
                {
                    var HoldSalaryEntity = new Sal_HoldSalaryEntity();
                    var salCheck = lstSalCheck.Where(s => s.ProfileID == item).FirstOrDefault();
                    HoldSalaryEntity.ProfileID = item;
                    HoldSalaryEntity.MonthSalary = model.MonthSalary;
                    HoldSalaryEntity.MonthEndSalary = model.MonthEndSalary;
                    HoldSalaryEntity.Notes = model.Notes;
                    HoldSalaryEntity.StatusHold = EnumDropDown.Status.E_APPROVED.ToString();
                    if (salCheck != null)
                    {
                        HoldSalaryEntity.ID = salCheck.ID;
                        HoldSalaryEntity.ActionStatus = _ser.Edit(HoldSalaryEntity);
                    }
                    else
                    {
                        HoldSalaryEntity.ID = Guid.NewGuid();
                        HoldSalaryEntity.ActionStatus = _ser.Add(HoldSalaryEntity);
                    }
                    var payrolltableCheck = lstEntity.Where(s => s.ProfileID == salCheck.ProfileID && s.MonthYear >= model.MonthSalary && s.IsPaid != true).FirstOrDefault();
                    if (payrolltableCheck != null)
                    {
                        payrolltableCheck.IsHold = true;
                        string test = _ser.Edit(payrolltableCheck);
                    }
                }
                model.ActionStatus = "Success";
                return Json(model);
            }
            return null;
        }
        //Quyen.Quach 08/01/2018 0091981 Get control cho Hre_ProfileWorkList
        public JsonResult GetMultiWorkList(string text, Guid? ProfileID)
        {
            Hre_ProfileServices services = new Hre_ProfileServices();
            var lstResult = services.GetMultiWorkList(ProfileID);
            if (!string.IsNullOrEmpty(text))
            {
                lstResult = lstResult.Where(s => s.WorkListName.Contains(text)).ToList();
            }
            return Json(lstResult, JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 08/01/2018 0091981 Nút thêm mới
        public JsonResult InsertprofileWorkList(Guid? ProfileID, Guid? WorkListID)
        {
            Hre_ProfileServices services = new Hre_ProfileServices();
            string message = string.Empty;
            if (ProfileID != Guid.Empty && WorkListID != Guid.Empty && WorkListID != null)
            {
                message = services.InsertprofileWorkList(ProfileID, WorkListID, null);
            }
            return Json(message, JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 09/01/2018 0091952 Lấy mã loại phòng ban
        public JsonResult GetOrgTypeCodebyOrgID(Guid? OrgTypeID)
        {
            Hre_ProfileServices services = new Hre_ProfileServices();
            if (OrgTypeID != null && OrgTypeID != Guid.Empty)
            {
                var lstResult = services.GetOrgTypeCodebyOrgID(OrgTypeID);
                return Json(lstResult, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        [HttpPost]
        //Quyen.Quach 11/01/2018 0092156
        public ActionResult GetCompanyIDbyOrderNumber(string orgStructureID)
        {
            var result = new Cat_CompanyEntity();
            if (!string.IsNullOrEmpty(orgStructureID))
            {
                List<int> lstOrderNumber = orgStructureID.Split(',').Select(x => int.Parse(x)).ToList();
                var profileServices = new Hre_ProfileServices();
                result = profileServices.GetCompanyIDbyOrderNumber(lstOrderNumber);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        #region  //Quyen.Quach 15/01/2018 0092285 Xem kết quả của những cái do mình đánh giá
        public ActionResult GetPerformanceApprovedEvaList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceEvaActiveSearchModel model)
        {
            string status = string.Empty;
            Guid UserEvaluator = Guid.Empty;
            if (!string.IsNullOrEmpty(UserID))
            {
                UserEvaluator = Guid.Parse(UserID);
            }
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var userEntity = service.GetByIdUseStore<Sys_UserInfoEntity>(UserEvaluator, ConstantSql.hrm_sys_sp_get_UserbyId, ref status);
            if (userEntity != null)
            {
                model.EvaluartorID = userEntity.ProfileID;
            }
            return GetListDataAndReturn<Hre_PerformanceEvaActiveModel, Hre_PerformanceEvaActiveEntity, Hre_PerformanceEvaActiveSearchModel>(request, model, ConstantSql.hrm_hre_sp_get_ApprovedPerformanceEva);
        }
        //Quyen.Quach 15/01/2018 0092285
        public ActionResult ExportPerformanceEvaActiveSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_PerformanceEvaActiveEntity, Hre_PerformanceEvaActiveModel>(selectedIds, valueFields, ConstantSql.hrm_hre_sp_get_ApprovedPerformanceEvaByIds);
        }
        //Quyen.Quach 15/01/2018 0092285
        public object GetlstApprovedPerformanceEvaDetail([DataSourceRequest] DataSourceRequest request, Guid? performanceEvaID, Guid PerformanceID)
        {
            if (performanceEvaID != null && performanceEvaID != Guid.Empty)
            {
                var profileServices = new Hre_ProfileServices();
                var objByValueByEvaluator = new List<ObjValueByHreEvaEvaluator>();
                var lstResult = profileServices.GetlstPerformanceEvaDetail(performanceEvaID.Value);
                var lstevalatorByPerformanceID = profileServices.GetEvaluatorByPerformanceID(PerformanceID);
                var lstUserEvalator = lstevalatorByPerformanceID.Select(x => x.EvaluatorName).Distinct().ToList();
                if (lstevalatorByPerformanceID != null)
                {
                    objByValueByEvaluator = profileServices.lstValueKPIByPerformanceID(PerformanceID, lstevalatorByPerformanceID.OrderBy(x => x.OrderEva).ToList());
                }

                if (lstResult != null)
                {
                    lstResult = lstResult.OrderBy(m => m.Stt).ToList();
                    foreach (var item in lstResult)
                    {
                        item.ObjValueByEvaluator = objByValueByEvaluator.Where(x => x.KPIID == item.KPIID).ToList();
                        item.UserEvaluator = lstUserEvalator;
                    }
                    var KPIGroupNames = lstResult.Select(m => m.KPIGroupName).Distinct().ToList();
                    foreach (var KPIGroupName in KPIGroupNames)
                    {
                        var forObjects = lstResult.Where(m => m.KPIGroupName == KPIGroupName).OrderBy(m => m.Stt).ToList();
                        int stt = 1;
                        foreach (var item in forObjects)
                        {
                            item.Stt = stt++;
                        }
                    }
                }
                return Json(lstResult, JsonRequestBehavior.AllowGet);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 15/01/2018 0092285
        public ActionResult GetPerformanceHreEvaResult([DataSourceRequest] DataSourceRequest request, string PerformanceID)
        {
            var service = new ActionService(UserLogin);
            var profileServices = new Hre_ProfileServices();
            var objByValueByEvaluator = new List<ObjValueByHreEvaEvaluator>();
            var lstObj = new List<object>();
            lstObj.Add(PerformanceID);
            lstObj.Add(1);
            lstObj.Add(50);
            lstObj.Add(UserLogin);
            DataTable tb = new DataTable();
            var status = string.Empty;
            var listEntity = new List<Hre_PerformanceEvaEntity>();
            var lstObjEvaluator = new List<ObjHreEvaEvaluator>();
            if (PerformanceID != null)
            {
                listEntity = service.GetData<Hre_PerformanceEvaEntity>(lstObj, ConstantSql.hrm_hre_sp_get_PerformanceEvaResult, ref status);
                var dtResult = new DataTable();
                if (listEntity != null && listEntity.Count > 0)
                {
                    var lstevalatorByListKPI = profileServices.GetEvaluatorByPerformanceID(Guid.Parse(PerformanceID));
                    Dictionary<string, string> dirType = new Dictionary<string, string>();
                    dirType.Add("ResultEvaNote", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_ResultEvaNote.TranslateString());
                    dirType.Add("DateEffectiveSal", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_DateEffectiveSal.TranslateString());
                    dirType.Add("NewSalary", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_NewSalary.TranslateString());
                    dirType.Add("DateEffectivePos", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_DateEffectivePos.TranslateString());
                    dirType.Add("ResultEvaView", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_ResultEva.TranslateString());
                    dirType.Add("AttachFile", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_AttachFile.TranslateString());
                    dirType.Add("ResultNote", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_ResultNote.TranslateString());
                    dirType.Add("Weaknesses", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_Weaknesses.TranslateString());
                    dirType.Add("Strengths", ConstantDisplay.HRM_HR_ApprovedPerformanceEva_Strengths.TranslateString());
                    string columnGeneralPerformance = ConstantDisplay.HRM_Evaluation_GeneralPerformance;
                    tb.Columns.Add(columnGeneralPerformance);
                    foreach (var objdirType in dirType)
                    {
                        var objTypeAll = objdirType;
                        DataRow rowNew = tb.NewRow();
                        //add gia tri cho tung loai
                        rowNew[columnGeneralPerformance] = objTypeAll.Value;

                        //add ket qua cua tung nguoi cho tung loai
                        foreach (var objevalatorByListKPI in lstevalatorByListKPI)
                        {
                            if (!tb.Columns.Contains("User_" + objevalatorByListKPI.OrderEva.ToString()))
                            {
                                lstObjEvaluator.Add(new ObjHreEvaEvaluator { Evaluator = objevalatorByListKPI.EvaluatorName });
                                tb.Columns.Add("User_" + objevalatorByListKPI.OrderEva.ToString());
                            }
                            //lay du lieu danh gia cua tung nguoi
                            var objPerformanceEvaByEvalator = listEntity.Where(x => x.EvaluatorID == objevalatorByListKPI.EvaluatorID).FirstOrDefault();
                            if (objPerformanceEvaByEvalator != null && objPerformanceEvaByEvalator.GetType().GetProperty(objTypeAll.Key) != null)
                            {
                                if (!string.IsNullOrEmpty(objPerformanceEvaByEvalator.AttachFile) && objPerformanceEvaByEvalator.AttachFile.IndexOf("|isfile") == -1)
                                {
                                    objPerformanceEvaByEvalator.AttachFile = objPerformanceEvaByEvalator.AttachFile + "|isfile";
                                }
                                rowNew["User_" + objevalatorByListKPI.OrderEva.ToString()] = objPerformanceEvaByEvalator.GetType().GetProperty(objTypeAll.Key).GetValue(objPerformanceEvaByEvalator, null);
                            }
                        }
                        tb.Rows.Add(rowNew);
                    }

                }
            }
            request.Page = 1;
            request.PageSize = int.MaxValue - 1;
            return Json(tb.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 15/01/2018 0092285
        public ActionResult GetLstevalatorForHreEvaResult([DataSourceRequest] DataSourceRequest request, string PerformanceID)
        {
            var service = new ActionService(UserLogin);
            var profileServices = new Hre_ProfileServices();
            var objByValueByEvaluator = new List<ObjValueByHreEvaEvaluator>();
            var lstObj = new List<object>();
            lstObj.Add(PerformanceID);
            lstObj.Add(1);
            lstObj.Add(50);
            lstObj.Add(UserLogin);
            DataTable tb = new DataTable();
            var status = string.Empty;
            var listEntity = new List<Hre_PerformanceEvaEntity>();
            var lstObjEvaluator = new List<ObjHreEvaEvaluator>();
            if (PerformanceID != null)
            {
                listEntity = service.GetData<Hre_PerformanceEvaEntity>(lstObj, ConstantSql.hrm_hre_sp_get_PerformanceEvaResult, ref status);
                var dtResult = new DataTable();
                if (listEntity != null && listEntity.Count > 0)
                {
                    var lstevalatorByListKPI = profileServices.GetEvaluatorByPerformanceID(Guid.Parse(PerformanceID));
                    foreach (var objevalatorByListKPI in lstevalatorByListKPI)
                    {
                        lstObjEvaluator.Add(new ObjHreEvaEvaluator { Evaluator = objevalatorByListKPI.EvaluatorName, OrderEva = objevalatorByListKPI.OrderEva });
                    }
                }
            }
            request.Page = 1;
            request.PageSize = int.MaxValue - 1;
            return Json(lstObjEvaluator.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region  //Quyen.Quach 16/01/2018 0092284: Thêm MH DS HĐ của bạn đã được đánh giá Xem kết quả những bảng đánh giá HĐ của mình
        public ActionResult GetContractPerformanceEvaList([DataSourceRequest] DataSourceRequest request, Hre_PerformanceEvaActiveSearchModel model)
        {
            string status = string.Empty;
            Guid UserEvaluator = Guid.Empty;
            if (!string.IsNullOrEmpty(UserID))
            {
                UserEvaluator = Guid.Parse(UserID);
            }
            ActionService service = new ActionService(UserLogin, LanguageCode);
            var userEntity = service.GetByIdUseStore<Sys_UserInfoEntity>(UserEvaluator, ConstantSql.hrm_sys_sp_get_UserbyId, ref status);
            if (userEntity != null)
            {
                model.EvaluartorID = userEntity.ProfileID;
            }
            return GetListDataAndReturn<Hre_PerformanceEvaActiveModel, Hre_PerformanceEvaActiveEntity, Hre_PerformanceEvaActiveSearchModel>(request, model, ConstantSql.hrm_hre_sp_get_ContractPerformanceEva);
        }
        #endregion

        #region Quyen.Quach 16/01/2018 0092230, 0092444 :Thêm button “Gửi mail cảnh báo” và button “Chi tiết” màn hình DS NV chưa hoàn thiện công việc và DS NV nghỉ việc chưa hoàn thiện công việc
        public ActionResult GetProfileWorkListLateByProfile([DataSourceRequest] DataSourceRequest request, Guid? profileID, string Type)
        {
            if (profileID != null)
            {
                string status = string.Empty;
                var actionService = new ActionService(UserLogin, LanguageCode);
                var objs = new List<object>();
                objs.Add(profileID);
                objs.Add(1);
                objs.Add(int.MaxValue - 1);
                var result = actionService.GetData<Hre_ProfileWorkListEntity>(objs, ConstantSql.hr_sp_get_lstprofilewrklstbyProfileID, ref status);

                if (result == null)
                {
                    result = new List<Hre_ProfileWorkListEntity>();
                }
                else
                {
                    if (!string.IsNullOrEmpty(Type))
                        result = result.Where(s => s.Type == Type && s.Status == "E_LATE").ToList();
                }
                if (request != null && request.Sorts.Count > 0)
                {
                    var sortWorkList = request.Sorts.FirstOrDefault(m => m.Member == Hre_ProfileWorkListModel.FieldNames.WorkListID);
                    if (sortWorkList.HasValue())
                    {
                        sortWorkList.Member = Hre_ProfileWorkListModel.FieldNames.WorkListName;
                    }
                    var sortProfile = request.Sorts.FirstOrDefault(m => m.Member == Hre_ProfileWorkListModel.FieldNames.Profile2ID);
                    if (sortProfile.HasValue())
                    {
                        sortProfile.Member = Hre_ProfileWorkListModel.FieldNames.Profile2Name;
                    }
                }
                var dataSourceResult = result.ToDataSourceResult(request);
                var serializer = new JavaScriptSerializer();
                var returnresult = new ContentResult();
                serializer.MaxJsonLength = Int32.MaxValue;
                returnresult.Content = serializer.Serialize(dataSourceResult);
                returnresult.ContentType = "application/json";
                return returnresult;
            }
            return null;
        }
        //Quyen.Quach 16/01/2018 Gửi mail cảnh báo công việc trễ hạn
        public ActionResult SendMailLateWorkList([DataSourceRequest] DataSourceRequest request, List<Guid> selectedIds, string ProfileIDs, string Type, string url)
        {
            var service = new Hre_ProfileServices();
            bool result = false;
            string Template = string.Empty;
            var lstProfileID = new List<Guid>();
            if (!string.IsNullOrEmpty(ProfileIDs))
            {
                var lstProfileIds = ProfileIDs.Split(',').Select(x => Guid.Parse(x)).ToList();
                lstProfileID.AddRange(lstProfileIds);
                if (!string.IsNullOrEmpty(Type))
                {
                    if (Type == EnumDropDown.WorkListType.E_NEW.ToString())
                    {
                        Template = EnumDropDown.EmailType.E_REMIND_ONBOARDING.ToString();
                    }
                    else
                    {
                        Template = EnumDropDown.EmailType.E_REMIND_OFFBOARDING.ToString();
                    }
                    result = service.SendMailLateWorkList(selectedIds, lstProfileID, Template, LanguageCode, Type, url);
                }
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        //Quyen.Quach 16/01/2018 Xuất excel đã chọn NV chưa hoàn thành CV
        public ActionResult ExportNewEmpNotFinishWorkListSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileWorkListEntity, Hre_ProfileWorkListModel>(selectedIds, valueFields, ConstantSql.hrm_hre_sp_get_ProfileWorkListIds);
        }
        //Quyen.Quach 16/01/2018 Xuất excel tất cả NV chưa hoàn thành CV
        public ActionResult ExportNewEmpNotFinishWorkListAll([DataSourceRequest] DataSourceRequest request, Hre_NewEmpNotFinishWorkListSearchModel model)
        {
            string status = string.Empty;
            var service = new BaseService();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = int.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var listEntity = service.GetData<Hre_ProfileWorkListEntity>(lstModel, ConstantSql.hrm_hr_sp_get_NewEmpNotFinish, UserLogin, ref status);
            if (listEntity != null)
            {
                listEntity = listEntity.DistinctBy(s => s.ProfileID).ToList();
            }
            status = ExportService.Export(listEntity, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
            return Json(status);
        }

        //Quyen.Quach 16/01/2018 Xuất excel tất cả NV nghỉ việc chưa hoàn thành CV
        public ActionResult ExportProfileQuitNotFinishWorkListAll([DataSourceRequest] DataSourceRequest request, Hre_NewEmpNotFinishWorkListSearchModel model)
        {
            string status = string.Empty;
            var service = new BaseService();
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = int.MaxValue - 1,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            var listEntity = service.GetData<Hre_ProfileWorkListEntity>(lstModel, ConstantSql.hrm_hr_sp_get_QuitEmpNotFinish, UserLogin, ref status);
            if (listEntity != null)
            {
                listEntity = listEntity.DistinctBy(s => s.ProfileID).ToList();
            }
            status = ExportService.Export(listEntity, model.GetPropertyValue("ValueFields").TryGetValue<string>().Split(','));
            return Json(status);
        }
        #endregion

        //Quyen.Quach 19/01/2018 0092270
        public ActionResult GetLstBasicSalaryByProfileIDAndDateEffect([DataSourceRequest] DataSourceRequest request, string profileIDs, DateTime? DateEffective = null)
        {
            string status = string.Empty;
            string message = string.Empty;
            if (string.IsNullOrEmpty(profileIDs))
            {
                message = "Error";
                return Json(message);
            }
            else
            {
                var lstProfileIds = profileIDs.Split(',').Select(s => Guid.Parse(s)).ToList();
                var profileID = lstProfileIds != null ? lstProfileIds[0] : Guid.Empty;
                DateEffective = DateEffective != null ? DateEffective : DateTime.Now;
                var _BasicSalaryServices = new Sal_BasicSalaryServices();
                var result = _BasicSalaryServices.GetLstBasicSalaryByProfileID(profileID);
                var BasicSalaryByProfile = new Sal_BasicSalaryEntity();
                BasicSalaryByProfile = result.Where(s => s.DateOfEffect < DateEffective &&
                s.Status == WorkHistoryStatus.E_APPROVED.ToString()).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                if (BasicSalaryByProfile == null)
                {
                    message = "NoBasicSalary";
                    return Json(message);
                }
                else
                {
                    if (!string.IsNullOrEmpty(BasicSalaryByProfile.SalaryClassName))
                    {
                        BasicSalaryByProfile.SalaryClassName = BasicSalaryByProfile.SalaryClassName + " - " + BasicSalaryByProfile.SalaryClassCode;
                    }
                    return Json(BasicSalaryByProfile, JsonRequestBehavior.AllowGet);
                }
            }
        }

        #region //Quyen.Quach 26/01/2018 0092755 Ds công việc của NV
        //DS CÔng việc chưa làm khi hội nhập
        public ActionResult GetProfileWorkListOnBoardingList([DataSourceRequest] DataSourceRequest request, Hre_ProfileWorkListOnBoardingListSearchModel model)
        {
            if ((bool)model.IsExport)
            {
                return ExportAllAndReturn<Hre_ProfileWorkListModel, Hre_ProfileWorkListEntity, Hre_ProfileWorkListOnBoardingListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileWorkListOnBoarding);
            }
            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileWorkListOnBoarding, UserLogin, ref status);

            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;
        }
        public ActionResult ExportGetProfileWorkListOnBoardingSelected(string selectedIds, string valueFields)
        {
            return ExportSelectedAndReturn<Hre_ProfileWorkListEntity, Hre_ProfileWorkListModel>(selectedIds, valueFields, ConstantSql.hrm_hr_sp_get_ProfileWorkListOnBoardingbyIds);
        }
        //DS CÔng việc chưa làm khi  nghỉ việc
        public ActionResult GetProfileWorkListOffBoardingList([DataSourceRequest] DataSourceRequest request, Hre_ProfileWorkListOffBoardingListSearchModel model)
        {
            if ((bool)model.IsExport)
            {
                return ExportAllAndReturn<Hre_ProfileWorkListModel, Hre_ProfileWorkListEntity, Hre_ProfileWorkListOffBoardingListSearchModel>(request, model, ConstantSql.hrm_hr_sp_get_ProfileWorkListOffBoarding);
            }
            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ProfileWorkListOffBoarding, UserLogin, ref status);

            VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
            request.Page = 1;
            var dataSourceResult = dt.ToDataSourceResult(request);
            if (dt.Rows.Count > 0 && dt.Rows[0]["TotalRow"] != null)
            {
                dataSourceResult.Total = dt.Rows.Count <= 0 ? 0 : (int)dt.Rows[0]["TotalRow"];
            }
            var serializer = new JavaScriptSerializer();
            var result = new ContentResult();
            serializer.MaxJsonLength = Int32.MaxValue; // Whatever max length you want here
            result.Content = serializer.Serialize(dataSourceResult);
            result.ContentType = "application/json";
            return result;
        }
        #endregion

        //Quyen.Quach 29/01/2018 0092781
        public ActionResult GetSourceAdsByJobVacancyID([DataSourceRequest] DataSourceRequest request, Guid? jobVacancyID)
        {
            if (jobVacancyID == null || jobVacancyID == Guid.Empty)
            {
                return null;
            }
            string status = string.Empty;
            var actionServices = new ActionService(UserLogin, LanguageCode);
            var result = actionServices.GetData<Rec_JobVacancySourceAdsEntity>(jobVacancyID, ConstantSql.hrm_rec_sp_get_SourceAdsByJobVacancyID, ref status);
            if (result == null)
            {
                return null;
            }
            return Json(result.ToDataSourceResult(request));
        }
        //Quyen.Quach 31/01/2018 0092910 Chuyển xuất excel về dataTable
        [HttpPost]
        public ActionResult ExportExcelContractListV2([DataSourceRequest] DataSourceRequest request, Hre_ContractListSearchModel model)
        {
            var _ContractExtendServices = new Hre_ContractExtendServices();
            var _ProfileServices = new Hre_ProfileServices();
            BaseService objBase = new BaseService();
            DataTable dt = new DataTable();
            var status = string.Empty;
            var messages = string.Empty;
            string Companylogo = string.Empty;

            ListQueryModel lstModel = new ListQueryModel
            {
                PageIndex = request.Page,
                PageSize = request.PageSize,
                Filters = ExtractFilterAttributes(request),
                Sorts = ExtractSortAttributes(request),
                UserLogin = UserLogin,
                AdvanceFilters = ExtractAdvanceFilterAttributes(model)
            };
            dt = objBase.GetDataTable(lstModel, ConstantSql.hrm_hr_sp_get_ContractList, UserLogin, ref status);
            if (dt.Rows.Count > 0)
            {
                dt.TableName = "Hre_ContractModel";
                var lstRegionIDs = dt.AsEnumerable()
                              .Where(s => s["RegionID"] != DBNull.Value).Select(s => s.Field<Guid>("RegionID")).Distinct().ToList();
                var listRegionDetail = _ProfileServices.GetLstRegionDetailByRegionIDs(lstRegionIDs);
                var lstContractIDs = dt.AsEnumerable()
                    .Where(s => s["ID"] != DBNull.Value)
                    .Select(s => s.Field<Guid>("ID"))
                    .ToList();
                var lstContractExtend = _ContractExtendServices.GetLstContractExtend4ExportContractByLstContractIDs(lstContractIDs);
                Companylogo = dt.AsEnumerable()
                .Where(s => s["CompanyLogo"] != DBNull.Value)
                .Select(s => s.Field<string>("CompanyLogo"))
                .FirstOrDefault();
                dt.Columns.Add("DateExtendFrom");
                dt.Columns.Add("DateExtendTo");
                dt.Columns.Add("MinSalary");
                dt.Columns.Add("MaxSalary");
                var HeaderInfo1 = new HeaderInfo() { Name = "Companylogo", Value = Companylogo };
                var headerInfo2 = new HeaderInfo() { Name = "DateToDay", Value = DateTime.Now.ToString("dd/MM/yyyy") };
                var lstHeaderInfo = new List<HeaderInfo>() { HeaderInfo1, headerInfo2 };
                if (model != null && model.IsCreateTemplate)
                {
                    var path = Common.GetPath("Templates");
                    var exportService = new ExportService();
                    var cfgExport = new ConfigExport()
                    {
                        Object = dt,
                        FileName = "Hre_ContractModel",
                        OutPutPath = path,
                        HeaderInfo = lstHeaderInfo,
                        DownloadPath = Hrm_Main_Web + "Templates",
                        IsDataTable = true,
                    };
                    var str = exportService.CreateTemplate(cfgExport);
                    return Json(str);
                }
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["ID"] != DBNull.Value && !string.IsNullOrEmpty(dr["ID"].ToString()))
                    {
                        var itemID = Guid.Parse(dr["ID"].ToString());
                        var contractExtend = lstContractExtend.Where(s => s.ContractID == itemID && s.TypeAppendix == EnumDropDown.TypeAppendix.E_EXTEND.ToString()).FirstOrDefault();
                        if (contractExtend != null)
                        {
                            if (contractExtend.DateStart != null)
                            {
                                dr["DateExtendFrom"] = contractExtend.DateStart;
                            }
                            if (contractExtend.DateEnd != null)
                            {
                                dr["DateExtendTo"] = contractExtend.DateEnd;
                            }
                        }
                        //Lương vùng đóng BH thấp nhất , cao nhất
                        if (dr["RegionID"] != DBNull.Value && !string.IsNullOrEmpty(dr["RegionID"].ToString()))
                        {
                            var itemRegionID = Guid.Parse(dr["RegionID"].ToString());
                            var regionDetail = listRegionDetail.Where(m => m.RegionID == itemRegionID).FirstOrDefault();
                            if (regionDetail.HasValue() && regionDetail.MinSalary.HasValue)
                            {
                                dr["MinSalary"] = regionDetail.MinSalary;
                            }
                            if (regionDetail.HasValue() && regionDetail.MaxSalary.HasValue)
                            {
                                dr["MaxSalary"] = regionDetail.MaxSalary;
                            }
                        }
                        if (dr["E_Salary"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Salary"].ToString()))
                        {
                            dr["Salary"] = dr["E_Salary"].ToString().DecryptValue();
                        }
                        if (dr["E_InsuranceAmount"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_InsuranceAmount"].ToString()))
                        {
                            dr["InsuranceAmount"] = dr["E_InsuranceAmount"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance"].ToString()))
                        {
                            dr["Allowance"] = dr["E_Allowance"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance1"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance1"].ToString()))
                        {
                            dr["Allowance1"] = dr["E_Allowance1"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance2"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance2"].ToString()))
                        {
                            dr["Allowance2"] = dr["E_Allowance2"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance3"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance3"].ToString()))
                        {
                            dr["Allowance3"] = dr["E_Allowance3"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance4"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance4"].ToString()))
                        {
                            dr["Allowance4"] = dr["E_Allowance4"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance5"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance5"].ToString()))
                        {
                            dr["Allowance5"] = dr["E_Allowance5"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance6"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance6"].ToString()))
                        {
                            dr["Allowance6"] = dr["E_Allowance6"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance7"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance7"].ToString()))
                        {
                            dr["Allowance7"] = dr["E_Allowance7"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance8"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance8"].ToString()))
                        {
                            dr["Allowance8"] = dr["E_Allowance8"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance9"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance9"].ToString()))
                        {
                            dr["Allowance9"] = dr["E_Allowance9"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance10"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance10"].ToString()))
                        {
                            dr["Allowance10"] = dr["E_Allowance10"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance11"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance11"].ToString()))
                        {
                            dr["Allowance11"] = dr["E_Allowance11"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance12"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance12"].ToString()))
                        {
                            dr["Allowance12"] = dr["E_Allowance12"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance13"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance13"].ToString()))
                        {
                            dr["Allowance13"] = dr["E_Allowance13"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance14"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance14"].ToString()))
                        {
                            dr["Allowance14"] = dr["E_Allowance14"].ToString().DecryptValue();
                        }
                        if (dr["E_Allowance15"] != DBNull.Value && !string.IsNullOrEmpty(dr["E_Allowance15"].ToString()))
                        {
                            dr["Allowance15"] = dr["E_Allowance15"].ToString().DecryptValue();
                        }
                    }
                }
                VnResource.Helper.Utility.LanguageHelper.LanguageCode = LanguageCode;
                var fullPath = ExportService.Export(model.ExportId, dt, lstHeaderInfo, UserGuidID, model.ExportType);
                return Json(fullPath);
            }
            return null;
        }
        public JsonResult GetMultiWorkListAll(string text)
        {
            return GetDataForControl<Cat_WorkListMultiModel, Cat_WorkListMultiEntity>(text, ConstantSql.Hre_sp_get_WorkList_multi_all);
        }
    }
}

